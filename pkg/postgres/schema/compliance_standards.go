// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"reflect"

	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/search/postgres/mapping"
)

var (
	// CreateTableComplianceStandardsStmt holds the create statement for table `compliance_standards`.
	CreateTableComplianceStandardsStmt = &postgres.CreateStmts{
		GormModel: (*ComplianceStandards)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// ComplianceStandardsSchema is the go schema for table `compliance_standards`.
	ComplianceStandardsSchema = func() *walker.Schema {
		schema := GetSchemaForTable("compliance_standards")
		if schema != nil {
			return schema
		}
		schema = walker.Walk(reflect.TypeOf((*storage.ComplianceStandard)(nil)), "compliance_standards")
		schema.SetOptionsMap(search.Walk(v1.SearchCategory_COMPLIANCE_STANDARD, "compliancestandard", (*storage.ComplianceStandard)(nil)))
		RegisterTable(schema, CreateTableComplianceStandardsStmt)
		mapping.RegisterCategoryToTable(v1.SearchCategory_COMPLIANCE_STANDARD, schema)
		return schema
	}()
)

const (
	ComplianceStandardsTableName = "compliance_standards"
)

// ComplianceStandards holds the Gorm model for Postgres table `compliance_standards`.
type ComplianceStandards struct {
	MetadataId   string `gorm:"column:metadata_id;type:varchar;primaryKey"`
	MetadataName string `gorm:"column:metadata_name;type:varchar"`
	Serialized   []byte `gorm:"column:serialized;type:bytea"`
}
