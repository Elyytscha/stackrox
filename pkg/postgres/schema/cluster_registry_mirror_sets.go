// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"fmt"
	"reflect"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
)

var (
	// CreateTableClusterRegistryMirrorSetsStmt holds the create statement for table `cluster_registry_mirror_sets`.
	CreateTableClusterRegistryMirrorSetsStmt = &postgres.CreateStmts{
		GormModel: (*ClusterRegistryMirrorSets)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// ClusterRegistryMirrorSetsSchema is the go schema for table `cluster_registry_mirror_sets`.
	ClusterRegistryMirrorSetsSchema = func() *walker.Schema {
		schema := GetSchemaForTable("cluster_registry_mirror_sets")
		if schema != nil {
			return schema
		}
		schema = walker.Walk(reflect.TypeOf((*storage.ClusterRegistryMirrorSet)(nil)), "cluster_registry_mirror_sets")
		referencedSchemas := map[string]*walker.Schema{
			"storage.Cluster": ClustersSchema,
		}

		schema.ResolveReferences(func(messageTypeName string) *walker.Schema {
			return referencedSchemas[fmt.Sprintf("storage.%s", messageTypeName)]
		})
		RegisterTable(schema, CreateTableClusterRegistryMirrorSetsStmt)
		return schema
	}()
)

const (
	// ClusterRegistryMirrorSetsTableName specifies the name of the table in postgres.
	ClusterRegistryMirrorSetsTableName = "cluster_registry_mirror_sets"
)

// ClusterRegistryMirrorSets holds the Gorm model for Postgres table `cluster_registry_mirror_sets`.
type ClusterRegistryMirrorSets struct {
	ID          string   `gorm:"column:id;type:uuid;primaryKey"`
	ClusterID   string   `gorm:"column:clusterid;type:uuid"`
	Serialized  []byte   `gorm:"column:serialized;type:bytea"`
	ClustersRef Clusters `gorm:"foreignKey:clusterid;references:id;belongsTo;constraint:OnDelete:CASCADE"`
}
