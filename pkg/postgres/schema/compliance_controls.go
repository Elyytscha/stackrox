// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"reflect"

	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/search/postgres/mapping"
)

var (
	// CreateTableComplianceControlsStmt holds the create statement for table `compliance_controls`.
	CreateTableComplianceControlsStmt = &postgres.CreateStmts{
		GormModel: (*ComplianceControls)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// ComplianceControlsSchema is the go schema for table `compliance_controls`.
	ComplianceControlsSchema = func() *walker.Schema {
		schema := GetSchemaForTable("compliance_controls")
		if schema != nil {
			return schema
		}
		schema = walker.Walk(reflect.TypeOf((*storage.ComplianceControl)(nil)), "compliance_controls")
		schema.SetOptionsMap(search.Walk(v1.SearchCategory_COMPLIANCE_CONTROL, "compliancecontrol", (*storage.ComplianceControl)(nil)))
		RegisterTable(schema, CreateTableComplianceControlsStmt)
		mapping.RegisterCategoryToTable(v1.SearchCategory_COMPLIANCE_CONTROL, schema)
		return schema
	}()
)

const (
	ComplianceControlsTableName = "compliance_controls"
)

// ComplianceControls holds the Gorm model for Postgres table `compliance_controls`.
type ComplianceControls struct {
	Id         string `gorm:"column:id;type:varchar;primaryKey"`
	StandardId string `gorm:"column:standardid;type:varchar"`
	GroupId    string `gorm:"column:groupid;type:varchar"`
	Name       string `gorm:"column:name;type:varchar"`
	Serialized []byte `gorm:"column:serialized;type:bytea"`
}
