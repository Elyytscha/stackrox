// Code generated by MockGen. DO NOT EDIT.
// Source: metrics.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	metrics "github.com/stackrox/rox/pkg/grpc/metrics"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	reflect "reflect"
)

// MockGRPCMetrics is a mock of GRPCMetrics interface
type MockGRPCMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockGRPCMetricsMockRecorder
}

// MockGRPCMetricsMockRecorder is the mock recorder for MockGRPCMetrics
type MockGRPCMetricsMockRecorder struct {
	mock *MockGRPCMetrics
}

// NewMockGRPCMetrics creates a new mock instance
func NewMockGRPCMetrics(ctrl *gomock.Controller) *MockGRPCMetrics {
	mock := &MockGRPCMetrics{ctrl: ctrl}
	mock.recorder = &MockGRPCMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGRPCMetrics) EXPECT() *MockGRPCMetricsMockRecorder {
	return m.recorder
}

// UnaryMonitorAndRecover mocks base method
func (m *MockGRPCMetrics) UnaryMonitorAndRecover(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnaryMonitorAndRecover", ctx, req, info, handler)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnaryMonitorAndRecover indicates an expected call of UnaryMonitorAndRecover
func (mr *MockGRPCMetricsMockRecorder) UnaryMonitorAndRecover(ctx, req, info, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnaryMonitorAndRecover", reflect.TypeOf((*MockGRPCMetrics)(nil).UnaryMonitorAndRecover), ctx, req, info, handler)
}

// GetMetrics mocks base method
func (m *MockGRPCMetrics) GetMetrics() (map[string]map[codes.Code]*metrics.Metric, map[string][]*metrics.Panic) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetrics")
	ret0, _ := ret[0].(map[string]map[codes.Code]*metrics.Metric)
	ret1, _ := ret[1].(map[string][]*metrics.Panic)
	return ret0, ret1
}

// GetMetrics indicates an expected call of GetMetrics
func (mr *MockGRPCMetricsMockRecorder) GetMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockGRPCMetrics)(nil).GetMetrics))
}
