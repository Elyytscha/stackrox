// Code generated by genny. DO NOT EDIT.
// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/mauricelam/genny

package set

import (
	"sort"

	mapset "github.com/deckarep/golang-set"
)

// If you want to add a set for your custom type, simply add another go generate line along with the
// existing ones. If you're creating a set for a primitive type, you can follow the example of "string"
// and create the generated file in this package.
// Sometimes, you might need to create it in the same package where it is defined to avoid import cycles.
// The permission set is an example of how to do that.
// You can also specify the -imp command to specify additional imports in your generated file, if required.

// uint32 represents a generic type that we want to have a set of.

// Uint32Set will get translated to generic sets.
// It uses mapset.Set as the underlying implementation, so it comes with a bunch
// of utility methods, and is thread-safe.
type Uint32Set struct {
	underlying mapset.Set
}

// Add adds an element of type uint32.
func (k Uint32Set) Add(i uint32) bool {
	if k.underlying == nil {
		k.underlying = mapset.NewSet()
	}

	return k.underlying.Add(i)
}

// AddAll adds all elements of type uint32. The return value is true if any new element
// was added.
func (k Uint32Set) AddAll(is ...uint32) bool {
	if k.underlying == nil {
		k.underlying = mapset.NewSet()
	}

	added := false
	for _, i := range is {
		added = k.underlying.Add(i) || added
	}
	return added
}

// Remove removes an element of type uint32.
func (k Uint32Set) Remove(i uint32) {
	if k.underlying != nil {
		k.underlying.Remove(i)
	}
}

// Contains returns whether the set contains an element of type uint32.
func (k Uint32Set) Contains(i uint32) bool {
	if k.underlying != nil {
		return k.underlying.Contains(i)
	}
	return false
}

// Cardinality returns the number of elements in the set.
func (k Uint32Set) Cardinality() int {
	if k.underlying != nil {
		return k.underlying.Cardinality()
	}
	return 0
}

// Difference returns a new set with all elements of k not in other.
func (k Uint32Set) Difference(other Uint32Set) Uint32Set {
	if k.underlying == nil {
		return Uint32Set{underlying: other.underlying}
	} else if other.underlying == nil {
		return Uint32Set{underlying: k.underlying}
	}

	return Uint32Set{underlying: k.underlying.Difference(other.underlying)}
}

// Intersect returns a new set with the intersection of the members of both sets.
func (k Uint32Set) Intersect(other Uint32Set) Uint32Set {
	if k.underlying != nil && other.underlying != nil {
		return Uint32Set{underlying: k.underlying.Intersect(other.underlying)}
	}
	return Uint32Set{}
}

// Union returns a new set with the union of the members of both sets.
func (k Uint32Set) Union(other Uint32Set) Uint32Set {
	if k.underlying == nil {
		return Uint32Set{underlying: other.underlying}
	} else if other.underlying == nil {
		return Uint32Set{underlying: k.underlying}
	}

	return Uint32Set{underlying: k.underlying.Union(other.underlying)}
}

// Equal returns a bool if the sets are equal
func (k Uint32Set) Equal(other Uint32Set) bool {
	if k.underlying == nil && other.underlying == nil {
		return true
	}
	if k.underlying == nil || other.underlying == nil {
		return false
	}
	return k.underlying.Equal(other.underlying)
}

// AsSlice returns a slice of the elements in the set. The order is unspecified.
func (k Uint32Set) AsSlice() []uint32 {
	if k.underlying == nil {
		return nil
	}
	elems := make([]uint32, 0, k.Cardinality())
	for elem := range k.underlying.Iter() {
		elems = append(elems, elem.(uint32))
	}
	return elems
}

// AsSortedSlice returns a slice of the elements in the set, sorted using the passed less function.
func (k Uint32Set) AsSortedSlice(less func(i, j uint32) bool) []uint32 {
	slice := k.AsSlice()
	if len(slice) < 2 {
		return slice
	}
	// Since we're generating the code, we might as well use sort.Sort
	// and avoid paying the reflection penalty of sort.Slice.
	sortable := &sortableuint32Slice{slice: slice, less: less}
	sort.Sort(sortable)
	return sortable.slice
}

// IsInitialized returns whether the set has been initialized
func (k Uint32Set) IsInitialized() bool {
	return k.underlying != nil
}

// Iter returns a range of elements you can iterate over.
// Note that in most cases, this is actually slower than pulling out a slice
// and ranging over that.
// NOTE THAT YOU MUST DRAIN THE RETURNED CHANNEL, OR THE SET WILL BE DEADLOCKED FOREVER.
func (k Uint32Set) Iter() <-chan uint32 {
	ch := make(chan uint32)
	if k.underlying != nil {
		go func() {
			for elem := range k.underlying.Iter() {
				ch <- elem.(uint32)
			}
			close(ch)
		}()
	} else {
		close(ch)
	}
	return ch
}

// Freeze returns a new, frozen version of the set.
func (k Uint32Set) Freeze() FrozenUint32Set {
	return NewFrozenUint32Set(k.AsSlice()...)
}

// NewUint32Set returns a new set with the given key type.
func NewUint32Set(initial ...uint32) Uint32Set {
	k := Uint32Set{underlying: mapset.NewSet()}
	for _, elem := range initial {
		k.Add(elem)
	}
	return k
}

type sortableuint32Slice struct {
	slice []uint32
	less  func(i, j uint32) bool
}

func (s *sortableuint32Slice) Len() int {
	return len(s.slice)
}

func (s *sortableuint32Slice) Less(i, j int) bool {
	return s.less(s.slice[i], s.slice[j])
}

func (s *sortableuint32Slice) Swap(i, j int) {
	s.slice[j], s.slice[i] = s.slice[i], s.slice[j]
}

// A FrozenUint32Set is a frozen set of uint32 elements, which
// cannot be modified after creation. This allows users to use it as if it were
// a "const" data structure, and also makes it slightly more optimal since
// we don't have to lock accesses to it.
type FrozenUint32Set struct {
	underlying map[uint32]struct{}
}

// NewFrozenUint32SetFromChan returns a new frozen set from the provided channel.
// It drains the channel.
// This can be useful to avoid unnecessary slice allocations.
func NewFrozenUint32SetFromChan(elementC <-chan uint32) FrozenUint32Set {
	underlying := make(map[uint32]struct{})
	for elem := range elementC {
		underlying[elem] = struct{}{}
	}
	return FrozenUint32Set{
		underlying: underlying,
	}
}

// NewFrozenUint32Set returns a new frozen set with the provided elements.
func NewFrozenUint32Set(elements ...uint32) FrozenUint32Set {
	underlying := make(map[uint32]struct{}, len(elements))
	for _, elem := range elements {
		underlying[elem] = struct{}{}
	}
	return FrozenUint32Set{
		underlying: underlying,
	}
}

// Contains returns whether the set contains the element.
func (k FrozenUint32Set) Contains(elem uint32) bool {
	_, ok := k.underlying[elem]
	return ok
}

// Cardinality returns the cardinality of the set.
func (k FrozenUint32Set) Cardinality() int {
	return len(k.underlying)
}

// AsSlice returns the elements of the set. The order is unspecified.
func (k FrozenUint32Set) AsSlice() []uint32 {
	if len(k.underlying) == 0 {
		return nil
	}
	slice := make([]uint32, 0, len(k.underlying))
	for elem := range k.underlying {
		slice = append(slice, elem)
	}
	return slice
}

// AsSortedSlice returns the elements of the set as a sorted slice.
func (k FrozenUint32Set) AsSortedSlice(less func(i, j uint32) bool) []uint32 {
	slice := k.AsSlice()
	if len(slice) < 2 {
		return slice
	}
	// Since we're generating the code, we might as well use sort.Sort
	// and avoid paying the reflection penalty of sort.Slice.
	sortable := &sortableuint32Slice{slice: slice, less: less}
	sort.Sort(sortable)
	return sortable.slice
}
