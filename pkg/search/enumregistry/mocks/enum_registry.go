// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackrox/rox/pkg/search/enumregistry (interfaces: Registry)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
	reflect "reflect"
)

// MockRegistry is a mock of Registry interface
type MockRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockRegistryMockRecorder
}

// MockRegistryMockRecorder is the mock recorder for MockRegistry
type MockRegistryMockRecorder struct {
	mock *MockRegistry
}

// NewMockRegistry creates a new mock instance
func NewMockRegistry(ctrl *gomock.Controller) *MockRegistry {
	mock := &MockRegistry{ctrl: ctrl}
	mock.recorder = &MockRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRegistry) EXPECT() *MockRegistryMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockRegistry) Add(arg0 string, arg1 *descriptor.EnumDescriptorProto) {
	m.ctrl.Call(m, "Add", arg0, arg1)
}

// Add indicates an expected call of Add
func (mr *MockRegistryMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockRegistry)(nil).Add), arg0, arg1)
}

// Get mocks base method
func (m *MockRegistry) Get(arg0, arg1 string) []int32 {
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].([]int32)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockRegistryMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRegistry)(nil).Get), arg0, arg1)
}

// IsEnum mocks base method
func (m *MockRegistry) IsEnum(arg0 string) bool {
	ret := m.ctrl.Call(m, "IsEnum", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEnum indicates an expected call of IsEnum
func (mr *MockRegistryMockRecorder) IsEnum(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEnum", reflect.TypeOf((*MockRegistry)(nil).IsEnum), arg0)
}

// Lookup mocks base method
func (m *MockRegistry) Lookup(arg0 string, arg1 int32) string {
	ret := m.ctrl.Call(m, "Lookup", arg0, arg1)
	ret0, _ := ret[0].(string)
	return ret0
}

// Lookup indicates an expected call of Lookup
func (mr *MockRegistryMockRecorder) Lookup(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lookup", reflect.TypeOf((*MockRegistry)(nil).Lookup), arg0, arg1)
}
