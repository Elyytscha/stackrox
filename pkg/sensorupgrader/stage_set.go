// Code generated by genny. DO NOT EDIT.
// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/mauricelam/genny

package sensorupgrader

import (
	"sort"
)

// If you want to add a set for your custom type, simply add another go generate line along with the
// existing ones. If you're creating a set for a primitive type, you can follow the example of "string"
// and create the generated file in this package.
// Sometimes, you might need to create it in the same package where it is defined to avoid import cycles.
// The permission set is an example of how to do that.
// You can also specify the -imp command to specify additional imports in your generated file, if required.

// Stage represents a generic type that we want to have a set of.

// StageSet will get translated to generic sets.
type StageSet struct {
	underlying map[Stage]struct{}
}

// Add adds an element of type Stage.
func (k *StageSet) Add(i Stage) bool {
	if k.underlying == nil {
		k.underlying = make(map[Stage]struct{})
	}

	oldLen := len(k.underlying)
	k.underlying[i] = struct{}{}
	return len(k.underlying) > oldLen
}

// AddAll adds all elements of type Stage. The return value is true if any new element
// was added.
func (k *StageSet) AddAll(is ...Stage) bool {
	if len(is) == 0 {
		return false
	}
	if k.underlying == nil {
		k.underlying = make(map[Stage]struct{})
	}

	oldLen := len(k.underlying)
	for _, i := range is {
		k.underlying[i] = struct{}{}
	}
	return len(k.underlying) > oldLen
}

// Remove removes an element of type Stage.
func (k *StageSet) Remove(i Stage) bool {
	if len(k.underlying) == 0 {
		return false
	}

	oldLen := len(k.underlying)
	delete(k.underlying, i)
	return len(k.underlying) < oldLen
}

// RemoveAll removes the given elements.
func (k *StageSet) RemoveAll(is ...Stage) bool {
	if len(k.underlying) == 0 {
		return false
	}

	oldLen := len(k.underlying)
	for _, i := range is {
		delete(k.underlying, i)
	}
	return len(k.underlying) < oldLen
}

// RemoveMatching removes all elements that match a given predicate.
func (k *StageSet) RemoveMatching(pred func(Stage) bool) bool {
	if len(k.underlying) == 0 {
		return false
	}

	oldLen := len(k.underlying)
	for elem := range k.underlying {
		if pred(elem) {
			delete(k.underlying, elem)
		}
	}
	return len(k.underlying) < oldLen
}

// Contains returns whether the set contains an element of type Stage.
func (k StageSet) Contains(i Stage) bool {
	_, ok := k.underlying[i]
	return ok
}

// Cardinality returns the number of elements in the set.
func (k StageSet) Cardinality() int {
	return len(k.underlying)
}

// IsEmpty returns whether the underlying set is empty (includes uninitialized).
func (k StageSet) IsEmpty() bool {
	return len(k.underlying) == 0
}

// Clone returns a copy of this set.
func (k StageSet) Clone() StageSet {
	if k.underlying == nil {
		return StageSet{}
	}
	cloned := make(map[Stage]struct{}, len(k.underlying))
	for elem := range k.underlying {
		cloned[elem] = struct{}{}
	}
	return StageSet{underlying: cloned}
}

// Difference returns a new set with all elements of k not in other.
func (k StageSet) Difference(other StageSet) StageSet {
	if len(k.underlying) == 0 || len(other.underlying) == 0 {
		return k.Clone()
	}

	retained := make(map[Stage]struct{}, len(k.underlying))
	for elem := range k.underlying {
		if !other.Contains(elem) {
			retained[elem] = struct{}{}
		}
	}
	return StageSet{underlying: retained}
}

// Intersect returns a new set with the intersection of the members of both sets.
func (k StageSet) Intersect(other StageSet) StageSet {
	maxIntLen := len(k.underlying)
	smaller, larger := k.underlying, other.underlying
	if l := len(other.underlying); l < maxIntLen {
		maxIntLen = l
		smaller, larger = larger, smaller
	}
	if maxIntLen == 0 {
		return StageSet{}
	}

	retained := make(map[Stage]struct{}, maxIntLen)
	for elem := range smaller {
		if _, ok := larger[elem]; ok {
			retained[elem] = struct{}{}
		}
	}
	return StageSet{underlying: retained}
}

// Union returns a new set with the union of the members of both sets.
func (k StageSet) Union(other StageSet) StageSet {
	if len(k.underlying) == 0 {
		return other.Clone()
	} else if len(other.underlying) == 0 {
		return k.Clone()
	}

	underlying := make(map[Stage]struct{}, len(k.underlying)+len(other.underlying))
	for elem := range k.underlying {
		underlying[elem] = struct{}{}
	}
	for elem := range other.underlying {
		underlying[elem] = struct{}{}
	}
	return StageSet{underlying: underlying}
}

// Equal returns a bool if the sets are equal
func (k StageSet) Equal(other StageSet) bool {
	thisL, otherL := len(k.underlying), len(other.underlying)
	if thisL == 0 && otherL == 0 {
		return true
	}
	if thisL != otherL {
		return false
	}
	for elem := range k.underlying {
		if _, ok := other.underlying[elem]; !ok {
			return false
		}
	}
	return true
}

// AsSlice returns a slice of the elements in the set. The order is unspecified.
func (k StageSet) AsSlice() []Stage {
	if len(k.underlying) == 0 {
		return nil
	}
	elems := make([]Stage, 0, len(k.underlying))
	for elem := range k.underlying {
		elems = append(elems, elem)
	}
	return elems
}

// AsSortedSlice returns a slice of the elements in the set, sorted using the passed less function.
func (k StageSet) AsSortedSlice(less func(i, j Stage) bool) []Stage {
	slice := k.AsSlice()
	if len(slice) < 2 {
		return slice
	}
	// Since we're generating the code, we might as well use sort.Sort
	// and avoid paying the reflection penalty of sort.Slice.
	sortable := &sortableStageSlice{slice: slice, less: less}
	sort.Sort(sortable)
	return sortable.slice
}

// Clear empties the set
func (k *StageSet) Clear() {
	k.underlying = nil
}

// Freeze returns a new, frozen version of the set.
func (k StageSet) Freeze() FrozenStageSet {
	return NewFrozenStageSetFromMap(k.underlying)
}

// NewStageSet returns a new thread unsafe set with the given key type.
func NewStageSet(initial ...Stage) StageSet {
	underlying := make(map[Stage]struct{}, len(initial))
	for _, elem := range initial {
		underlying[elem] = struct{}{}
	}
	return StageSet{underlying: underlying}
}

type sortableStageSlice struct {
	slice []Stage
	less  func(i, j Stage) bool
}

func (s *sortableStageSlice) Len() int {
	return len(s.slice)
}

func (s *sortableStageSlice) Less(i, j int) bool {
	return s.less(s.slice[i], s.slice[j])
}

func (s *sortableStageSlice) Swap(i, j int) {
	s.slice[j], s.slice[i] = s.slice[i], s.slice[j]
}

// A FrozenStageSet is a frozen set of Stage elements, which
// cannot be modified after creation. This allows users to use it as if it were
// a "const" data structure, and also makes it slightly more optimal since
// we don't have to lock accesses to it.
type FrozenStageSet struct {
	underlying map[Stage]struct{}
}

// NewFrozenStageSetFromMap returns a new frozen set from the set-style map.
func NewFrozenStageSetFromMap(m map[Stage]struct{}) FrozenStageSet {
	if len(m) == 0 {
		return FrozenStageSet{}
	}
	underlying := make(map[Stage]struct{}, len(m))
	for elem := range m {
		underlying[elem] = struct{}{}
	}
	return FrozenStageSet{
		underlying: underlying,
	}
}

// NewFrozenStageSet returns a new frozen set with the provided elements.
func NewFrozenStageSet(elements ...Stage) FrozenStageSet {
	underlying := make(map[Stage]struct{}, len(elements))
	for _, elem := range elements {
		underlying[elem] = struct{}{}
	}
	return FrozenStageSet{
		underlying: underlying,
	}
}

// Contains returns whether the set contains the element.
func (k FrozenStageSet) Contains(elem Stage) bool {
	_, ok := k.underlying[elem]
	return ok
}

// Cardinality returns the cardinality of the set.
func (k FrozenStageSet) Cardinality() int {
	return len(k.underlying)
}

// IsEmpty returns whether the underlying set is empty (includes uninitialized).
func (k FrozenStageSet) IsEmpty() bool {
	return len(k.underlying) == 0
}

// AsSlice returns the elements of the set. The order is unspecified.
func (k FrozenStageSet) AsSlice() []Stage {
	if len(k.underlying) == 0 {
		return nil
	}
	slice := make([]Stage, 0, len(k.underlying))
	for elem := range k.underlying {
		slice = append(slice, elem)
	}
	return slice
}

// AsSortedSlice returns the elements of the set as a sorted slice.
func (k FrozenStageSet) AsSortedSlice(less func(i, j Stage) bool) []Stage {
	slice := k.AsSlice()
	if len(slice) < 2 {
		return slice
	}
	// Since we're generating the code, we might as well use sort.Sort
	// and avoid paying the reflection penalty of sort.Slice.
	sortable := &sortableStageSlice{slice: slice, less: less}
	sort.Sort(sortable)
	return sortable.slice
}
