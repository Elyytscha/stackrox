// Code generated by MockGen. DO NOT EDIT.
// Source: telemeter.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTelemeter is a mock of Telemeter interface.
type MockTelemeter struct {
	ctrl     *gomock.Controller
	recorder *MockTelemeterMockRecorder
}

// MockTelemeterMockRecorder is the mock recorder for MockTelemeter.
type MockTelemeterMockRecorder struct {
	mock *MockTelemeter
}

// NewMockTelemeter creates a new mock instance.
func NewMockTelemeter(ctrl *gomock.Controller) *MockTelemeter {
	mock := &MockTelemeter{ctrl: ctrl}
	mock.recorder = &MockTelemeterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTelemeter) EXPECT() *MockTelemeterMockRecorder {
	return m.recorder
}

// Identify mocks base method.
func (m *MockTelemeter) Identify(props map[string]any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Identify", props)
}

// Identify indicates an expected call of Identify.
func (mr *MockTelemeterMockRecorder) Identify(props interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Identify", reflect.TypeOf((*MockTelemeter)(nil).Identify), props)
}

// Start mocks base method.
func (m *MockTelemeter) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockTelemeterMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockTelemeter)(nil).Start))
}

// Stop mocks base method.
func (m *MockTelemeter) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockTelemeterMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockTelemeter)(nil).Stop))
}

// TrackProps mocks base method.
func (m *MockTelemeter) TrackProps(event, userID string, props map[string]any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TrackProps", event, userID, props)
}

// TrackProps indicates an expected call of TrackProps.
func (mr *MockTelemeterMockRecorder) TrackProps(event, userID, props interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackProps", reflect.TypeOf((*MockTelemeter)(nil).TrackProps), event, userID, props)
}
