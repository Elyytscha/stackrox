// Code generated by MockGen. DO NOT EDIT.
// Source: server_handler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProbeSource is a mock of ProbeSource interface.
type MockProbeSource struct {
	ctrl     *gomock.Controller
	recorder *MockProbeSourceMockRecorder
}

// MockProbeSourceMockRecorder is the mock recorder for MockProbeSource.
type MockProbeSourceMockRecorder struct {
	mock *MockProbeSource
}

// NewMockProbeSource creates a new mock instance.
func NewMockProbeSource(ctrl *gomock.Controller) *MockProbeSource {
	mock := &MockProbeSource{ctrl: ctrl}
	mock.recorder = &MockProbeSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProbeSource) EXPECT() *MockProbeSourceMockRecorder {
	return m.recorder
}

// IsAvailable mocks base method.
func (m *MockProbeSource) IsAvailable(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAvailable", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAvailable indicates an expected call of IsAvailable.
func (mr *MockProbeSourceMockRecorder) IsAvailable(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAvailable", reflect.TypeOf((*MockProbeSource)(nil).IsAvailable), ctx)
}

// LoadProbe mocks base method.
func (m *MockProbeSource) LoadProbe(ctx context.Context, fileName string) (io.ReadCloser, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadProbe", ctx, fileName)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoadProbe indicates an expected call of LoadProbe.
func (mr *MockProbeSourceMockRecorder) LoadProbe(ctx, fileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadProbe", reflect.TypeOf((*MockProbeSource)(nil).LoadProbe), ctx, fileName)
}
