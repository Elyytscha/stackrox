// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package types

import (
	json "encoding/json"
	types "github.com/docker/docker/api/types"
	container "github.com/docker/docker/api/types/container"
	image "github.com/docker/docker/api/types/image"
	network "github.com/docker/docker/api/types/network"
	registry "github.com/docker/docker/api/types/registry"
	swarm "github.com/docker/docker/api/types/swarm"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeGithubComStackroxRoxPkgDockerTypes(in *jlexer.Lexer, out *Data) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Info":
			easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypes(in, &out.Info)
		case "Containers":
			if in.IsNull() {
				in.Skip()
				out.Containers = nil
			} else {
				in.Delim('[')
				if out.Containers == nil {
					if !in.IsDelim(']') {
						out.Containers = make([]ContainerJSON, 0, 1)
					} else {
						out.Containers = []ContainerJSON{}
					}
				} else {
					out.Containers = (out.Containers)[:0]
				}
				for !in.IsDelim(']') {
					var v1 ContainerJSON
					if data := in.Raw(); in.Ok() {
						in.AddError((v1).UnmarshalJSON(data))
					}
					out.Containers = append(out.Containers, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Images":
			if in.IsNull() {
				in.Skip()
				out.Images = nil
			} else {
				in.Delim('[')
				if out.Images == nil {
					if !in.IsDelim(']') {
						out.Images = make([]ImageWrap, 0, 1)
					} else {
						out.Images = []ImageWrap{}
					}
				} else {
					out.Images = (out.Images)[:0]
				}
				for !in.IsDelim(']') {
					var v2 ImageWrap
					easyjson6601e8cdDecodeGithubComStackroxRoxPkgDockerTypes1(in, &v2)
					out.Images = append(out.Images, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "BridgeNetwork":
			easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypes1(in, &out.BridgeNetwork)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComStackroxRoxPkgDockerTypes(out *jwriter.Writer, in Data) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Info\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypes(out, in.Info)
	}
	{
		const prefix string = ",\"Containers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Containers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Containers {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.Raw((v4).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Images\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Images == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Images {
				if v5 > 0 {
					out.RawByte(',')
				}
				easyjson6601e8cdEncodeGithubComStackroxRoxPkgDockerTypes1(out, v6)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"BridgeNetwork\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypes1(out, in.BridgeNetwork)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Data) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComStackroxRoxPkgDockerTypes(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Data) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComStackroxRoxPkgDockerTypes(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Data) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComStackroxRoxPkgDockerTypes(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Data) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComStackroxRoxPkgDockerTypes(l, v)
}
func easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypes1(in *jlexer.Lexer, out *types.NetworkResource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "Id":
			out.ID = string(in.String())
		case "Created":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Created).UnmarshalJSON(data))
			}
		case "Scope":
			out.Scope = string(in.String())
		case "Driver":
			out.Driver = string(in.String())
		case "EnableIPv6":
			out.EnableIPv6 = bool(in.Bool())
		case "IPAM":
			easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesNetwork(in, &out.IPAM)
		case "Internal":
			out.Internal = bool(in.Bool())
		case "Attachable":
			out.Attachable = bool(in.Bool())
		case "Ingress":
			out.Ingress = bool(in.Bool())
		case "ConfigFrom":
			easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesNetwork1(in, &out.ConfigFrom)
		case "ConfigOnly":
			out.ConfigOnly = bool(in.Bool())
		case "Containers":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Containers = make(map[string]types.EndpointResource)
				} else {
					out.Containers = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v7 types.EndpointResource
					easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypes2(in, &v7)
					(out.Containers)[key] = v7
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Options":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Options = make(map[string]string)
				} else {
					out.Options = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v8 string
					v8 = string(in.String())
					(out.Options)[key] = v8
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Labels":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Labels = make(map[string]string)
				} else {
					out.Labels = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v9 string
					v9 = string(in.String())
					(out.Labels)[key] = v9
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Peers":
			if in.IsNull() {
				in.Skip()
				out.Peers = nil
			} else {
				in.Delim('[')
				if out.Peers == nil {
					if !in.IsDelim(']') {
						out.Peers = make([]network.PeerInfo, 0, 2)
					} else {
						out.Peers = []network.PeerInfo{}
					}
				} else {
					out.Peers = (out.Peers)[:0]
				}
				for !in.IsDelim(']') {
					var v10 network.PeerInfo
					easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesNetwork2(in, &v10)
					out.Peers = append(out.Peers, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Services":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Services = make(map[string]network.ServiceInfo)
				} else {
					out.Services = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v11 network.ServiceInfo
					easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesNetwork3(in, &v11)
					(out.Services)[key] = v11
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypes1(out *jwriter.Writer, in types.NetworkResource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"Created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Created).MarshalJSON())
	}
	{
		const prefix string = ",\"Scope\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Scope))
	}
	{
		const prefix string = ",\"Driver\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Driver))
	}
	{
		const prefix string = ",\"EnableIPv6\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.EnableIPv6))
	}
	{
		const prefix string = ",\"IPAM\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesNetwork(out, in.IPAM)
	}
	{
		const prefix string = ",\"Internal\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Internal))
	}
	{
		const prefix string = ",\"Attachable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Attachable))
	}
	{
		const prefix string = ",\"Ingress\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Ingress))
	}
	{
		const prefix string = ",\"ConfigFrom\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesNetwork1(out, in.ConfigFrom)
	}
	{
		const prefix string = ",\"ConfigOnly\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ConfigOnly))
	}
	{
		const prefix string = ",\"Containers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Containers == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v12First := true
			for v12Name, v12Value := range in.Containers {
				if v12First {
					v12First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v12Name))
				out.RawByte(':')
				easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypes2(out, v12Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"Options\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Options == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v13First := true
			for v13Name, v13Value := range in.Options {
				if v13First {
					v13First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v13Name))
				out.RawByte(':')
				out.String(string(v13Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"Labels\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Labels == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v14First := true
			for v14Name, v14Value := range in.Labels {
				if v14First {
					v14First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v14Name))
				out.RawByte(':')
				out.String(string(v14Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Peers) != 0 {
		const prefix string = ",\"Peers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v15, v16 := range in.Peers {
				if v15 > 0 {
					out.RawByte(',')
				}
				easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesNetwork2(out, v16)
			}
			out.RawByte(']')
		}
	}
	if len(in.Services) != 0 {
		const prefix string = ",\"Services\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v17First := true
			for v17Name, v17Value := range in.Services {
				if v17First {
					v17First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v17Name))
				out.RawByte(':')
				easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesNetwork3(out, v17Value)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesNetwork3(in *jlexer.Lexer, out *network.ServiceInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "VIP":
			out.VIP = string(in.String())
		case "Ports":
			if in.IsNull() {
				in.Skip()
				out.Ports = nil
			} else {
				in.Delim('[')
				if out.Ports == nil {
					if !in.IsDelim(']') {
						out.Ports = make([]string, 0, 4)
					} else {
						out.Ports = []string{}
					}
				} else {
					out.Ports = (out.Ports)[:0]
				}
				for !in.IsDelim(']') {
					var v18 string
					v18 = string(in.String())
					out.Ports = append(out.Ports, v18)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "LocalLBIndex":
			out.LocalLBIndex = int(in.Int())
		case "Tasks":
			if in.IsNull() {
				in.Skip()
				out.Tasks = nil
			} else {
				in.Delim('[')
				if out.Tasks == nil {
					if !in.IsDelim(']') {
						out.Tasks = make([]network.Task, 0, 1)
					} else {
						out.Tasks = []network.Task{}
					}
				} else {
					out.Tasks = (out.Tasks)[:0]
				}
				for !in.IsDelim(']') {
					var v19 network.Task
					easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesNetwork4(in, &v19)
					out.Tasks = append(out.Tasks, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesNetwork3(out *jwriter.Writer, in network.ServiceInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"VIP\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VIP))
	}
	{
		const prefix string = ",\"Ports\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Ports == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Ports {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.String(string(v21))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"LocalLBIndex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.LocalLBIndex))
	}
	{
		const prefix string = ",\"Tasks\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Tasks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v22, v23 := range in.Tasks {
				if v22 > 0 {
					out.RawByte(',')
				}
				easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesNetwork4(out, v23)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesNetwork4(in *jlexer.Lexer, out *network.Task) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "EndpointID":
			out.EndpointID = string(in.String())
		case "EndpointIP":
			out.EndpointIP = string(in.String())
		case "Info":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Info = make(map[string]string)
				} else {
					out.Info = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v24 string
					v24 = string(in.String())
					(out.Info)[key] = v24
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesNetwork4(out *jwriter.Writer, in network.Task) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"EndpointID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EndpointID))
	}
	{
		const prefix string = ",\"EndpointIP\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EndpointIP))
	}
	{
		const prefix string = ",\"Info\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Info == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v25First := true
			for v25Name, v25Value := range in.Info {
				if v25First {
					v25First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v25Name))
				out.RawByte(':')
				out.String(string(v25Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesNetwork2(in *jlexer.Lexer, out *network.PeerInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "IP":
			out.IP = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesNetwork2(out *jwriter.Writer, in network.PeerInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"IP\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IP))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypes2(in *jlexer.Lexer, out *types.EndpointResource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "EndpointID":
			out.EndpointID = string(in.String())
		case "MacAddress":
			out.MacAddress = string(in.String())
		case "IPv4Address":
			out.IPv4Address = string(in.String())
		case "IPv6Address":
			out.IPv6Address = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypes2(out *jwriter.Writer, in types.EndpointResource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"EndpointID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EndpointID))
	}
	{
		const prefix string = ",\"MacAddress\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MacAddress))
	}
	{
		const prefix string = ",\"IPv4Address\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IPv4Address))
	}
	{
		const prefix string = ",\"IPv6Address\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IPv6Address))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesNetwork1(in *jlexer.Lexer, out *network.ConfigReference) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Network":
			out.Network = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesNetwork1(out *jwriter.Writer, in network.ConfigReference) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Network\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Network))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesNetwork(in *jlexer.Lexer, out *network.IPAM) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Driver":
			out.Driver = string(in.String())
		case "Options":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Options = make(map[string]string)
				} else {
					out.Options = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v26 string
					v26 = string(in.String())
					(out.Options)[key] = v26
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Config":
			if in.IsNull() {
				in.Skip()
				out.Config = nil
			} else {
				in.Delim('[')
				if out.Config == nil {
					if !in.IsDelim(']') {
						out.Config = make([]network.IPAMConfig, 0, 1)
					} else {
						out.Config = []network.IPAMConfig{}
					}
				} else {
					out.Config = (out.Config)[:0]
				}
				for !in.IsDelim(']') {
					var v27 network.IPAMConfig
					easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesNetwork5(in, &v27)
					out.Config = append(out.Config, v27)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesNetwork(out *jwriter.Writer, in network.IPAM) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Driver\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Driver))
	}
	{
		const prefix string = ",\"Options\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Options == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v28First := true
			for v28Name, v28Value := range in.Options {
				if v28First {
					v28First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v28Name))
				out.RawByte(':')
				out.String(string(v28Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"Config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Config == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.Config {
				if v29 > 0 {
					out.RawByte(',')
				}
				easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesNetwork5(out, v30)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesNetwork5(in *jlexer.Lexer, out *network.IPAMConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Subnet":
			out.Subnet = string(in.String())
		case "IPRange":
			out.IPRange = string(in.String())
		case "Gateway":
			out.Gateway = string(in.String())
		case "AuxiliaryAddresses":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.AuxAddress = make(map[string]string)
				} else {
					out.AuxAddress = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v31 string
					v31 = string(in.String())
					(out.AuxAddress)[key] = v31
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesNetwork5(out *jwriter.Writer, in network.IPAMConfig) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Subnet != "" {
		const prefix string = ",\"Subnet\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Subnet))
	}
	if in.IPRange != "" {
		const prefix string = ",\"IPRange\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IPRange))
	}
	if in.Gateway != "" {
		const prefix string = ",\"Gateway\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Gateway))
	}
	if len(in.AuxAddress) != 0 {
		const prefix string = ",\"AuxiliaryAddresses\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v32First := true
			for v32Name, v32Value := range in.AuxAddress {
				if v32First {
					v32First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v32Name))
				out.RawByte(':')
				out.String(string(v32Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComStackroxRoxPkgDockerTypes1(in *jlexer.Lexer, out *ImageWrap) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "image":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Image).UnmarshalJSON(data))
			}
		case "history":
			if in.IsNull() {
				in.Skip()
				out.History = nil
			} else {
				in.Delim('[')
				if out.History == nil {
					if !in.IsDelim(']') {
						out.History = make([]image.HistoryResponseItem, 0, 1)
					} else {
						out.History = []image.HistoryResponseItem{}
					}
				} else {
					out.History = (out.History)[:0]
				}
				for !in.IsDelim(']') {
					var v33 image.HistoryResponseItem
					easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesImage(in, &v33)
					out.History = append(out.History, v33)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComStackroxRoxPkgDockerTypes1(out *jwriter.Writer, in ImageWrap) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"image\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Image).MarshalJSON())
	}
	{
		const prefix string = ",\"history\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.History == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v34, v35 := range in.History {
				if v34 > 0 {
					out.RawByte(',')
				}
				easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesImage(out, v35)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesImage(in *jlexer.Lexer, out *image.HistoryResponseItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Comment":
			out.Comment = string(in.String())
		case "Created":
			out.Created = int64(in.Int64())
		case "CreatedBy":
			out.CreatedBy = string(in.String())
		case "Id":
			out.ID = string(in.String())
		case "Size":
			out.Size = int64(in.Int64())
		case "Tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v36 string
					v36 = string(in.String())
					out.Tags = append(out.Tags, v36)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesImage(out *jwriter.Writer, in image.HistoryResponseItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Comment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Comment))
	}
	{
		const prefix string = ",\"Created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Created))
	}
	{
		const prefix string = ",\"CreatedBy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CreatedBy))
	}
	{
		const prefix string = ",\"Id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"Size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Size))
	}
	{
		const prefix string = ",\"Tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v37, v38 := range in.Tags {
				if v37 > 0 {
					out.RawByte(',')
				}
				out.String(string(v38))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypes(in *jlexer.Lexer, out *types.Info) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = string(in.String())
		case "Containers":
			out.Containers = int(in.Int())
		case "ContainersRunning":
			out.ContainersRunning = int(in.Int())
		case "ContainersPaused":
			out.ContainersPaused = int(in.Int())
		case "ContainersStopped":
			out.ContainersStopped = int(in.Int())
		case "Images":
			out.Images = int(in.Int())
		case "Driver":
			out.Driver = string(in.String())
		case "DriverStatus":
			if in.IsNull() {
				in.Skip()
				out.DriverStatus = nil
			} else {
				in.Delim('[')
				if out.DriverStatus == nil {
					if !in.IsDelim(']') {
						out.DriverStatus = make([][2]string, 0, 2)
					} else {
						out.DriverStatus = [][2]string{}
					}
				} else {
					out.DriverStatus = (out.DriverStatus)[:0]
				}
				for !in.IsDelim(']') {
					var v39 [2]string
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('[')
						v40 := 0
						for !in.IsDelim(']') {
							if v40 < 2 {
								(v39)[v40] = string(in.String())
								v40++
							} else {
								in.SkipRecursive()
							}
							in.WantComma()
						}
						in.Delim(']')
					}
					out.DriverStatus = append(out.DriverStatus, v39)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "SystemStatus":
			if in.IsNull() {
				in.Skip()
				out.SystemStatus = nil
			} else {
				in.Delim('[')
				if out.SystemStatus == nil {
					if !in.IsDelim(']') {
						out.SystemStatus = make([][2]string, 0, 2)
					} else {
						out.SystemStatus = [][2]string{}
					}
				} else {
					out.SystemStatus = (out.SystemStatus)[:0]
				}
				for !in.IsDelim(']') {
					var v41 [2]string
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('[')
						v42 := 0
						for !in.IsDelim(']') {
							if v42 < 2 {
								(v41)[v42] = string(in.String())
								v42++
							} else {
								in.SkipRecursive()
							}
							in.WantComma()
						}
						in.Delim(']')
					}
					out.SystemStatus = append(out.SystemStatus, v41)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Plugins":
			easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypes3(in, &out.Plugins)
		case "MemoryLimit":
			out.MemoryLimit = bool(in.Bool())
		case "SwapLimit":
			out.SwapLimit = bool(in.Bool())
		case "KernelMemory":
			out.KernelMemory = bool(in.Bool())
		case "CpuCfsPeriod":
			out.CPUCfsPeriod = bool(in.Bool())
		case "CpuCfsQuota":
			out.CPUCfsQuota = bool(in.Bool())
		case "CPUShares":
			out.CPUShares = bool(in.Bool())
		case "CPUSet":
			out.CPUSet = bool(in.Bool())
		case "IPv4Forwarding":
			out.IPv4Forwarding = bool(in.Bool())
		case "BridgeNfIptables":
			out.BridgeNfIptables = bool(in.Bool())
		case "BridgeNfIp6tables":
			out.BridgeNfIP6tables = bool(in.Bool())
		case "Debug":
			out.Debug = bool(in.Bool())
		case "NFd":
			out.NFd = int(in.Int())
		case "OomKillDisable":
			out.OomKillDisable = bool(in.Bool())
		case "NGoroutines":
			out.NGoroutines = int(in.Int())
		case "SystemTime":
			out.SystemTime = string(in.String())
		case "LoggingDriver":
			out.LoggingDriver = string(in.String())
		case "CgroupDriver":
			out.CgroupDriver = string(in.String())
		case "NEventsListener":
			out.NEventsListener = int(in.Int())
		case "KernelVersion":
			out.KernelVersion = string(in.String())
		case "OperatingSystem":
			out.OperatingSystem = string(in.String())
		case "OSType":
			out.OSType = string(in.String())
		case "Architecture":
			out.Architecture = string(in.String())
		case "IndexServerAddress":
			out.IndexServerAddress = string(in.String())
		case "RegistryConfig":
			if in.IsNull() {
				in.Skip()
				out.RegistryConfig = nil
			} else {
				if out.RegistryConfig == nil {
					out.RegistryConfig = new(registry.ServiceConfig)
				}
				easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesRegistry(in, &*out.RegistryConfig)
			}
		case "NCPU":
			out.NCPU = int(in.Int())
		case "MemTotal":
			out.MemTotal = int64(in.Int64())
		case "GenericResources":
			if in.IsNull() {
				in.Skip()
				out.GenericResources = nil
			} else {
				in.Delim('[')
				if out.GenericResources == nil {
					if !in.IsDelim(']') {
						out.GenericResources = make([]swarm.GenericResource, 0, 4)
					} else {
						out.GenericResources = []swarm.GenericResource{}
					}
				} else {
					out.GenericResources = (out.GenericResources)[:0]
				}
				for !in.IsDelim(']') {
					var v43 swarm.GenericResource
					easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm(in, &v43)
					out.GenericResources = append(out.GenericResources, v43)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "DockerRootDir":
			out.DockerRootDir = string(in.String())
		case "HttpProxy":
			out.HTTPProxy = string(in.String())
		case "HttpsProxy":
			out.HTTPSProxy = string(in.String())
		case "NoProxy":
			out.NoProxy = string(in.String())
		case "Name":
			out.Name = string(in.String())
		case "Labels":
			if in.IsNull() {
				in.Skip()
				out.Labels = nil
			} else {
				in.Delim('[')
				if out.Labels == nil {
					if !in.IsDelim(']') {
						out.Labels = make([]string, 0, 4)
					} else {
						out.Labels = []string{}
					}
				} else {
					out.Labels = (out.Labels)[:0]
				}
				for !in.IsDelim(']') {
					var v44 string
					v44 = string(in.String())
					out.Labels = append(out.Labels, v44)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ExperimentalBuild":
			out.ExperimentalBuild = bool(in.Bool())
		case "ServerVersion":
			out.ServerVersion = string(in.String())
		case "ClusterStore":
			out.ClusterStore = string(in.String())
		case "ClusterAdvertise":
			out.ClusterAdvertise = string(in.String())
		case "Runtimes":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Runtimes = make(map[string]types.Runtime)
				} else {
					out.Runtimes = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v45 types.Runtime
					easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypes4(in, &v45)
					(out.Runtimes)[key] = v45
					in.WantComma()
				}
				in.Delim('}')
			}
		case "DefaultRuntime":
			out.DefaultRuntime = string(in.String())
		case "Swarm":
			easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm1(in, &out.Swarm)
		case "LiveRestoreEnabled":
			out.LiveRestoreEnabled = bool(in.Bool())
		case "Isolation":
			out.Isolation = container.Isolation(in.String())
		case "InitBinary":
			out.InitBinary = string(in.String())
		case "ContainerdCommit":
			easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypes5(in, &out.ContainerdCommit)
		case "RuncCommit":
			easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypes5(in, &out.RuncCommit)
		case "InitCommit":
			easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypes5(in, &out.InitCommit)
		case "SecurityOptions":
			if in.IsNull() {
				in.Skip()
				out.SecurityOptions = nil
			} else {
				in.Delim('[')
				if out.SecurityOptions == nil {
					if !in.IsDelim(']') {
						out.SecurityOptions = make([]string, 0, 4)
					} else {
						out.SecurityOptions = []string{}
					}
				} else {
					out.SecurityOptions = (out.SecurityOptions)[:0]
				}
				for !in.IsDelim(']') {
					var v46 string
					v46 = string(in.String())
					out.SecurityOptions = append(out.SecurityOptions, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypes(out *jwriter.Writer, in types.Info) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"Containers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Containers))
	}
	{
		const prefix string = ",\"ContainersRunning\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ContainersRunning))
	}
	{
		const prefix string = ",\"ContainersPaused\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ContainersPaused))
	}
	{
		const prefix string = ",\"ContainersStopped\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ContainersStopped))
	}
	{
		const prefix string = ",\"Images\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Images))
	}
	{
		const prefix string = ",\"Driver\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Driver))
	}
	{
		const prefix string = ",\"DriverStatus\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.DriverStatus == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v47, v48 := range in.DriverStatus {
				if v47 > 0 {
					out.RawByte(',')
				}
				out.RawByte('[')
				for v49 := range v48 {
					if v49 > 0 {
						out.RawByte(',')
					}
					out.String(string((v48)[v49]))
				}
				out.RawByte(']')
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"SystemStatus\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.SystemStatus == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v50, v51 := range in.SystemStatus {
				if v50 > 0 {
					out.RawByte(',')
				}
				out.RawByte('[')
				for v52 := range v51 {
					if v52 > 0 {
						out.RawByte(',')
					}
					out.String(string((v51)[v52]))
				}
				out.RawByte(']')
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Plugins\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypes3(out, in.Plugins)
	}
	{
		const prefix string = ",\"MemoryLimit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.MemoryLimit))
	}
	{
		const prefix string = ",\"SwapLimit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.SwapLimit))
	}
	{
		const prefix string = ",\"KernelMemory\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.KernelMemory))
	}
	{
		const prefix string = ",\"CpuCfsPeriod\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.CPUCfsPeriod))
	}
	{
		const prefix string = ",\"CpuCfsQuota\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.CPUCfsQuota))
	}
	{
		const prefix string = ",\"CPUShares\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.CPUShares))
	}
	{
		const prefix string = ",\"CPUSet\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.CPUSet))
	}
	{
		const prefix string = ",\"IPv4Forwarding\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IPv4Forwarding))
	}
	{
		const prefix string = ",\"BridgeNfIptables\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.BridgeNfIptables))
	}
	{
		const prefix string = ",\"BridgeNfIp6tables\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.BridgeNfIP6tables))
	}
	{
		const prefix string = ",\"Debug\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Debug))
	}
	{
		const prefix string = ",\"NFd\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.NFd))
	}
	{
		const prefix string = ",\"OomKillDisable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.OomKillDisable))
	}
	{
		const prefix string = ",\"NGoroutines\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.NGoroutines))
	}
	{
		const prefix string = ",\"SystemTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SystemTime))
	}
	{
		const prefix string = ",\"LoggingDriver\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LoggingDriver))
	}
	{
		const prefix string = ",\"CgroupDriver\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CgroupDriver))
	}
	{
		const prefix string = ",\"NEventsListener\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.NEventsListener))
	}
	{
		const prefix string = ",\"KernelVersion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.KernelVersion))
	}
	{
		const prefix string = ",\"OperatingSystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OperatingSystem))
	}
	{
		const prefix string = ",\"OSType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OSType))
	}
	{
		const prefix string = ",\"Architecture\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Architecture))
	}
	{
		const prefix string = ",\"IndexServerAddress\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IndexServerAddress))
	}
	{
		const prefix string = ",\"RegistryConfig\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.RegistryConfig == nil {
			out.RawString("null")
		} else {
			easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesRegistry(out, *in.RegistryConfig)
		}
	}
	{
		const prefix string = ",\"NCPU\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.NCPU))
	}
	{
		const prefix string = ",\"MemTotal\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MemTotal))
	}
	{
		const prefix string = ",\"GenericResources\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.GenericResources == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v53, v54 := range in.GenericResources {
				if v53 > 0 {
					out.RawByte(',')
				}
				easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm(out, v54)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"DockerRootDir\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DockerRootDir))
	}
	{
		const prefix string = ",\"HttpProxy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.HTTPProxy))
	}
	{
		const prefix string = ",\"HttpsProxy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.HTTPSProxy))
	}
	{
		const prefix string = ",\"NoProxy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NoProxy))
	}
	{
		const prefix string = ",\"Name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Labels\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Labels == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v55, v56 := range in.Labels {
				if v55 > 0 {
					out.RawByte(',')
				}
				out.String(string(v56))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ExperimentalBuild\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ExperimentalBuild))
	}
	{
		const prefix string = ",\"ServerVersion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ServerVersion))
	}
	{
		const prefix string = ",\"ClusterStore\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClusterStore))
	}
	{
		const prefix string = ",\"ClusterAdvertise\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClusterAdvertise))
	}
	{
		const prefix string = ",\"Runtimes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Runtimes == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v57First := true
			for v57Name, v57Value := range in.Runtimes {
				if v57First {
					v57First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v57Name))
				out.RawByte(':')
				easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypes4(out, v57Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"DefaultRuntime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DefaultRuntime))
	}
	{
		const prefix string = ",\"Swarm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm1(out, in.Swarm)
	}
	{
		const prefix string = ",\"LiveRestoreEnabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.LiveRestoreEnabled))
	}
	{
		const prefix string = ",\"Isolation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Isolation))
	}
	{
		const prefix string = ",\"InitBinary\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.InitBinary))
	}
	{
		const prefix string = ",\"ContainerdCommit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypes5(out, in.ContainerdCommit)
	}
	{
		const prefix string = ",\"RuncCommit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypes5(out, in.RuncCommit)
	}
	{
		const prefix string = ",\"InitCommit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypes5(out, in.InitCommit)
	}
	{
		const prefix string = ",\"SecurityOptions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.SecurityOptions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v58, v59 := range in.SecurityOptions {
				if v58 > 0 {
					out.RawByte(',')
				}
				out.String(string(v59))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypes5(in *jlexer.Lexer, out *types.Commit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = string(in.String())
		case "Expected":
			out.Expected = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypes5(out *jwriter.Writer, in types.Commit) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"Expected\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Expected))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm1(in *jlexer.Lexer, out *swarm.Info) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "NodeID":
			out.NodeID = string(in.String())
		case "NodeAddr":
			out.NodeAddr = string(in.String())
		case "LocalNodeState":
			out.LocalNodeState = swarm.LocalNodeState(in.String())
		case "ControlAvailable":
			out.ControlAvailable = bool(in.Bool())
		case "Error":
			out.Error = string(in.String())
		case "RemoteManagers":
			if in.IsNull() {
				in.Skip()
				out.RemoteManagers = nil
			} else {
				in.Delim('[')
				if out.RemoteManagers == nil {
					if !in.IsDelim(']') {
						out.RemoteManagers = make([]swarm.Peer, 0, 2)
					} else {
						out.RemoteManagers = []swarm.Peer{}
					}
				} else {
					out.RemoteManagers = (out.RemoteManagers)[:0]
				}
				for !in.IsDelim(']') {
					var v60 swarm.Peer
					easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm2(in, &v60)
					out.RemoteManagers = append(out.RemoteManagers, v60)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Nodes":
			out.Nodes = int(in.Int())
		case "Managers":
			out.Managers = int(in.Int())
		case "Cluster":
			if in.IsNull() {
				in.Skip()
				out.Cluster = nil
			} else {
				if out.Cluster == nil {
					out.Cluster = new(swarm.ClusterInfo)
				}
				easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm3(in, &*out.Cluster)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm1(out *jwriter.Writer, in swarm.Info) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"NodeID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NodeID))
	}
	{
		const prefix string = ",\"NodeAddr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NodeAddr))
	}
	{
		const prefix string = ",\"LocalNodeState\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LocalNodeState))
	}
	{
		const prefix string = ",\"ControlAvailable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ControlAvailable))
	}
	{
		const prefix string = ",\"Error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Error))
	}
	{
		const prefix string = ",\"RemoteManagers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.RemoteManagers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v61, v62 := range in.RemoteManagers {
				if v61 > 0 {
					out.RawByte(',')
				}
				easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm2(out, v62)
			}
			out.RawByte(']')
		}
	}
	if in.Nodes != 0 {
		const prefix string = ",\"Nodes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Nodes))
	}
	if in.Managers != 0 {
		const prefix string = ",\"Managers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Managers))
	}
	if in.Cluster != nil {
		const prefix string = ",\"Cluster\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm3(out, *in.Cluster)
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm3(in *jlexer.Lexer, out *swarm.ClusterInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = string(in.String())
		case "Spec":
			easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm4(in, &out.Spec)
		case "TLSInfo":
			easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm5(in, &out.TLSInfo)
		case "RootRotationInProgress":
			out.RootRotationInProgress = bool(in.Bool())
		case "Version":
			easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm6(in, &out.Version)
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm3(out *jwriter.Writer, in swarm.ClusterInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"Spec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm4(out, in.Spec)
	}
	{
		const prefix string = ",\"TLSInfo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm5(out, in.TLSInfo)
	}
	{
		const prefix string = ",\"RootRotationInProgress\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.RootRotationInProgress))
	}
	if true {
		const prefix string = ",\"Version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm6(out, in.Version)
	}
	if true {
		const prefix string = ",\"CreatedAt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"UpdatedAt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm6(in *jlexer.Lexer, out *swarm.Version) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Index":
			out.Index = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm6(out *jwriter.Writer, in swarm.Version) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Index != 0 {
		const prefix string = ",\"Index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Index))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm5(in *jlexer.Lexer, out *swarm.TLSInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TrustRoot":
			out.TrustRoot = string(in.String())
		case "CertIssuerSubject":
			if in.IsNull() {
				in.Skip()
				out.CertIssuerSubject = nil
			} else {
				out.CertIssuerSubject = in.Bytes()
			}
		case "CertIssuerPublicKey":
			if in.IsNull() {
				in.Skip()
				out.CertIssuerPublicKey = nil
			} else {
				out.CertIssuerPublicKey = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm5(out *jwriter.Writer, in swarm.TLSInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TrustRoot != "" {
		const prefix string = ",\"TrustRoot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TrustRoot))
	}
	if len(in.CertIssuerSubject) != 0 {
		const prefix string = ",\"CertIssuerSubject\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.CertIssuerSubject)
	}
	if len(in.CertIssuerPublicKey) != 0 {
		const prefix string = ",\"CertIssuerPublicKey\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.CertIssuerPublicKey)
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm4(in *jlexer.Lexer, out *swarm.Spec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Orchestration":
			easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm7(in, &out.Orchestration)
		case "Raft":
			easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm8(in, &out.Raft)
		case "Dispatcher":
			easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm9(in, &out.Dispatcher)
		case "CAConfig":
			easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm10(in, &out.CAConfig)
		case "TaskDefaults":
			easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm11(in, &out.TaskDefaults)
		case "EncryptionConfig":
			easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm12(in, &out.EncryptionConfig)
		case "Name":
			out.Name = string(in.String())
		case "Labels":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Labels = make(map[string]string)
				} else {
					out.Labels = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v69 string
					v69 = string(in.String())
					(out.Labels)[key] = v69
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm4(out *jwriter.Writer, in swarm.Spec) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"Orchestration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm7(out, in.Orchestration)
	}
	if true {
		const prefix string = ",\"Raft\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm8(out, in.Raft)
	}
	if true {
		const prefix string = ",\"Dispatcher\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm9(out, in.Dispatcher)
	}
	if true {
		const prefix string = ",\"CAConfig\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm10(out, in.CAConfig)
	}
	if true {
		const prefix string = ",\"TaskDefaults\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm11(out, in.TaskDefaults)
	}
	if true {
		const prefix string = ",\"EncryptionConfig\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm12(out, in.EncryptionConfig)
	}
	if in.Name != "" {
		const prefix string = ",\"Name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Labels\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Labels == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v70First := true
			for v70Name, v70Value := range in.Labels {
				if v70First {
					v70First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v70Name))
				out.RawByte(':')
				out.String(string(v70Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm12(in *jlexer.Lexer, out *swarm.EncryptionConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "AutoLockManagers":
			out.AutoLockManagers = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm12(out *jwriter.Writer, in swarm.EncryptionConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"AutoLockManagers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.AutoLockManagers))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm11(in *jlexer.Lexer, out *swarm.TaskDefaults) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "LogDriver":
			if in.IsNull() {
				in.Skip()
				out.LogDriver = nil
			} else {
				if out.LogDriver == nil {
					out.LogDriver = new(swarm.Driver)
				}
				easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm13(in, &*out.LogDriver)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm11(out *jwriter.Writer, in swarm.TaskDefaults) {
	out.RawByte('{')
	first := true
	_ = first
	if in.LogDriver != nil {
		const prefix string = ",\"LogDriver\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm13(out, *in.LogDriver)
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm13(in *jlexer.Lexer, out *swarm.Driver) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "Options":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Options = make(map[string]string)
				} else {
					out.Options = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v71 string
					v71 = string(in.String())
					(out.Options)[key] = v71
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm13(out *jwriter.Writer, in swarm.Driver) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"Name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if len(in.Options) != 0 {
		const prefix string = ",\"Options\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v72First := true
			for v72Name, v72Value := range in.Options {
				if v72First {
					v72First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v72Name))
				out.RawByte(':')
				out.String(string(v72Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm10(in *jlexer.Lexer, out *swarm.CAConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "NodeCertExpiry":
			out.NodeCertExpiry = time.Duration(in.Int64())
		case "ExternalCAs":
			if in.IsNull() {
				in.Skip()
				out.ExternalCAs = nil
			} else {
				in.Delim('[')
				if out.ExternalCAs == nil {
					if !in.IsDelim(']') {
						out.ExternalCAs = make([]*swarm.ExternalCA, 0, 8)
					} else {
						out.ExternalCAs = []*swarm.ExternalCA{}
					}
				} else {
					out.ExternalCAs = (out.ExternalCAs)[:0]
				}
				for !in.IsDelim(']') {
					var v73 *swarm.ExternalCA
					if in.IsNull() {
						in.Skip()
						v73 = nil
					} else {
						if v73 == nil {
							v73 = new(swarm.ExternalCA)
						}
						easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm14(in, &*v73)
					}
					out.ExternalCAs = append(out.ExternalCAs, v73)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "SigningCACert":
			out.SigningCACert = string(in.String())
		case "SigningCAKey":
			out.SigningCAKey = string(in.String())
		case "ForceRotate":
			out.ForceRotate = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm10(out *jwriter.Writer, in swarm.CAConfig) {
	out.RawByte('{')
	first := true
	_ = first
	if in.NodeCertExpiry != 0 {
		const prefix string = ",\"NodeCertExpiry\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.NodeCertExpiry))
	}
	if len(in.ExternalCAs) != 0 {
		const prefix string = ",\"ExternalCAs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v74, v75 := range in.ExternalCAs {
				if v74 > 0 {
					out.RawByte(',')
				}
				if v75 == nil {
					out.RawString("null")
				} else {
					easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm14(out, *v75)
				}
			}
			out.RawByte(']')
		}
	}
	if in.SigningCACert != "" {
		const prefix string = ",\"SigningCACert\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SigningCACert))
	}
	if in.SigningCAKey != "" {
		const prefix string = ",\"SigningCAKey\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SigningCAKey))
	}
	if in.ForceRotate != 0 {
		const prefix string = ",\"ForceRotate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.ForceRotate))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm14(in *jlexer.Lexer, out *swarm.ExternalCA) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Protocol":
			out.Protocol = swarm.ExternalCAProtocol(in.String())
		case "URL":
			out.URL = string(in.String())
		case "Options":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Options = make(map[string]string)
				} else {
					out.Options = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v76 string
					v76 = string(in.String())
					(out.Options)[key] = v76
					in.WantComma()
				}
				in.Delim('}')
			}
		case "CACert":
			out.CACert = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm14(out *jwriter.Writer, in swarm.ExternalCA) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Protocol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Protocol))
	}
	{
		const prefix string = ",\"URL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.URL))
	}
	if len(in.Options) != 0 {
		const prefix string = ",\"Options\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v77First := true
			for v77Name, v77Value := range in.Options {
				if v77First {
					v77First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v77Name))
				out.RawByte(':')
				out.String(string(v77Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"CACert\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CACert))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm9(in *jlexer.Lexer, out *swarm.DispatcherConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "HeartbeatPeriod":
			out.HeartbeatPeriod = time.Duration(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm9(out *jwriter.Writer, in swarm.DispatcherConfig) {
	out.RawByte('{')
	first := true
	_ = first
	if in.HeartbeatPeriod != 0 {
		const prefix string = ",\"HeartbeatPeriod\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.HeartbeatPeriod))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm8(in *jlexer.Lexer, out *swarm.RaftConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SnapshotInterval":
			out.SnapshotInterval = uint64(in.Uint64())
		case "KeepOldSnapshots":
			if in.IsNull() {
				in.Skip()
				out.KeepOldSnapshots = nil
			} else {
				if out.KeepOldSnapshots == nil {
					out.KeepOldSnapshots = new(uint64)
				}
				*out.KeepOldSnapshots = uint64(in.Uint64())
			}
		case "LogEntriesForSlowFollowers":
			out.LogEntriesForSlowFollowers = uint64(in.Uint64())
		case "ElectionTick":
			out.ElectionTick = int(in.Int())
		case "HeartbeatTick":
			out.HeartbeatTick = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm8(out *jwriter.Writer, in swarm.RaftConfig) {
	out.RawByte('{')
	first := true
	_ = first
	if in.SnapshotInterval != 0 {
		const prefix string = ",\"SnapshotInterval\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.SnapshotInterval))
	}
	if in.KeepOldSnapshots != nil {
		const prefix string = ",\"KeepOldSnapshots\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(*in.KeepOldSnapshots))
	}
	if in.LogEntriesForSlowFollowers != 0 {
		const prefix string = ",\"LogEntriesForSlowFollowers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.LogEntriesForSlowFollowers))
	}
	{
		const prefix string = ",\"ElectionTick\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ElectionTick))
	}
	{
		const prefix string = ",\"HeartbeatTick\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.HeartbeatTick))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm7(in *jlexer.Lexer, out *swarm.OrchestrationConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TaskHistoryRetentionLimit":
			if in.IsNull() {
				in.Skip()
				out.TaskHistoryRetentionLimit = nil
			} else {
				if out.TaskHistoryRetentionLimit == nil {
					out.TaskHistoryRetentionLimit = new(int64)
				}
				*out.TaskHistoryRetentionLimit = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm7(out *jwriter.Writer, in swarm.OrchestrationConfig) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TaskHistoryRetentionLimit != nil {
		const prefix string = ",\"TaskHistoryRetentionLimit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.TaskHistoryRetentionLimit))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm2(in *jlexer.Lexer, out *swarm.Peer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "NodeID":
			out.NodeID = string(in.String())
		case "Addr":
			out.Addr = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm2(out *jwriter.Writer, in swarm.Peer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"NodeID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NodeID))
	}
	{
		const prefix string = ",\"Addr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Addr))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypes4(in *jlexer.Lexer, out *types.Runtime) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "path":
			out.Path = string(in.String())
		case "runtimeArgs":
			if in.IsNull() {
				in.Skip()
				out.Args = nil
			} else {
				in.Delim('[')
				if out.Args == nil {
					if !in.IsDelim(']') {
						out.Args = make([]string, 0, 4)
					} else {
						out.Args = []string{}
					}
				} else {
					out.Args = (out.Args)[:0]
				}
				for !in.IsDelim(']') {
					var v78 string
					v78 = string(in.String())
					out.Args = append(out.Args, v78)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypes4(out *jwriter.Writer, in types.Runtime) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Path))
	}
	if len(in.Args) != 0 {
		const prefix string = ",\"runtimeArgs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v79, v80 := range in.Args {
				if v79 > 0 {
					out.RawByte(',')
				}
				out.String(string(v80))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm(in *jlexer.Lexer, out *swarm.GenericResource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "NamedResourceSpec":
			if in.IsNull() {
				in.Skip()
				out.NamedResourceSpec = nil
			} else {
				if out.NamedResourceSpec == nil {
					out.NamedResourceSpec = new(swarm.NamedGenericResource)
				}
				easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm15(in, &*out.NamedResourceSpec)
			}
		case "DiscreteResourceSpec":
			if in.IsNull() {
				in.Skip()
				out.DiscreteResourceSpec = nil
			} else {
				if out.DiscreteResourceSpec == nil {
					out.DiscreteResourceSpec = new(swarm.DiscreteGenericResource)
				}
				easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm16(in, &*out.DiscreteResourceSpec)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm(out *jwriter.Writer, in swarm.GenericResource) {
	out.RawByte('{')
	first := true
	_ = first
	if in.NamedResourceSpec != nil {
		const prefix string = ",\"NamedResourceSpec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm15(out, *in.NamedResourceSpec)
	}
	if in.DiscreteResourceSpec != nil {
		const prefix string = ",\"DiscreteResourceSpec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm16(out, *in.DiscreteResourceSpec)
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm16(in *jlexer.Lexer, out *swarm.DiscreteGenericResource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Kind":
			out.Kind = string(in.String())
		case "Value":
			out.Value = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm16(out *jwriter.Writer, in swarm.DiscreteGenericResource) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Kind != "" {
		const prefix string = ",\"Kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Kind))
	}
	if in.Value != 0 {
		const prefix string = ",\"Value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Value))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm15(in *jlexer.Lexer, out *swarm.NamedGenericResource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Kind":
			out.Kind = string(in.String())
		case "Value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesSwarm15(out *jwriter.Writer, in swarm.NamedGenericResource) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Kind != "" {
		const prefix string = ",\"Kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Kind))
	}
	if in.Value != "" {
		const prefix string = ",\"Value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesRegistry(in *jlexer.Lexer, out *registry.ServiceConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "AllowNondistributableArtifactsCIDRs":
			if in.IsNull() {
				in.Skip()
				out.AllowNondistributableArtifactsCIDRs = nil
			} else {
				in.Delim('[')
				if out.AllowNondistributableArtifactsCIDRs == nil {
					if !in.IsDelim(']') {
						out.AllowNondistributableArtifactsCIDRs = make([]*registry.NetIPNet, 0, 8)
					} else {
						out.AllowNondistributableArtifactsCIDRs = []*registry.NetIPNet{}
					}
				} else {
					out.AllowNondistributableArtifactsCIDRs = (out.AllowNondistributableArtifactsCIDRs)[:0]
				}
				for !in.IsDelim(']') {
					var v81 *registry.NetIPNet
					if in.IsNull() {
						in.Skip()
						v81 = nil
					} else {
						if v81 == nil {
							v81 = new(registry.NetIPNet)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v81).UnmarshalJSON(data))
						}
					}
					out.AllowNondistributableArtifactsCIDRs = append(out.AllowNondistributableArtifactsCIDRs, v81)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "AllowNondistributableArtifactsHostnames":
			if in.IsNull() {
				in.Skip()
				out.AllowNondistributableArtifactsHostnames = nil
			} else {
				in.Delim('[')
				if out.AllowNondistributableArtifactsHostnames == nil {
					if !in.IsDelim(']') {
						out.AllowNondistributableArtifactsHostnames = make([]string, 0, 4)
					} else {
						out.AllowNondistributableArtifactsHostnames = []string{}
					}
				} else {
					out.AllowNondistributableArtifactsHostnames = (out.AllowNondistributableArtifactsHostnames)[:0]
				}
				for !in.IsDelim(']') {
					var v82 string
					v82 = string(in.String())
					out.AllowNondistributableArtifactsHostnames = append(out.AllowNondistributableArtifactsHostnames, v82)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "InsecureRegistryCIDRs":
			if in.IsNull() {
				in.Skip()
				out.InsecureRegistryCIDRs = nil
			} else {
				in.Delim('[')
				if out.InsecureRegistryCIDRs == nil {
					if !in.IsDelim(']') {
						out.InsecureRegistryCIDRs = make([]*registry.NetIPNet, 0, 8)
					} else {
						out.InsecureRegistryCIDRs = []*registry.NetIPNet{}
					}
				} else {
					out.InsecureRegistryCIDRs = (out.InsecureRegistryCIDRs)[:0]
				}
				for !in.IsDelim(']') {
					var v83 *registry.NetIPNet
					if in.IsNull() {
						in.Skip()
						v83 = nil
					} else {
						if v83 == nil {
							v83 = new(registry.NetIPNet)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v83).UnmarshalJSON(data))
						}
					}
					out.InsecureRegistryCIDRs = append(out.InsecureRegistryCIDRs, v83)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "IndexConfigs":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.IndexConfigs = make(map[string]*registry.IndexInfo)
				} else {
					out.IndexConfigs = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v84 *registry.IndexInfo
					if in.IsNull() {
						in.Skip()
						v84 = nil
					} else {
						if v84 == nil {
							v84 = new(registry.IndexInfo)
						}
						easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesRegistry1(in, &*v84)
					}
					(out.IndexConfigs)[key] = v84
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Mirrors":
			if in.IsNull() {
				in.Skip()
				out.Mirrors = nil
			} else {
				in.Delim('[')
				if out.Mirrors == nil {
					if !in.IsDelim(']') {
						out.Mirrors = make([]string, 0, 4)
					} else {
						out.Mirrors = []string{}
					}
				} else {
					out.Mirrors = (out.Mirrors)[:0]
				}
				for !in.IsDelim(']') {
					var v85 string
					v85 = string(in.String())
					out.Mirrors = append(out.Mirrors, v85)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesRegistry(out *jwriter.Writer, in registry.ServiceConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"AllowNondistributableArtifactsCIDRs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.AllowNondistributableArtifactsCIDRs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v86, v87 := range in.AllowNondistributableArtifactsCIDRs {
				if v86 > 0 {
					out.RawByte(',')
				}
				if v87 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v87).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"AllowNondistributableArtifactsHostnames\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.AllowNondistributableArtifactsHostnames == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v88, v89 := range in.AllowNondistributableArtifactsHostnames {
				if v88 > 0 {
					out.RawByte(',')
				}
				out.String(string(v89))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"InsecureRegistryCIDRs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.InsecureRegistryCIDRs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v90, v91 := range in.InsecureRegistryCIDRs {
				if v90 > 0 {
					out.RawByte(',')
				}
				if v91 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v91).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"IndexConfigs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.IndexConfigs == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v92First := true
			for v92Name, v92Value := range in.IndexConfigs {
				if v92First {
					v92First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v92Name))
				out.RawByte(':')
				if v92Value == nil {
					out.RawString("null")
				} else {
					easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesRegistry1(out, *v92Value)
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"Mirrors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Mirrors == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v93, v94 := range in.Mirrors {
				if v93 > 0 {
					out.RawByte(',')
				}
				out.String(string(v94))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesRegistry1(in *jlexer.Lexer, out *registry.IndexInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "Mirrors":
			if in.IsNull() {
				in.Skip()
				out.Mirrors = nil
			} else {
				in.Delim('[')
				if out.Mirrors == nil {
					if !in.IsDelim(']') {
						out.Mirrors = make([]string, 0, 4)
					} else {
						out.Mirrors = []string{}
					}
				} else {
					out.Mirrors = (out.Mirrors)[:0]
				}
				for !in.IsDelim(']') {
					var v95 string
					v95 = string(in.String())
					out.Mirrors = append(out.Mirrors, v95)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Secure":
			out.Secure = bool(in.Bool())
		case "Official":
			out.Official = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypesRegistry1(out *jwriter.Writer, in registry.IndexInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Mirrors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Mirrors == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v96, v97 := range in.Mirrors {
				if v96 > 0 {
					out.RawByte(',')
				}
				out.String(string(v97))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Secure\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Secure))
	}
	{
		const prefix string = ",\"Official\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Official))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypes3(in *jlexer.Lexer, out *types.PluginsInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Volume":
			if in.IsNull() {
				in.Skip()
				out.Volume = nil
			} else {
				in.Delim('[')
				if out.Volume == nil {
					if !in.IsDelim(']') {
						out.Volume = make([]string, 0, 4)
					} else {
						out.Volume = []string{}
					}
				} else {
					out.Volume = (out.Volume)[:0]
				}
				for !in.IsDelim(']') {
					var v98 string
					v98 = string(in.String())
					out.Volume = append(out.Volume, v98)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Network":
			if in.IsNull() {
				in.Skip()
				out.Network = nil
			} else {
				in.Delim('[')
				if out.Network == nil {
					if !in.IsDelim(']') {
						out.Network = make([]string, 0, 4)
					} else {
						out.Network = []string{}
					}
				} else {
					out.Network = (out.Network)[:0]
				}
				for !in.IsDelim(']') {
					var v99 string
					v99 = string(in.String())
					out.Network = append(out.Network, v99)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Authorization":
			if in.IsNull() {
				in.Skip()
				out.Authorization = nil
			} else {
				in.Delim('[')
				if out.Authorization == nil {
					if !in.IsDelim(']') {
						out.Authorization = make([]string, 0, 4)
					} else {
						out.Authorization = []string{}
					}
				} else {
					out.Authorization = (out.Authorization)[:0]
				}
				for !in.IsDelim(']') {
					var v100 string
					v100 = string(in.String())
					out.Authorization = append(out.Authorization, v100)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Log":
			if in.IsNull() {
				in.Skip()
				out.Log = nil
			} else {
				in.Delim('[')
				if out.Log == nil {
					if !in.IsDelim(']') {
						out.Log = make([]string, 0, 4)
					} else {
						out.Log = []string{}
					}
				} else {
					out.Log = (out.Log)[:0]
				}
				for !in.IsDelim(']') {
					var v101 string
					v101 = string(in.String())
					out.Log = append(out.Log, v101)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComStackroxRoxVendorGithubComDockerDockerApiTypes3(out *jwriter.Writer, in types.PluginsInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Volume\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Volume == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v102, v103 := range in.Volume {
				if v102 > 0 {
					out.RawByte(',')
				}
				out.String(string(v103))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Network\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Network == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v104, v105 := range in.Network {
				if v104 > 0 {
					out.RawByte(',')
				}
				out.String(string(v105))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Authorization\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Authorization == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v106, v107 := range in.Authorization {
				if v106 > 0 {
					out.RawByte(',')
				}
				out.String(string(v107))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Log\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Log == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v108, v109 := range in.Log {
				if v108 > 0 {
					out.RawByte(',')
				}
				out.String(string(v109))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
//lint:file-ignore SA4006 This is a generated file
