// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackrox/rox/pkg/sac (interfaces: ScopeCheckerCore)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	sac "github.com/stackrox/rox/pkg/sac"
	reflect "reflect"
)

// MockScopeCheckerCore is a mock of ScopeCheckerCore interface
type MockScopeCheckerCore struct {
	ctrl     *gomock.Controller
	recorder *MockScopeCheckerCoreMockRecorder
}

// MockScopeCheckerCoreMockRecorder is the mock recorder for MockScopeCheckerCore
type MockScopeCheckerCoreMockRecorder struct {
	mock *MockScopeCheckerCore
}

// NewMockScopeCheckerCore creates a new mock instance
func NewMockScopeCheckerCore(ctrl *gomock.Controller) *MockScopeCheckerCore {
	mock := &MockScopeCheckerCore{ctrl: ctrl}
	mock.recorder = &MockScopeCheckerCoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockScopeCheckerCore) EXPECT() *MockScopeCheckerCoreMockRecorder {
	return m.recorder
}

// PerformChecks mocks base method
func (m *MockScopeCheckerCore) PerformChecks(arg0 context.Context) error {
	ret := m.ctrl.Call(m, "PerformChecks", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PerformChecks indicates an expected call of PerformChecks
func (mr *MockScopeCheckerCoreMockRecorder) PerformChecks(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PerformChecks", reflect.TypeOf((*MockScopeCheckerCore)(nil).PerformChecks), arg0)
}

// SubScopeChecker mocks base method
func (m *MockScopeCheckerCore) SubScopeChecker(arg0 sac.ScopeKey) sac.ScopeCheckerCore {
	ret := m.ctrl.Call(m, "SubScopeChecker", arg0)
	ret0, _ := ret[0].(sac.ScopeCheckerCore)
	return ret0
}

// SubScopeChecker indicates an expected call of SubScopeChecker
func (mr *MockScopeCheckerCoreMockRecorder) SubScopeChecker(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubScopeChecker", reflect.TypeOf((*MockScopeCheckerCore)(nil).SubScopeChecker), arg0)
}

// TryAllowed mocks base method
func (m *MockScopeCheckerCore) TryAllowed() sac.TryAllowedResult {
	ret := m.ctrl.Call(m, "TryAllowed")
	ret0, _ := ret[0].(sac.TryAllowedResult)
	return ret0
}

// TryAllowed indicates an expected call of TryAllowed
func (mr *MockScopeCheckerCoreMockRecorder) TryAllowed() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryAllowed", reflect.TypeOf((*MockScopeCheckerCore)(nil).TryAllowed))
}
