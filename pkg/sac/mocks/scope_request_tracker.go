// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackrox/rox/pkg/sac (interfaces: ScopeRequestTracker)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	sac "github.com/stackrox/rox/pkg/sac"
	reflect "reflect"
)

// MockScopeRequestTracker is a mock of ScopeRequestTracker interface
type MockScopeRequestTracker struct {
	ctrl     *gomock.Controller
	recorder *MockScopeRequestTrackerMockRecorder
}

// MockScopeRequestTrackerMockRecorder is the mock recorder for MockScopeRequestTracker
type MockScopeRequestTrackerMockRecorder struct {
	mock *MockScopeRequestTracker
}

// NewMockScopeRequestTracker creates a new mock instance
func NewMockScopeRequestTracker(ctrl *gomock.Controller) *MockScopeRequestTracker {
	mock := &MockScopeRequestTracker{ctrl: ctrl}
	mock.recorder = &MockScopeRequestTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockScopeRequestTracker) EXPECT() *MockScopeRequestTrackerMockRecorder {
	return m.recorder
}

// AddRequested mocks base method
func (m *MockScopeRequestTracker) AddRequested(arg0 ...sac.ScopeRequest) {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddRequested", varargs...)
}

// AddRequested indicates an expected call of AddRequested
func (mr *MockScopeRequestTrackerMockRecorder) AddRequested(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRequested", reflect.TypeOf((*MockScopeRequestTracker)(nil).AddRequested), arg0...)
}

// PerformChecks mocks base method
func (m *MockScopeRequestTracker) PerformChecks(arg0 context.Context) error {
	ret := m.ctrl.Call(m, "PerformChecks", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PerformChecks indicates an expected call of PerformChecks
func (mr *MockScopeRequestTrackerMockRecorder) PerformChecks(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PerformChecks", reflect.TypeOf((*MockScopeRequestTracker)(nil).PerformChecks), arg0)
}
