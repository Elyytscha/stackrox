defs: |
  def authForCollector:
    (container(.daemonsets.collector; "collector") | .image | sub("/.*$"; "")) as $collectorRegistry |
      .secrets["secured-cluster-services-collector"].data[".dockerconfigjson"] | @base64d | fromjson | .auths
        | .["https://" + (if ($collectorRegistry == "docker.io") then "index.docker.io/v1/" else $collectorRegistry end)]
        | .auth | @base64d;

  def authForMain:
      (container(.deployments.sensor; "sensor") | .image | sub("/.*$"; "")) as $mainRegistry |
        .secrets["secured-cluster-services-main"].data[".dockerconfigjson"] | @base64d | fromjson | .auths
          | .["https://" + (if ($mainRegistry == "docker.io") then "index.docker.io/v1/" else $mainRegistry end)]
          | .auth | @base64d;

tests:
  - name: without existing legacy secrets
    tests:
      - name: "service accounts do not reference secrets by default"
        expect: |
          .serviceaccounts["sensor"] | .imagePullSecrets | assertThat(. == null)
          .serviceaccounts["collector"] | .imagePullSecrets | assertThat(. == null)
          .serviceaccounts["admission-control"] | .imagePullSecrets | assertThat(. == null)
  - name: "with existing legacy secrets"
    values:
      meta:
        useLookup: false
        useFakeLookup: true
        fakeLookupResources:
          v1/Secret/stackrox:
            data:
              foo: bar
          v1/Secret/stackrox-scanner:
            data:
              foo: bar
          v1/Secret/collector-stackrox:
            data:
              foo: bar
    expect: |
      # Ensure that default/legacy service accounts are always referenced in the correct fashion in the non-error case

      assumeThat(.error == null) | .serviceaccounts["collector"] | .imagePullSecrets[] | select(.name == "stackrox")
      assumeThat(.error == null) | .serviceaccounts["collector"] | .imagePullSecrets[] | select(.name == "collector-stackrox")

      assumeThat(.error == null) | .serviceaccounts["sensor"] | .imagePullSecrets[] | select(.name == "stackrox")
      assumeThat(.error == null) | [.serviceaccounts["sensor"] | .imagePullSecrets[] | select(.name == "collector-stackrox")] | assertThat(length == 0)
      assumeThat(.error == null) | .serviceaccounts["admission-control"] | .imagePullSecrets[] | select(.name == "stackrox")
      assumeThat(.error == null) | [.serviceaccounts["admission-control"] | .imagePullSecrets[] | select(.name == "collector-stackrox")] | assertThat(length == 0)
    tests:
      - name: IPS are referenced in the correct fashion
        values:
          imagePullSecrets:
            username: "adent"
            password: "vogon-poetry"
        expect: |
          .serviceaccounts["collector"] | .imagePullSecrets[] | select(.name == "secured-cluster-services-main")
          .serviceaccounts["collector"] | .imagePullSecrets[] | select(.name == "secured-cluster-services-collector")
          .serviceaccounts["sensor"] | .imagePullSecrets[] | select(.name == "secured-cluster-services-main")
          .serviceaccounts["admission-control"] | .imagePullSecrets[] | select(.name == "secured-cluster-services-main")
      - name: "IPS are not created"
        expect: |
          .secrets?["secured-cluster-services-main"]? | assertThat(. == null)
          .secrets?["secured-cluster-services-collector"]? | assertThat(. == null)
        tests:
          - name: "with default settings of allowNone=true"
          - name: "with allowNone=false"
            set:
              imagePullSecrets.allowNone: false
            tests:
              - name: "should fail with no extra secrets"
                expectError: true
              - name: "should succeed with useExisting"
                expect: |
                  .serviceaccounts[] | [.imagePullSecrets[] | select(.name == "extra-secret1" or .name == "extra-secret2")]
                    | assertThat(length == 2)
                tests:
                  - name: as JSON list
                    set:
                      imagePullSecrets.useExisting:
                        ["extra-secret1", "extra-secret2"]

                  - name: as semicolon-delimited list string
                    set:
                      imagePullSecrets.useExisting: "extra-secret1; extra-secret2 "

      - name: "IPS are created"
        set:
          imagePullSecrets.allowNone: false

        expect: |
          .secrets["secured-cluster-services-main"] | assertThat(. != null)
          .secrets["secured-cluster-services-collector"] | assertThat(. != null)
          .serviceaccounts[] | [.imagePullSecrets[] | select(.name == "secured-cluster-services-main")] | assertThat(length == 1)
          .serviceaccounts.collector | [.imagePullSecrets[] | select(.name == "secured-cluster-services-collector")]
            | assertThat(length == 1)
        tests:
          - name: "with username and password specified"
            values:
              imagePullSecrets:
                username: foo
                password: bar
            expect: |
              authForMain | assertThat(. == "foo:bar")
              authForCollector | assertThat(. == "foo:bar")
            tests:
              - name: "with default registry"
              - name: "with custom default registry"
                set:
                  image.registry: my.registry.io
              - name: "with custom main registry"
                set:
                  image.main.registry: my.registry.io
              - name: "with custom collector registry"
                set:
                  image.collector.registry: my.collector-registry.io
              - name: "with docker registry"
                set:
                  image.registry: docker.io/stackrox
          - name: "with empty password"
            values:
              imagePullSecrets:
                username: foo
                password: ""
            expect: |
              authForMain | assertThat(. == "foo:")
              authForCollector | assertThat(. == "foo:")

      - name: "default IPS are referenced in service accounts"
        expect: |
          .serviceaccounts["collector"] | .imagePullSecrets[] | select(.name == "stackrox")
          .serviceaccounts["collector"] | .imagePullSecrets[] | select(.name == "collector-stackrox")

          .serviceaccounts["sensor"] | .imagePullSecrets[] | select(.name == "stackrox")
          [.serviceaccounts["sensor"] | .imagePullSecrets[] | select(.name == "collector-stackrox")] | assertThat(length == 0)
          .serviceaccounts["admission-control"] | .imagePullSecrets[] | select(.name == "stackrox")
          [.serviceaccounts["admission-control"] | .imagePullSecrets[] | select(.name == "collector-stackrox")] | assertThat(length == 0)

      - name: "additional IPS are referenced in service accounts"
        values:
          imagePullSecrets:
            useExisting: custom-ips
        expect: |
          .serviceaccounts["collector"] | .imagePullSecrets[] | select(.name == "custom-ips")
          .serviceaccounts["sensor"] | .imagePullSecrets[] | select(.name == "custom-ips")
          .serviceaccounts["admission-control"] | .imagePullSecrets[] | select(.name == "custom-ips")
