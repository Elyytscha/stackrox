// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackrox/rox/pkg/orchestrators (interfaces: Orchestrator)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	orchestrators "github.com/stackrox/rox/pkg/orchestrators"
	reflect "reflect"
	time "time"
)

// MockOrchestrator is a mock of Orchestrator interface
type MockOrchestrator struct {
	ctrl     *gomock.Controller
	recorder *MockOrchestratorMockRecorder
}

// MockOrchestratorMockRecorder is the mock recorder for MockOrchestrator
type MockOrchestratorMockRecorder struct {
	mock *MockOrchestrator
}

// NewMockOrchestrator creates a new mock instance
func NewMockOrchestrator(ctrl *gomock.Controller) *MockOrchestrator {
	mock := &MockOrchestrator{ctrl: ctrl}
	mock.recorder = &MockOrchestratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOrchestrator) EXPECT() *MockOrchestratorMockRecorder {
	return m.recorder
}

// CleanUp mocks base method
func (m *MockOrchestrator) CleanUp(arg0 bool) error {
	ret := m.ctrl.Call(m, "CleanUp", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanUp indicates an expected call of CleanUp
func (mr *MockOrchestratorMockRecorder) CleanUp(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanUp", reflect.TypeOf((*MockOrchestrator)(nil).CleanUp), arg0)
}

// Kill mocks base method
func (m *MockOrchestrator) Kill(arg0 string) error {
	ret := m.ctrl.Call(m, "Kill", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Kill indicates an expected call of Kill
func (mr *MockOrchestratorMockRecorder) Kill(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kill", reflect.TypeOf((*MockOrchestrator)(nil).Kill), arg0)
}

// Launch mocks base method
func (m *MockOrchestrator) Launch(arg0 orchestrators.SystemService) (string, error) {
	ret := m.ctrl.Call(m, "Launch", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Launch indicates an expected call of Launch
func (mr *MockOrchestratorMockRecorder) Launch(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Launch", reflect.TypeOf((*MockOrchestrator)(nil).Launch), arg0)
}

// WaitForCompletion mocks base method
func (m *MockOrchestrator) WaitForCompletion(arg0 string, arg1 time.Duration) error {
	ret := m.ctrl.Call(m, "WaitForCompletion", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForCompletion indicates an expected call of WaitForCompletion
func (mr *MockOrchestratorMockRecorder) WaitForCompletion(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForCompletion", reflect.TypeOf((*MockOrchestrator)(nil).WaitForCompletion), arg0, arg1)
}
