// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	v1 "github.com/stackrox/rox/generated/api/v1"
	storage "github.com/stackrox/rox/generated/storage"
	search "github.com/stackrox/rox/pkg/search"
	searchbasedpolicies "github.com/stackrox/rox/pkg/searchbasedpolicies"
	reflect "reflect"
)

// MockPolicyQueryBuilder is a mock of PolicyQueryBuilder interface
type MockPolicyQueryBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockPolicyQueryBuilderMockRecorder
}

// MockPolicyQueryBuilderMockRecorder is the mock recorder for MockPolicyQueryBuilder
type MockPolicyQueryBuilderMockRecorder struct {
	mock *MockPolicyQueryBuilder
}

// NewMockPolicyQueryBuilder creates a new mock instance
func NewMockPolicyQueryBuilder(ctrl *gomock.Controller) *MockPolicyQueryBuilder {
	mock := &MockPolicyQueryBuilder{ctrl: ctrl}
	mock.recorder = &MockPolicyQueryBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPolicyQueryBuilder) EXPECT() *MockPolicyQueryBuilderMockRecorder {
	return m.recorder
}

// Query mocks base method
func (m *MockPolicyQueryBuilder) Query(arg0 *storage.PolicyFields, arg1 map[search.FieldLabel]*v1.SearchField) (*v1.Query, searchbasedpolicies.ViolationPrinter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", arg0, arg1)
	ret0, _ := ret[0].(*v1.Query)
	ret1, _ := ret[1].(searchbasedpolicies.ViolationPrinter)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Query indicates an expected call of Query
func (mr *MockPolicyQueryBuilderMockRecorder) Query(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockPolicyQueryBuilder)(nil).Query), arg0, arg1)
}

// Name mocks base method
func (m *MockPolicyQueryBuilder) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockPolicyQueryBuilderMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockPolicyQueryBuilder)(nil).Name))
}

// MockProcessIndicatorGetter is a mock of ProcessIndicatorGetter interface
type MockProcessIndicatorGetter struct {
	ctrl     *gomock.Controller
	recorder *MockProcessIndicatorGetterMockRecorder
}

// MockProcessIndicatorGetterMockRecorder is the mock recorder for MockProcessIndicatorGetter
type MockProcessIndicatorGetterMockRecorder struct {
	mock *MockProcessIndicatorGetter
}

// NewMockProcessIndicatorGetter creates a new mock instance
func NewMockProcessIndicatorGetter(ctrl *gomock.Controller) *MockProcessIndicatorGetter {
	mock := &MockProcessIndicatorGetter{ctrl: ctrl}
	mock.recorder = &MockProcessIndicatorGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProcessIndicatorGetter) EXPECT() *MockProcessIndicatorGetterMockRecorder {
	return m.recorder
}

// GetProcessIndicator mocks base method
func (m *MockProcessIndicatorGetter) GetProcessIndicator(ctx context.Context, id string) (*storage.ProcessIndicator, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProcessIndicator", ctx, id)
	ret0, _ := ret[0].(*storage.ProcessIndicator)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProcessIndicator indicates an expected call of GetProcessIndicator
func (mr *MockProcessIndicatorGetterMockRecorder) GetProcessIndicator(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcessIndicator", reflect.TypeOf((*MockProcessIndicatorGetter)(nil).GetProcessIndicator), ctx, id)
}

// MockMatcher is a mock of Matcher interface
type MockMatcher struct {
	ctrl     *gomock.Controller
	recorder *MockMatcherMockRecorder
}

// MockMatcherMockRecorder is the mock recorder for MockMatcher
type MockMatcherMockRecorder struct {
	mock *MockMatcher
}

// NewMockMatcher creates a new mock instance
func NewMockMatcher(ctrl *gomock.Controller) *MockMatcher {
	mock := &MockMatcher{ctrl: ctrl}
	mock.recorder = &MockMatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMatcher) EXPECT() *MockMatcherMockRecorder {
	return m.recorder
}

// Match mocks base method
func (m *MockMatcher) Match(ctx context.Context, searcher search.Searcher) (map[string]searchbasedpolicies.Violations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Match", ctx, searcher)
	ret0, _ := ret[0].(map[string]searchbasedpolicies.Violations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Match indicates an expected call of Match
func (mr *MockMatcherMockRecorder) Match(ctx, searcher interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Match", reflect.TypeOf((*MockMatcher)(nil).Match), ctx, searcher)
}

// MatchOne mocks base method
func (m *MockMatcher) MatchOne(ctx context.Context, deployment *storage.Deployment, images ...*storage.Image) (searchbasedpolicies.Violations, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, deployment}
	for _, a := range images {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MatchOne", varargs...)
	ret0, _ := ret[0].(searchbasedpolicies.Violations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchOne indicates an expected call of MatchOne
func (mr *MockMatcherMockRecorder) MatchOne(ctx, deployment interface{}, images ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, deployment}, images...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchOne", reflect.TypeOf((*MockMatcher)(nil).MatchOne), varargs...)
}

// MatchMany mocks base method
func (m *MockMatcher) MatchMany(ctx context.Context, searcher search.Searcher, ids ...string) (map[string]searchbasedpolicies.Violations, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, searcher}
	for _, a := range ids {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MatchMany", varargs...)
	ret0, _ := ret[0].(map[string]searchbasedpolicies.Violations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchMany indicates an expected call of MatchMany
func (mr *MockMatcherMockRecorder) MatchMany(ctx, searcher interface{}, ids ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, searcher}, ids...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchMany", reflect.TypeOf((*MockMatcher)(nil).MatchMany), varargs...)
}
