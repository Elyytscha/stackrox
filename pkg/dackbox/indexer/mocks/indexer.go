// Code generated by MockGen. DO NOT EDIT.
// Source: indexer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	proto "github.com/gogo/protobuf/proto"
	gomock "github.com/golang/mock/gomock"
	indexer "github.com/stackrox/rox/pkg/dackbox/indexer"
	reflect "reflect"
)

// MockIndexer is a mock of Indexer interface
type MockIndexer struct {
	ctrl     *gomock.Controller
	recorder *MockIndexerMockRecorder
}

// MockIndexerMockRecorder is the mock recorder for MockIndexer
type MockIndexerMockRecorder struct {
	mock *MockIndexer
}

// NewMockIndexer creates a new mock instance
func NewMockIndexer(ctrl *gomock.Controller) *MockIndexer {
	mock := &MockIndexer{ctrl: ctrl}
	mock.recorder = &MockIndexerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIndexer) EXPECT() *MockIndexerMockRecorder {
	return m.recorder
}

// Index mocks base method
func (m *MockIndexer) Index(key []byte, msg proto.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index", key, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Index indicates an expected call of Index
func (mr *MockIndexerMockRecorder) Index(key, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockIndexer)(nil).Index), key, msg)
}

// Delete mocks base method
func (m *MockIndexer) Delete(key []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockIndexerMockRecorder) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIndexer)(nil).Delete), key)
}

// MockIndexRegistry is a mock of IndexRegistry interface
type MockIndexRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockIndexRegistryMockRecorder
}

// MockIndexRegistryMockRecorder is the mock recorder for MockIndexRegistry
type MockIndexRegistryMockRecorder struct {
	mock *MockIndexRegistry
}

// NewMockIndexRegistry creates a new mock instance
func NewMockIndexRegistry(ctrl *gomock.Controller) *MockIndexRegistry {
	mock := &MockIndexRegistry{ctrl: ctrl}
	mock.recorder = &MockIndexRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIndexRegistry) EXPECT() *MockIndexRegistryMockRecorder {
	return m.recorder
}

// RegisterIndex mocks base method
func (m *MockIndexRegistry) RegisterIndex(prefix []byte, index indexer.Indexer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterIndex", prefix, index)
}

// RegisterIndex indicates an expected call of RegisterIndex
func (mr *MockIndexRegistryMockRecorder) RegisterIndex(prefix, index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterIndex", reflect.TypeOf((*MockIndexRegistry)(nil).RegisterIndex), prefix, index)
}

// Matches mocks base method
func (m *MockIndexRegistry) Matches(key []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Matches", key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Matches indicates an expected call of Matches
func (mr *MockIndexRegistryMockRecorder) Matches(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Matches", reflect.TypeOf((*MockIndexRegistry)(nil).Matches), key)
}

// Index mocks base method
func (m *MockIndexRegistry) Index(key []byte, msg proto.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index", key, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Index indicates an expected call of Index
func (mr *MockIndexRegistryMockRecorder) Index(key, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockIndexRegistry)(nil).Index), key, msg)
}

// Delete mocks base method
func (m *MockIndexRegistry) Delete(key []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockIndexRegistryMockRecorder) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIndexRegistry)(nil).Delete), key)
}
