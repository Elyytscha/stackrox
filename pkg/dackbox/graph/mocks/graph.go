// Code generated by MockGen. DO NOT EDIT.
// Source: graph.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRGraph is a mock of RGraph interface
type MockRGraph struct {
	ctrl     *gomock.Controller
	recorder *MockRGraphMockRecorder
}

// MockRGraphMockRecorder is the mock recorder for MockRGraph
type MockRGraphMockRecorder struct {
	mock *MockRGraph
}

// NewMockRGraph creates a new mock instance
func NewMockRGraph(ctrl *gomock.Controller) *MockRGraph {
	mock := &MockRGraph{ctrl: ctrl}
	mock.recorder = &MockRGraphMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRGraph) EXPECT() *MockRGraphMockRecorder {
	return m.recorder
}

// HasRefsFrom mocks base method
func (m *MockRGraph) HasRefsFrom(from []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasRefsFrom", from)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasRefsFrom indicates an expected call of HasRefsFrom
func (mr *MockRGraphMockRecorder) HasRefsFrom(from interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasRefsFrom", reflect.TypeOf((*MockRGraph)(nil).HasRefsFrom), from)
}

// HasRefsTo mocks base method
func (m *MockRGraph) HasRefsTo(to []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasRefsTo", to)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasRefsTo indicates an expected call of HasRefsTo
func (mr *MockRGraphMockRecorder) HasRefsTo(to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasRefsTo", reflect.TypeOf((*MockRGraph)(nil).HasRefsTo), to)
}

// CountRefsFrom mocks base method
func (m *MockRGraph) CountRefsFrom(from []byte) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountRefsFrom", from)
	ret0, _ := ret[0].(int)
	return ret0
}

// CountRefsFrom indicates an expected call of CountRefsFrom
func (mr *MockRGraphMockRecorder) CountRefsFrom(from interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountRefsFrom", reflect.TypeOf((*MockRGraph)(nil).CountRefsFrom), from)
}

// CountRefsTo mocks base method
func (m *MockRGraph) CountRefsTo(to []byte) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountRefsTo", to)
	ret0, _ := ret[0].(int)
	return ret0
}

// CountRefsTo indicates an expected call of CountRefsTo
func (mr *MockRGraphMockRecorder) CountRefsTo(to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountRefsTo", reflect.TypeOf((*MockRGraph)(nil).CountRefsTo), to)
}

// GetRefsFrom mocks base method
func (m *MockRGraph) GetRefsFrom(from []byte) [][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefsFrom", from)
	ret0, _ := ret[0].([][]byte)
	return ret0
}

// GetRefsFrom indicates an expected call of GetRefsFrom
func (mr *MockRGraphMockRecorder) GetRefsFrom(from interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefsFrom", reflect.TypeOf((*MockRGraph)(nil).GetRefsFrom), from)
}

// GetRefsTo mocks base method
func (m *MockRGraph) GetRefsTo(to []byte) [][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefsTo", to)
	ret0, _ := ret[0].([][]byte)
	return ret0
}

// GetRefsTo indicates an expected call of GetRefsTo
func (mr *MockRGraphMockRecorder) GetRefsTo(to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefsTo", reflect.TypeOf((*MockRGraph)(nil).GetRefsTo), to)
}

// MockRWGraph is a mock of RWGraph interface
type MockRWGraph struct {
	ctrl     *gomock.Controller
	recorder *MockRWGraphMockRecorder
}

// MockRWGraphMockRecorder is the mock recorder for MockRWGraph
type MockRWGraphMockRecorder struct {
	mock *MockRWGraph
}

// NewMockRWGraph creates a new mock instance
func NewMockRWGraph(ctrl *gomock.Controller) *MockRWGraph {
	mock := &MockRWGraph{ctrl: ctrl}
	mock.recorder = &MockRWGraphMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRWGraph) EXPECT() *MockRWGraphMockRecorder {
	return m.recorder
}

// HasRefsFrom mocks base method
func (m *MockRWGraph) HasRefsFrom(from []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasRefsFrom", from)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasRefsFrom indicates an expected call of HasRefsFrom
func (mr *MockRWGraphMockRecorder) HasRefsFrom(from interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasRefsFrom", reflect.TypeOf((*MockRWGraph)(nil).HasRefsFrom), from)
}

// HasRefsTo mocks base method
func (m *MockRWGraph) HasRefsTo(to []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasRefsTo", to)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasRefsTo indicates an expected call of HasRefsTo
func (mr *MockRWGraphMockRecorder) HasRefsTo(to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasRefsTo", reflect.TypeOf((*MockRWGraph)(nil).HasRefsTo), to)
}

// CountRefsFrom mocks base method
func (m *MockRWGraph) CountRefsFrom(from []byte) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountRefsFrom", from)
	ret0, _ := ret[0].(int)
	return ret0
}

// CountRefsFrom indicates an expected call of CountRefsFrom
func (mr *MockRWGraphMockRecorder) CountRefsFrom(from interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountRefsFrom", reflect.TypeOf((*MockRWGraph)(nil).CountRefsFrom), from)
}

// CountRefsTo mocks base method
func (m *MockRWGraph) CountRefsTo(to []byte) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountRefsTo", to)
	ret0, _ := ret[0].(int)
	return ret0
}

// CountRefsTo indicates an expected call of CountRefsTo
func (mr *MockRWGraphMockRecorder) CountRefsTo(to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountRefsTo", reflect.TypeOf((*MockRWGraph)(nil).CountRefsTo), to)
}

// GetRefsFrom mocks base method
func (m *MockRWGraph) GetRefsFrom(from []byte) [][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefsFrom", from)
	ret0, _ := ret[0].([][]byte)
	return ret0
}

// GetRefsFrom indicates an expected call of GetRefsFrom
func (mr *MockRWGraphMockRecorder) GetRefsFrom(from interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefsFrom", reflect.TypeOf((*MockRWGraph)(nil).GetRefsFrom), from)
}

// GetRefsTo mocks base method
func (m *MockRWGraph) GetRefsTo(to []byte) [][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefsTo", to)
	ret0, _ := ret[0].([][]byte)
	return ret0
}

// GetRefsTo indicates an expected call of GetRefsTo
func (mr *MockRWGraphMockRecorder) GetRefsTo(to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefsTo", reflect.TypeOf((*MockRWGraph)(nil).GetRefsTo), to)
}

// SetRefs mocks base method
func (m *MockRWGraph) SetRefs(from []byte, to [][]byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRefs", from, to)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRefs indicates an expected call of SetRefs
func (mr *MockRWGraphMockRecorder) SetRefs(from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRefs", reflect.TypeOf((*MockRWGraph)(nil).SetRefs), from, to)
}

// AddRefs mocks base method
func (m *MockRWGraph) AddRefs(from []byte, to ...[]byte) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{from}
	for _, a := range to {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddRefs", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRefs indicates an expected call of AddRefs
func (mr *MockRWGraphMockRecorder) AddRefs(from interface{}, to ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{from}, to...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRefs", reflect.TypeOf((*MockRWGraph)(nil).AddRefs), varargs...)
}

// DeleteRefs mocks base method
func (m *MockRWGraph) DeleteRefs(from []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRefs", from)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRefs indicates an expected call of DeleteRefs
func (mr *MockRWGraphMockRecorder) DeleteRefs(from interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRefs", reflect.TypeOf((*MockRWGraph)(nil).DeleteRefs), from)
}

// setFrom mocks base method
func (m *MockRWGraph) setFrom(from []byte, to [][]byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setFrom", from, to)
}

// setFrom indicates an expected call of setFrom
func (mr *MockRWGraphMockRecorder) setFrom(from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setFrom", reflect.TypeOf((*MockRWGraph)(nil).setFrom), from, to)
}

// deleteFrom mocks base method
func (m *MockRWGraph) deleteFrom(from []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "deleteFrom", from)
}

// deleteFrom indicates an expected call of deleteFrom
func (mr *MockRWGraphMockRecorder) deleteFrom(from interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteFrom", reflect.TypeOf((*MockRWGraph)(nil).deleteFrom), from)
}

// setTo mocks base method
func (m *MockRWGraph) setTo(to []byte, from [][]byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setTo", to, from)
}

// setTo indicates an expected call of setTo
func (mr *MockRWGraphMockRecorder) setTo(to, from interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setTo", reflect.TypeOf((*MockRWGraph)(nil).setTo), to, from)
}

// deleteTo mocks base method
func (m *MockRWGraph) deleteTo(to []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "deleteTo", to)
}

// deleteTo indicates an expected call of deleteTo
func (mr *MockRWGraphMockRecorder) deleteTo(to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteTo", reflect.TypeOf((*MockRWGraph)(nil).deleteTo), to)
}
