// Code generated by MockGen. DO NOT EDIT.
// Source: filter.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	storage "github.com/stackrox/rox/generated/storage"
	reflect "reflect"
)

// MockFilter is a mock of Filter interface
type MockFilter struct {
	ctrl     *gomock.Controller
	recorder *MockFilterMockRecorder
}

// MockFilterMockRecorder is the mock recorder for MockFilter
type MockFilterMockRecorder struct {
	mock *MockFilter
}

// NewMockFilter creates a new mock instance
func NewMockFilter(ctrl *gomock.Controller) *MockFilter {
	mock := &MockFilter{ctrl: ctrl}
	mock.recorder = &MockFilterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFilter) EXPECT() *MockFilterMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockFilter) Add(indicator *storage.ProcessIndicator) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", indicator)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockFilterMockRecorder) Add(indicator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockFilter)(nil).Add), indicator)
}

// Update mocks base method
func (m *MockFilter) Update(deployment *storage.Deployment) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", deployment)
}

// Update indicates an expected call of Update
func (mr *MockFilterMockRecorder) Update(deployment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFilter)(nil).Update), deployment)
}

// Delete mocks base method
func (m *MockFilter) Delete(deploymentID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", deploymentID)
}

// Delete indicates an expected call of Delete
func (mr *MockFilterMockRecorder) Delete(deploymentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFilter)(nil).Delete), deploymentID)
}
