defaults: &defaults
  docker:
    # This image is the standard circleci/golang:1.10.3 image, plus bazel and
    # other necessary build tools like goimports, dep, yarn, gcloud, kubectl,
    # oc, envsubst and gradle.
    - image: docker.io/stackrox/apollo-ci:0.1.11-3-g0e8e67bf53
      auth:
        username: $DOCKERHUB_USERNAME
        password: $DOCKERHUB_PASSWORD
  working_directory: /go/src/github.com/stackrox/rox

depCacheKey: &depCacheKey 'v1-prevent-go-pkg-dep-{{ checksum "Gopkg.lock" }}'
restoreDep: &restoreDep
  restore_cache:
    keys:
      - *depCacheKey
      - v1-prevent-go-pkg-dep

gradleCacheKey: &gradleCacheKey 'v1-gradle-{{ checksum "qa-tests-backend/build.gradle" }}'
restoreGradle: &restoreGradle
  restore_cache:
    keys:
      - *gradleCacheKey
      - v1-gradle

uiCacheKey: &uiCacheKey 'v1-prevent-ui-deps-{{ checksum "ui/yarn.lock" }}'
restoreUI: &restoreUI
  restore_cache:
    keys:
      - *uiCacheKey
      - v1-prevent-ui-deps

version: 2
jobs:

  build:
    <<: *defaults
    resource_class: large
    steps:
      - checkout
      - setup_remote_docker

      - run:
          name: Refresh base image
          command: docker pull alpine:3.8

      - *restoreDep
      - *restoreUI

      - run:
          name: Setup Bazel cache access
          command: echo "$GKE_SERVICE_ACCOUNT" > /tmp/gcp.json

      - run:
          name: Substitute env variables into bazel.rc
          command: cat tools/ci-bazel.rc | envsubst > tools/bazel.rc

      - run:
          name: Build image
          command: make image

      - run:
          name: Push new Docker image
          command: |
            docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD docker.io

            export TAG=$(make tag)

            docker push stackrox/prevent:$TAG | cat
            docker push stackrox/prevent-health:$TAG | cat

      - save-cache:
          key: *depCacheKey
          paths:
            - /go/pkg/dep

      - save-cache:
          key: *uiCacheKey
          paths:
            - ui/node_modules
            - ~/.cache/Cypress # Cypress binary will be put there, see https://docs.cypress.io/guides/guides/continuous-integration.html#Example-circle-yml-v2-config-file-with-yarn

      - persist_to_workspace:
          root: /go/src/github.com/stackrox/rox
          paths:
          - deps
          - generated
          - ui/deps
          - vendor

  unit-tests:
    <<: *defaults
    resource_class: large
    steps:
      - checkout
      - setup_remote_docker

      - attach_workspace:
          at: /go/src/github.com/stackrox/rox

      - *restoreGradle

      - run:
          name: Setup Bazel cache access
          command: echo "$GKE_SERVICE_ACCOUNT" > /tmp/gcp.json

      - run:
          name: Substitute env variables into bazel.rc
          command: cat tools/ci-bazel.rc | envsubst > tools/bazel.rc

      - run:
          name: Run style checks and unit tests
          command: make style test

      - save-cache:
          key: *gradleCacheKey
          paths:
          - ~/.gradle/caches/

      - store_artifacts:
          path: qa-tests-backend/build/reports/codenarc
          destination: reports/codenarc

  deploy-k8s:
    <<: *defaults
    environment:
      - LOCAL_PORT: 8000
    steps:
      - checkout
      - setup_remote_docker

      - attach_workspace:
          at: /go/src/github.com/stackrox/rox

      - run:
          name: Setup deployment env
          command: |
            docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD"
            echo 'export REGISTRY_USERNAME="$DOCKERHUB_USERNAME"' >> $BASH_ENV
            echo 'export REGISTRY_PASSWORD="$DOCKERHUB_PASSWORD"' >> $BASH_ENV
            echo 'export PREVENT_IMAGE_TAG="$(make tag)"' >> $BASH_ENV
            echo $GKE_SERVICE_ACCOUNT > /tmp/gcp.json
            echo 'export GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp.json' >> $BASH_ENV
            gcloud auth activate-service-account --key-file /tmp/gcp.json
            gcloud config set project stackrox-ci
            gcloud config set compute/zone us-central1-f

      - run:
          name: Create GKE cluster
          command: |
            gcloud container clusters create \
              --machine-type n1-standard-2 \
              --num-nodes 2 \
              --create-subnetwork range=/19 \
              --enable-ip-alias \
              --enable-network-policy \
              "prevent-ci-${CIRCLE_BUILD_NUM}"

      # See https://stackoverflow.com/a/46316672 for why we have to use user/pass.
      # This step requires the GCP IAM permission "Kubernetes Engine Admin".
      - run:
          name: Deploy to remote cluster
          command: |
            kubectl create clusterrolebinding temporary-admin --clusterrole=cluster-admin --user circleci-gke@ultra-current-825.iam.gserviceaccount.com
            ./deploy/k8s/deploy.sh
            kubectl delete clusterrolebinding temporary-admin

      - run:
          name: Setup port-forwarding for tests
          command: ./scripts/k8s/local-port-forward.sh
          background: true

      - run:
          name: Wait for the API server to be up
          command: |
            export PING_URL=https://127.0.0.1:${LOCAL_PORT}/v1/ping
            curl -k --connect-timeout 5 --max-time 10 --retry 10 --retry-connrefused --retry-delay 1 --retry-max-time 30 ${PING_URL}

      - run:
          name: Wait for the Sensor to be running K8s
          command: |
            ./scripts/ci/sensor-wait.sh

      - *restoreGradle
      - run:
          name: QA Automation Platform
          command: |
            if [[ $CIRCLE_BRANCH = master ]]; then
              export CLUSTER=K8S
              export HOSTNAME=localhost
              export PORT=${LOCAL_PORT}
              make -C qa-tests-backend bat-test
            else
              echo "Skipping functional tests."
            fi

      - run:
          name: API tests
          command: |
            export API_ENDPOINT=localhost:${LOCAL_PORT}
            make -C tests

      - *restoreUI

      - run:
          name: UI e2e tests
          command: |
            export UI_BASE_URL=https://localhost:${LOCAL_PORT}
            make -C ui test-e2e-ci

      - store_artifacts:
          path: ./qa-tests-backend/build/spock-reports
          destination: qa-test-report

      - run:
          name: Collect k8s logs
          command: |
            ./scripts/ci/collect-service-logs.sh central
            ./scripts/ci/collect-service-logs.sh sensor
          when: always

      - store_artifacts:
          path: /tmp/k8s-service-logs
          destination: k8s-service-logs

      - run:
          name: Tear down GKE cluster
          command: |
            gcloud container clusters delete --async "prevent-ci-${CIRCLE_BUILD_NUM}"
          when: always

      - store_test_results:
          path: ui/cypress/reports

      - store_artifacts:
          path: ui/cypress/videos
          destination: ui-e2e-videos

      - store_artifacts:
          path: ui/cypress/screenshots
          destination: ui-e2e-screenshots

  provision-openshift:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker

      - attach_workspace:
          at: /go/src/github.com/stackrox/rox

      - run:
          name: Login to Docker Hub
          command: docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD"

      - run:
          name: Generate ephemeral SSH key
          command: |
            mkdir openshift
            ssh-keygen -t rsa -f openshift/id_rsa -C packer -N ''
            cat openshift/id_rsa.pub

      - run:
          name: Pack openshift volume
          command: |
            docker create -v /data --name openshift alpine:3.8 /bin/true
            docker cp openshift/id_rsa     openshift:/data
            docker cp openshift/id_rsa.pub openshift:/data

      - run:
          name: Create cloud resources
          command: |
            docker run --rm -t \
              --volumes-from openshift \
              -e GOOGLE_CREDENTIALS="$OPENSHIFT_TERRAFORM_CREDENTIALS" \
              stackrox/openshift-automation:terraform-0.2.0 create "${CIRCLE_SHA1:0:7}"

      - run:
          name: Unpack openshift volume
          command: |
            docker cp openshift:/data/terraform.tfstate openshift
            docker cp openshift:/data/master            openshift

      - store_artifacts:
          path: openshift
          destination: openshift

      - run:
          name: Create Openshift cluster
          command: |
            docker run --rm -t \
            --volumes-from openshift \
            stackrox/openshift-automation:ansible-0.2.0

      - run:
          name: Unpack openshift volume
          command: |
            docker cp openshift:/data/config            openshift
            ls -hl openshift
          when: always

      - store_artifacts:
          path: openshift
          destination: openshift

      - persist_to_workspace:
          root: /go/src/github.com/stackrox/rox
          paths:
          - openshift

      - run:
          name: Destroy Openshift cluster
          command: |
            docker run --rm -t \
              --volumes-from openshift \
              -e GOOGLE_CREDENTIALS="$OPENSHIFT_TERRAFORM_CREDENTIALS" \
              stackrox/openshift-automation:terraform-0.2.0 destroy "${CIRCLE_SHA1:0:7}"
          when: on_fail

  deploy-openshift:
    <<: *defaults
    environment:
      - LOCAL_PORT: 8000
    steps:
      - checkout
      - setup_remote_docker

      - run:
          name: Login to Docker Hub
          command: docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD"

      - attach_workspace:
          at: /go/src/github.com/stackrox/rox

      - run:
          name: Configure Deployment Environment
          command: |
            echo "export CLAIRIFY_IMAGE_TAG=0.4"                            >> "$BASH_ENV"
            echo "export OPENSHIFT_HOST=$(cat openshift/master)"            >> "$BASH_ENV"
            echo "export PREVENT_IMAGE_REGISTRY=docker.io"                  >> "$BASH_ENV"
            echo "export PREVENT_IMAGE_TAG=$(make tag)"                     >> "$BASH_ENV"
            echo "export PRIVATE_REGISTRY=docker-registry.default.svc:5000" >> "$BASH_ENV"
            echo "export REGISTRY_PASSWORD=$DOCKERHUB_PASSWORD"             >> "$BASH_ENV"
            echo "export REGISTRY_USERNAME=$DOCKERHUB_USERNAME"             >> "$BASH_ENV"

      - run:
          name: Configure Kubectl
          command: |
            cp openshift/config ~/.kube/
            context="$(kubectl config get-contexts -o name | grep -v master)"
            kubectl config use-context "$context"
            kubectl get nodes

      - run:
          name: Configure SSH
          command: |
            mkdir -p ~/.ssh
            install -m 0400 openshift/id_rsa openshift/id_rsa.pub ~/.ssh
            ssh -o StrictHostKeyChecking=no "stackrox@$OPENSHIFT_HOST" uname -a

      - run:
          name: Generate Installation Bundle
          command: |
            docker run -i "stackrox/prevent:$PREVENT_IMAGE_TAG" deploy openshift none > /tmp/openshift.zip
            unzip /tmp/openshift.zip -d openshift

      - run:
          name: Run Image Setup
          command: |
            scp -o StrictHostKeyChecking=no openshift/image-setup.sh "stackrox@$OPENSHIFT_HOST:~/image-setup.sh"
            ssh -o StrictHostKeyChecking=no "stackrox@$OPENSHIFT_HOST" "yes | CLAIRIFY_IMAGE_TAG=$CLAIRIFY_IMAGE_TAG PREVENT_IMAGE_REGISTRY=$PREVENT_IMAGE_REGISTRY PREVENT_IMAGE_TAG=$PREVENT_IMAGE_TAG PRIVATE_REGISTRY=$PRIVATE_REGISTRY REGISTRY_PASSWORD=$REGISTRY_PASSWORD REGISTRY_USERNAME=$REGISTRY_USERNAME ~/image-setup.sh"
            oc -n stackrox get imagestreams

      - run:
          name: Deploy to remote cluster
          command: |
            ./deploy/openshift/deploy.sh
            oc -n stackrox get all

      - run:
          name: Setup port-forwarding for tests
          command: ./scripts/k8s/local-port-forward.sh
          background: true

      - run:
          name: Wait for the API server to be up
          command: |
            export PING_URL=https://127.0.0.1:${LOCAL_PORT}/v1/ping
            curl -k --connect-timeout 5 --max-time 10 --retry 10 --retry-connrefused --retry-delay 1 --retry-max-time 30 ${PING_URL}

      - run:
          name: Wait for the Sensor to be running
          command: |
            ./scripts/ci/sensor-wait.sh

#      # TODO: make -C tests hangs when run
#      - run:
#          name: API tests
#          command: |
#            export API_ENDPOINT=localhost:${LOCAL_PORT}
#            make -C tests

      - *restoreUI

      - run:
          name: UI e2e tests
          command: |
            export UI_BASE_URL=https://localhost:${LOCAL_PORT}
            make -C ui test-e2e-ci

      - run:
          name: Collect k8s logs
          command: |
            ./scripts/ci/collect-service-logs.sh central
            ./scripts/ci/collect-service-logs.sh sensor
          when: always

      - store_artifacts:
          path: /tmp/k8s-service-logs
          destination: k8s-service-logs

      - store_test_results:
          path: ui/cypress/reports

      - store_artifacts:
          path: ui/cypress/videos
          destination: ui-e2e-videos

      - store_artifacts:
          path: ui/cypress/screenshots
          destination: ui-e2e-screenshots

      - run:
          name: Pack openshift volume
          command: |
            docker create -v /data --name openshift alpine:3.8 /bin/true
            docker cp openshift/id_rsa            openshift:/data
            docker cp openshift/id_rsa.pub        openshift:/data
            docker cp openshift/terraform.tfstate openshift:/data
          when: always

      - run:
          name: Destroy Openshift cluster
          command: |
            docker run --rm -t \
              --volumes-from openshift \
              -e GOOGLE_CREDENTIALS="$OPENSHIFT_TERRAFORM_CREDENTIALS" \
              stackrox/openshift-automation:terraform-0.2.0 destroy "${CIRCLE_SHA1:0:7}"
          when: always

  push-release:
    <<: *defaults
    resource_class: small
    steps:
      - checkout
      - setup_remote_docker

      - run:
          name: Push image into stackrox.io
          command: |
            docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD"
            docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD" stackrox.io

            export TAG=$(make tag)

            docker pull docker.io/stackrox/prevent:$TAG
            docker tag docker.io/stackrox/prevent:$TAG stackrox.io/prevent:$TAG
            docker push stackrox.io/prevent:$TAG | cat

            docker pull docker.io/stackrox/prevent-health:$TAG
            docker tag docker.io/stackrox/prevent-health:$TAG stackrox.io/prevent-health:$TAG
            docker push stackrox.io/prevent-health:$TAG | cat


workflows:
  version: 2
  build_all:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - unit-tests:
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - deploy-k8s:
          requires:
            - build
          filters:
            tags:
              only: /.*/
      # Provision and test OpenShift only on master
      - provision-openshift:
          filters:
            branches:
              only: master
      - deploy-openshift:
          requires:
            - build
            - provision-openshift
          filters:
            branches:
              only: master
      # Push release only on tags.
      - push-release:
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
