package fake

import (
	"fmt"
	"math/rand"

	"github.com/gogo/protobuf/types"
	"github.com/stackrox/rox/generated/storage"
)

var (
	processAncestors = []*storage.ProcessSignal_LineageInfo{
		{
			ParentExecFilePath: "java",
		},
		{
			ParentExecFilePath: "bash",
		},
	}

	goodProcessNames = []string{
		"ssl-tools",
		"ansible-tower-s",
		"apache2",
		"apache2-foregro",
		"arangod",
		"asd",
		"awk",
		"awx-manage",
		"basename",
		"bash",
		"beam.smp",
		"bootstrap.sh",
		"cadvisor",
		"calico-node",
		"calico-typha",
		"cat",
		"catalina.sh",
		"central",
		"cfssl",
		"cfssl-helper",
		"cfssljson",
		"chgrp",
		"child_setup",
		"chmod",
		"chown",
		"chpst",
		"chronograf",
		"cluster-proport",
		"collector",
		"compliance",
		"consul",
		"couchbase-serve",
		"cp",
		"cpu_sup",
		"cpvpa",
		"crate",
		"cut",
		"daphne",
		"date",
		"debconf-set-sel",
		"df",
		"dirname",
		"dnsmasq",
		"dnsmasq-nanny",
		"docker-entrypoi",
		"docker-php-entr",
		"dpkg",
		"dpkg-query",
		"dpkg-reconfigur",
		"egrep",
		"entrypoint.sh",
		"env",
		"epmd",
		"erl",
		"erl_child_setup",
		"erlexec",
		"etcd",
		"expr",
		"failure-event-h",
		"find",
		"free",
		"gateway.start",
		"generate_cert",
		"getconf",
		"getent",
		"getopt",
		"git",
		"gnatsd",
		"goport",
		"gosecrets",
		"gosu",
		"grafana-server",
		"grep",
		"gunicorn",
		"head",
		"heapster",
		"hostname",
		"id",
		"import-addition",
		"inet_gethost",
		"initctl",
		"install-cni.sh",
		"invoke-rc.d",
		"ip-masq-agent",
		"ipset",
		"iptables",
		"iptables-restor",
		"iptables-save",
		"java",
		"kube-dns",
		"kube-proxy",
		"kubernetes-sens",
		"ldapadd",
		"ldapmodify",
		"ldapsearch",
		"ldconfig",
		"ldconfig.real",
		"ln",
		"log-helper",
		"ls",
		"memsup",
		"metrics-server",
		"mkdir",
		"mktemp",
		"monitor",
		"mosquitto",
		"mv",
		"mysql",
		"mysql_ssl_rsa_s",
		"mysql_tzinfo_to",
		"mysqladmin",
		"mysqld",
		"nats-server",
		"nats-streaming-",
		"nginx",
		"node",
		"openssl",
		"perl",
		"pg_ctlcluster",
		"php",
		"pod_nanny",
		"policy-rc.d",
		"postgres",
		"postgresql",
		"ps",
		"psql",
		"pwgen",
		"python",
		"rabbitmq-server",
		"rabbitmqctl",
		"readlink",
		"redis-server",
		"restore-all-dir",
		"rm",
		"rpm",
		"rsync",
		"run",
		"run-parts",
		"run.sh",
		"runsv",
		"runsvdir",
		"runsvdir-start",
		"scanner",
		"schema-to-ldif.",
		"sed",
		"server",
		"service",
		"sh",
		"sidecar",
		"slapadd",
		"slapd",
		"slapd.config",
		"slapd.postinst",
		"slapd.prerm",
		"slappasswd",
		"slaptest",
		"sleep",
		"sort",
		"ssl-helper",
		"start-confluenc",
		"start-stop-daem",
		"stat",
		"su",
		"su-exec",
		"supervisor",
		"supervisord",
		"tail",
		"tar",
		"tini",
		"touch",
		"tr",
		"uname",
		"update-rc.d",
		"uwsgi",
		"wc",
		"webproc",
		"whoami",
	}

	badProcessNames = []string{
		"wget",
		"curl",
		"bash",
		"sh",
		"zsh",
		"nmap",
		"groupadd",
		"addgroup",
		"useradd",
		"adduser",
		"usermod",
		"apk",
		"apt-get",
		"apt",
		"dpkg",
		"chkconfig",
		"anacron",
		"cron",
		"crond",
		"crontab",
		"rpm",
		"dnf",
		"yum",
		"iptables",
		"make",
		"gcc",
		"llc",
		"llvm-gcc",
		"sgminer",
		"cgminer",
		"cpuminer",
		"minerd",
		"geth",
		"ethminer",
		"xmr-stak-cpu",
		"xmr-stak-amd",
		"xmr-stak-nvidia",
		"xmrminer",
		"cpuminer-multi",
		"ifrename",
		"ethtool",
		"ifconfig",
		"ipmaddr",
		"iptunnel",
		"route",
		"nameif",
		"mii-tool",
		"nc",
		"nmap",
		"scp",
		"sshfs",
		"ssh-copy-id",
		"rsync",
		"sshd",
		"systemctl",
		"systemd",
	}
)

func getBadProcess(containerID string) *storage.ProcessSignal {
	name := badProcessNames[rand.Int()%len(badProcessNames)]
	return getProcess(name, containerID)
}

func getGoodProcess(containerID string) *storage.ProcessSignal {
	name := goodProcessNames[rand.Int()%len(goodProcessNames)]
	return getProcess(name, containerID)
}

func getProcess(name string, containerID string) *storage.ProcessSignal {
	return &storage.ProcessSignal{
		ContainerId:  containerID[:12],
		Time:         types.TimestampNow(),
		Name:         name,
		Args:         "abc def ghi jkl lmn op qrs tuv",
		ExecFilePath: fmt.Sprintf("/bin/%s", name),
		LineageInfo:  processAncestors,
	}
}
