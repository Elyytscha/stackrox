// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/openshift/api/route/v1"
	wrapper "github.com/stackrox/rox/sensor/kubernetes/store/service/wrapper"
	v10 "k8s.io/api/core/v1"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// GetMatchingServicesWithRoutes mocks base method.
func (m *MockStore) GetMatchingServicesWithRoutes(namespace string, labels map[string]string) []wrapper.SelectorRouteWrap {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchingServicesWithRoutes", namespace, labels)
	ret0, _ := ret[0].([]wrapper.SelectorRouteWrap)
	return ret0
}

// GetMatchingServicesWithRoutes indicates an expected call of GetMatchingServicesWithRoutes.
func (mr *MockStoreMockRecorder) GetMatchingServicesWithRoutes(namespace, labels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchingServicesWithRoutes", reflect.TypeOf((*MockStore)(nil).GetMatchingServicesWithRoutes), namespace, labels)
}

// GetRoutesForService mocks base method.
func (m *MockStore) GetRoutesForService(svc *wrapper.SelectorWrap) []*v1.Route {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoutesForService", svc)
	ret0, _ := ret[0].([]*v1.Route)
	return ret0
}

// GetRoutesForService indicates an expected call of GetRoutesForService.
func (mr *MockStoreMockRecorder) GetRoutesForService(svc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoutesForService", reflect.TypeOf((*MockStore)(nil).GetRoutesForService), svc)
}

// GetService mocks base method.
func (m *MockStore) GetService(namespace, name string) *wrapper.SelectorWrap {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", namespace, name)
	ret0, _ := ret[0].(*wrapper.SelectorWrap)
	return ret0
}

// GetService indicates an expected call of GetService.
func (mr *MockStoreMockRecorder) GetService(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockStore)(nil).GetService), namespace, name)
}

// NodePortServicesSnapshot mocks base method.
func (m *MockStore) NodePortServicesSnapshot() []*wrapper.SelectorWrap {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodePortServicesSnapshot")
	ret0, _ := ret[0].([]*wrapper.SelectorWrap)
	return ret0
}

// NodePortServicesSnapshot indicates an expected call of NodePortServicesSnapshot.
func (mr *MockStoreMockRecorder) NodePortServicesSnapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodePortServicesSnapshot", reflect.TypeOf((*MockStore)(nil).NodePortServicesSnapshot))
}

// OnNamespaceDeleted mocks base method.
func (m *MockStore) OnNamespaceDeleted(ns string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnNamespaceDeleted", ns)
}

// OnNamespaceDeleted indicates an expected call of OnNamespaceDeleted.
func (mr *MockStoreMockRecorder) OnNamespaceDeleted(ns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnNamespaceDeleted", reflect.TypeOf((*MockStore)(nil).OnNamespaceDeleted), ns)
}

// RemoveRoute mocks base method.
func (m *MockStore) RemoveRoute(route *v1.Route) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveRoute", route)
}

// RemoveRoute indicates an expected call of RemoveRoute.
func (mr *MockStoreMockRecorder) RemoveRoute(route interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRoute", reflect.TypeOf((*MockStore)(nil).RemoveRoute), route)
}

// RemoveService mocks base method.
func (m *MockStore) RemoveService(svc *v10.Service) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveService", svc)
}

// RemoveService indicates an expected call of RemoveService.
func (mr *MockStoreMockRecorder) RemoveService(svc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveService", reflect.TypeOf((*MockStore)(nil).RemoveService), svc)
}

// UpsertRoute mocks base method.
func (m *MockStore) UpsertRoute(route *v1.Route) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpsertRoute", route)
}

// UpsertRoute indicates an expected call of UpsertRoute.
func (mr *MockStoreMockRecorder) UpsertRoute(route interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRoute", reflect.TypeOf((*MockStore)(nil).UpsertRoute), route)
}

// UpsertService mocks base method.
func (m *MockStore) UpsertService(svc *wrapper.SelectorWrap) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpsertService", svc)
}

// UpsertService indicates an expected call of UpsertService.
func (mr *MockStoreMockRecorder) UpsertService(svc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertService", reflect.TypeOf((*MockStore)(nil).UpsertService), svc)
}
