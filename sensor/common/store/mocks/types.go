// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/openshift/api/route/v1"
	storage "github.com/stackrox/rox/generated/storage"
	deployment "github.com/stackrox/rox/sensor/common/store/deployment"
	servicewrapper "github.com/stackrox/rox/sensor/common/store/service/servicewrapper"
	v10 "k8s.io/api/core/v1"
)

// MockDeploymentStore is a mock of DeploymentStore interface.
type MockDeploymentStore struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentStoreMockRecorder
}

// MockDeploymentStoreMockRecorder is the mock recorder for MockDeploymentStore.
type MockDeploymentStoreMockRecorder struct {
	mock *MockDeploymentStore
}

// NewMockDeploymentStore creates a new mock instance.
func NewMockDeploymentStore(ctrl *gomock.Controller) *MockDeploymentStore {
	mock := &MockDeploymentStore{ctrl: ctrl}
	mock.recorder = &MockDeploymentStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeploymentStore) EXPECT() *MockDeploymentStoreMockRecorder {
	return m.recorder
}

// BuildDeploymentWithDependencies mocks base method.
func (m *MockDeploymentStore) BuildDeploymentWithDependencies(id string, dependencies deployment.Dependencies) (*storage.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildDeploymentWithDependencies", id, dependencies)
	ret0, _ := ret[0].(*storage.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildDeploymentWithDependencies indicates an expected call of BuildDeploymentWithDependencies.
func (mr *MockDeploymentStoreMockRecorder) BuildDeploymentWithDependencies(id, dependencies interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildDeploymentWithDependencies", reflect.TypeOf((*MockDeploymentStore)(nil).BuildDeploymentWithDependencies), id, dependencies)
}

// Get mocks base method.
func (m *MockDeploymentStore) Get(id string) *storage.Deployment {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*storage.Deployment)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockDeploymentStoreMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDeploymentStore)(nil).Get), id)
}

// GetAll mocks base method.
func (m *MockDeploymentStore) GetAll() []*storage.Deployment {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*storage.Deployment)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockDeploymentStoreMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockDeploymentStore)(nil).GetAll))
}

// MockPodStore is a mock of PodStore interface.
type MockPodStore struct {
	ctrl     *gomock.Controller
	recorder *MockPodStoreMockRecorder
}

// MockPodStoreMockRecorder is the mock recorder for MockPodStore.
type MockPodStoreMockRecorder struct {
	mock *MockPodStore
}

// NewMockPodStore creates a new mock instance.
func NewMockPodStore(ctrl *gomock.Controller) *MockPodStore {
	mock := &MockPodStore{ctrl: ctrl}
	mock.recorder = &MockPodStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPodStore) EXPECT() *MockPodStoreMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockPodStore) GetAll() []*storage.Pod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*storage.Pod)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockPodStoreMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPodStore)(nil).GetAll))
}

// GetByName mocks base method.
func (m *MockPodStore) GetByName(podName, namespace string) *storage.Pod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", podName, namespace)
	ret0, _ := ret[0].(*storage.Pod)
	return ret0
}

// GetByName indicates an expected call of GetByName.
func (mr *MockPodStoreMockRecorder) GetByName(podName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockPodStore)(nil).GetByName), podName, namespace)
}

// MockNetworkPolicyStore is a mock of NetworkPolicyStore interface.
type MockNetworkPolicyStore struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkPolicyStoreMockRecorder
}

// MockNetworkPolicyStoreMockRecorder is the mock recorder for MockNetworkPolicyStore.
type MockNetworkPolicyStoreMockRecorder struct {
	mock *MockNetworkPolicyStore
}

// NewMockNetworkPolicyStore creates a new mock instance.
func NewMockNetworkPolicyStore(ctrl *gomock.Controller) *MockNetworkPolicyStore {
	mock := &MockNetworkPolicyStore{ctrl: ctrl}
	mock.recorder = &MockNetworkPolicyStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkPolicyStore) EXPECT() *MockNetworkPolicyStoreMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockNetworkPolicyStore) All() map[string]*storage.NetworkPolicy {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].(map[string]*storage.NetworkPolicy)
	return ret0
}

// All indicates an expected call of All.
func (mr *MockNetworkPolicyStoreMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockNetworkPolicyStore)(nil).All))
}

// Delete mocks base method.
func (m *MockNetworkPolicyStore) Delete(ID, ns string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", ID, ns)
}

// Delete indicates an expected call of Delete.
func (mr *MockNetworkPolicyStoreMockRecorder) Delete(ID, ns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNetworkPolicyStore)(nil).Delete), ID, ns)
}

// Find mocks base method.
func (m *MockNetworkPolicyStore) Find(namespace string, labels map[string]string) map[string]*storage.NetworkPolicy {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", namespace, labels)
	ret0, _ := ret[0].(map[string]*storage.NetworkPolicy)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockNetworkPolicyStoreMockRecorder) Find(namespace, labels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockNetworkPolicyStore)(nil).Find), namespace, labels)
}

// Get mocks base method.
func (m *MockNetworkPolicyStore) Get(id string) *storage.NetworkPolicy {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*storage.NetworkPolicy)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockNetworkPolicyStoreMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNetworkPolicyStore)(nil).Get), id)
}

// Size mocks base method.
func (m *MockNetworkPolicyStore) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockNetworkPolicyStoreMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockNetworkPolicyStore)(nil).Size))
}

// Upsert mocks base method.
func (m *MockNetworkPolicyStore) Upsert(ns *storage.NetworkPolicy) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Upsert", ns)
}

// Upsert indicates an expected call of Upsert.
func (mr *MockNetworkPolicyStoreMockRecorder) Upsert(ns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockNetworkPolicyStore)(nil).Upsert), ns)
}

// MockServiceAccountStore is a mock of ServiceAccountStore interface.
type MockServiceAccountStore struct {
	ctrl     *gomock.Controller
	recorder *MockServiceAccountStoreMockRecorder
}

// MockServiceAccountStoreMockRecorder is the mock recorder for MockServiceAccountStore.
type MockServiceAccountStoreMockRecorder struct {
	mock *MockServiceAccountStore
}

// NewMockServiceAccountStore creates a new mock instance.
func NewMockServiceAccountStore(ctrl *gomock.Controller) *MockServiceAccountStore {
	mock := &MockServiceAccountStore{ctrl: ctrl}
	mock.recorder = &MockServiceAccountStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceAccountStore) EXPECT() *MockServiceAccountStoreMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockServiceAccountStore) Add(sa *storage.ServiceAccount) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", sa)
}

// Add indicates an expected call of Add.
func (mr *MockServiceAccountStoreMockRecorder) Add(sa interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockServiceAccountStore)(nil).Add), sa)
}

// GetImagePullSecrets mocks base method.
func (m *MockServiceAccountStore) GetImagePullSecrets(namespace, name string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImagePullSecrets", namespace, name)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetImagePullSecrets indicates an expected call of GetImagePullSecrets.
func (mr *MockServiceAccountStoreMockRecorder) GetImagePullSecrets(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImagePullSecrets", reflect.TypeOf((*MockServiceAccountStore)(nil).GetImagePullSecrets), namespace, name)
}

// Remove mocks base method.
func (m *MockServiceAccountStore) Remove(sa *storage.ServiceAccount) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Remove", sa)
}

// Remove indicates an expected call of Remove.
func (mr *MockServiceAccountStoreMockRecorder) Remove(sa interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockServiceAccountStore)(nil).Remove), sa)
}

// MockServiceStore is a mock of ServiceStore interface.
type MockServiceStore struct {
	ctrl     *gomock.Controller
	recorder *MockServiceStoreMockRecorder
}

// MockServiceStoreMockRecorder is the mock recorder for MockServiceStore.
type MockServiceStoreMockRecorder struct {
	mock *MockServiceStore
}

// NewMockServiceStore creates a new mock instance.
func NewMockServiceStore(ctrl *gomock.Controller) *MockServiceStore {
	mock := &MockServiceStore{ctrl: ctrl}
	mock.recorder = &MockServiceStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceStore) EXPECT() *MockServiceStoreMockRecorder {
	return m.recorder
}

// GetMatchingServicesWithRoutes mocks base method.
func (m *MockServiceStore) GetMatchingServicesWithRoutes(namespace string, labels map[string]string) []servicewrapper.SelectorRouteWrap {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchingServicesWithRoutes", namespace, labels)
	ret0, _ := ret[0].([]servicewrapper.SelectorRouteWrap)
	return ret0
}

// GetMatchingServicesWithRoutes indicates an expected call of GetMatchingServicesWithRoutes.
func (mr *MockServiceStoreMockRecorder) GetMatchingServicesWithRoutes(namespace, labels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchingServicesWithRoutes", reflect.TypeOf((*MockServiceStore)(nil).GetMatchingServicesWithRoutes), namespace, labels)
}

// GetRoutesForService mocks base method.
func (m *MockServiceStore) GetRoutesForService(svc *servicewrapper.SelectorWrap) []*v1.Route {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoutesForService", svc)
	ret0, _ := ret[0].([]*v1.Route)
	return ret0
}

// GetRoutesForService indicates an expected call of GetRoutesForService.
func (mr *MockServiceStoreMockRecorder) GetRoutesForService(svc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoutesForService", reflect.TypeOf((*MockServiceStore)(nil).GetRoutesForService), svc)
}

// GetService mocks base method.
func (m *MockServiceStore) GetService(namespace, name string) *servicewrapper.SelectorWrap {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", namespace, name)
	ret0, _ := ret[0].(*servicewrapper.SelectorWrap)
	return ret0
}

// GetService indicates an expected call of GetService.
func (mr *MockServiceStoreMockRecorder) GetService(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockServiceStore)(nil).GetService), namespace, name)
}

// NodePortServicesSnapshot mocks base method.
func (m *MockServiceStore) NodePortServicesSnapshot() []*servicewrapper.SelectorWrap {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodePortServicesSnapshot")
	ret0, _ := ret[0].([]*servicewrapper.SelectorWrap)
	return ret0
}

// NodePortServicesSnapshot indicates an expected call of NodePortServicesSnapshot.
func (mr *MockServiceStoreMockRecorder) NodePortServicesSnapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodePortServicesSnapshot", reflect.TypeOf((*MockServiceStore)(nil).NodePortServicesSnapshot))
}

// OnNamespaceDeleted mocks base method.
func (m *MockServiceStore) OnNamespaceDeleted(ns string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnNamespaceDeleted", ns)
}

// OnNamespaceDeleted indicates an expected call of OnNamespaceDeleted.
func (mr *MockServiceStoreMockRecorder) OnNamespaceDeleted(ns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnNamespaceDeleted", reflect.TypeOf((*MockServiceStore)(nil).OnNamespaceDeleted), ns)
}

// RemoveRoute mocks base method.
func (m *MockServiceStore) RemoveRoute(route *v1.Route) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveRoute", route)
}

// RemoveRoute indicates an expected call of RemoveRoute.
func (mr *MockServiceStoreMockRecorder) RemoveRoute(route interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRoute", reflect.TypeOf((*MockServiceStore)(nil).RemoveRoute), route)
}

// RemoveService mocks base method.
func (m *MockServiceStore) RemoveService(svc *v10.Service) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveService", svc)
}

// RemoveService indicates an expected call of RemoveService.
func (mr *MockServiceStoreMockRecorder) RemoveService(svc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveService", reflect.TypeOf((*MockServiceStore)(nil).RemoveService), svc)
}

// UpsertRoute mocks base method.
func (m *MockServiceStore) UpsertRoute(route *v1.Route) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpsertRoute", route)
}

// UpsertRoute indicates an expected call of UpsertRoute.
func (mr *MockServiceStoreMockRecorder) UpsertRoute(route interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRoute", reflect.TypeOf((*MockServiceStore)(nil).UpsertRoute), route)
}

// UpsertService mocks base method.
func (m *MockServiceStore) UpsertService(svc *servicewrapper.SelectorWrap) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpsertService", svc)
}

// UpsertService indicates an expected call of UpsertService.
func (mr *MockServiceStoreMockRecorder) UpsertService(svc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertService", reflect.TypeOf((*MockServiceStore)(nil).UpsertService), svc)
}
