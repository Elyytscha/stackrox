// Code generated by MockGen. DO NOT EDIT.
// Source: component.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	central "github.com/stackrox/rox/generated/internalapi/central"
	centralsensor "github.com/stackrox/rox/pkg/centralsensor"
	concurrency "github.com/stackrox/rox/pkg/concurrency"
	common "github.com/stackrox/rox/sensor/common"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockNotifier is a mock of Notifier interface.
type MockNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierMockRecorder
}

// MockNotifierMockRecorder is the mock recorder for MockNotifier.
type MockNotifierMockRecorder struct {
	mock *MockNotifier
}

// NewMockNotifier creates a new mock instance.
func NewMockNotifier(ctrl *gomock.Controller) *MockNotifier {
	mock := &MockNotifier{ctrl: ctrl}
	mock.recorder = &MockNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifier) EXPECT() *MockNotifierMockRecorder {
	return m.recorder
}

// Notify mocks base method.
func (m *MockNotifier) Notify(e common.SensorComponentEvent) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Notify", e)
}

// Notify indicates an expected call of Notify.
func (mr *MockNotifierMockRecorder) Notify(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockNotifier)(nil).Notify), e)
}

// MockSensorComponent is a mock of SensorComponent interface.
type MockSensorComponent struct {
	ctrl     *gomock.Controller
	recorder *MockSensorComponentMockRecorder
}

// MockSensorComponentMockRecorder is the mock recorder for MockSensorComponent.
type MockSensorComponentMockRecorder struct {
	mock *MockSensorComponent
}

// NewMockSensorComponent creates a new mock instance.
func NewMockSensorComponent(ctrl *gomock.Controller) *MockSensorComponent {
	mock := &MockSensorComponent{ctrl: ctrl}
	mock.recorder = &MockSensorComponentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSensorComponent) EXPECT() *MockSensorComponentMockRecorder {
	return m.recorder
}

// Capabilities mocks base method.
func (m *MockSensorComponent) Capabilities() []centralsensor.SensorCapability {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Capabilities")
	ret0, _ := ret[0].([]centralsensor.SensorCapability)
	return ret0
}

// Capabilities indicates an expected call of Capabilities.
func (mr *MockSensorComponentMockRecorder) Capabilities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Capabilities", reflect.TypeOf((*MockSensorComponent)(nil).Capabilities))
}

// Notify mocks base method.
func (m *MockSensorComponent) Notify(e common.SensorComponentEvent) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Notify", e)
}

// Notify indicates an expected call of Notify.
func (mr *MockSensorComponentMockRecorder) Notify(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockSensorComponent)(nil).Notify), e)
}

// ProcessMessage mocks base method.
func (m *MockSensorComponent) ProcessMessage(msg *central.MsgToSensor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessMessage", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessMessage indicates an expected call of ProcessMessage.
func (mr *MockSensorComponentMockRecorder) ProcessMessage(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessMessage", reflect.TypeOf((*MockSensorComponent)(nil).ProcessMessage), msg)
}

// ResponsesC mocks base method.
func (m *MockSensorComponent) ResponsesC() <-chan *central.MsgFromSensor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResponsesC")
	ret0, _ := ret[0].(<-chan *central.MsgFromSensor)
	return ret0
}

// ResponsesC indicates an expected call of ResponsesC.
func (mr *MockSensorComponentMockRecorder) ResponsesC() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResponsesC", reflect.TypeOf((*MockSensorComponent)(nil).ResponsesC))
}

// Start mocks base method.
func (m *MockSensorComponent) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockSensorComponentMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockSensorComponent)(nil).Start))
}

// Stop mocks base method.
func (m *MockSensorComponent) Stop(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop", err)
}

// Stop indicates an expected call of Stop.
func (mr *MockSensorComponentMockRecorder) Stop(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockSensorComponent)(nil).Stop), err)
}

// MockComplianceComponent is a mock of ComplianceComponent interface.
type MockComplianceComponent struct {
	ctrl     *gomock.Controller
	recorder *MockComplianceComponentMockRecorder
}

// MockComplianceComponentMockRecorder is the mock recorder for MockComplianceComponent.
type MockComplianceComponentMockRecorder struct {
	mock *MockComplianceComponent
}

// NewMockComplianceComponent creates a new mock instance.
func NewMockComplianceComponent(ctrl *gomock.Controller) *MockComplianceComponent {
	mock := &MockComplianceComponent{ctrl: ctrl}
	mock.recorder = &MockComplianceComponentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComplianceComponent) EXPECT() *MockComplianceComponentMockRecorder {
	return m.recorder
}

// Capabilities mocks base method.
func (m *MockComplianceComponent) Capabilities() []centralsensor.SensorCapability {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Capabilities")
	ret0, _ := ret[0].([]centralsensor.SensorCapability)
	return ret0
}

// Capabilities indicates an expected call of Capabilities.
func (mr *MockComplianceComponentMockRecorder) Capabilities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Capabilities", reflect.TypeOf((*MockComplianceComponent)(nil).Capabilities))
}

// ComplianceC mocks base method.
func (m *MockComplianceComponent) ComplianceC() <-chan common.MessageToComplianceWithAddress {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComplianceC")
	ret0, _ := ret[0].(<-chan common.MessageToComplianceWithAddress)
	return ret0
}

// ComplianceC indicates an expected call of ComplianceC.
func (mr *MockComplianceComponentMockRecorder) ComplianceC() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComplianceC", reflect.TypeOf((*MockComplianceComponent)(nil).ComplianceC))
}

// Notify mocks base method.
func (m *MockComplianceComponent) Notify(e common.SensorComponentEvent) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Notify", e)
}

// Notify indicates an expected call of Notify.
func (mr *MockComplianceComponentMockRecorder) Notify(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockComplianceComponent)(nil).Notify), e)
}

// ProcessMessage mocks base method.
func (m *MockComplianceComponent) ProcessMessage(msg *central.MsgToSensor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessMessage", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessMessage indicates an expected call of ProcessMessage.
func (mr *MockComplianceComponentMockRecorder) ProcessMessage(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessMessage", reflect.TypeOf((*MockComplianceComponent)(nil).ProcessMessage), msg)
}

// ResponsesC mocks base method.
func (m *MockComplianceComponent) ResponsesC() <-chan *central.MsgFromSensor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResponsesC")
	ret0, _ := ret[0].(<-chan *central.MsgFromSensor)
	return ret0
}

// ResponsesC indicates an expected call of ResponsesC.
func (mr *MockComplianceComponentMockRecorder) ResponsesC() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResponsesC", reflect.TypeOf((*MockComplianceComponent)(nil).ResponsesC))
}

// Start mocks base method.
func (m *MockComplianceComponent) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockComplianceComponentMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockComplianceComponent)(nil).Start))
}

// Stop mocks base method.
func (m *MockComplianceComponent) Stop(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop", err)
}

// Stop indicates an expected call of Stop.
func (mr *MockComplianceComponentMockRecorder) Stop(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockComplianceComponent)(nil).Stop), err)
}

// Stopped mocks base method.
func (m *MockComplianceComponent) Stopped() concurrency.ReadOnlyErrorSignal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stopped")
	ret0, _ := ret[0].(concurrency.ReadOnlyErrorSignal)
	return ret0
}

// Stopped indicates an expected call of Stopped.
func (mr *MockComplianceComponentMockRecorder) Stopped() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stopped", reflect.TypeOf((*MockComplianceComponent)(nil).Stopped))
}

// MockCentralGRPCConnAware is a mock of CentralGRPCConnAware interface.
type MockCentralGRPCConnAware struct {
	ctrl     *gomock.Controller
	recorder *MockCentralGRPCConnAwareMockRecorder
}

// MockCentralGRPCConnAwareMockRecorder is the mock recorder for MockCentralGRPCConnAware.
type MockCentralGRPCConnAwareMockRecorder struct {
	mock *MockCentralGRPCConnAware
}

// NewMockCentralGRPCConnAware creates a new mock instance.
func NewMockCentralGRPCConnAware(ctrl *gomock.Controller) *MockCentralGRPCConnAware {
	mock := &MockCentralGRPCConnAware{ctrl: ctrl}
	mock.recorder = &MockCentralGRPCConnAwareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCentralGRPCConnAware) EXPECT() *MockCentralGRPCConnAwareMockRecorder {
	return m.recorder
}

// SetCentralGRPCClient mocks base method.
func (m *MockCentralGRPCConnAware) SetCentralGRPCClient(cc grpc.ClientConnInterface) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCentralGRPCClient", cc)
}

// SetCentralGRPCClient indicates an expected call of SetCentralGRPCClient.
func (mr *MockCentralGRPCConnAwareMockRecorder) SetCentralGRPCClient(cc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCentralGRPCClient", reflect.TypeOf((*MockCentralGRPCConnAware)(nil).SetCentralGRPCClient), cc)
}
