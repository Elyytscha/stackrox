package eventstream

import (
	"io"

	"github.com/gogo/protobuf/proto"
	"github.com/stackrox/rox/generated/api/v1"
)

type wrap struct {
	grpcStream v1.SensorEventService_RecordEventClient
}

func (w wrap) Send(event *v1.SensorEvent) error {
	return w.grpcStream.Send(event)
}

// preserializedProtoMessage is a proto.Message that returns a static byte buffer for marshaling.
type preserializedProtoMessage struct {
	proto.Message
	serialized []byte
}

func (m preserializedProtoMessage) Marshal() ([]byte, error) {
	return m.serialized, nil
}

func (w wrap) SendRaw(event *v1.SensorEvent, raw []byte) error {
	err := w.grpcStream.SendMsg(preserializedProtoMessage{Message: event, serialized: raw})
	if err == nil || err == io.EOF {
		return err // no error or server-generated error
	}
	// otherwise, assume error is generated by the client, so fall back to normal Send method.
	return w.grpcStream.Send(event)
}

// Wrap wraps a GRPC RecordEvent stream into a SensorEventStream.
func Wrap(grpcStream v1.SensorEventService_RecordEventClient) SensorEventStream {
	return wrap{grpcStream: grpcStream}
}
