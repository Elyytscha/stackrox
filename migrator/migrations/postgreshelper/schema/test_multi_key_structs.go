// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"reflect"
	"time"

	"github.com/lib/pq"
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// CreateTableTestOneKeyStructsStmt holds the create statement for table `test_multi_key_structs`.
	CreateTableTestOneKeyStructsStmt = &postgres.CreateStmts{
		GormModel: (*TestOneKeyStructs)(nil),
		Children: []*postgres.CreateStmts{
			&postgres.CreateStmts{
				GormModel: (*TestOneKeyStructsNesteds)(nil),
				Children:  []*postgres.CreateStmts{},
			},
		},
	}

	// TestOneKeyStructsSchema is the go schema for table `test_multi_key_structs`.
	TestOneKeyStructsSchema = func() *walker.Schema {
		schema := walker.Walk(reflect.TypeOf((*storage.TestOneKeyStruct)(nil)), "test_multi_key_structs")
		schema.SetOptionsMap(search.Walk(v1.SearchCategory_SEARCH_UNSET, "TestOneKeyStruct", (*storage.TestOneKeyStruct)(nil)))
		return schema
	}()
)

const (
	// TestOneKeyStructsTableName specifies the name of the table in postgres.
	TestOneKeyStructsTableName = "test_multi_key_structs"
	// TestOneKeyStructsNestedsTableName specifies the name of the table in postgres.
	TestOneKeyStructsNestedsTableName = "test_multi_key_structs_nesteds"
)

// TestOneKeyStructs holds the Gorm model for Postgres table `test_multi_key_structs`.
type TestOneKeyStructs struct {
	Key1              string                          `gorm:"column:key1;type:varchar;primaryKey"`
	Key2              string                          `gorm:"column:key2;type:varchar;primaryKey"`
	StringSlice       *pq.StringArray                 `gorm:"column:stringslice;type:text[]"`
	Bool              bool                            `gorm:"column:bool;type:bool"`
	Uint64            uint64                          `gorm:"column:uint64;type:bigint"`
	Int64             int64                           `gorm:"column:int64;type:bigint"`
	Float             float32                         `gorm:"column:float;type:numeric"`
	Labels            map[string]string               `gorm:"column:labels;type:jsonb"`
	Timestamp         *time.Time                      `gorm:"column:timestamp;type:timestamp"`
	Enum              storage.TestOneKeyStruct_Enum `gorm:"column:enum;type:integer"`
	Enums             *pq.Int32Array                  `gorm:"column:enums;type:int[]"`
	String            string                          `gorm:"column:string_;type:varchar"`
	Int32Slice        *pq.Int32Array                  `gorm:"column:int32slice;type:int[]"`
	OneofnestedNested string                          `gorm:"column:oneofnested_nested;type:varchar"`
	Serialized        []byte                          `gorm:"column:serialized;type:bytea"`
}

// TestOneKeyStructsNesteds holds the Gorm model for Postgres table `test_multi_key_structs_nesteds`.
type TestOneKeyStructsNesteds struct {
	TestOneKeyStructsKey1 string              `gorm:"column:test_multi_key_structs_key1;type:varchar;primaryKey"`
	TestOneKeyStructsKey2 string              `gorm:"column:test_multi_key_structs_key2;type:varchar;primaryKey"`
	Idx                     int                 `gorm:"column:idx;type:integer;primaryKey;index:TestOneKeyStructsnesteds_idx,type:btree"`
	Nested                  string              `gorm:"column:nested;type:varchar"`
	IsNested                bool                `gorm:"column:isnested;type:bool"`
	Int64                   int64               `gorm:"column:int64;type:bigint"`
	Nested2Nested2          string              `gorm:"column:nested2_nested2;type:varchar"`
	Nested2IsNested         bool                `gorm:"column:nested2_isnested;type:bool"`
	Nested2Int64            int64               `gorm:"column:nested2_int64;type:bigint"`
	TestOneKeyStructsRef  TestOneKeyStructs `gorm:"foreignKey:test_multi_key_structs_key1,test_multi_key_structs_key2;references:key1,key2;belongsTo;constraint:OnDelete:CASCADE"`
}
