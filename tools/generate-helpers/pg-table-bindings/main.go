package main

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"os"
	"path"
	"text/template"

	_ "embed"

	"github.com/Masterminds/sprig/v3"
	"github.com/golang/protobuf/proto"
	"github.com/spf13/cobra"
	_ "github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/logging"
	"github.com/stackrox/rox/pkg/stringutils"
	"github.com/stackrox/rox/pkg/utils"
	"github.com/stackrox/rox/tools/generate-helpers/common/packagenames"
	"github.com/stackrox/rox/tools/generate-helpers/pg-table-bindings/walker"
	"golang.org/x/tools/imports"
)

//go:embed store.go.tpl
var storeFile string
//go:embed index.go.tpl
var indexFile string

var log = logging.LoggerForModule()

type properties struct {
	Type           string
	TrimmedType    string
	Table          string
	RegisteredType string

	SearchCategory string
	ObjectPathName string
	Singular       string
	WriteOptions   bool
	OptionsPath    string
}

func renderFile(templateMap map[string]interface{}, templateFile, templateFileName string,) error {
	t := template.Must(template.New("gen").Funcs(funcMap).Funcs(sprig.TxtFuncMap()).Parse(autogenerated + templateFile))
	buf := bytes.NewBuffer(nil)
	if err := t.Execute(buf, templateMap); err != nil {
		return err
	}
	file := buf.Bytes()

	fmt.Println(string(file))

	formatted, err := imports.Process(templateFileName, file, nil)
	if err != nil {
		return err
	}
	if err := ioutil.WriteFile(templateFileName, formatted, 0644); err != nil {
		return err
	}
	return nil
}

func main() {
	c := &cobra.Command{
		Use: "generate store implementations",
	}

	var props properties
	c.Flags().StringVar(&props.Type, "type", "", "the (Go) name of the object")
	utils.Must(c.MarkFlagRequired("type"))

	c.Flags().StringVar(&props.RegisteredType, "registered-type", "", "the type this is registered in proto as storage.X")

	c.Flags().StringVar(&props.Table, "table", "", "the logical table of the objects")
	utils.Must(c.MarkFlagRequired("table"))

	c.Flags().StringVar(&props.Singular, "singular", "", "the singular name of the object")
	c.Flags().StringVar(&props.OptionsPath, "options-path", "/index/mappings", "path to write out the options to")
	c.Flags().StringVar(&props.SearchCategory, "search-category", "", "the search category to index under")

	c.RunE = func(*cobra.Command, []string) error {
		typ := props.Type
		if props.RegisteredType != "" {
			typ = props.RegisteredType
		}
		fmt.Println("Generating for", typ)
		mt := proto.MessageType(typ)
		if mt == nil {
			log.Fatalf("could not find message for type: %s", typ)
		}

		schema := walker.Walk(mt, props.Table)
		templateMap := map[string]interface{}{
			"Type":   		  props.Type,
			"TrimmedType":    stringutils.GetAfter(props.Type, "."),
			"Table":  		  props.Table,
			"Schema": 		  schema,
			"SearchCategory": fmt.Sprintf("SearchCategory_%s", props.SearchCategory),
			"OptionsPath":    path.Join(packagenames.Rox, props.OptionsPath),
		}

		if err := renderFile(templateMap, storeFile, "store.go"); err != nil {
			return err
		}

		if err := renderFile(templateMap, indexFile, "index.go"); err != nil {
			return err
		}

		return nil
	}
	if err := c.Execute(); err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}
