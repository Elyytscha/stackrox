// Code generated by pg-bindings generator. DO NOT EDIT.

//go:build sql_integration

package postgres

import (
	"context"
	"testing"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres/pgtest"
	"github.com/stackrox/rox/pkg/sac"
	"github.com/stackrox/rox/pkg/testutils"
	"github.com/stretchr/testify/suite"
)

type TestOneKeyStructsStoreSuite struct {
	suite.Suite
	store  Store
	testDB *pgtest.TestPostgres
}

func TestTestOneKeyStructsStore(t *testing.T) {
	suite.Run(t, new(TestOneKeyStructsStoreSuite))
}

func (s *TestOneKeyStructsStoreSuite) SetupSuite() {

	s.testDB = pgtest.ForT(s.T())
	s.store = New(s.testDB.DB)
}

func (s *TestOneKeyStructsStoreSuite) SetupTest() {
	ctx := sac.WithAllAccess(context.Background())
	tag, err := s.testDB.Exec(ctx, "TRUNCATE test_multi_key_structs CASCADE")
	s.T().Log("test_multi_key_structs", tag)
	s.NoError(err)
}

func (s *TestOneKeyStructsStoreSuite) TearDownSuite() {
	s.testDB.Teardown(s.T())
}

func (s *TestOneKeyStructsStoreSuite) TestStore() {
	ctx := sac.WithAllAccess(context.Background())

	store := s.store

	TestOneKeyStruct := &storage.TestOneKeyStruct{}
	s.NoError(testutils.FullInit(TestOneKeyStruct, testutils.SimpleInitializer(), testutils.JSONFieldsFilter))

	foundTestOneKeyStruct, exists, err := store.Get(ctx, TestOneKeyStruct.GetKey1())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundTestOneKeyStruct)

	withNoAccessCtx := sac.WithNoAccess(ctx)

	s.NoError(store.Upsert(ctx, TestOneKeyStruct))
	foundTestOneKeyStruct, exists, err = store.Get(ctx, TestOneKeyStruct.GetKey1())
	s.NoError(err)
	s.True(exists)
	s.Equal(TestOneKeyStruct, foundTestOneKeyStruct)

	TestOneKeyStructCount, err := store.Count(ctx)
	s.NoError(err)
	s.Equal(1, TestOneKeyStructCount)
	TestOneKeyStructCount, err = store.Count(withNoAccessCtx)
	s.NoError(err)
	s.Zero(TestOneKeyStructCount)

	TestOneKeyStructExists, err := store.Exists(ctx, TestOneKeyStruct.GetKey1())
	s.NoError(err)
	s.True(TestOneKeyStructExists)
	s.NoError(store.Upsert(ctx, TestOneKeyStruct))
	s.ErrorIs(store.Upsert(withNoAccessCtx, TestOneKeyStruct), sac.ErrResourceAccessDenied)

	foundTestOneKeyStruct, exists, err = store.Get(ctx, TestOneKeyStruct.GetKey1())
	s.NoError(err)
	s.True(exists)
	s.Equal(TestOneKeyStruct, foundTestOneKeyStruct)

	s.NoError(store.Delete(ctx, TestOneKeyStruct.GetKey1()))
	foundTestOneKeyStruct, exists, err = store.Get(ctx, TestOneKeyStruct.GetKey1())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundTestOneKeyStruct)
	s.NoError(store.Delete(withNoAccessCtx, TestOneKeyStruct.GetKey1()))

	var TestOneKeyStructs []*storage.TestOneKeyStruct
	var TestOneKeyStructIDs []string
	for i := 0; i < 200; i++ {
		TestOneKeyStruct := &storage.TestOneKeyStruct{}
		s.NoError(testutils.FullInit(TestOneKeyStruct, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
		TestOneKeyStructs = append(TestOneKeyStructs, TestOneKeyStruct)
		TestOneKeyStructIDs = append(TestOneKeyStructIDs, TestOneKeyStruct.GetKey1())
	}

	s.NoError(store.UpsertMany(ctx, TestOneKeyStructs))

	TestOneKeyStructCount, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(200, TestOneKeyStructCount)

	s.NoError(store.DeleteMany(ctx, TestOneKeyStructIDs))

	TestOneKeyStructCount, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(0, TestOneKeyStructCount)
}
