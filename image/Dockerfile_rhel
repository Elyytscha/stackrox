ARG BASE_REGISTRY=registry.access.redhat.com
ARG BASE_IMAGE=ubi7/ubi
ARG BASE_TAG=7.7

ARG DATA_IMAGE_TAG=latest
FROM stackrox-data:$DATA_IMAGE_TAG AS data

FROM ${BASE_REGISTRY}/${BASE_IMAGE}:${BASE_TAG}

LABEL name="stackrox.io/main"
LABEL vendor="StackRox (support@stackrox.com)"
LABEL summary="The StackRox Kubernetes Security Platform"
LABEL description="This image contains everything required to operate the StackRox Kubernetes Security Platform."

# Update packages and remove package manager
RUN yum update -y --nogpgcheck --disableplugin=subscription-manager && \
    rpm -e --nodeps \
      rpm \
      rpm-build-libs \
      rpm-libs \
      rpm-python \
      subscription-manager \
      subscription-manager-rhsm \
      yum \
      yum-plugin-ovl \
      yum-utils \
    ;

ENV PATH="/stackrox:$PATH"

ENV ROX_ROXCTL_IN_MAIN_IMAGE="true"

# Telegraf (for monitoring)
ADD https://github.com/connorgorman/telegraf/releases/download/1.8.3.1%2B179-slim/telegraf /telegraf
RUN chmod +x /telegraf

COPY ./central-entrypoint.sh /stackrox/
COPY ./bin/migrator /stackrox/bin/
COPY ./bin/central /stackrox/
COPY ./bin/compliance /stackrox/bin/
COPY ./bin/roxctl* /assets/downloads/cli/
COPY ./bin/kubernetes-sensor /stackrox/bin/
COPY ./bin/sensor-upgrader /stackrox/bin/
COPY ./static-bin/* /stackrox/
COPY ./ui/build /ui/
COPY --from=data /stackrox-data.tgze /stackrox/

COPY ./THIRD_PARTY_NOTICES /THIRD_PARTY_NOTICES

EXPOSE 8443


ENTRYPOINT ["/assets/downloads/cli/roxctl-linux"]

# The following paths are written to in Central.


# CAVEAT: The below can be left for informational purposes/the off chance of StackRox being run via `docker run`.
# However, on production environments it seems that VOLUME statements alone do not guarantee a writable path in every
# case. Hence, when adding a VOLUME here, always add it to the respective deployment YAML as well.
# Additionally, mounting those directories as `emptyDir`s in Kubernetes means that they will be, well, empty on startup.
# Any directory whose contents at image creation time are relevant need to be saved using `save-dir-contents`, and then
# copied back by `restore-all-dir-contents` in the respective entrypoint scripts.

# Including these VOLUME instructions means that we can enable a
# read-only root file system without preventing writes to these paths.
# Trusted CA certificates are written to this path by `update-ca-trust`.
RUN chown -R 4000:4000 /etc/pki /etc/ssl && save-dir-contents /etc/pki/ca-trust /etc/ssl
VOLUME /etc/pki/ca-trust
VOLUME /etc/ssl

# The BoltDB is stored at this path.
RUN mkdir -p /var/lib/stackrox && chown -R 4000:4000 /var/lib/stackrox
VOLUME /var/lib/stackrox
# The log file is stored at this path
RUN mkdir -p /var/log/stackrox && chown -R 4000:4000 /var/log/stackrox
VOLUME /var/log/stackrox

# /tmp needs to be a read-write filesystem.
RUN chown -R 4000:4000 /tmp
VOLUME /tmp

RUN mkdir -p /stackrox/data && chown -R 4000:4000 /stackrox/data
VOLUME /stackrox/data

USER 4000:4000

HEALTHCHECK CMD curl --insecure --fail https://127.0.0.1:8443/v1/ping
