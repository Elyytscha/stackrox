apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ .Values.dbAppName }}
  namespace: stackrox
  labels:
    app: {{ .Values.dbAppName }}
    app.kubernetes.io/name: stackrox
spec:
  selector:
    matchLabels:
      app: {{ .Values.dbAppName }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: {{ .Values.dbAppName }}
      annotations:
        sidecar.istio.io/rewriteAppHTTPProbers: "true"
    spec:
      {{if .Values.nodeSelector -}}
      nodeSelector:
      {{ toYaml .Values.nodeSelector | indent 8 }}
      {{- end}}
      containers:
      - name: {{ .Values.dbAppName }}
        image: {{ .Values.dbImage | quote }}
        imagePullPolicy: {{ .Values.dbImagePullPolicy | quote }}
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        env:
        - name: POSTGRES_USER
          value: {{ .Values.postgresql.postgresUser | quote }}
          # Required for pg_isready in the health probes.
        - name: PGUSER
          value: {{ .Values.postgresql.postgresUser | quote }}
        - name: POSTGRES_DB
          value: {{ .Values.postgresql.postgresDatabase | quote }}
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.dbAppName }}
              key: postgres-password
        ports:
        - name: postgresql
          containerPort: 5432
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host 127.0.0.1
          initialDelaySeconds: 360
          timeoutSeconds: 5
          failureThreshold: 6
          periodSeconds: 5
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host 127.0.0.1
          initialDelaySeconds: 5
          timeoutSeconds: 3
          periodSeconds: 5
        volumeMounts:
        - name: data
          mountPath: {{ .Values.postgresql.persistence.mountPath }}
          subPath: {{ .Values.postgresql.persistence.subPath }}
      serviceAccount: {{ .Values.dbAppName }}
      volumes:
      - name: data
{{ toYaml .Values.persistence.value | indent 8 }}
