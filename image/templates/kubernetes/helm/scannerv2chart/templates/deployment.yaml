apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ .Values.appName }}
  namespace: stackrox
  labels:
    app: {{ .Values.appName }}
    app.kubernetes.io/name: stackrox
  annotations:
    owner: stackrox
    email: support@stackrox.com
spec:
  selector:
    matchLabels:
      app: {{ .Values.appName }}
  replicas: 1
  template:
    metadata:
      namespace: stackrox
      labels:
        app: {{ .Values.appName }}
    spec:
      containers:
      - name: analyzer
        image: {{ .Values.image }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "4000m"
        command: ["anchore-manager"]
        args: ["service", "start", "analyzer"]
        envFrom:
        - secretRef:
            name: {{ .Values.appName }}
        - configMapRef:
            name: {{ .Values.appName }}
        env:
        - name: ANCHORE_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        ports:
        - name: analyzer-api
          containerPort: {{ .Values.anchoreAnalyzer.containerPort }}
        volumeMounts:
        - name: config-volume
          mountPath: /config/config.yaml
          subPath: config.yaml
        - name: analyzer-scratch
          mountPath: {{ .Values.scratchVolumeMountPath }}
        livenessProbe:
          httpGet:
            path: /health
            port: analyzer-api
          initialDelaySeconds: 360
          timeoutSeconds: 10
          periodSeconds: 10
          failureThreshold: 6
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /health
            port: analyzer-api
          timeoutSeconds: 10
          periodSeconds: 10
          failureThreshold: 3
          successThreshold: 1
      - name: api
        image: {{ .Values.image }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        command: ["anchore-manager"]
        args: ["service", "start", "apiext"]
        resources:
          requests:
            memory: "200Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        envFrom:
        - secretRef:
            name: {{ .Values.appName }}
        - configMapRef:
            name: {{ .Values.appName }}
        env:
        - name: ANCHORE_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        ports:
        - containerPort: {{ .Values.anchoreApi.service.port }}
          name: external-api
        volumeMounts:
        - name: config-volume
          mountPath: /config/config.yaml
          subPath: config.yaml
        livenessProbe:
          httpGet:
            path: /health
            port: external-api
          initialDelaySeconds: 360
          timeoutSeconds: 10
          periodSeconds: 10
          failureThreshold: 6
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /health
            port: external-api
          timeoutSeconds: 10
          periodSeconds: 10
          failureThreshold: 3
          successThreshold: 1
      - name: catalog
        image: {{ .Values.image }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        resources:
          requests:
            memory: "500Mi"
            cpu: "200m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        command: ["anchore-manager"]
        args: ["service", "start", "catalog"]
        envFrom:
        - secretRef:
            name: {{ .Values.appName }}
        - configMapRef:
            name: {{ .Values.appName }}
        env:
        - name: ANCHORE_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        ports:
        - name: catalog
          containerPort: {{ .Values.anchoreCatalog.service.port }}
        volumeMounts:
        - name: config-volume
          mountPath: /config/config.yaml
          subPath: config.yaml
        livenessProbe:
          httpGet:
            path: /health
            port: catalog
          initialDelaySeconds: 360
          timeoutSeconds: 10
          periodSeconds: 10
          failureThreshold: 6
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /health
            port: catalog
          timeoutSeconds: 10
          periodSeconds: 10
          failureThreshold: 3
          successThreshold: 1
      - name: policy
        image: {{ .Values.image }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        resources:
          requests:
            memory: "500Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        command: ["anchore-manager"]
        args: ["service", "start", "policy_engine"]
        envFrom:
        - secretRef:
            name: {{ .Values.appName }}
        - configMapRef:
            name: {{ .Values.appName }}
        env:
        - name: ANCHORE_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        ports:
        - name: policy
          containerPort: {{ .Values.anchorePolicyEngine.service.port }}
        volumeMounts:
        - name: config-volume
          mountPath: /config/config.yaml
          subPath: config.yaml
        livenessProbe:
          httpGet:
            path: /health
            port: policy
          initialDelaySeconds: 360
          timeoutSeconds: 10
          periodSeconds: 10
          failureThreshold: 6
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /health
            port: policy
          timeoutSeconds: 10
          periodSeconds: 10
          failureThreshold: 3
          successThreshold: 1
      - name: simplequeue
        image: {{ .Values.image }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        resources:
          requests:
            memory: "500Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        command: ["anchore-manager"]
        args: ["service", "start", "simplequeue"]
        envFrom:
        - secretRef:
            name: {{ .Values.appName }}
        - configMapRef:
            name: {{ .Values.appName }}
        env:
        - name: ANCHORE_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        ports:
        - name: simplequeue
          containerPort: {{ .Values.anchoreSimpleQueue.service.port }}
        volumeMounts:
        - name: config-volume
          mountPath: /config/config.yaml
          subPath: config.yaml
        livenessProbe:
          httpGet:
            path: /health
            port: simplequeue
          initialDelaySeconds: 360
          timeoutSeconds: 10
          periodSeconds: 10
          failureThreshold: 6
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /health
            port: simplequeue
          timeoutSeconds: 10
          periodSeconds: 10
          failureThreshold: 3
          successThreshold: 1
      serviceAccount: {{ .Values.appName }}
      volumes:
        - name: config-volume
          configMap:
            name: {{ .Values.appName }}
        - name: analyzer-scratch
          emptyDir: {}
