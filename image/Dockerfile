ARG DATA_IMAGE_TAG=latest
ARG BUILD_IMAGE=xxxxx
ARG DEBUG_BUILD=no

FROM stackrox-data:$DATA_IMAGE_TAG AS data

FROM $BUILD_IMAGE as builder

FROM alpine:3.11 as alpine-base-no-debug

FROM builder as debugger
RUN go get github.com/go-delve/delve/cmd/dlv
FROM alpine-base-no-debug as alpine-base-yes-debug
COPY --from=debugger /go/bin/dlv /go/bin/dlv

FROM alpine-base-${DEBUG_BUILD}-debug
ARG ALPINE_MIRROR=sjc.edge.kernel.org
LABEL "com.vendor"="StackRox (support@stackrox.com)"

RUN echo http://${ALPINE_MIRROR}/alpine/v3.11/main > /etc/apk/repositories; \
    echo http://${ALPINE_MIRROR}/alpine/v3.11/community >> /etc/apk/repositories

RUN apk add --update --no-cache zlib-dev bzip2-dev snappy-dev lz4-dev zstd-dev

RUN apk update && \
    apk add --no-cache \
        ca-certificates \
        su-exec \
        && \
    apk add --no-cache --upgrade \
        musl \
        && \
    apk --purge del apk-tools \
    ;

ENV PATH="/stackrox:$PATH"

ENV ROX_ROXCTL_IN_MAIN_IMAGE="true"

COPY --from=builder /usr/local/bin/ldb /usr/local/bin/ldb

COPY ./central-entrypoint.sh /stackrox/
COPY ./bin/migrator /stackrox/bin/
COPY ./bin/central /stackrox/
COPY ./bin/compliance /stackrox/bin/
COPY ./bin/roxctl* /assets/downloads/cli/
COPY ./bin/kubernetes-sensor /stackrox/bin/
COPY ./bin/sensor-upgrader /stackrox/bin/
COPY ./bin/admission-control /stackrox/bin/
COPY ./static-bin/* /stackrox/
COPY ./ui/build /ui/
COPY --from=data /stackrox-data /stackrox/static-data/

COPY ./THIRD_PARTY_NOTICES /THIRD_PARTY_NOTICES

EXPOSE 8443

ENTRYPOINT ["/assets/downloads/cli/roxctl-linux"]

# The following paths are written to in Central.

# CAVEAT: The below can be left for informational purposes/the off chance of StackRox being run via `docker run`.
# However, on production environments it seems that VOLUME statements alone do not guarantee a writable path in every
# case. Hence, when adding a VOLUME here, always add it to the respective deployment YAML as well.
# Additionally, mounting those directories as `emptyDir`s in Kubernetes means that they will be, well, empty on startup.
# Any directory whose contents at image creation time are relevant need to be saved using `save-dir-contents`, and then
# copied back by `restore-all-dir-contents` in the respective entrypoint scripts.

# Including these VOLUME instructions means that we can enable a
# read-only root file system without preventing writes to these paths.
# Trusted CA certificates are written to this path by `update-ca-certificates`.
RUN chown -R 4000:4000 /etc/ssl && save-dir-contents /etc/ssl
VOLUME /etc/ssl

# The BoltDB is stored at this path.
RUN mkdir -p /var/lib/stackrox && chown -R 4000:4000 /var/lib/stackrox
VOLUME /var/lib/stackrox

# The log file is stored at this path
RUN mkdir -p /var/log/stackrox && chown -R 4000:4000 /var/log/stackrox
VOLUME /var/log/stackrox

# Temporary data is stored at this path
RUN mkdir -p /var/cache/stackrox && chown -R 4000:4000 /var/cache/stackrox
VOLUME /var/cache/stackrox

# /tmp needs to be a read-write filesystem.
RUN chown -R 4000:4000 /tmp
VOLUME /tmp

RUN ln -s /assets/downloads/cli/roxctl-linux /stackrox/roxctl

USER 4000:4000
