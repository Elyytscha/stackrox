package deploy

import (
	"fmt"

	"github.com/spf13/cobra"
	"github.com/spf13/pflag"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/roxctl/central/deploy/renderer"
)

type persistentFlagsWrapper struct {
	*pflag.FlagSet
}

func (w *persistentFlagsWrapper) StringVarP(p *string, name, shorthand string, value string, usage string, group string) {
	w.FlagSet.StringVarP(p, name, shorthand, value, usage)
	w.SetAnnotation(name, groupAnnotation, []string{group})
}

func (w *persistentFlagsWrapper) Var(value pflag.Value, name string, usage string, group string) {
	w.FlagSet.Var(value, name, usage)
	w.SetAnnotation(name, groupAnnotation, []string{group})
}

func orchestratorCommand(shortName, longName string) *cobra.Command {
	c := &cobra.Command{
		Use:   shortName,
		Short: fmt.Sprintf("%s specifies that you are going to launch StackRox Central in %s.", shortName, longName),
		Long: fmt.Sprintf(`%s specifies that you are going to launch StackRox Central in %s.
Output is a zip file printed to stdout.`, shortName, longName),
		SilenceErrors: true,
		Annotations: map[string]string{
			categoryAnnotation: "Enter orchestrator",
		},
		RunE: func(*cobra.Command, []string) error {
			return fmt.Errorf("storage type must be specified")
		},
	}
	return c
}

func k8sBasedOrchestrator(k8sConfig *renderer.K8sConfig, shortName, longName string, cluster storage.ClusterType) *cobra.Command {
	c := orchestratorCommand(shortName, longName)
	c.PersistentPreRun = func(*cobra.Command, []string) {
		cfg.K8sConfig = k8sConfig
		cfg.ClusterType = cluster
	}

	c.AddCommand(externalVolume())
	c.AddCommand(hostPathVolume(cluster))
	c.AddCommand(noVolume())

	flagWrap := &persistentFlagsWrapper{FlagSet: c.PersistentFlags()}

	// Adds k8s specific flags
	flagWrap.Var(&fileFormatWrapper{DeploymentFormat: &k8sConfig.DeploymentFormat}, "output-format", "the output format from the installer (kubectl, helm)", "central")
	flagWrap.StringVarP(&k8sConfig.Namespace, "namespace", "n", "stackrox", "namespace", "central")
	flagWrap.StringVarP(&k8sConfig.MainImage, "main-image", "i", "stackrox.io/"+mainImage, "Image to use", "central")

	flagWrap.StringVarP(&k8sConfig.MonitoringEndpoint, "monitoring-endpoint", "", "monitoring.stackrox:443", "monitoring endpoint", "monitoring")
	flagWrap.Var(&monitoringWrapper{Monitoring: &k8sConfig.MonitoringType}, "monitoring-type", "where to host the monitoring (on-prem, none)", "monitoring")
	flagWrap.StringVarP(&k8sConfig.MonitoringPassword, "monitoring-password", "p", "", "enter a monitoring password (default: autogenerated)", "monitoring")

	flagWrap.StringVarP(&k8sConfig.ClairifyImage, "clairify-image", "", "stackrox.io/"+clairifyImage, "Clairify image to use", "clairify")

	return c
}

func newK8sConfig(monitoringDefault renderer.MonitoringType) *renderer.K8sConfig {
	return &renderer.K8sConfig{
		MonitoringType: monitoringDefault,
	}
}

func k8s() *cobra.Command {
	k8sConfig := newK8sConfig(renderer.OnPrem)
	c := k8sBasedOrchestrator(k8sConfig, "k8s", "Kubernetes", storage.ClusterType_KUBERNETES_CLUSTER)
	flagWrap := &persistentFlagsWrapper{FlagSet: c.PersistentFlags()}

	flagWrap.Var(&loadBalancerWrapper{LoadBalancerType: &k8sConfig.LoadBalancerType}, "lb-type", "the method of exposing Central (lb, np, none)", "central")

	flagWrap.Var(&loadBalancerWrapper{LoadBalancerType: &k8sConfig.MonitoringLoadBalancerType}, "monitoring-lb-type", "the method of exposing Monitoring (lb, np, none)", "monitoring")

	return c
}

func openshift() *cobra.Command {
	k8sConfig := newK8sConfig(renderer.OnPrem)
	c := k8sBasedOrchestrator(k8sConfig, "openshift", "Openshift", storage.ClusterType_OPENSHIFT_CLUSTER)

	flagWrap := &persistentFlagsWrapper{FlagSet: c.PersistentFlags()}

	flagWrap.Var(&loadBalancerWrapper{LoadBalancerType: &k8sConfig.LoadBalancerType}, "lb-type", "the method of exposing Central (route, lb, np, none)", "central")

	flagWrap.Var(&loadBalancerWrapper{LoadBalancerType: &k8sConfig.MonitoringLoadBalancerType}, "monitoring-lb-type", "the method of exposing Monitoring (route, lb, np, none)", "monitoring")

	return c
}
