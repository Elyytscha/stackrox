// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackrox/rox/central/sac/datastore/internal/store (interfaces: Store)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	storage "github.com/stackrox/rox/generated/storage"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// DeleteAuthzPluginConfig mocks base method
func (m *MockStore) DeleteAuthzPluginConfig(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthzPluginConfig", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAuthzPluginConfig indicates an expected call of DeleteAuthzPluginConfig
func (mr *MockStoreMockRecorder) DeleteAuthzPluginConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthzPluginConfig", reflect.TypeOf((*MockStore)(nil).DeleteAuthzPluginConfig), arg0)
}

// GetAuthzPluginConfig mocks base method
func (m *MockStore) GetAuthzPluginConfig(arg0 string) (*storage.AuthzPluginConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthzPluginConfig", arg0)
	ret0, _ := ret[0].(*storage.AuthzPluginConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthzPluginConfig indicates an expected call of GetAuthzPluginConfig
func (mr *MockStoreMockRecorder) GetAuthzPluginConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthzPluginConfig", reflect.TypeOf((*MockStore)(nil).GetAuthzPluginConfig), arg0)
}

// ListAuthzPluginConfigs mocks base method
func (m *MockStore) ListAuthzPluginConfigs() ([]*storage.AuthzPluginConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAuthzPluginConfigs")
	ret0, _ := ret[0].([]*storage.AuthzPluginConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAuthzPluginConfigs indicates an expected call of ListAuthzPluginConfigs
func (mr *MockStoreMockRecorder) ListAuthzPluginConfigs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAuthzPluginConfigs", reflect.TypeOf((*MockStore)(nil).ListAuthzPluginConfigs))
}

// UpsertAuthzPluginConfig mocks base method
func (m *MockStore) UpsertAuthzPluginConfig(arg0 *storage.AuthzPluginConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertAuthzPluginConfig", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertAuthzPluginConfig indicates an expected call of UpsertAuthzPluginConfig
func (mr *MockStoreMockRecorder) UpsertAuthzPluginConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAuthzPluginConfig", reflect.TypeOf((*MockStore)(nil).UpsertAuthzPluginConfig), arg0)
}

// UpsertAuthzPluginConfigs mocks base method
func (m *MockStore) UpsertAuthzPluginConfigs(arg0 []*storage.AuthzPluginConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertAuthzPluginConfigs", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertAuthzPluginConfigs indicates an expected call of UpsertAuthzPluginConfigs
func (mr *MockStoreMockRecorder) UpsertAuthzPluginConfigs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAuthzPluginConfigs", reflect.TypeOf((*MockStore)(nil).UpsertAuthzPluginConfigs), arg0)
}
