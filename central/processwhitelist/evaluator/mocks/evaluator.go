// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackrox/rox/central/processwhitelist/evaluator (interfaces: Evaluator)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	storage "github.com/stackrox/rox/generated/storage"
	reflect "reflect"
)

// MockEvaluator is a mock of Evaluator interface
type MockEvaluator struct {
	ctrl     *gomock.Controller
	recorder *MockEvaluatorMockRecorder
}

// MockEvaluatorMockRecorder is the mock recorder for MockEvaluator
type MockEvaluatorMockRecorder struct {
	mock *MockEvaluator
}

// NewMockEvaluator creates a new mock instance
func NewMockEvaluator(ctrl *gomock.Controller) *MockEvaluator {
	mock := &MockEvaluator{ctrl: ctrl}
	mock.recorder = &MockEvaluatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEvaluator) EXPECT() *MockEvaluatorMockRecorder {
	return m.recorder
}

// EvaluateWhitelistsAndPersistResult mocks base method
func (m *MockEvaluator) EvaluateWhitelistsAndPersistResult(arg0 *storage.Deployment) ([]*storage.ProcessIndicator, error) {
	ret := m.ctrl.Call(m, "EvaluateWhitelistsAndPersistResult", arg0)
	ret0, _ := ret[0].([]*storage.ProcessIndicator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EvaluateWhitelistsAndPersistResult indicates an expected call of EvaluateWhitelistsAndPersistResult
func (mr *MockEvaluatorMockRecorder) EvaluateWhitelistsAndPersistResult(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvaluateWhitelistsAndPersistResult", reflect.TypeOf((*MockEvaluator)(nil).EvaluateWhitelistsAndPersistResult), arg0)
}
