// Code not generated by pg-bindings generator. DO EDIT.

//go:build sql_integration

package postgres

import (
	"context"
	"testing"
	"time"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres/pgtest"
	"github.com/stackrox/rox/pkg/protoconv"
	"github.com/stackrox/rox/pkg/sac"
	"github.com/stretchr/testify/suite"
)

type BillingMetricsStoreSuite struct {
	suite.Suite
	store  Store
	testDB *pgtest.TestPostgres
}

func TestBillingMetricsStore(t *testing.T) {
	suite.Run(t, new(BillingMetricsStoreSuite))
}

func (s *BillingMetricsStoreSuite) SetupTest() {
	s.testDB = pgtest.ForT(s.T())
	s.store = New(s.testDB.DB)
}

func (s *BillingMetricsStoreSuite) TearDownTest() {
	Destroy(context.Background(), s.testDB)
	s.testDB.Teardown(s.T())
}

func (s *BillingMetricsStoreSuite) TestStore() {
	ctx := sac.WithAllAccess(context.Background())

	store := s.store

	now := time.Now()
	then := now.Add(10 * time.Minute)

	records := []*storage.BillingMetricsRecord{
		{Ts: protoconv.ConvertTimeToTimestamp(now),
			Sr: &storage.BillingMetricsRecord_SecuredResources{},
		},
		{Ts: protoconv.ConvertTimeToTimestamp(then),
			Sr: &storage.BillingMetricsRecord_SecuredResources{
				Nodes:      5,
				Millicores: 50,
			},
		},
	}

	foundRecords, err := store.Get(ctx, now, then)
	s.Require().NoError(err)
	s.Nil(foundRecords)

	s.Require().NoError(store.Insert(ctx, records[0]))
	s.Require().NoError(store.Insert(ctx, records[1]))
	foundRecords, err = store.Get(ctx, now, then)
	s.Require().NoError(err)
	s.Require().Len(foundRecords, 1)
	s.Equal(records[0], foundRecords[0])

	foundRecords, err = store.Get(ctx, then, then.Add(1*time.Second))
	s.Require().NoError(err)
	s.Require().Len(foundRecords, 1)
	s.Equal(records[1], foundRecords[0])

	foundRecords, err = store.Get(ctx, now, then.Add(1*time.Second))
	s.Require().NoError(err)
	s.Require().Len(foundRecords, 2)
	s.Equal(records, foundRecords)
}
