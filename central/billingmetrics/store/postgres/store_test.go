// Code not generated by pg-bindings generator. DO EDIT.

//go:build sql_integration

package postgres

import (
	"context"
	"testing"
	"time"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres/pgtest"
	"github.com/stackrox/rox/pkg/protoconv"
	"github.com/stackrox/rox/pkg/sac"
	"github.com/stretchr/testify/suite"
)

type MaximusStoreSuite struct {
	suite.Suite
	store  Store
	testDB *pgtest.TestPostgres
}

func TestMaximusStore(t *testing.T) {
	suite.Run(t, new(MaximusStoreSuite))
}

func (s *MaximusStoreSuite) SetupTest() {
	s.testDB = pgtest.ForT(s.T())
	s.store = New(s.testDB.DB)
}

func (s *MaximusStoreSuite) TearDownTest() {
	Destroy(context.Background(), s.testDB)
	s.testDB.Teardown(s.T())
}

func (s *MaximusStoreSuite) TestStore() {
	ctx := sac.WithAllAccess(context.Background())

	store := s.store
	metric := "test"

	maximus := &storage.Maximus{
		Metric: metric,
		Value:  1,
		Ts:     protoconv.ConvertTimeToTimestamp(time.Now()),
	}

	// Test get.
	foundMaximus, exists, err := store.Get(ctx, metric)
	s.Require().NoError(err)
	s.False(exists)
	s.Nil(foundMaximus)

	withNoAccessCtx := sac.WithNoAccess(ctx)

	s.Require().NoError(store.Upsert(ctx, maximus))
	foundMaximus, exists, err = store.Get(ctx, metric)
	s.Require().NoError(err)
	s.True(exists)
	s.Equal(maximus, foundMaximus)

	foundMaximus, exists, err = store.Get(ctx, metric)
	s.Require().NoError(err)
	s.True(exists)
	s.Equal(maximus, foundMaximus)

	// Test maximus.
	maximus.Value = 5
	maximus.Ts = protoconv.ConvertTimeToTimestamp(time.Now())

	s.Require().NoError(store.Upsert(ctx, maximus))
	foundMaximus, exists, err = store.Get(ctx, metric)
	s.Require().NoError(err)
	s.True(exists)
	s.Equal(maximus, foundMaximus)

	bumbleBee := &storage.Maximus{
		Metric: metric,
		Value:  3,
		Ts:     protoconv.ConvertTimeToTimestamp(time.Now()),
	}

	s.NoError(store.Upsert(ctx, bumbleBee))
	foundMaximus, exists, err = store.Get(ctx, metric)
	s.NoError(err)
	s.True(exists)
	s.Equal(maximus, foundMaximus)

	// Test delete.
	s.Require().NoError(store.Delete(ctx, metric))
	foundMaximus, exists, err = store.Get(ctx, metric)
	s.Require().NoError(err)
	s.False(exists)
	s.Nil(foundMaximus)

	s.ErrorIs(store.Delete(withNoAccessCtx, metric), sac.ErrResourceAccessDenied)
}
