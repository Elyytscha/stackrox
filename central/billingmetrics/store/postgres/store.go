package postgres

// Code is not generated by pg-bindings generator. DO EDIT.

import (
	"context"
	"time"

	"github.com/stackrox/rox/central/metrics"
	"github.com/stackrox/rox/central/role/resources"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/logging"
	ops "github.com/stackrox/rox/pkg/metrics"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/pgutils"
	pkgSchema "github.com/stackrox/rox/pkg/postgres/schema"
	"github.com/stackrox/rox/pkg/protoconv"
	"github.com/stackrox/rox/pkg/sac"
	"github.com/stackrox/rox/pkg/sync"
)

const (
	baseTable = "billingmetrics"

	getStmt    = "SELECT ts, value FROM billingmetrics WHERE ts >= $1 AND ts < $2"
	insertStmt = "INSERT INTO billingmetrics(ts, value) VALUES ($1, $2)"
)

var (
	log            = logging.LoggerForModule()
	schema         = pkgSchema.BillingMetricsSchema
	targetResource = resources.Administration
)

// Store is the interface to interact with the storage for storage.BillingMetricsRecordl.
type Store interface {
	Get(ctx context.Context, from, to time.Time) ([]storage.BillingMetricsRecord, error)
	Insert(ctx context.Context, rec *storage.BillingMetricsRecord) error
}

type storeImpl struct {
	db    postgres.DB
	mutex sync.Mutex
}

// New returns a new Store instance using the provided sql instance.
func New(db postgres.DB) Store {
	return &storeImpl{
		db: db,
	}
}

func checkScope(ctx context.Context, am storage.Access) error {
	if !sac.GlobalAccessScopeChecker(ctx).AccessMode(am).
		Resource(targetResource).IsAllowed() {
		return sac.ErrResourceAccessDenied
	}
	return nil
}

// Upsert saves the current state of an object in storage.
func (s *storeImpl) Insert(ctx context.Context, obj *storage.BillingMetricsRecord) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Add, "BillingMetrics")

	if err := checkScope(ctx, storage.Access_READ_WRITE_ACCESS); err != nil {
		return err
	}

	if obj.Ts == nil {
		obj.Ts = protoconv.ConvertTimeToTimestamp(time.Now())
	}

	return pgutils.Retry(func() error {
		return s.retryableInsert(ctx, obj)
	})
}

func (s *storeImpl) retryableInsert(ctx context.Context, rec *storage.BillingMetricsRecord) error {
	serialized, err := rec.Marshal()
	if err != nil {
		return err
	}

	conn, release, err := s.acquireConn(ctx, ops.Get, "BillingMetrics")
	if err != nil {
		return err
	}
	defer release()

	if _, err := conn.Exec(ctx, insertStmt, rec.Ts, serialized); err != nil {
		return err
	}
	return nil
}

// Get returns the object, if it exists from the store.
func (s *storeImpl) Get(ctx context.Context, from, to time.Time) ([]storage.BillingMetricsRecord, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Get, "BillingMetrics")

	if err := checkScope(ctx, storage.Access_READ_ACCESS); err != nil {
		return nil, nil
	}

	return pgutils.Retry2(func() ([]storage.BillingMetricsRecord, error) {
		return s.retryableGet(ctx, from, to)
	})
}

func (s *storeImpl) retryableGet(ctx context.Context, from, to time.Time) ([]storage.BillingMetricsRecord, error) {
	conn, release, err := s.acquireConn(ctx, ops.Get, "BillingMetrics")
	if err != nil {
		return nil, err
	}
	defer release()

	rows, err := conn.Query(ctx, getStmt, from, to)
	if err != nil {
		return nil, pgutils.ErrNilIfNoRows(err)
	}

	result := []storage.BillingMetricsRecord{}
	for rows.Next() {
		var ts *time.Time
		var obj []byte
		if err := rows.Scan(&ts, &obj); err != nil {
			return nil, pgutils.ErrNilIfNoRows(err)
		}
		var value storage.BillingMetricsRecord_SecuredResources
		if err := value.Unmarshal(obj); err != nil {
			return nil, err
		}
		result = append(result, storage.BillingMetricsRecord{
			Ts: protoconv.ConvertTimeToTimestamp(*ts),
			Sr: &value,
		})
	}

	return result, nil
}

func (s *storeImpl) acquireConn(ctx context.Context, op ops.Op, typ string) (*postgres.Conn, func(), error) {
	defer metrics.SetAcquireDBConnDuration(time.Now(), op, typ)
	conn, err := s.db.Acquire(ctx)
	if err != nil {
		return nil, nil, err
	}
	return conn, conn.Release, nil
}

// Used for Testing

// Destroy drops the tables associated with the target object type.
func Destroy(ctx context.Context, db postgres.DB) {
	_, _ = db.Exec(ctx, "DROP TABLE IF EXISTS billingmetrics CASCADE")
}
