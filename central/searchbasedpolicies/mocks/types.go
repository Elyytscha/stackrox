// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackrox/rox/central/searchbasedpolicies (interfaces: Matcher)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	searchbasedpolicies "github.com/stackrox/rox/central/searchbasedpolicies"
	search "github.com/stackrox/rox/pkg/search"
	reflect "reflect"
)

// MockMatcher is a mock of Matcher interface
type MockMatcher struct {
	ctrl     *gomock.Controller
	recorder *MockMatcherMockRecorder
}

// MockMatcherMockRecorder is the mock recorder for MockMatcher
type MockMatcherMockRecorder struct {
	mock *MockMatcher
}

// NewMockMatcher creates a new mock instance
func NewMockMatcher(ctrl *gomock.Controller) *MockMatcher {
	mock := &MockMatcher{ctrl: ctrl}
	mock.recorder = &MockMatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMatcher) EXPECT() *MockMatcherMockRecorder {
	return m.recorder
}

// Match mocks base method
func (m *MockMatcher) Match(arg0 search.Searcher) (map[string]searchbasedpolicies.Violations, error) {
	ret := m.ctrl.Call(m, "Match", arg0)
	ret0, _ := ret[0].(map[string]searchbasedpolicies.Violations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Match indicates an expected call of Match
func (mr *MockMatcherMockRecorder) Match(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Match", reflect.TypeOf((*MockMatcher)(nil).Match), arg0)
}

// MatchMany mocks base method
func (m *MockMatcher) MatchMany(arg0 search.Searcher, arg1 ...string) (map[string]searchbasedpolicies.Violations, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MatchMany", varargs...)
	ret0, _ := ret[0].(map[string]searchbasedpolicies.Violations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchMany indicates an expected call of MatchMany
func (mr *MockMatcherMockRecorder) MatchMany(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchMany", reflect.TypeOf((*MockMatcher)(nil).MatchMany), varargs...)
}

// MatchOne mocks base method
func (m *MockMatcher) MatchOne(arg0 search.Searcher, arg1 string) (searchbasedpolicies.Violations, error) {
	ret := m.ctrl.Call(m, "MatchOne", arg0, arg1)
	ret0, _ := ret[0].(searchbasedpolicies.Violations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchOne indicates an expected call of MatchOne
func (mr *MockMatcherMockRecorder) MatchOne(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchOne", reflect.TypeOf((*MockMatcher)(nil).MatchOne), arg0, arg1)
}
