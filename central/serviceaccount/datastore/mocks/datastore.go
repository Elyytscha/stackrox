// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackrox/rox/central/serviceaccount/datastore (interfaces: DataStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	v1 "github.com/stackrox/rox/generated/api/v1"
	storage "github.com/stackrox/rox/generated/storage"
	search "github.com/stackrox/rox/pkg/search"
	reflect "reflect"
)

// MockDataStore is a mock of DataStore interface
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// CountServiceAccounts mocks base method
func (m *MockDataStore) CountServiceAccounts() (int, error) {
	ret := m.ctrl.Call(m, "CountServiceAccounts")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountServiceAccounts indicates an expected call of CountServiceAccounts
func (mr *MockDataStoreMockRecorder) CountServiceAccounts() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountServiceAccounts", reflect.TypeOf((*MockDataStore)(nil).CountServiceAccounts))
}

// GetServiceAccount mocks base method
func (m *MockDataStore) GetServiceAccount(arg0 string) (*storage.ServiceAccount, bool, error) {
	ret := m.ctrl.Call(m, "GetServiceAccount", arg0)
	ret0, _ := ret[0].(*storage.ServiceAccount)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetServiceAccount indicates an expected call of GetServiceAccount
func (mr *MockDataStoreMockRecorder) GetServiceAccount(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceAccount", reflect.TypeOf((*MockDataStore)(nil).GetServiceAccount), arg0)
}

// ListServiceAccounts mocks base method
func (m *MockDataStore) ListServiceAccounts() ([]*storage.ServiceAccount, error) {
	ret := m.ctrl.Call(m, "ListServiceAccounts")
	ret0, _ := ret[0].([]*storage.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceAccounts indicates an expected call of ListServiceAccounts
func (mr *MockDataStoreMockRecorder) ListServiceAccounts() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceAccounts", reflect.TypeOf((*MockDataStore)(nil).ListServiceAccounts))
}

// RemoveServiceAccount mocks base method
func (m *MockDataStore) RemoveServiceAccount(arg0 string) error {
	ret := m.ctrl.Call(m, "RemoveServiceAccount", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveServiceAccount indicates an expected call of RemoveServiceAccount
func (mr *MockDataStoreMockRecorder) RemoveServiceAccount(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveServiceAccount", reflect.TypeOf((*MockDataStore)(nil).RemoveServiceAccount), arg0)
}

// Search mocks base method
func (m *MockDataStore) Search(arg0 *v1.Query) ([]search.Result, error) {
	ret := m.ctrl.Call(m, "Search", arg0)
	ret0, _ := ret[0].([]search.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockDataStoreMockRecorder) Search(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockDataStore)(nil).Search), arg0)
}

// SearchRawServiceAccounts mocks base method
func (m *MockDataStore) SearchRawServiceAccounts(arg0 *v1.Query) ([]*storage.ServiceAccount, error) {
	ret := m.ctrl.Call(m, "SearchRawServiceAccounts", arg0)
	ret0, _ := ret[0].([]*storage.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchRawServiceAccounts indicates an expected call of SearchRawServiceAccounts
func (mr *MockDataStoreMockRecorder) SearchRawServiceAccounts(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchRawServiceAccounts", reflect.TypeOf((*MockDataStore)(nil).SearchRawServiceAccounts), arg0)
}

// SearchServiceAccounts mocks base method
func (m *MockDataStore) SearchServiceAccounts(arg0 *v1.Query) ([]*v1.SearchResult, error) {
	ret := m.ctrl.Call(m, "SearchServiceAccounts", arg0)
	ret0, _ := ret[0].([]*v1.SearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchServiceAccounts indicates an expected call of SearchServiceAccounts
func (mr *MockDataStoreMockRecorder) SearchServiceAccounts(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchServiceAccounts", reflect.TypeOf((*MockDataStore)(nil).SearchServiceAccounts), arg0)
}

// UpsertServiceAccount mocks base method
func (m *MockDataStore) UpsertServiceAccount(arg0 *storage.ServiceAccount) error {
	ret := m.ctrl.Call(m, "UpsertServiceAccount", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertServiceAccount indicates an expected call of UpsertServiceAccount
func (mr *MockDataStoreMockRecorder) UpsertServiceAccount(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertServiceAccount", reflect.TypeOf((*MockDataStore)(nil).UpsertServiceAccount), arg0)
}
