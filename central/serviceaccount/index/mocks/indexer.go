// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackrox/rox/central/serviceaccount/index (interfaces: Indexer)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	storage "github.com/stackrox/rox/generated/storage"
	reflect "reflect"
)

// MockIndexer is a mock of Indexer interface
type MockIndexer struct {
	ctrl     *gomock.Controller
	recorder *MockIndexerMockRecorder
}

// MockIndexerMockRecorder is the mock recorder for MockIndexer
type MockIndexerMockRecorder struct {
	mock *MockIndexer
}

// NewMockIndexer creates a new mock instance
func NewMockIndexer(ctrl *gomock.Controller) *MockIndexer {
	mock := &MockIndexer{ctrl: ctrl}
	mock.recorder = &MockIndexerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIndexer) EXPECT() *MockIndexerMockRecorder {
	return m.recorder
}

// RemoveServiceAccount mocks base method
func (m *MockIndexer) RemoveServiceAccount(arg0 string) error {
	ret := m.ctrl.Call(m, "RemoveServiceAccount", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveServiceAccount indicates an expected call of RemoveServiceAccount
func (mr *MockIndexerMockRecorder) RemoveServiceAccount(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveServiceAccount", reflect.TypeOf((*MockIndexer)(nil).RemoveServiceAccount), arg0)
}

// UpsertServiceAccount mocks base method
func (m *MockIndexer) UpsertServiceAccount(arg0 *storage.ServiceAccount) error {
	ret := m.ctrl.Call(m, "UpsertServiceAccount", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertServiceAccount indicates an expected call of UpsertServiceAccount
func (mr *MockIndexerMockRecorder) UpsertServiceAccount(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertServiceAccount", reflect.TypeOf((*MockIndexer)(nil).UpsertServiceAccount), arg0)
}

// UpsertServiceAccounts mocks base method
func (m *MockIndexer) UpsertServiceAccounts(arg0 ...*storage.ServiceAccount) error {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertServiceAccounts", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertServiceAccounts indicates an expected call of UpsertServiceAccounts
func (mr *MockIndexerMockRecorder) UpsertServiceAccounts(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertServiceAccounts", reflect.TypeOf((*MockIndexer)(nil).UpsertServiceAccounts), arg0...)
}
