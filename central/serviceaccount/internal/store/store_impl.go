// Code generated by boltbindings generator. DO NOT EDIT.

package store

import (
	bbolt "github.com/etcd-io/bbolt"
	proto1 "github.com/gogo/protobuf/proto"
	metrics "github.com/stackrox/rox/central/metrics"
	storage "github.com/stackrox/rox/generated/storage"
	bolthelper "github.com/stackrox/rox/pkg/bolthelper"
	proto "github.com/stackrox/rox/pkg/bolthelper/crud/proto"
	ops "github.com/stackrox/rox/pkg/metrics"
	"time"
)

var (
	bucketName = []byte("service_accounts")
)

type store struct {
	crud proto.MessageCrud
}

func key(msg proto1.Message) []byte {
	return []byte(msg.(*storage.ServiceAccount).GetId())
}

func alloc() proto1.Message {
	return new(storage.ServiceAccount)
}

func newStore(db *bbolt.DB) (*store, error) {
	if err := bolthelper.RegisterBucket(db, bucketName); err != nil {
		return nil, err
	}
	return &store{crud: proto.NewMessageCrud(db, bucketName, key, alloc)}, nil
}

func (s *store) DeleteServiceAccount(id string) error {
	defer metrics.SetBoltOperationDurationTime(time.Now(), ops.Remove, "ServiceAccount")
	return s.crud.Delete(id)
}

func (s *store) GetServiceAccount(id string) (*storage.ServiceAccount, bool, error) {
	defer metrics.SetBoltOperationDurationTime(time.Now(), ops.Get, "ServiceAccount")
	msg, err := s.crud.Read(id)
	if err != nil {
		return nil, msg == nil, err
	}
	if msg == nil {
		return nil, false, nil
	}
	storedKey := msg.(*storage.ServiceAccount)
	return storedKey, true, nil
}

func (s *store) ListServiceAccounts() ([]*storage.ServiceAccount, error) {
	defer metrics.SetBoltOperationDurationTime(time.Now(), ops.GetAll, "ServiceAccount")
	msgs, err := s.crud.ReadAll()
	if err != nil {
		return nil, err
	}
	storedKeys := make([]*storage.ServiceAccount, len(msgs))
	for i, msg := range msgs {
		storedKeys[i] = msg.(*storage.ServiceAccount)
	}
	return storedKeys, nil
}

func (s *store) UpsertServiceAccount(serviceaccount *storage.ServiceAccount) error {
	defer metrics.SetBoltOperationDurationTime(time.Now(), ops.Upsert, "ServiceAccount")
	return s.crud.Upsert(serviceaccount)
}
