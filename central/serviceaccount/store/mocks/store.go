// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackrox/rox/central/serviceaccount/store (interfaces: Store)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	storage "github.com/stackrox/rox/generated/storage"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CountServiceAccounts mocks base method
func (m *MockStore) CountServiceAccounts() (int, error) {
	ret := m.ctrl.Call(m, "CountServiceAccounts")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountServiceAccounts indicates an expected call of CountServiceAccounts
func (mr *MockStoreMockRecorder) CountServiceAccounts() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountServiceAccounts", reflect.TypeOf((*MockStore)(nil).CountServiceAccounts))
}

// GetAllServiceAccounts mocks base method
func (m *MockStore) GetAllServiceAccounts() ([]*storage.ServiceAccount, error) {
	ret := m.ctrl.Call(m, "GetAllServiceAccounts")
	ret0, _ := ret[0].([]*storage.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllServiceAccounts indicates an expected call of GetAllServiceAccounts
func (mr *MockStoreMockRecorder) GetAllServiceAccounts() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllServiceAccounts", reflect.TypeOf((*MockStore)(nil).GetAllServiceAccounts))
}

// GetServiceAccount mocks base method
func (m *MockStore) GetServiceAccount(arg0 string) (*storage.ServiceAccount, bool, error) {
	ret := m.ctrl.Call(m, "GetServiceAccount", arg0)
	ret0, _ := ret[0].(*storage.ServiceAccount)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetServiceAccount indicates an expected call of GetServiceAccount
func (mr *MockStoreMockRecorder) GetServiceAccount(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceAccount", reflect.TypeOf((*MockStore)(nil).GetServiceAccount), arg0)
}

// ListServiceAccounts mocks base method
func (m *MockStore) ListServiceAccounts(arg0 []string) ([]*storage.ServiceAccount, error) {
	ret := m.ctrl.Call(m, "ListServiceAccounts", arg0)
	ret0, _ := ret[0].([]*storage.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceAccounts indicates an expected call of ListServiceAccounts
func (mr *MockStoreMockRecorder) ListServiceAccounts(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceAccounts", reflect.TypeOf((*MockStore)(nil).ListServiceAccounts), arg0)
}

// RemoveServiceAccount mocks base method
func (m *MockStore) RemoveServiceAccount(arg0 string) error {
	ret := m.ctrl.Call(m, "RemoveServiceAccount", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveServiceAccount indicates an expected call of RemoveServiceAccount
func (mr *MockStoreMockRecorder) RemoveServiceAccount(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveServiceAccount", reflect.TypeOf((*MockStore)(nil).RemoveServiceAccount), arg0)
}

// UpsertServiceAccount mocks base method
func (m *MockStore) UpsertServiceAccount(arg0 *storage.ServiceAccount) error {
	ret := m.ctrl.Call(m, "UpsertServiceAccount", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertServiceAccount indicates an expected call of UpsertServiceAccount
func (mr *MockStoreMockRecorder) UpsertServiceAccount(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertServiceAccount", reflect.TypeOf((*MockStore)(nil).UpsertServiceAccount), arg0)
}
