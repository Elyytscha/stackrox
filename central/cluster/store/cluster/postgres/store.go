// Code generated by pg-bindings generator. DO NOT EDIT.

package postgres

import (
	"context"
	"reflect"
	"time"

	"github.com/gogo/protobuf/proto"
	"github.com/jackc/pgx/v4"
	"github.com/jackc/pgx/v4/pgxpool"
	"github.com/stackrox/rox/central/globaldb"
	"github.com/stackrox/rox/central/metrics"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/logging"
	ops "github.com/stackrox/rox/pkg/metrics"
	"github.com/stackrox/rox/pkg/postgres/pgutils"
	"github.com/stackrox/rox/pkg/postgres/walker"
)

const (
	baseTable  = "clusters"
	countStmt  = "SELECT COUNT(*) FROM clusters"
	existsStmt = "SELECT EXISTS(SELECT 1 FROM clusters WHERE id = $1)"

	getStmt     = "SELECT serialized FROM clusters WHERE id = $1"
	deleteStmt  = "DELETE FROM clusters WHERE id = $1"
	walkStmt    = "SELECT serialized FROM clusters"
	getIDsStmt  = "SELECT id FROM clusters"
	getManyStmt = "SELECT serialized FROM clusters WHERE id = ANY($1::text[])"

	deleteManyStmt = "DELETE FROM clusters WHERE id = ANY($1::text[])"

	batchAfter = 100

	// using copyFrom, we may not even want to batch.  It would probably be simpler
	// to deal with failures if we just sent it all.  Something to think about as we
	// proceed and move into more e2e and larger performance testing
	batchSize = 10000
)

var (
	schema = walker.Walk(reflect.TypeOf((*storage.Cluster)(nil)), baseTable)
	log    = logging.LoggerForModule()
)

func init() {
	globaldb.RegisterTable(schema)
}

type Store interface {
	Count(ctx context.Context) (int, error)
	Exists(ctx context.Context, id string) (bool, error)
	Get(ctx context.Context, id string) (*storage.Cluster, bool, error)
	Upsert(ctx context.Context, obj *storage.Cluster) error
	UpsertMany(ctx context.Context, objs []*storage.Cluster) error
	Delete(ctx context.Context, id string) error
	GetIDs(ctx context.Context) ([]string, error)
	GetMany(ctx context.Context, ids []string) ([]*storage.Cluster, []int, error)
	DeleteMany(ctx context.Context, ids []string) error

	Walk(ctx context.Context, fn func(obj *storage.Cluster) error) error

	AckKeysIndexed(ctx context.Context, keys ...string) error
	GetKeysToIndex(ctx context.Context) ([]string, error)
}

type storeImpl struct {
	db *pgxpool.Pool
}

func createTableClusters(ctx context.Context, db *pgxpool.Pool) {
	table := `
create table if not exists clusters (
    id varchar,
    name varchar UNIQUE,
    type integer,
    labels jsonb,
    mainimage varchar,
    collectorimage varchar,
    centralapiendpoint varchar,
    runtimesupport bool,
    collectionmethod integer,
    admissioncontroller bool,
    admissioncontrollerupdates bool,
    admissioncontrollerevents bool,
    status_sensorversion varchar,
    status_deprecatedlastcontact timestamp,
    status_providermetadata_region varchar,
    status_providermetadata_zone varchar,
    status_providermetadata_google_project varchar,
    status_providermetadata_google_clustername varchar,
    status_providermetadata_aws_accountid varchar,
    status_providermetadata_azure_subscriptionid varchar,
    status_providermetadata_verified bool,
    status_orchestratormetadata_version varchar,
    status_orchestratormetadata_openshiftversion varchar,
    status_orchestratormetadata_builddate timestamp,
    status_orchestratormetadata_apiversions text[],
    status_upgradestatus_upgradability integer,
    status_upgradestatus_upgradabilitystatusreason varchar,
    status_upgradestatus_mostrecentprocess_active bool,
    status_upgradestatus_mostrecentprocess_id varchar,
    status_upgradestatus_mostrecentprocess_targetversion varchar,
    status_upgradestatus_mostrecentprocess_upgraderimage varchar,
    status_upgradestatus_mostrecentprocess_initiatedat timestamp,
    status_upgradestatus_mostrecentprocess_progress_upgradestate integer,
    status_upgradestatus_mostrecentprocess_progress_upgradestatusdetail varchar,
    status_upgradestatus_mostrecentprocess_progress_since timestamp,
    status_upgradestatus_mostrecentprocess_type integer,
    status_certexpirystatus_sensorcertexpiry timestamp,
    status_certexpirystatus_sensorcertnotbefore timestamp,
    dynamicconfig_admissioncontrollerconfig_enabled bool,
    dynamicconfig_admissioncontrollerconfig_timeoutseconds integer,
    dynamicconfig_admissioncontrollerconfig_scaninline bool,
    dynamicconfig_admissioncontrollerconfig_disablebypass bool,
    dynamicconfig_admissioncontrollerconfig_enforceonupdates bool,
    dynamicconfig_registryoverride varchar,
    dynamicconfig_disableauditlogs bool,
    tolerationsconfig_disabled bool,
    priority integer,
    healthstatus_id varchar,
    healthstatus_collectorhealthinfo_version varchar,
    healthstatus_collectorhealthinfo_totaldesiredpods integer,
    healthstatus_collectorhealthinfo_totalreadypods integer,
    healthstatus_collectorhealthinfo_totalregisterednodes integer,
    healthstatus_collectorhealthinfo_statuserrors text[],
    healthstatus_admissioncontrolhealthinfo_totaldesiredpods integer,
    healthstatus_admissioncontrolhealthinfo_totalreadypods integer,
    healthstatus_admissioncontrolhealthinfo_statuserrors text[],
    healthstatus_sensorhealthstatus integer,
    healthstatus_collectorhealthstatus integer,
    healthstatus_overallhealthstatus integer,
    healthstatus_admissioncontrolhealthstatus integer,
    healthstatus_lastcontact timestamp,
    healthstatus_healthinfocomplete bool,
    slimcollector bool,
    helmconfig_dynamicconfig_admissioncontrollerconfig_enabled bool,
    helmconfig_dynamicconfig_admissioncontrollerconfig_timeoutseconds integer,
    helmconfig_dynamicconfig_admissioncontrollerconfig_scaninline bool,
    helmconfig_dynamicconfig_admissioncontrollerconfig_disablebypass bool,
    helmconfig_dynamicconfig_admissioncontrollerconfig_enforceonupdates bool,
    helmconfig_dynamicconfig_registryoverride varchar,
    helmconfig_dynamicconfig_disableauditlogs bool,
    helmconfig_staticconfig_type integer,
    helmconfig_staticconfig_mainimage varchar,
    helmconfig_staticconfig_centralapiendpoint varchar,
    helmconfig_staticconfig_collectionmethod integer,
    helmconfig_staticconfig_collectorimage varchar,
    helmconfig_staticconfig_admissioncontroller bool,
    helmconfig_staticconfig_admissioncontrollerupdates bool,
    helmconfig_staticconfig_tolerationsconfig_disabled bool,
    helmconfig_staticconfig_slimcollector bool,
    helmconfig_staticconfig_admissioncontrollerevents bool,
    helmconfig_configfingerprint varchar,
    helmconfig_clusterlabels jsonb,
    mostrecentsensorid_systemnamespaceid varchar,
    mostrecentsensorid_defaultnamespaceid varchar,
    mostrecentsensorid_appnamespace varchar,
    mostrecentsensorid_appnamespaceid varchar,
    mostrecentsensorid_appserviceaccountid varchar,
    mostrecentsensorid_k8snodename varchar,
    auditlogstate jsonb,
    initbundleid varchar,
    managedby integer,
    serialized bytea,
    PRIMARY KEY(id)
)
`

	_, err := db.Exec(ctx, table)
	if err != nil {
		log.Panicf("Error creating table %s: %v", table, err)
	}

	indexes := []string{}
	for _, index := range indexes {
		if _, err := db.Exec(ctx, index); err != nil {
			log.Panicf("Error creating index %s: %v", index, err)
		}
	}

}

func insertIntoClusters(ctx context.Context, tx pgx.Tx, obj *storage.Cluster) error {

	serialized, marshalErr := obj.Marshal()
	if marshalErr != nil {
		return marshalErr
	}

	values := []interface{}{
		// parent primary keys start
		obj.GetId(),
		obj.GetName(),
		obj.GetType(),
		obj.GetLabels(),
		obj.GetMainImage(),
		obj.GetCollectorImage(),
		obj.GetCentralApiEndpoint(),
		obj.GetRuntimeSupport(),
		obj.GetCollectionMethod(),
		obj.GetAdmissionController(),
		obj.GetAdmissionControllerUpdates(),
		obj.GetAdmissionControllerEvents(),
		obj.GetStatus().GetSensorVersion(),
		pgutils.NilOrTime(obj.GetStatus().GetDEPRECATEDLastContact()),
		obj.GetStatus().GetProviderMetadata().GetRegion(),
		obj.GetStatus().GetProviderMetadata().GetZone(),
		obj.GetStatus().GetProviderMetadata().GetGoogle().GetProject(),
		obj.GetStatus().GetProviderMetadata().GetGoogle().GetClusterName(),
		obj.GetStatus().GetProviderMetadata().GetAws().GetAccountId(),
		obj.GetStatus().GetProviderMetadata().GetAzure().GetSubscriptionId(),
		obj.GetStatus().GetProviderMetadata().GetVerified(),
		obj.GetStatus().GetOrchestratorMetadata().GetVersion(),
		obj.GetStatus().GetOrchestratorMetadata().GetOpenshiftVersion(),
		pgutils.NilOrTime(obj.GetStatus().GetOrchestratorMetadata().GetBuildDate()),
		obj.GetStatus().GetOrchestratorMetadata().GetApiVersions(),
		obj.GetStatus().GetUpgradeStatus().GetUpgradability(),
		obj.GetStatus().GetUpgradeStatus().GetUpgradabilityStatusReason(),
		obj.GetStatus().GetUpgradeStatus().GetMostRecentProcess().GetActive(),
		obj.GetStatus().GetUpgradeStatus().GetMostRecentProcess().GetId(),
		obj.GetStatus().GetUpgradeStatus().GetMostRecentProcess().GetTargetVersion(),
		obj.GetStatus().GetUpgradeStatus().GetMostRecentProcess().GetUpgraderImage(),
		pgutils.NilOrTime(obj.GetStatus().GetUpgradeStatus().GetMostRecentProcess().GetInitiatedAt()),
		obj.GetStatus().GetUpgradeStatus().GetMostRecentProcess().GetProgress().GetUpgradeState(),
		obj.GetStatus().GetUpgradeStatus().GetMostRecentProcess().GetProgress().GetUpgradeStatusDetail(),
		pgutils.NilOrTime(obj.GetStatus().GetUpgradeStatus().GetMostRecentProcess().GetProgress().GetSince()),
		obj.GetStatus().GetUpgradeStatus().GetMostRecentProcess().GetType(),
		pgutils.NilOrTime(obj.GetStatus().GetCertExpiryStatus().GetSensorCertExpiry()),
		pgutils.NilOrTime(obj.GetStatus().GetCertExpiryStatus().GetSensorCertNotBefore()),
		obj.GetDynamicConfig().GetAdmissionControllerConfig().GetEnabled(),
		obj.GetDynamicConfig().GetAdmissionControllerConfig().GetTimeoutSeconds(),
		obj.GetDynamicConfig().GetAdmissionControllerConfig().GetScanInline(),
		obj.GetDynamicConfig().GetAdmissionControllerConfig().GetDisableBypass(),
		obj.GetDynamicConfig().GetAdmissionControllerConfig().GetEnforceOnUpdates(),
		obj.GetDynamicConfig().GetRegistryOverride(),
		obj.GetDynamicConfig().GetDisableAuditLogs(),
		obj.GetTolerationsConfig().GetDisabled(),
		obj.GetPriority(),
		obj.GetHealthStatus().GetId(),
		obj.GetHealthStatus().GetCollectorHealthInfo().GetVersion(),
		obj.GetHealthStatus().GetCollectorHealthInfo().GetTotalDesiredPods(),
		obj.GetHealthStatus().GetCollectorHealthInfo().GetTotalReadyPods(),
		obj.GetHealthStatus().GetCollectorHealthInfo().GetTotalRegisteredNodes(),
		obj.GetHealthStatus().GetCollectorHealthInfo().GetStatusErrors(),
		obj.GetHealthStatus().GetAdmissionControlHealthInfo().GetTotalDesiredPods(),
		obj.GetHealthStatus().GetAdmissionControlHealthInfo().GetTotalReadyPods(),
		obj.GetHealthStatus().GetAdmissionControlHealthInfo().GetStatusErrors(),
		obj.GetHealthStatus().GetSensorHealthStatus(),
		obj.GetHealthStatus().GetCollectorHealthStatus(),
		obj.GetHealthStatus().GetOverallHealthStatus(),
		obj.GetHealthStatus().GetAdmissionControlHealthStatus(),
		pgutils.NilOrTime(obj.GetHealthStatus().GetLastContact()),
		obj.GetHealthStatus().GetHealthInfoComplete(),
		obj.GetSlimCollector(),
		obj.GetHelmConfig().GetDynamicConfig().GetAdmissionControllerConfig().GetEnabled(),
		obj.GetHelmConfig().GetDynamicConfig().GetAdmissionControllerConfig().GetTimeoutSeconds(),
		obj.GetHelmConfig().GetDynamicConfig().GetAdmissionControllerConfig().GetScanInline(),
		obj.GetHelmConfig().GetDynamicConfig().GetAdmissionControllerConfig().GetDisableBypass(),
		obj.GetHelmConfig().GetDynamicConfig().GetAdmissionControllerConfig().GetEnforceOnUpdates(),
		obj.GetHelmConfig().GetDynamicConfig().GetRegistryOverride(),
		obj.GetHelmConfig().GetDynamicConfig().GetDisableAuditLogs(),
		obj.GetHelmConfig().GetStaticConfig().GetType(),
		obj.GetHelmConfig().GetStaticConfig().GetMainImage(),
		obj.GetHelmConfig().GetStaticConfig().GetCentralApiEndpoint(),
		obj.GetHelmConfig().GetStaticConfig().GetCollectionMethod(),
		obj.GetHelmConfig().GetStaticConfig().GetCollectorImage(),
		obj.GetHelmConfig().GetStaticConfig().GetAdmissionController(),
		obj.GetHelmConfig().GetStaticConfig().GetAdmissionControllerUpdates(),
		obj.GetHelmConfig().GetStaticConfig().GetTolerationsConfig().GetDisabled(),
		obj.GetHelmConfig().GetStaticConfig().GetSlimCollector(),
		obj.GetHelmConfig().GetStaticConfig().GetAdmissionControllerEvents(),
		obj.GetHelmConfig().GetConfigFingerprint(),
		obj.GetHelmConfig().GetClusterLabels(),
		obj.GetMostRecentSensorId().GetSystemNamespaceId(),
		obj.GetMostRecentSensorId().GetDefaultNamespaceId(),
		obj.GetMostRecentSensorId().GetAppNamespace(),
		obj.GetMostRecentSensorId().GetAppNamespaceId(),
		obj.GetMostRecentSensorId().GetAppServiceaccountId(),
		obj.GetMostRecentSensorId().GetK8SNodeName(),
		obj.GetAuditLogState(),
		obj.GetInitBundleId(),
		obj.GetManagedBy(),
		serialized,
	}

	finalStr := "INSERT INTO clusters (id, name, type, labels, mainimage, collectorimage, centralapiendpoint, runtimesupport, collectionmethod, admissioncontroller, admissioncontrollerupdates, admissioncontrollerevents, status_sensorversion, status_deprecatedlastcontact, status_providermetadata_region, status_providermetadata_zone, status_providermetadata_google_project, status_providermetadata_google_clustername, status_providermetadata_aws_accountid, status_providermetadata_azure_subscriptionid, status_providermetadata_verified, status_orchestratormetadata_version, status_orchestratormetadata_openshiftversion, status_orchestratormetadata_builddate, status_orchestratormetadata_apiversions, status_upgradestatus_upgradability, status_upgradestatus_upgradabilitystatusreason, status_upgradestatus_mostrecentprocess_active, status_upgradestatus_mostrecentprocess_id, status_upgradestatus_mostrecentprocess_targetversion, status_upgradestatus_mostrecentprocess_upgraderimage, status_upgradestatus_mostrecentprocess_initiatedat, status_upgradestatus_mostrecentprocess_progress_upgradestate, status_upgradestatus_mostrecentprocess_progress_upgradestatusdetail, status_upgradestatus_mostrecentprocess_progress_since, status_upgradestatus_mostrecentprocess_type, status_certexpirystatus_sensorcertexpiry, status_certexpirystatus_sensorcertnotbefore, dynamicconfig_admissioncontrollerconfig_enabled, dynamicconfig_admissioncontrollerconfig_timeoutseconds, dynamicconfig_admissioncontrollerconfig_scaninline, dynamicconfig_admissioncontrollerconfig_disablebypass, dynamicconfig_admissioncontrollerconfig_enforceonupdates, dynamicconfig_registryoverride, dynamicconfig_disableauditlogs, tolerationsconfig_disabled, priority, healthstatus_id, healthstatus_collectorhealthinfo_version, healthstatus_collectorhealthinfo_totaldesiredpods, healthstatus_collectorhealthinfo_totalreadypods, healthstatus_collectorhealthinfo_totalregisterednodes, healthstatus_collectorhealthinfo_statuserrors, healthstatus_admissioncontrolhealthinfo_totaldesiredpods, healthstatus_admissioncontrolhealthinfo_totalreadypods, healthstatus_admissioncontrolhealthinfo_statuserrors, healthstatus_sensorhealthstatus, healthstatus_collectorhealthstatus, healthstatus_overallhealthstatus, healthstatus_admissioncontrolhealthstatus, healthstatus_lastcontact, healthstatus_healthinfocomplete, slimcollector, helmconfig_dynamicconfig_admissioncontrollerconfig_enabled, helmconfig_dynamicconfig_admissioncontrollerconfig_timeoutseconds, helmconfig_dynamicconfig_admissioncontrollerconfig_scaninline, helmconfig_dynamicconfig_admissioncontrollerconfig_disablebypass, helmconfig_dynamicconfig_admissioncontrollerconfig_enforceonupdates, helmconfig_dynamicconfig_registryoverride, helmconfig_dynamicconfig_disableauditlogs, helmconfig_staticconfig_type, helmconfig_staticconfig_mainimage, helmconfig_staticconfig_centralapiendpoint, helmconfig_staticconfig_collectionmethod, helmconfig_staticconfig_collectorimage, helmconfig_staticconfig_admissioncontroller, helmconfig_staticconfig_admissioncontrollerupdates, helmconfig_staticconfig_tolerationsconfig_disabled, helmconfig_staticconfig_slimcollector, helmconfig_staticconfig_admissioncontrollerevents, helmconfig_configfingerprint, helmconfig_clusterlabels, mostrecentsensorid_systemnamespaceid, mostrecentsensorid_defaultnamespaceid, mostrecentsensorid_appnamespace, mostrecentsensorid_appnamespaceid, mostrecentsensorid_appserviceaccountid, mostrecentsensorid_k8snodename, auditlogstate, initbundleid, managedby, serialized) VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64, $65, $66, $67, $68, $69, $70, $71, $72, $73, $74, $75, $76, $77, $78, $79, $80, $81, $82, $83, $84, $85, $86, $87, $88, $89, $90, $91, $92) ON CONFLICT(id) DO UPDATE SET id = EXCLUDED.id, name = EXCLUDED.name, type = EXCLUDED.type, labels = EXCLUDED.labels, mainimage = EXCLUDED.mainimage, collectorimage = EXCLUDED.collectorimage, centralapiendpoint = EXCLUDED.centralapiendpoint, runtimesupport = EXCLUDED.runtimesupport, collectionmethod = EXCLUDED.collectionmethod, admissioncontroller = EXCLUDED.admissioncontroller, admissioncontrollerupdates = EXCLUDED.admissioncontrollerupdates, admissioncontrollerevents = EXCLUDED.admissioncontrollerevents, status_sensorversion = EXCLUDED.status_sensorversion, status_deprecatedlastcontact = EXCLUDED.status_deprecatedlastcontact, status_providermetadata_region = EXCLUDED.status_providermetadata_region, status_providermetadata_zone = EXCLUDED.status_providermetadata_zone, status_providermetadata_google_project = EXCLUDED.status_providermetadata_google_project, status_providermetadata_google_clustername = EXCLUDED.status_providermetadata_google_clustername, status_providermetadata_aws_accountid = EXCLUDED.status_providermetadata_aws_accountid, status_providermetadata_azure_subscriptionid = EXCLUDED.status_providermetadata_azure_subscriptionid, status_providermetadata_verified = EXCLUDED.status_providermetadata_verified, status_orchestratormetadata_version = EXCLUDED.status_orchestratormetadata_version, status_orchestratormetadata_openshiftversion = EXCLUDED.status_orchestratormetadata_openshiftversion, status_orchestratormetadata_builddate = EXCLUDED.status_orchestratormetadata_builddate, status_orchestratormetadata_apiversions = EXCLUDED.status_orchestratormetadata_apiversions, status_upgradestatus_upgradability = EXCLUDED.status_upgradestatus_upgradability, status_upgradestatus_upgradabilitystatusreason = EXCLUDED.status_upgradestatus_upgradabilitystatusreason, status_upgradestatus_mostrecentprocess_active = EXCLUDED.status_upgradestatus_mostrecentprocess_active, status_upgradestatus_mostrecentprocess_id = EXCLUDED.status_upgradestatus_mostrecentprocess_id, status_upgradestatus_mostrecentprocess_targetversion = EXCLUDED.status_upgradestatus_mostrecentprocess_targetversion, status_upgradestatus_mostrecentprocess_upgraderimage = EXCLUDED.status_upgradestatus_mostrecentprocess_upgraderimage, status_upgradestatus_mostrecentprocess_initiatedat = EXCLUDED.status_upgradestatus_mostrecentprocess_initiatedat, status_upgradestatus_mostrecentprocess_progress_upgradestate = EXCLUDED.status_upgradestatus_mostrecentprocess_progress_upgradestate, status_upgradestatus_mostrecentprocess_progress_upgradestatusdetail = EXCLUDED.status_upgradestatus_mostrecentprocess_progress_upgradestatusdetail, status_upgradestatus_mostrecentprocess_progress_since = EXCLUDED.status_upgradestatus_mostrecentprocess_progress_since, status_upgradestatus_mostrecentprocess_type = EXCLUDED.status_upgradestatus_mostrecentprocess_type, status_certexpirystatus_sensorcertexpiry = EXCLUDED.status_certexpirystatus_sensorcertexpiry, status_certexpirystatus_sensorcertnotbefore = EXCLUDED.status_certexpirystatus_sensorcertnotbefore, dynamicconfig_admissioncontrollerconfig_enabled = EXCLUDED.dynamicconfig_admissioncontrollerconfig_enabled, dynamicconfig_admissioncontrollerconfig_timeoutseconds = EXCLUDED.dynamicconfig_admissioncontrollerconfig_timeoutseconds, dynamicconfig_admissioncontrollerconfig_scaninline = EXCLUDED.dynamicconfig_admissioncontrollerconfig_scaninline, dynamicconfig_admissioncontrollerconfig_disablebypass = EXCLUDED.dynamicconfig_admissioncontrollerconfig_disablebypass, dynamicconfig_admissioncontrollerconfig_enforceonupdates = EXCLUDED.dynamicconfig_admissioncontrollerconfig_enforceonupdates, dynamicconfig_registryoverride = EXCLUDED.dynamicconfig_registryoverride, dynamicconfig_disableauditlogs = EXCLUDED.dynamicconfig_disableauditlogs, tolerationsconfig_disabled = EXCLUDED.tolerationsconfig_disabled, priority = EXCLUDED.priority, healthstatus_id = EXCLUDED.healthstatus_id, healthstatus_collectorhealthinfo_version = EXCLUDED.healthstatus_collectorhealthinfo_version, healthstatus_collectorhealthinfo_totaldesiredpods = EXCLUDED.healthstatus_collectorhealthinfo_totaldesiredpods, healthstatus_collectorhealthinfo_totalreadypods = EXCLUDED.healthstatus_collectorhealthinfo_totalreadypods, healthstatus_collectorhealthinfo_totalregisterednodes = EXCLUDED.healthstatus_collectorhealthinfo_totalregisterednodes, healthstatus_collectorhealthinfo_statuserrors = EXCLUDED.healthstatus_collectorhealthinfo_statuserrors, healthstatus_admissioncontrolhealthinfo_totaldesiredpods = EXCLUDED.healthstatus_admissioncontrolhealthinfo_totaldesiredpods, healthstatus_admissioncontrolhealthinfo_totalreadypods = EXCLUDED.healthstatus_admissioncontrolhealthinfo_totalreadypods, healthstatus_admissioncontrolhealthinfo_statuserrors = EXCLUDED.healthstatus_admissioncontrolhealthinfo_statuserrors, healthstatus_sensorhealthstatus = EXCLUDED.healthstatus_sensorhealthstatus, healthstatus_collectorhealthstatus = EXCLUDED.healthstatus_collectorhealthstatus, healthstatus_overallhealthstatus = EXCLUDED.healthstatus_overallhealthstatus, healthstatus_admissioncontrolhealthstatus = EXCLUDED.healthstatus_admissioncontrolhealthstatus, healthstatus_lastcontact = EXCLUDED.healthstatus_lastcontact, healthstatus_healthinfocomplete = EXCLUDED.healthstatus_healthinfocomplete, slimcollector = EXCLUDED.slimcollector, helmconfig_dynamicconfig_admissioncontrollerconfig_enabled = EXCLUDED.helmconfig_dynamicconfig_admissioncontrollerconfig_enabled, helmconfig_dynamicconfig_admissioncontrollerconfig_timeoutseconds = EXCLUDED.helmconfig_dynamicconfig_admissioncontrollerconfig_timeoutseconds, helmconfig_dynamicconfig_admissioncontrollerconfig_scaninline = EXCLUDED.helmconfig_dynamicconfig_admissioncontrollerconfig_scaninline, helmconfig_dynamicconfig_admissioncontrollerconfig_disablebypass = EXCLUDED.helmconfig_dynamicconfig_admissioncontrollerconfig_disablebypass, helmconfig_dynamicconfig_admissioncontrollerconfig_enforceonupdates = EXCLUDED.helmconfig_dynamicconfig_admissioncontrollerconfig_enforceonupdates, helmconfig_dynamicconfig_registryoverride = EXCLUDED.helmconfig_dynamicconfig_registryoverride, helmconfig_dynamicconfig_disableauditlogs = EXCLUDED.helmconfig_dynamicconfig_disableauditlogs, helmconfig_staticconfig_type = EXCLUDED.helmconfig_staticconfig_type, helmconfig_staticconfig_mainimage = EXCLUDED.helmconfig_staticconfig_mainimage, helmconfig_staticconfig_centralapiendpoint = EXCLUDED.helmconfig_staticconfig_centralapiendpoint, helmconfig_staticconfig_collectionmethod = EXCLUDED.helmconfig_staticconfig_collectionmethod, helmconfig_staticconfig_collectorimage = EXCLUDED.helmconfig_staticconfig_collectorimage, helmconfig_staticconfig_admissioncontroller = EXCLUDED.helmconfig_staticconfig_admissioncontroller, helmconfig_staticconfig_admissioncontrollerupdates = EXCLUDED.helmconfig_staticconfig_admissioncontrollerupdates, helmconfig_staticconfig_tolerationsconfig_disabled = EXCLUDED.helmconfig_staticconfig_tolerationsconfig_disabled, helmconfig_staticconfig_slimcollector = EXCLUDED.helmconfig_staticconfig_slimcollector, helmconfig_staticconfig_admissioncontrollerevents = EXCLUDED.helmconfig_staticconfig_admissioncontrollerevents, helmconfig_configfingerprint = EXCLUDED.helmconfig_configfingerprint, helmconfig_clusterlabels = EXCLUDED.helmconfig_clusterlabels, mostrecentsensorid_systemnamespaceid = EXCLUDED.mostrecentsensorid_systemnamespaceid, mostrecentsensorid_defaultnamespaceid = EXCLUDED.mostrecentsensorid_defaultnamespaceid, mostrecentsensorid_appnamespace = EXCLUDED.mostrecentsensorid_appnamespace, mostrecentsensorid_appnamespaceid = EXCLUDED.mostrecentsensorid_appnamespaceid, mostrecentsensorid_appserviceaccountid = EXCLUDED.mostrecentsensorid_appserviceaccountid, mostrecentsensorid_k8snodename = EXCLUDED.mostrecentsensorid_k8snodename, auditlogstate = EXCLUDED.auditlogstate, initbundleid = EXCLUDED.initbundleid, managedby = EXCLUDED.managedby, serialized = EXCLUDED.serialized"
	_, err := tx.Exec(ctx, finalStr, values...)
	if err != nil {
		return err
	}

	return nil
}

func (s *storeImpl) copyFromClusters(ctx context.Context, tx pgx.Tx, objs ...*storage.Cluster) error {

	inputRows := [][]interface{}{}

	var err error

	// This is a copy so first we must delete the rows and re-add them
	// Which is essentially the desired behaviour of an upsert.
	var deletes []string

	copyCols := []string{

		"id",

		"name",

		"type",

		"labels",

		"mainimage",

		"collectorimage",

		"centralapiendpoint",

		"runtimesupport",

		"collectionmethod",

		"admissioncontroller",

		"admissioncontrollerupdates",

		"admissioncontrollerevents",

		"status_sensorversion",

		"status_deprecatedlastcontact",

		"status_providermetadata_region",

		"status_providermetadata_zone",

		"status_providermetadata_google_project",

		"status_providermetadata_google_clustername",

		"status_providermetadata_aws_accountid",

		"status_providermetadata_azure_subscriptionid",

		"status_providermetadata_verified",

		"status_orchestratormetadata_version",

		"status_orchestratormetadata_openshiftversion",

		"status_orchestratormetadata_builddate",

		"status_orchestratormetadata_apiversions",

		"status_upgradestatus_upgradability",

		"status_upgradestatus_upgradabilitystatusreason",

		"status_upgradestatus_mostrecentprocess_active",

		"status_upgradestatus_mostrecentprocess_id",

		"status_upgradestatus_mostrecentprocess_targetversion",

		"status_upgradestatus_mostrecentprocess_upgraderimage",

		"status_upgradestatus_mostrecentprocess_initiatedat",

		"status_upgradestatus_mostrecentprocess_progress_upgradestate",

		"status_upgradestatus_mostrecentprocess_progress_upgradestatusdetail",

		"status_upgradestatus_mostrecentprocess_progress_since",

		"status_upgradestatus_mostrecentprocess_type",

		"status_certexpirystatus_sensorcertexpiry",

		"status_certexpirystatus_sensorcertnotbefore",

		"dynamicconfig_admissioncontrollerconfig_enabled",

		"dynamicconfig_admissioncontrollerconfig_timeoutseconds",

		"dynamicconfig_admissioncontrollerconfig_scaninline",

		"dynamicconfig_admissioncontrollerconfig_disablebypass",

		"dynamicconfig_admissioncontrollerconfig_enforceonupdates",

		"dynamicconfig_registryoverride",

		"dynamicconfig_disableauditlogs",

		"tolerationsconfig_disabled",

		"priority",

		"healthstatus_id",

		"healthstatus_collectorhealthinfo_version",

		"healthstatus_collectorhealthinfo_totaldesiredpods",

		"healthstatus_collectorhealthinfo_totalreadypods",

		"healthstatus_collectorhealthinfo_totalregisterednodes",

		"healthstatus_collectorhealthinfo_statuserrors",

		"healthstatus_admissioncontrolhealthinfo_totaldesiredpods",

		"healthstatus_admissioncontrolhealthinfo_totalreadypods",

		"healthstatus_admissioncontrolhealthinfo_statuserrors",

		"healthstatus_sensorhealthstatus",

		"healthstatus_collectorhealthstatus",

		"healthstatus_overallhealthstatus",

		"healthstatus_admissioncontrolhealthstatus",

		"healthstatus_lastcontact",

		"healthstatus_healthinfocomplete",

		"slimcollector",

		"helmconfig_dynamicconfig_admissioncontrollerconfig_enabled",

		"helmconfig_dynamicconfig_admissioncontrollerconfig_timeoutseconds",

		"helmconfig_dynamicconfig_admissioncontrollerconfig_scaninline",

		"helmconfig_dynamicconfig_admissioncontrollerconfig_disablebypass",

		"helmconfig_dynamicconfig_admissioncontrollerconfig_enforceonupdates",

		"helmconfig_dynamicconfig_registryoverride",

		"helmconfig_dynamicconfig_disableauditlogs",

		"helmconfig_staticconfig_type",

		"helmconfig_staticconfig_mainimage",

		"helmconfig_staticconfig_centralapiendpoint",

		"helmconfig_staticconfig_collectionmethod",

		"helmconfig_staticconfig_collectorimage",

		"helmconfig_staticconfig_admissioncontroller",

		"helmconfig_staticconfig_admissioncontrollerupdates",

		"helmconfig_staticconfig_tolerationsconfig_disabled",

		"helmconfig_staticconfig_slimcollector",

		"helmconfig_staticconfig_admissioncontrollerevents",

		"helmconfig_configfingerprint",

		"helmconfig_clusterlabels",

		"mostrecentsensorid_systemnamespaceid",

		"mostrecentsensorid_defaultnamespaceid",

		"mostrecentsensorid_appnamespace",

		"mostrecentsensorid_appnamespaceid",

		"mostrecentsensorid_appserviceaccountid",

		"mostrecentsensorid_k8snodename",

		"auditlogstate",

		"initbundleid",

		"managedby",

		"serialized",
	}

	for idx, obj := range objs {
		// Todo: ROX-9499 Figure out how to more cleanly template around this issue.
		log.Debugf("This is here for now because there is an issue with pods_TerminatedInstances where the obj in the loop is not used as it only consists of the parent id and the idx.  Putting this here as a stop gap to simply use the object.  %s", obj)

		serialized, marshalErr := obj.Marshal()
		if marshalErr != nil {
			return marshalErr
		}

		inputRows = append(inputRows, []interface{}{

			obj.GetId(),

			obj.GetName(),

			obj.GetType(),

			obj.GetLabels(),

			obj.GetMainImage(),

			obj.GetCollectorImage(),

			obj.GetCentralApiEndpoint(),

			obj.GetRuntimeSupport(),

			obj.GetCollectionMethod(),

			obj.GetAdmissionController(),

			obj.GetAdmissionControllerUpdates(),

			obj.GetAdmissionControllerEvents(),

			obj.GetStatus().GetSensorVersion(),

			pgutils.NilOrTime(obj.GetStatus().GetDEPRECATEDLastContact()),

			obj.GetStatus().GetProviderMetadata().GetRegion(),

			obj.GetStatus().GetProviderMetadata().GetZone(),

			obj.GetStatus().GetProviderMetadata().GetGoogle().GetProject(),

			obj.GetStatus().GetProviderMetadata().GetGoogle().GetClusterName(),

			obj.GetStatus().GetProviderMetadata().GetAws().GetAccountId(),

			obj.GetStatus().GetProviderMetadata().GetAzure().GetSubscriptionId(),

			obj.GetStatus().GetProviderMetadata().GetVerified(),

			obj.GetStatus().GetOrchestratorMetadata().GetVersion(),

			obj.GetStatus().GetOrchestratorMetadata().GetOpenshiftVersion(),

			pgutils.NilOrTime(obj.GetStatus().GetOrchestratorMetadata().GetBuildDate()),

			obj.GetStatus().GetOrchestratorMetadata().GetApiVersions(),

			obj.GetStatus().GetUpgradeStatus().GetUpgradability(),

			obj.GetStatus().GetUpgradeStatus().GetUpgradabilityStatusReason(),

			obj.GetStatus().GetUpgradeStatus().GetMostRecentProcess().GetActive(),

			obj.GetStatus().GetUpgradeStatus().GetMostRecentProcess().GetId(),

			obj.GetStatus().GetUpgradeStatus().GetMostRecentProcess().GetTargetVersion(),

			obj.GetStatus().GetUpgradeStatus().GetMostRecentProcess().GetUpgraderImage(),

			pgutils.NilOrTime(obj.GetStatus().GetUpgradeStatus().GetMostRecentProcess().GetInitiatedAt()),

			obj.GetStatus().GetUpgradeStatus().GetMostRecentProcess().GetProgress().GetUpgradeState(),

			obj.GetStatus().GetUpgradeStatus().GetMostRecentProcess().GetProgress().GetUpgradeStatusDetail(),

			pgutils.NilOrTime(obj.GetStatus().GetUpgradeStatus().GetMostRecentProcess().GetProgress().GetSince()),

			obj.GetStatus().GetUpgradeStatus().GetMostRecentProcess().GetType(),

			pgutils.NilOrTime(obj.GetStatus().GetCertExpiryStatus().GetSensorCertExpiry()),

			pgutils.NilOrTime(obj.GetStatus().GetCertExpiryStatus().GetSensorCertNotBefore()),

			obj.GetDynamicConfig().GetAdmissionControllerConfig().GetEnabled(),

			obj.GetDynamicConfig().GetAdmissionControllerConfig().GetTimeoutSeconds(),

			obj.GetDynamicConfig().GetAdmissionControllerConfig().GetScanInline(),

			obj.GetDynamicConfig().GetAdmissionControllerConfig().GetDisableBypass(),

			obj.GetDynamicConfig().GetAdmissionControllerConfig().GetEnforceOnUpdates(),

			obj.GetDynamicConfig().GetRegistryOverride(),

			obj.GetDynamicConfig().GetDisableAuditLogs(),

			obj.GetTolerationsConfig().GetDisabled(),

			obj.GetPriority(),

			obj.GetHealthStatus().GetId(),

			obj.GetHealthStatus().GetCollectorHealthInfo().GetVersion(),

			obj.GetHealthStatus().GetCollectorHealthInfo().GetTotalDesiredPods(),

			obj.GetHealthStatus().GetCollectorHealthInfo().GetTotalReadyPods(),

			obj.GetHealthStatus().GetCollectorHealthInfo().GetTotalRegisteredNodes(),

			obj.GetHealthStatus().GetCollectorHealthInfo().GetStatusErrors(),

			obj.GetHealthStatus().GetAdmissionControlHealthInfo().GetTotalDesiredPods(),

			obj.GetHealthStatus().GetAdmissionControlHealthInfo().GetTotalReadyPods(),

			obj.GetHealthStatus().GetAdmissionControlHealthInfo().GetStatusErrors(),

			obj.GetHealthStatus().GetSensorHealthStatus(),

			obj.GetHealthStatus().GetCollectorHealthStatus(),

			obj.GetHealthStatus().GetOverallHealthStatus(),

			obj.GetHealthStatus().GetAdmissionControlHealthStatus(),

			pgutils.NilOrTime(obj.GetHealthStatus().GetLastContact()),

			obj.GetHealthStatus().GetHealthInfoComplete(),

			obj.GetSlimCollector(),

			obj.GetHelmConfig().GetDynamicConfig().GetAdmissionControllerConfig().GetEnabled(),

			obj.GetHelmConfig().GetDynamicConfig().GetAdmissionControllerConfig().GetTimeoutSeconds(),

			obj.GetHelmConfig().GetDynamicConfig().GetAdmissionControllerConfig().GetScanInline(),

			obj.GetHelmConfig().GetDynamicConfig().GetAdmissionControllerConfig().GetDisableBypass(),

			obj.GetHelmConfig().GetDynamicConfig().GetAdmissionControllerConfig().GetEnforceOnUpdates(),

			obj.GetHelmConfig().GetDynamicConfig().GetRegistryOverride(),

			obj.GetHelmConfig().GetDynamicConfig().GetDisableAuditLogs(),

			obj.GetHelmConfig().GetStaticConfig().GetType(),

			obj.GetHelmConfig().GetStaticConfig().GetMainImage(),

			obj.GetHelmConfig().GetStaticConfig().GetCentralApiEndpoint(),

			obj.GetHelmConfig().GetStaticConfig().GetCollectionMethod(),

			obj.GetHelmConfig().GetStaticConfig().GetCollectorImage(),

			obj.GetHelmConfig().GetStaticConfig().GetAdmissionController(),

			obj.GetHelmConfig().GetStaticConfig().GetAdmissionControllerUpdates(),

			obj.GetHelmConfig().GetStaticConfig().GetTolerationsConfig().GetDisabled(),

			obj.GetHelmConfig().GetStaticConfig().GetSlimCollector(),

			obj.GetHelmConfig().GetStaticConfig().GetAdmissionControllerEvents(),

			obj.GetHelmConfig().GetConfigFingerprint(),

			obj.GetHelmConfig().GetClusterLabels(),

			obj.GetMostRecentSensorId().GetSystemNamespaceId(),

			obj.GetMostRecentSensorId().GetDefaultNamespaceId(),

			obj.GetMostRecentSensorId().GetAppNamespace(),

			obj.GetMostRecentSensorId().GetAppNamespaceId(),

			obj.GetMostRecentSensorId().GetAppServiceaccountId(),

			obj.GetMostRecentSensorId().GetK8SNodeName(),

			obj.GetAuditLogState(),

			obj.GetInitBundleId(),

			obj.GetManagedBy(),

			serialized,
		})

		// Add the id to be deleted.
		deletes = append(deletes, obj.GetId())

		// if we hit our batch size we need to push the data
		if (idx+1)%batchSize == 0 || idx == len(objs)-1 {
			// copy does not upsert so have to delete first.  parent deletion cascades so only need to
			// delete for the top level parent

			_, err = tx.Exec(ctx, deleteManyStmt, deletes)
			if err != nil {
				return err
			}
			// clear the inserts and vals for the next batch
			deletes = nil

			_, err = tx.CopyFrom(ctx, pgx.Identifier{"clusters"}, copyCols, pgx.CopyFromRows(inputRows))

			if err != nil {
				return err
			}

			// clear the input rows for the next batch
			inputRows = inputRows[:0]
		}
	}

	return err
}

// New returns a new Store instance using the provided sql instance.
func New(ctx context.Context, db *pgxpool.Pool) Store {
	createTableClusters(ctx, db)

	return &storeImpl{
		db: db,
	}
}

func (s *storeImpl) copyFrom(ctx context.Context, objs ...*storage.Cluster) error {
	conn, release := s.acquireConn(ctx, ops.Get, "Cluster")
	defer release()

	tx, err := conn.Begin(ctx)
	if err != nil {
		return err
	}

	if err := s.copyFromClusters(ctx, tx, objs...); err != nil {
		if err := tx.Rollback(ctx); err != nil {
			return err
		}
		return err
	}
	if err := tx.Commit(ctx); err != nil {
		return err
	}
	return nil
}

func (s *storeImpl) upsert(ctx context.Context, objs ...*storage.Cluster) error {
	conn, release := s.acquireConn(ctx, ops.Get, "Cluster")
	defer release()

	for _, obj := range objs {
		tx, err := conn.Begin(ctx)
		if err != nil {
			return err
		}

		if err := insertIntoClusters(ctx, tx, obj); err != nil {
			if err := tx.Rollback(ctx); err != nil {
				return err
			}
			return err
		}
		if err := tx.Commit(ctx); err != nil {
			return err
		}
	}
	return nil
}

func (s *storeImpl) Upsert(ctx context.Context, obj *storage.Cluster) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Upsert, "Cluster")

	return s.upsert(ctx, obj)
}

func (s *storeImpl) UpsertMany(ctx context.Context, objs []*storage.Cluster) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.UpdateMany, "Cluster")

	if len(objs) < batchAfter {
		return s.upsert(ctx, objs...)
	} else {
		return s.copyFrom(ctx, objs...)
	}
}

// Count returns the number of objects in the store
func (s *storeImpl) Count(ctx context.Context) (int, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Count, "Cluster")

	row := s.db.QueryRow(ctx, countStmt)
	var count int
	if err := row.Scan(&count); err != nil {
		return 0, err
	}
	return count, nil
}

// Exists returns if the id exists in the store
func (s *storeImpl) Exists(ctx context.Context, id string) (bool, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Exists, "Cluster")

	row := s.db.QueryRow(ctx, existsStmt, id)
	var exists bool
	if err := row.Scan(&exists); err != nil {
		return false, pgutils.ErrNilIfNoRows(err)
	}
	return exists, nil
}

// Get returns the object, if it exists from the store
func (s *storeImpl) Get(ctx context.Context, id string) (*storage.Cluster, bool, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Get, "Cluster")

	conn, release := s.acquireConn(ctx, ops.Get, "Cluster")
	defer release()

	row := conn.QueryRow(ctx, getStmt, id)
	var data []byte
	if err := row.Scan(&data); err != nil {
		return nil, false, pgutils.ErrNilIfNoRows(err)
	}

	var msg storage.Cluster
	if err := proto.Unmarshal(data, &msg); err != nil {
		return nil, false, err
	}
	return &msg, true, nil
}

func (s *storeImpl) acquireConn(ctx context.Context, op ops.Op, typ string) (*pgxpool.Conn, func()) {
	defer metrics.SetAcquireDBConnDuration(time.Now(), op, typ)
	conn, err := s.db.Acquire(ctx)
	if err != nil {
		panic(err)
	}
	return conn, conn.Release
}

// Delete removes the specified ID from the store
func (s *storeImpl) Delete(ctx context.Context, id string) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Remove, "Cluster")

	conn, release := s.acquireConn(ctx, ops.Remove, "Cluster")
	defer release()

	if _, err := conn.Exec(ctx, deleteStmt, id); err != nil {
		return err
	}
	return nil
}

// GetIDs returns all the IDs for the store
func (s *storeImpl) GetIDs(ctx context.Context) ([]string, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.GetAll, "storage.ClusterIDs")

	rows, err := s.db.Query(ctx, getIDsStmt)
	if err != nil {
		return nil, pgutils.ErrNilIfNoRows(err)
	}
	defer rows.Close()
	var ids []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		ids = append(ids, id)
	}
	return ids, nil
}

// GetMany returns the objects specified by the IDs or the index in the missing indices slice
func (s *storeImpl) GetMany(ctx context.Context, ids []string) ([]*storage.Cluster, []int, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.GetMany, "Cluster")

	conn, release := s.acquireConn(ctx, ops.GetMany, "Cluster")
	defer release()

	rows, err := conn.Query(ctx, getManyStmt, ids)
	if err != nil {
		if err == pgx.ErrNoRows {
			missingIndices := make([]int, 0, len(ids))
			for i := range ids {
				missingIndices = append(missingIndices, i)
			}
			return nil, missingIndices, nil
		}
		return nil, nil, err
	}
	defer rows.Close()
	resultsByID := make(map[string]*storage.Cluster)
	for rows.Next() {
		var data []byte
		if err := rows.Scan(&data); err != nil {
			return nil, nil, err
		}
		msg := &storage.Cluster{}
		if err := proto.Unmarshal(data, msg); err != nil {
			return nil, nil, err
		}
		resultsByID[msg.GetId()] = msg
	}
	missingIndices := make([]int, 0, len(ids)-len(resultsByID))
	// It is important that the elems are populated in the same order as the input ids
	// slice, since some calling code relies on that to maintain order.
	elems := make([]*storage.Cluster, 0, len(resultsByID))
	for i, id := range ids {
		if result, ok := resultsByID[id]; !ok {
			missingIndices = append(missingIndices, i)
		} else {
			elems = append(elems, result)
		}
	}
	return elems, missingIndices, nil
}

// Delete removes the specified IDs from the store
func (s *storeImpl) DeleteMany(ctx context.Context, ids []string) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.RemoveMany, "Cluster")

	conn, release := s.acquireConn(ctx, ops.RemoveMany, "Cluster")
	defer release()
	if _, err := conn.Exec(ctx, deleteManyStmt, ids); err != nil {
		return err
	}
	return nil
}

// Walk iterates over all of the objects in the store and applies the closure
func (s *storeImpl) Walk(ctx context.Context, fn func(obj *storage.Cluster) error) error {
	rows, err := s.db.Query(ctx, walkStmt)
	if err != nil {
		return pgutils.ErrNilIfNoRows(err)
	}
	defer rows.Close()
	for rows.Next() {
		var data []byte
		if err := rows.Scan(&data); err != nil {
			return err
		}
		var msg storage.Cluster
		if err := proto.Unmarshal(data, &msg); err != nil {
			return err
		}
		if err := fn(&msg); err != nil {
			return err
		}
	}
	return nil
}

//// Used for testing

func dropTableClusters(ctx context.Context, db *pgxpool.Pool) {
	_, _ = db.Exec(ctx, "DROP TABLE IF EXISTS clusters CASCADE")

}

func Destroy(ctx context.Context, db *pgxpool.Pool) {
	dropTableClusters(ctx, db)
}

//// Stubs for satisfying legacy interfaces

// AckKeysIndexed acknowledges the passed keys were indexed
func (s *storeImpl) AckKeysIndexed(ctx context.Context, keys ...string) error {
	return nil
}

// GetKeysToIndex returns the keys that need to be indexed
func (s *storeImpl) GetKeysToIndex(ctx context.Context) ([]string, error) {
	return nil, nil
}
