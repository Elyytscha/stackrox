package postgres

// Code is not generated by pg-bindings generator. DO EDIT.

import (
	"context"
	"time"

	"github.com/stackrox/rox/central/metrics"
	"github.com/stackrox/rox/central/role/resources"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/logging"
	ops "github.com/stackrox/rox/pkg/metrics"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/pgutils"
	pkgSchema "github.com/stackrox/rox/pkg/postgres/schema"
	"github.com/stackrox/rox/pkg/protoconv"
	"github.com/stackrox/rox/pkg/sac"
	"github.com/stackrox/rox/pkg/sync"
)

const (
	baseTable = "maximus"

	getStmt    = "SELECT value, ts FROM maximus WHERE metric = $1"
	upsertStmt = "INSERT INTO maximus(metric, value, ts) VALUES ($1, $2, $3) " +
		"ON CONFLICT (metric) " +
		"DO UPDATE SET value = excluded.value, ts = excluded.ts " +
		"WHERE maximus.value < excluded.value"
	deleteStmt = "DELETE FROM maximus WHERE metric = $1"
)

var (
	log            = logging.LoggerForModule()
	schema         = pkgSchema.MaximusSchema
	targetResource = resources.Administration
)

// Store is the interface to interact with the storage for storage.Maximus
type Store interface {
	Get(ctx context.Context, metric string) (*storage.Maximus, bool, error)
	Upsert(ctx context.Context, obj *storage.Maximus) error
	Delete(ctx context.Context, metric string) error
}

type storeImpl struct {
	db    postgres.DB
	mutex sync.Mutex
}

// New returns a new Store instance using the provided sql instance.
func New(db postgres.DB) Store {
	return &storeImpl{
		db: db,
	}
}

func insertIntoMaximus(ctx context.Context, tx *postgres.Tx, obj *storage.Maximus) error {
	serialized, marshalErr := obj.Marshal()
	if marshalErr != nil {
		return marshalErr
	}

	values := []interface{}{
		// parent primary keys start
		obj.GetMetric(),
		serialized,
	}

	_, err := tx.Exec(ctx, upsertStmt, values...)
	if err != nil {
		return err
	}
	return nil
}

// Upsert saves the current state of an object in storage.
func (s *storeImpl) Upsert(ctx context.Context, obj *storage.Maximus) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Upsert, "Maximus")

	scopeChecker := sac.GlobalAccessScopeChecker(ctx).AccessMode(storage.Access_READ_WRITE_ACCESS).Resource(targetResource)
	if !scopeChecker.IsAllowed() {
		return sac.ErrResourceAccessDenied
	}

	// Ignore noneseconds, as DB timestamp is not precise enough.
	obj.Ts.Nanos = 0

	return pgutils.Retry(func() error {
		return s.retryableUpsert(ctx, obj)
	})
}

func (s *storeImpl) retryableUpsert(ctx context.Context, obj *storage.Maximus) error {
	conn, release, err := s.acquireConn(ctx, ops.Get, "Maximus")
	if err != nil {
		return err
	}
	defer release()

	if _, err := conn.Exec(ctx, upsertStmt, obj.Metric, obj.Value, protoconv.ConvertTimestampToTimeOrNow(obj.Ts)); err != nil {
		return err
	}
	return nil
}

// Get returns the object, if it exists from the store.
func (s *storeImpl) Get(ctx context.Context, metric string) (*storage.Maximus, bool, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Get, "Maximus")

	scopeChecker := sac.GlobalAccessScopeChecker(ctx).AccessMode(storage.Access_READ_ACCESS).Resource(targetResource)
	if !scopeChecker.IsAllowed() {
		return nil, false, nil
	}

	return pgutils.Retry3(func() (*storage.Maximus, bool, error) {
		return s.retryableGet(ctx, metric)
	})
}

func (s *storeImpl) retryableGet(ctx context.Context, metric string) (*storage.Maximus, bool, error) {
	conn, release, err := s.acquireConn(ctx, ops.Get, "Maximus")
	if err != nil {
		return nil, false, err
	}
	defer release()

	row := conn.QueryRow(ctx, getStmt, metric)
	var value int32
	var ts *time.Time
	if err := row.Scan(&value, &ts); err != nil {
		return nil, false, pgutils.ErrNilIfNoRows(err)
	}
	result := storage.Maximus{
		Metric: metric,
		Value:  value,
		Ts:     protoconv.ConvertTimeToTimestamp(*ts),
	}
	return &result, true, nil
}

func (s *storeImpl) acquireConn(ctx context.Context, op ops.Op, typ string) (*postgres.Conn, func(), error) {
	defer metrics.SetAcquireDBConnDuration(time.Now(), op, typ)
	conn, err := s.db.Acquire(ctx)
	if err != nil {
		return nil, nil, err
	}
	return conn, conn.Release, nil
}

// Delete removes the singleton from the store
func (s *storeImpl) Delete(ctx context.Context, metric string) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Remove, "Maximus")

	scopeChecker := sac.GlobalAccessScopeChecker(ctx).AccessMode(storage.Access_READ_WRITE_ACCESS).Resource(targetResource)
	if !scopeChecker.IsAllowed() {
		return sac.ErrResourceAccessDenied
	}

	return pgutils.Retry(func() error {
		return s.retryableDelete(ctx, metric)
	})
}

func (s *storeImpl) retryableDelete(ctx context.Context, metric string) error {
	conn, release, err := s.acquireConn(ctx, ops.Remove, "Maximus")
	if err != nil {
		return err
	}
	defer release()

	if _, err := conn.Exec(ctx, deleteStmt, metric); err != nil {
		return err
	}
	return nil
}

// Used for Testing

// Destroy drops the tables associated with the target object type.
func Destroy(ctx context.Context, db postgres.DB) {
	_, _ = db.Exec(ctx, "DROP TABLE IF EXISTS maximus CASCADE")
}
