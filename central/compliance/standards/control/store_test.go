// Code generated by pg-bindings generator. DO NOT EDIT.

//go:build sql_integration

package postgres

import (
	"context"
	"testing"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres/pgtest"
	"github.com/stackrox/rox/pkg/sac"
	"github.com/stackrox/rox/pkg/testutils"
	"github.com/stretchr/testify/suite"
)

type ComplianceControlsStoreSuite struct {
	suite.Suite
	store  Store
	testDB *pgtest.TestPostgres
}

func TestComplianceControlsStore(t *testing.T) {
	suite.Run(t, new(ComplianceControlsStoreSuite))
}

func (s *ComplianceControlsStoreSuite) SetupSuite() {

	s.testDB = pgtest.ForT(s.T())
	s.store = New(s.testDB.DB)
}

func (s *ComplianceControlsStoreSuite) SetupTest() {
	ctx := sac.WithAllAccess(context.Background())
	tag, err := s.testDB.Exec(ctx, "TRUNCATE compliance_controls CASCADE")
	s.T().Log("compliance_controls", tag)
	s.NoError(err)
}

func (s *ComplianceControlsStoreSuite) TearDownSuite() {
	s.testDB.Teardown(s.T())
}

func (s *ComplianceControlsStoreSuite) TestStore() {
	ctx := sac.WithAllAccess(context.Background())

	store := s.store

	complianceControl := &storage.ComplianceControl{}
	s.NoError(testutils.FullInit(complianceControl, testutils.SimpleInitializer(), testutils.JSONFieldsFilter))

	foundComplianceControl, exists, err := store.Get(ctx, complianceControl.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundComplianceControl)

	withNoAccessCtx := sac.WithNoAccess(ctx)

	s.NoError(store.Upsert(ctx, complianceControl))
	foundComplianceControl, exists, err = store.Get(ctx, complianceControl.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(complianceControl, foundComplianceControl)

	complianceControlCount, err := store.Count(ctx)
	s.NoError(err)
	s.Equal(1, complianceControlCount)
	complianceControlCount, err = store.Count(withNoAccessCtx)
	s.NoError(err)
	s.Zero(complianceControlCount)

	complianceControlExists, err := store.Exists(ctx, complianceControl.GetId())
	s.NoError(err)
	s.True(complianceControlExists)
	s.NoError(store.Upsert(ctx, complianceControl))
	s.ErrorIs(store.Upsert(withNoAccessCtx, complianceControl), sac.ErrResourceAccessDenied)

	foundComplianceControl, exists, err = store.Get(ctx, complianceControl.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(complianceControl, foundComplianceControl)

	s.NoError(store.Delete(ctx, complianceControl.GetId()))
	foundComplianceControl, exists, err = store.Get(ctx, complianceControl.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundComplianceControl)
	s.NoError(store.Delete(withNoAccessCtx, complianceControl.GetId()))

	var complianceControls []*storage.ComplianceControl
	var complianceControlIDs []string
	for i := 0; i < 200; i++ {
		complianceControl := &storage.ComplianceControl{}
		s.NoError(testutils.FullInit(complianceControl, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
		complianceControls = append(complianceControls, complianceControl)
		complianceControlIDs = append(complianceControlIDs, complianceControl.GetId())
	}

	s.NoError(store.UpsertMany(ctx, complianceControls))

	complianceControlCount, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(200, complianceControlCount)

	s.NoError(store.DeleteMany(ctx, complianceControlIDs))

	complianceControlCount, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(0, complianceControlCount)
}
