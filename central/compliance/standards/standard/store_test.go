// Code generated by pg-bindings generator. DO NOT EDIT.

//go:build sql_integration

package postgres

import (
	"context"
	"testing"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres/pgtest"
	"github.com/stackrox/rox/pkg/sac"
	"github.com/stackrox/rox/pkg/testutils"
	"github.com/stretchr/testify/suite"
)

type ComplianceStandardsStoreSuite struct {
	suite.Suite
	store  Store
	testDB *pgtest.TestPostgres
}

func TestComplianceStandardsStore(t *testing.T) {
	suite.Run(t, new(ComplianceStandardsStoreSuite))
}

func (s *ComplianceStandardsStoreSuite) SetupSuite() {

	s.testDB = pgtest.ForT(s.T())
	s.store = New(s.testDB.DB)
}

func (s *ComplianceStandardsStoreSuite) SetupTest() {
	ctx := sac.WithAllAccess(context.Background())
	tag, err := s.testDB.Exec(ctx, "TRUNCATE compliance_standards CASCADE")
	s.T().Log("compliance_standards", tag)
	s.NoError(err)
}

func (s *ComplianceStandardsStoreSuite) TearDownSuite() {
	s.testDB.Teardown(s.T())
}

func (s *ComplianceStandardsStoreSuite) TestStore() {
	ctx := sac.WithAllAccess(context.Background())

	store := s.store

	complianceStandard := &storage.ComplianceStandard{}
	s.NoError(testutils.FullInit(complianceStandard, testutils.SimpleInitializer(), testutils.JSONFieldsFilter))

	foundComplianceStandard, exists, err := store.Get(ctx, complianceStandard.GetMetadata().GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundComplianceStandard)

	withNoAccessCtx := sac.WithNoAccess(ctx)

	s.NoError(store.Upsert(ctx, complianceStandard))
	foundComplianceStandard, exists, err = store.Get(ctx, complianceStandard.GetMetadata().GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(complianceStandard, foundComplianceStandard)

	complianceStandardCount, err := store.Count(ctx)
	s.NoError(err)
	s.Equal(1, complianceStandardCount)
	complianceStandardCount, err = store.Count(withNoAccessCtx)
	s.NoError(err)
	s.Zero(complianceStandardCount)

	complianceStandardExists, err := store.Exists(ctx, complianceStandard.GetMetadata().GetId())
	s.NoError(err)
	s.True(complianceStandardExists)
	s.NoError(store.Upsert(ctx, complianceStandard))
	s.ErrorIs(store.Upsert(withNoAccessCtx, complianceStandard), sac.ErrResourceAccessDenied)

	foundComplianceStandard, exists, err = store.Get(ctx, complianceStandard.GetMetadata().GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(complianceStandard, foundComplianceStandard)

	s.NoError(store.Delete(ctx, complianceStandard.GetMetadata().GetId()))
	foundComplianceStandard, exists, err = store.Get(ctx, complianceStandard.GetMetadata().GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundComplianceStandard)
	s.NoError(store.Delete(withNoAccessCtx, complianceStandard.GetMetadata().GetId()))

	var complianceStandards []*storage.ComplianceStandard
	var complianceStandardIDs []string
	for i := 0; i < 200; i++ {
		complianceStandard := &storage.ComplianceStandard{}
		s.NoError(testutils.FullInit(complianceStandard, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
		complianceStandards = append(complianceStandards, complianceStandard)
		complianceStandardIDs = append(complianceStandardIDs, complianceStandard.GetMetadata().GetId())
	}

	s.NoError(store.UpsertMany(ctx, complianceStandards))

	complianceStandardCount, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(200, complianceStandardCount)

	s.NoError(store.DeleteMany(ctx, complianceStandardIDs))

	complianceStandardCount, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(0, complianceStandardCount)
}
