// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackrox/rox/central/compliance/datastore/internal/store (interfaces: Store)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	compliance "github.com/stackrox/rox/central/compliance"
	types "github.com/stackrox/rox/central/compliance/datastore/types"
	storage "github.com/stackrox/rox/generated/storage"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// GetLatestRunMetadataBatch mocks base method
func (m *MockStore) GetLatestRunMetadataBatch(arg0 string, arg1 []string) (map[compliance.ClusterStandardPair]types.ComplianceRunsMetadata, error) {
	ret := m.ctrl.Call(m, "GetLatestRunMetadataBatch", arg0, arg1)
	ret0, _ := ret[0].(map[compliance.ClusterStandardPair]types.ComplianceRunsMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestRunMetadataBatch indicates an expected call of GetLatestRunMetadataBatch
func (mr *MockStoreMockRecorder) GetLatestRunMetadataBatch(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestRunMetadataBatch", reflect.TypeOf((*MockStore)(nil).GetLatestRunMetadataBatch), arg0, arg1)
}

// GetLatestRunResults mocks base method
func (m *MockStore) GetLatestRunResults(arg0, arg1 string, arg2 types.GetFlags) (types.ResultsWithStatus, error) {
	ret := m.ctrl.Call(m, "GetLatestRunResults", arg0, arg1, arg2)
	ret0, _ := ret[0].(types.ResultsWithStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestRunResults indicates an expected call of GetLatestRunResults
func (mr *MockStoreMockRecorder) GetLatestRunResults(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestRunResults", reflect.TypeOf((*MockStore)(nil).GetLatestRunResults), arg0, arg1, arg2)
}

// GetLatestRunResultsBatch mocks base method
func (m *MockStore) GetLatestRunResultsBatch(arg0, arg1 []string, arg2 types.GetFlags) (map[compliance.ClusterStandardPair]types.ResultsWithStatus, error) {
	ret := m.ctrl.Call(m, "GetLatestRunResultsBatch", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[compliance.ClusterStandardPair]types.ResultsWithStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestRunResultsBatch indicates an expected call of GetLatestRunResultsBatch
func (mr *MockStoreMockRecorder) GetLatestRunResultsBatch(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestRunResultsBatch", reflect.TypeOf((*MockStore)(nil).GetLatestRunResultsBatch), arg0, arg1, arg2)
}

// GetLatestRunResultsFiltered mocks base method
func (m *MockStore) GetLatestRunResultsFiltered(arg0, arg1 func(string) bool, arg2 types.GetFlags) (map[compliance.ClusterStandardPair]types.ResultsWithStatus, error) {
	ret := m.ctrl.Call(m, "GetLatestRunResultsFiltered", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[compliance.ClusterStandardPair]types.ResultsWithStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestRunResultsFiltered indicates an expected call of GetLatestRunResultsFiltered
func (mr *MockStoreMockRecorder) GetLatestRunResultsFiltered(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestRunResultsFiltered", reflect.TypeOf((*MockStore)(nil).GetLatestRunResultsFiltered), arg0, arg1, arg2)
}

// StoreFailure mocks base method
func (m *MockStore) StoreFailure(arg0 *storage.ComplianceRunMetadata) error {
	ret := m.ctrl.Call(m, "StoreFailure", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreFailure indicates an expected call of StoreFailure
func (mr *MockStoreMockRecorder) StoreFailure(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreFailure", reflect.TypeOf((*MockStore)(nil).StoreFailure), arg0)
}

// StoreRunResults mocks base method
func (m *MockStore) StoreRunResults(arg0 *storage.ComplianceRunResults) error {
	ret := m.ctrl.Call(m, "StoreRunResults", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreRunResults indicates an expected call of StoreRunResults
func (mr *MockStoreMockRecorder) StoreRunResults(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreRunResults", reflect.TypeOf((*MockStore)(nil).StoreRunResults), arg0)
}
