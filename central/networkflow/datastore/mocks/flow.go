// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackrox/rox/central/networkflow/datastore (interfaces: FlowDataStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	types "github.com/gogo/protobuf/types"
	gomock "github.com/golang/mock/gomock"
	storage "github.com/stackrox/rox/generated/storage"
	timestamp "github.com/stackrox/rox/pkg/timestamp"
	reflect "reflect"
)

// MockFlowDataStore is a mock of FlowDataStore interface
type MockFlowDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockFlowDataStoreMockRecorder
}

// MockFlowDataStoreMockRecorder is the mock recorder for MockFlowDataStore
type MockFlowDataStoreMockRecorder struct {
	mock *MockFlowDataStore
}

// NewMockFlowDataStore creates a new mock instance
func NewMockFlowDataStore(ctrl *gomock.Controller) *MockFlowDataStore {
	mock := &MockFlowDataStore{ctrl: ctrl}
	mock.recorder = &MockFlowDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFlowDataStore) EXPECT() *MockFlowDataStoreMockRecorder {
	return m.recorder
}

// GetAllFlows mocks base method
func (m *MockFlowDataStore) GetAllFlows(arg0 context.Context, arg1 *types.Timestamp) ([]*storage.NetworkFlow, types.Timestamp, error) {
	ret := m.ctrl.Call(m, "GetAllFlows", arg0, arg1)
	ret0, _ := ret[0].([]*storage.NetworkFlow)
	ret1, _ := ret[1].(types.Timestamp)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAllFlows indicates an expected call of GetAllFlows
func (mr *MockFlowDataStoreMockRecorder) GetAllFlows(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFlows", reflect.TypeOf((*MockFlowDataStore)(nil).GetAllFlows), arg0, arg1)
}

// GetMatchingFlows mocks base method
func (m *MockFlowDataStore) GetMatchingFlows(arg0 context.Context, arg1 func(*storage.NetworkFlowProperties) bool, arg2 *types.Timestamp) ([]*storage.NetworkFlow, types.Timestamp, error) {
	ret := m.ctrl.Call(m, "GetMatchingFlows", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*storage.NetworkFlow)
	ret1, _ := ret[1].(types.Timestamp)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMatchingFlows indicates an expected call of GetMatchingFlows
func (mr *MockFlowDataStoreMockRecorder) GetMatchingFlows(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchingFlows", reflect.TypeOf((*MockFlowDataStore)(nil).GetMatchingFlows), arg0, arg1, arg2)
}

// RemoveFlowsForDeployment mocks base method
func (m *MockFlowDataStore) RemoveFlowsForDeployment(arg0 context.Context, arg1 string) error {
	ret := m.ctrl.Call(m, "RemoveFlowsForDeployment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFlowsForDeployment indicates an expected call of RemoveFlowsForDeployment
func (mr *MockFlowDataStoreMockRecorder) RemoveFlowsForDeployment(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFlowsForDeployment", reflect.TypeOf((*MockFlowDataStore)(nil).RemoveFlowsForDeployment), arg0, arg1)
}

// UpsertFlows mocks base method
func (m *MockFlowDataStore) UpsertFlows(arg0 context.Context, arg1 []*storage.NetworkFlow, arg2 timestamp.MicroTS) error {
	ret := m.ctrl.Call(m, "UpsertFlows", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertFlows indicates an expected call of UpsertFlows
func (mr *MockFlowDataStoreMockRecorder) UpsertFlows(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertFlows", reflect.TypeOf((*MockFlowDataStore)(nil).UpsertFlows), arg0, arg1, arg2)
}
