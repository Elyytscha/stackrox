// Code generated by MockGen. DO NOT EDIT.
// Source: entity.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	storage "github.com/stackrox/rox/generated/storage"
	reflect "reflect"
)

// MockEntityStore is a mock of EntityStore interface
type MockEntityStore struct {
	ctrl     *gomock.Controller
	recorder *MockEntityStoreMockRecorder
}

// MockEntityStoreMockRecorder is the mock recorder for MockEntityStore
type MockEntityStoreMockRecorder struct {
	mock *MockEntityStore
}

// NewMockEntityStore creates a new mock instance
func NewMockEntityStore(ctrl *gomock.Controller) *MockEntityStore {
	mock := &MockEntityStore{ctrl: ctrl}
	mock.recorder = &MockEntityStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEntityStore) EXPECT() *MockEntityStoreMockRecorder {
	return m.recorder
}

// GetIDs mocks base method
func (m *MockEntityStore) GetIDs() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIDs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIDs indicates an expected call of GetIDs
func (mr *MockEntityStoreMockRecorder) GetIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDs", reflect.TypeOf((*MockEntityStore)(nil).GetIDs))
}

// GetEntity mocks base method
func (m *MockEntityStore) GetEntity(id string) (*storage.NetworkEntity, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntity", id)
	ret0, _ := ret[0].(*storage.NetworkEntity)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEntity indicates an expected call of GetEntity
func (mr *MockEntityStoreMockRecorder) GetEntity(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntity", reflect.TypeOf((*MockEntityStore)(nil).GetEntity), id)
}

// UpsertEntity mocks base method
func (m *MockEntityStore) UpsertEntity(entity *storage.NetworkEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertEntity", entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertEntity indicates an expected call of UpsertEntity
func (mr *MockEntityStoreMockRecorder) UpsertEntity(entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertEntity", reflect.TypeOf((*MockEntityStore)(nil).UpsertEntity), entity)
}

// DeleteEntity mocks base method
func (m *MockEntityStore) DeleteEntity(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntity", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEntity indicates an expected call of DeleteEntity
func (mr *MockEntityStoreMockRecorder) DeleteEntity(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntity", reflect.TypeOf((*MockEntityStore)(nil).DeleteEntity), id)
}

// DeleteEntities mocks base method
func (m *MockEntityStore) DeleteEntities(ids []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntities", ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEntities indicates an expected call of DeleteEntities
func (mr *MockEntityStoreMockRecorder) DeleteEntities(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntities", reflect.TypeOf((*MockEntityStore)(nil).DeleteEntities), ids)
}

// Walk mocks base method
func (m *MockEntityStore) Walk(fn func(*storage.NetworkEntity) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Walk", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Walk indicates an expected call of Walk
func (mr *MockEntityStoreMockRecorder) Walk(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Walk", reflect.TypeOf((*MockEntityStore)(nil).Walk), fn)
}
