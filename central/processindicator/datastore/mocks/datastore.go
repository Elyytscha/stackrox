// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackrox/rox/central/processindicator/datastore (interfaces: DataStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	v1 "github.com/stackrox/rox/generated/api/v1"
	storage "github.com/stackrox/rox/generated/storage"
	concurrency "github.com/stackrox/rox/pkg/concurrency"
	search "github.com/stackrox/rox/pkg/search"
	reflect "reflect"
)

// MockDataStore is a mock of DataStore interface
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// AddProcessIndicator mocks base method
func (m *MockDataStore) AddProcessIndicator(arg0 context.Context, arg1 *storage.ProcessIndicator) error {
	ret := m.ctrl.Call(m, "AddProcessIndicator", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProcessIndicator indicates an expected call of AddProcessIndicator
func (mr *MockDataStoreMockRecorder) AddProcessIndicator(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProcessIndicator", reflect.TypeOf((*MockDataStore)(nil).AddProcessIndicator), arg0, arg1)
}

// AddProcessIndicators mocks base method
func (m *MockDataStore) AddProcessIndicators(arg0 context.Context, arg1 ...*storage.ProcessIndicator) error {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddProcessIndicators", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProcessIndicators indicates an expected call of AddProcessIndicators
func (mr *MockDataStoreMockRecorder) AddProcessIndicators(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProcessIndicators", reflect.TypeOf((*MockDataStore)(nil).AddProcessIndicators), varargs...)
}

// GetProcessIndicator mocks base method
func (m *MockDataStore) GetProcessIndicator(arg0 context.Context, arg1 string) (*storage.ProcessIndicator, bool, error) {
	ret := m.ctrl.Call(m, "GetProcessIndicator", arg0, arg1)
	ret0, _ := ret[0].(*storage.ProcessIndicator)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProcessIndicator indicates an expected call of GetProcessIndicator
func (mr *MockDataStoreMockRecorder) GetProcessIndicator(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcessIndicator", reflect.TypeOf((*MockDataStore)(nil).GetProcessIndicator), arg0, arg1)
}

// GetProcessIndicators mocks base method
func (m *MockDataStore) GetProcessIndicators(arg0 context.Context) ([]*storage.ProcessIndicator, error) {
	ret := m.ctrl.Call(m, "GetProcessIndicators", arg0)
	ret0, _ := ret[0].([]*storage.ProcessIndicator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProcessIndicators indicates an expected call of GetProcessIndicators
func (mr *MockDataStoreMockRecorder) GetProcessIndicators(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcessIndicators", reflect.TypeOf((*MockDataStore)(nil).GetProcessIndicators), arg0)
}

// RemoveProcessIndicatorsByDeployment mocks base method
func (m *MockDataStore) RemoveProcessIndicatorsByDeployment(arg0 context.Context, arg1 string) error {
	ret := m.ctrl.Call(m, "RemoveProcessIndicatorsByDeployment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveProcessIndicatorsByDeployment indicates an expected call of RemoveProcessIndicatorsByDeployment
func (mr *MockDataStoreMockRecorder) RemoveProcessIndicatorsByDeployment(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProcessIndicatorsByDeployment", reflect.TypeOf((*MockDataStore)(nil).RemoveProcessIndicatorsByDeployment), arg0, arg1)
}

// RemoveProcessIndicatorsOfStaleContainers mocks base method
func (m *MockDataStore) RemoveProcessIndicatorsOfStaleContainers(arg0 context.Context, arg1 string, arg2 []string) error {
	ret := m.ctrl.Call(m, "RemoveProcessIndicatorsOfStaleContainers", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveProcessIndicatorsOfStaleContainers indicates an expected call of RemoveProcessIndicatorsOfStaleContainers
func (mr *MockDataStoreMockRecorder) RemoveProcessIndicatorsOfStaleContainers(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProcessIndicatorsOfStaleContainers", reflect.TypeOf((*MockDataStore)(nil).RemoveProcessIndicatorsOfStaleContainers), arg0, arg1, arg2)
}

// Search mocks base method
func (m *MockDataStore) Search(arg0 context.Context, arg1 *v1.Query) ([]search.Result, error) {
	ret := m.ctrl.Call(m, "Search", arg0, arg1)
	ret0, _ := ret[0].([]search.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockDataStoreMockRecorder) Search(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockDataStore)(nil).Search), arg0, arg1)
}

// SearchRawProcessIndicators mocks base method
func (m *MockDataStore) SearchRawProcessIndicators(arg0 context.Context, arg1 *v1.Query) ([]*storage.ProcessIndicator, error) {
	ret := m.ctrl.Call(m, "SearchRawProcessIndicators", arg0, arg1)
	ret0, _ := ret[0].([]*storage.ProcessIndicator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchRawProcessIndicators indicates an expected call of SearchRawProcessIndicators
func (mr *MockDataStoreMockRecorder) SearchRawProcessIndicators(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchRawProcessIndicators", reflect.TypeOf((*MockDataStore)(nil).SearchRawProcessIndicators), arg0, arg1)
}

// Stop mocks base method
func (m *MockDataStore) Stop() bool {
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockDataStoreMockRecorder) Stop() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockDataStore)(nil).Stop))
}

// Wait mocks base method
func (m *MockDataStore) Wait(arg0 concurrency.Waitable) bool {
	ret := m.ctrl.Call(m, "Wait", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Wait indicates an expected call of Wait
func (mr *MockDataStoreMockRecorder) Wait(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockDataStore)(nil).Wait), arg0)
}
