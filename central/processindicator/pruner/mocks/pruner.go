// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackrox/rox/central/processindicator/pruner (interfaces: Pruner)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	processindicator "github.com/stackrox/rox/central/processindicator"
	reflect "reflect"
	time "time"
)

// MockPruner is a mock of Pruner interface
type MockPruner struct {
	ctrl     *gomock.Controller
	recorder *MockPrunerMockRecorder
}

// MockPrunerMockRecorder is the mock recorder for MockPruner
type MockPrunerMockRecorder struct {
	mock *MockPruner
}

// NewMockPruner creates a new mock instance
func NewMockPruner(ctrl *gomock.Controller) *MockPruner {
	mock := &MockPruner{ctrl: ctrl}
	mock.recorder = &MockPrunerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPruner) EXPECT() *MockPrunerMockRecorder {
	return m.recorder
}

// Period mocks base method
func (m *MockPruner) Period() time.Duration {
	ret := m.ctrl.Call(m, "Period")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// Period indicates an expected call of Period
func (mr *MockPrunerMockRecorder) Period() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Period", reflect.TypeOf((*MockPruner)(nil).Period))
}

// Prune mocks base method
func (m *MockPruner) Prune(arg0 []processindicator.IDAndArgs) []string {
	ret := m.ctrl.Call(m, "Prune", arg0)
	ret0, _ := ret[0].([]string)
	return ret0
}

// Prune indicates an expected call of Prune
func (mr *MockPrunerMockRecorder) Prune(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prune", reflect.TypeOf((*MockPruner)(nil).Prune), arg0)
}
