// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackrox/rox/central/processindicator/store (interfaces: Store)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	processindicator "github.com/stackrox/rox/central/processindicator"
	storage "github.com/stackrox/rox/generated/storage"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddProcessIndicator mocks base method
func (m *MockStore) AddProcessIndicator(arg0 *storage.ProcessIndicator) (string, error) {
	ret := m.ctrl.Call(m, "AddProcessIndicator", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProcessIndicator indicates an expected call of AddProcessIndicator
func (mr *MockStoreMockRecorder) AddProcessIndicator(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProcessIndicator", reflect.TypeOf((*MockStore)(nil).AddProcessIndicator), arg0)
}

// AddProcessIndicators mocks base method
func (m *MockStore) AddProcessIndicators(arg0 ...*storage.ProcessIndicator) ([]string, error) {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddProcessIndicators", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProcessIndicators indicates an expected call of AddProcessIndicators
func (mr *MockStoreMockRecorder) AddProcessIndicators(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProcessIndicators", reflect.TypeOf((*MockStore)(nil).AddProcessIndicators), arg0...)
}

// GetProcessIndicator mocks base method
func (m *MockStore) GetProcessIndicator(arg0 string) (*storage.ProcessIndicator, bool, error) {
	ret := m.ctrl.Call(m, "GetProcessIndicator", arg0)
	ret0, _ := ret[0].(*storage.ProcessIndicator)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProcessIndicator indicates an expected call of GetProcessIndicator
func (mr *MockStoreMockRecorder) GetProcessIndicator(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcessIndicator", reflect.TypeOf((*MockStore)(nil).GetProcessIndicator), arg0)
}

// GetProcessIndicators mocks base method
func (m *MockStore) GetProcessIndicators() ([]*storage.ProcessIndicator, error) {
	ret := m.ctrl.Call(m, "GetProcessIndicators")
	ret0, _ := ret[0].([]*storage.ProcessIndicator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProcessIndicators indicates an expected call of GetProcessIndicators
func (mr *MockStoreMockRecorder) GetProcessIndicators() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcessIndicators", reflect.TypeOf((*MockStore)(nil).GetProcessIndicators))
}

// GetProcessInfoToArgs mocks base method
func (m *MockStore) GetProcessInfoToArgs() (map[processindicator.ProcessWithContainerInfo][]processindicator.IDAndArgs, error) {
	ret := m.ctrl.Call(m, "GetProcessInfoToArgs")
	ret0, _ := ret[0].(map[processindicator.ProcessWithContainerInfo][]processindicator.IDAndArgs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProcessInfoToArgs indicates an expected call of GetProcessInfoToArgs
func (mr *MockStoreMockRecorder) GetProcessInfoToArgs() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcessInfoToArgs", reflect.TypeOf((*MockStore)(nil).GetProcessInfoToArgs))
}

// GetTxnCount mocks base method
func (m *MockStore) GetTxnCount() (uint64, error) {
	ret := m.ctrl.Call(m, "GetTxnCount")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxnCount indicates an expected call of GetTxnCount
func (mr *MockStoreMockRecorder) GetTxnCount() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxnCount", reflect.TypeOf((*MockStore)(nil).GetTxnCount))
}

// IncTxnCount mocks base method
func (m *MockStore) IncTxnCount() error {
	ret := m.ctrl.Call(m, "IncTxnCount")
	ret0, _ := ret[0].(error)
	return ret0
}

// IncTxnCount indicates an expected call of IncTxnCount
func (mr *MockStoreMockRecorder) IncTxnCount() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncTxnCount", reflect.TypeOf((*MockStore)(nil).IncTxnCount))
}

// RemoveProcessIndicator mocks base method
func (m *MockStore) RemoveProcessIndicator(arg0 string) error {
	ret := m.ctrl.Call(m, "RemoveProcessIndicator", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveProcessIndicator indicates an expected call of RemoveProcessIndicator
func (mr *MockStoreMockRecorder) RemoveProcessIndicator(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProcessIndicator", reflect.TypeOf((*MockStore)(nil).RemoveProcessIndicator), arg0)
}

// RemoveProcessIndicators mocks base method
func (m *MockStore) RemoveProcessIndicators(arg0 []string) error {
	ret := m.ctrl.Call(m, "RemoveProcessIndicators", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveProcessIndicators indicates an expected call of RemoveProcessIndicators
func (mr *MockStoreMockRecorder) RemoveProcessIndicators(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProcessIndicators", reflect.TypeOf((*MockStore)(nil).RemoveProcessIndicators), arg0)
}
