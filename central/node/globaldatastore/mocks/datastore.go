// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackrox/rox/central/node/globaldatastore (interfaces: GlobalDataStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	datastore "github.com/stackrox/rox/central/node/datastore"
	v1 "github.com/stackrox/rox/generated/api/v1"
	search "github.com/stackrox/rox/pkg/search"
	reflect "reflect"
)

// MockGlobalDataStore is a mock of GlobalDataStore interface
type MockGlobalDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockGlobalDataStoreMockRecorder
}

// MockGlobalDataStoreMockRecorder is the mock recorder for MockGlobalDataStore
type MockGlobalDataStoreMockRecorder struct {
	mock *MockGlobalDataStore
}

// NewMockGlobalDataStore creates a new mock instance
func NewMockGlobalDataStore(ctrl *gomock.Controller) *MockGlobalDataStore {
	mock := &MockGlobalDataStore{ctrl: ctrl}
	mock.recorder = &MockGlobalDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGlobalDataStore) EXPECT() *MockGlobalDataStoreMockRecorder {
	return m.recorder
}

// CountAllNodes mocks base method
func (m *MockGlobalDataStore) CountAllNodes() (int, error) {
	ret := m.ctrl.Call(m, "CountAllNodes")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountAllNodes indicates an expected call of CountAllNodes
func (mr *MockGlobalDataStoreMockRecorder) CountAllNodes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAllNodes", reflect.TypeOf((*MockGlobalDataStore)(nil).CountAllNodes))
}

// GetAllClusterNodeStores mocks base method
func (m *MockGlobalDataStore) GetAllClusterNodeStores() (map[string]datastore.DataStore, error) {
	ret := m.ctrl.Call(m, "GetAllClusterNodeStores")
	ret0, _ := ret[0].(map[string]datastore.DataStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllClusterNodeStores indicates an expected call of GetAllClusterNodeStores
func (mr *MockGlobalDataStoreMockRecorder) GetAllClusterNodeStores() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllClusterNodeStores", reflect.TypeOf((*MockGlobalDataStore)(nil).GetAllClusterNodeStores))
}

// GetClusterNodeStore mocks base method
func (m *MockGlobalDataStore) GetClusterNodeStore(arg0 string) (datastore.DataStore, error) {
	ret := m.ctrl.Call(m, "GetClusterNodeStore", arg0)
	ret0, _ := ret[0].(datastore.DataStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterNodeStore indicates an expected call of GetClusterNodeStore
func (mr *MockGlobalDataStoreMockRecorder) GetClusterNodeStore(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterNodeStore", reflect.TypeOf((*MockGlobalDataStore)(nil).GetClusterNodeStore), arg0)
}

// RemoveClusterNodeStores mocks base method
func (m *MockGlobalDataStore) RemoveClusterNodeStores(arg0 ...string) error {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveClusterNodeStores", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveClusterNodeStores indicates an expected call of RemoveClusterNodeStores
func (mr *MockGlobalDataStoreMockRecorder) RemoveClusterNodeStores(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveClusterNodeStores", reflect.TypeOf((*MockGlobalDataStore)(nil).RemoveClusterNodeStores), arg0...)
}

// Search mocks base method
func (m *MockGlobalDataStore) Search(arg0 *v1.Query) ([]search.Result, error) {
	ret := m.ctrl.Call(m, "Search", arg0)
	ret0, _ := ret[0].([]search.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockGlobalDataStoreMockRecorder) Search(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockGlobalDataStore)(nil).Search), arg0)
}

// SearchResults mocks base method
func (m *MockGlobalDataStore) SearchResults(arg0 *v1.Query) ([]*v1.SearchResult, error) {
	ret := m.ctrl.Call(m, "SearchResults", arg0)
	ret0, _ := ret[0].([]*v1.SearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchResults indicates an expected call of SearchResults
func (mr *MockGlobalDataStoreMockRecorder) SearchResults(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchResults", reflect.TypeOf((*MockGlobalDataStore)(nil).SearchResults), arg0)
}
