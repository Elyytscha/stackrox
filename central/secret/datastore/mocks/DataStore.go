// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import mock "github.com/stretchr/testify/mock"
import v1 "github.com/stackrox/rox/generated/api/v1"

// DataStore is an autogenerated mock type for the DataStore type
type DataStore struct {
	mock.Mock
}

// GetSecrets provides a mock function with given fields: request
func (_m *DataStore) GetSecrets(request *v1.RawQuery) ([]*v1.Secret, error) {
	ret := _m.Called(request)

	var r0 []*v1.Secret
	if rf, ok := ret.Get(0).(func(*v1.RawQuery) []*v1.Secret); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1.Secret)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1.RawQuery) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveSecret provides a mock function with given fields: id
func (_m *DataStore) RemoveSecret(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchRawSecrets provides a mock function with given fields: request
func (_m *DataStore) SearchRawSecrets(request *v1.RawQuery) ([]*v1.Secret, error) {
	ret := _m.Called(request)

	var r0 []*v1.Secret
	if rf, ok := ret.Get(0).(func(*v1.RawQuery) []*v1.Secret); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1.Secret)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1.RawQuery) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchSecrets provides a mock function with given fields: request
func (_m *DataStore) SearchSecrets(request *v1.RawQuery) ([]*v1.SearchResult, error) {
	ret := _m.Called(request)

	var r0 []*v1.SearchResult
	if rf, ok := ret.Get(0).(func(*v1.RawQuery) []*v1.SearchResult); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1.SearchResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1.RawQuery) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertSecret provides a mock function with given fields: request
func (_m *DataStore) UpsertSecret(request *v1.Secret) error {
	ret := _m.Called(request)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.Secret) error); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
