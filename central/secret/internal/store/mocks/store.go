// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackrox/rox/central/secret/internal/store (interfaces: Store)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	storage "github.com/stackrox/rox/generated/storage"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CountSecrets mocks base method
func (m *MockStore) CountSecrets() (int, error) {
	ret := m.ctrl.Call(m, "CountSecrets")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountSecrets indicates an expected call of CountSecrets
func (mr *MockStoreMockRecorder) CountSecrets() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountSecrets", reflect.TypeOf((*MockStore)(nil).CountSecrets))
}

// GetAllSecrets mocks base method
func (m *MockStore) GetAllSecrets() ([]*storage.Secret, error) {
	ret := m.ctrl.Call(m, "GetAllSecrets")
	ret0, _ := ret[0].([]*storage.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSecrets indicates an expected call of GetAllSecrets
func (mr *MockStoreMockRecorder) GetAllSecrets() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSecrets", reflect.TypeOf((*MockStore)(nil).GetAllSecrets))
}

// GetSecret mocks base method
func (m *MockStore) GetSecret(arg0 string) (*storage.Secret, bool, error) {
	ret := m.ctrl.Call(m, "GetSecret", arg0)
	ret0, _ := ret[0].(*storage.Secret)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSecret indicates an expected call of GetSecret
func (mr *MockStoreMockRecorder) GetSecret(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockStore)(nil).GetSecret), arg0)
}

// GetSecretsWithIds mocks base method
func (m *MockStore) GetSecretsWithIds(arg0 []string) ([]*storage.Secret, []int, error) {
	ret := m.ctrl.Call(m, "GetSecretsWithIds", arg0)
	ret0, _ := ret[0].([]*storage.Secret)
	ret1, _ := ret[1].([]int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSecretsWithIds indicates an expected call of GetSecretsWithIds
func (mr *MockStoreMockRecorder) GetSecretsWithIds(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretsWithIds", reflect.TypeOf((*MockStore)(nil).GetSecretsWithIds), arg0)
}

// ListAllSecrets mocks base method
func (m *MockStore) ListAllSecrets() ([]*storage.ListSecret, error) {
	ret := m.ctrl.Call(m, "ListAllSecrets")
	ret0, _ := ret[0].([]*storage.ListSecret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllSecrets indicates an expected call of ListAllSecrets
func (mr *MockStoreMockRecorder) ListAllSecrets() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllSecrets", reflect.TypeOf((*MockStore)(nil).ListAllSecrets))
}

// ListSecrets mocks base method
func (m *MockStore) ListSecrets(arg0 []string) ([]*storage.ListSecret, error) {
	ret := m.ctrl.Call(m, "ListSecrets", arg0)
	ret0, _ := ret[0].([]*storage.ListSecret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecrets indicates an expected call of ListSecrets
func (mr *MockStoreMockRecorder) ListSecrets(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecrets", reflect.TypeOf((*MockStore)(nil).ListSecrets), arg0)
}

// RemoveSecret mocks base method
func (m *MockStore) RemoveSecret(arg0 string) error {
	ret := m.ctrl.Call(m, "RemoveSecret", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSecret indicates an expected call of RemoveSecret
func (mr *MockStoreMockRecorder) RemoveSecret(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSecret", reflect.TypeOf((*MockStore)(nil).RemoveSecret), arg0)
}

// UpsertSecret mocks base method
func (m *MockStore) UpsertSecret(arg0 *storage.Secret) error {
	ret := m.ctrl.Call(m, "UpsertSecret", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertSecret indicates an expected call of UpsertSecret
func (mr *MockStoreMockRecorder) UpsertSecret(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertSecret", reflect.TypeOf((*MockStore)(nil).UpsertSecret), arg0)
}
