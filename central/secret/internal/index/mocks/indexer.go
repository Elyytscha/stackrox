// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackrox/rox/central/secret/internal/index (interfaces: Indexer)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	v1 "github.com/stackrox/rox/generated/api/v1"
	storage "github.com/stackrox/rox/generated/storage"
	search "github.com/stackrox/rox/pkg/search"
	reflect "reflect"
)

// MockIndexer is a mock of Indexer interface
type MockIndexer struct {
	ctrl     *gomock.Controller
	recorder *MockIndexerMockRecorder
}

// MockIndexerMockRecorder is the mock recorder for MockIndexer
type MockIndexerMockRecorder struct {
	mock *MockIndexer
}

// NewMockIndexer creates a new mock instance
func NewMockIndexer(ctrl *gomock.Controller) *MockIndexer {
	mock := &MockIndexer{ctrl: ctrl}
	mock.recorder = &MockIndexerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIndexer) EXPECT() *MockIndexerMockRecorder {
	return m.recorder
}

// RemoveSecret mocks base method
func (m *MockIndexer) RemoveSecret(arg0 string) error {
	ret := m.ctrl.Call(m, "RemoveSecret", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSecret indicates an expected call of RemoveSecret
func (mr *MockIndexerMockRecorder) RemoveSecret(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSecret", reflect.TypeOf((*MockIndexer)(nil).RemoveSecret), arg0)
}

// Search mocks base method
func (m *MockIndexer) Search(arg0 *v1.Query) ([]search.Result, error) {
	ret := m.ctrl.Call(m, "Search", arg0)
	ret0, _ := ret[0].([]search.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockIndexerMockRecorder) Search(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockIndexer)(nil).Search), arg0)
}

// UpsertSecret mocks base method
func (m *MockIndexer) UpsertSecret(arg0 *storage.Secret) error {
	ret := m.ctrl.Call(m, "UpsertSecret", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertSecret indicates an expected call of UpsertSecret
func (mr *MockIndexerMockRecorder) UpsertSecret(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertSecret", reflect.TypeOf((*MockIndexer)(nil).UpsertSecret), arg0)
}

// UpsertSecrets mocks base method
func (m *MockIndexer) UpsertSecrets(arg0 ...*storage.Secret) error {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertSecrets", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertSecrets indicates an expected call of UpsertSecrets
func (mr *MockIndexerMockRecorder) UpsertSecrets(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertSecrets", reflect.TypeOf((*MockIndexer)(nil).UpsertSecrets), arg0...)
}
