// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

import v1 "github.com/stackrox/rox/generated/api/v1"

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// CountSecrets provides a mock function with given fields:
func (_m *Store) CountSecrets() (int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllSecrets provides a mock function with given fields:
func (_m *Store) GetAllSecrets() ([]*v1.Secret, error) {
	ret := _m.Called()

	var r0 []*v1.Secret
	if rf, ok := ret.Get(0).(func() []*v1.Secret); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1.Secret)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSecret provides a mock function with given fields: id
func (_m *Store) GetSecret(id string) (*v1.Secret, bool, error) {
	ret := _m.Called(id)

	var r0 *v1.Secret
	if rf, ok := ret.Get(0).(func(string) *v1.Secret); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Secret)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListSecrets provides a mock function with given fields: id
func (_m *Store) ListSecrets(id []string) ([]*v1.ListSecret, error) {
	ret := _m.Called(id)

	var r0 []*v1.ListSecret
	if rf, ok := ret.Get(0).(func([]string) []*v1.ListSecret); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1.ListSecret)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveSecret provides a mock function with given fields: id
func (_m *Store) RemoveSecret(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpsertSecret provides a mock function with given fields: secret
func (_m *Store) UpsertSecret(secret *v1.Secret) error {
	ret := _m.Called(secret)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.Secret) error); ok {
		r0 = rf(secret)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
