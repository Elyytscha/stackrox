// Code generated by MockGen. DO NOT EDIT.
// Source: datastore.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	storage "github.com/stackrox/rox/generated/storage"
	reflect "reflect"
)

// MockDataStore is a mock of DataStore interface
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// GetLogIntegration mocks base method
func (m *MockDataStore) GetLogIntegration(ctx context.Context, id string) (*storage.LogIntegration, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogIntegration", ctx, id)
	ret0, _ := ret[0].(*storage.LogIntegration)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLogIntegration indicates an expected call of GetLogIntegration
func (mr *MockDataStoreMockRecorder) GetLogIntegration(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogIntegration", reflect.TypeOf((*MockDataStore)(nil).GetLogIntegration), ctx, id)
}

// GetLogIntegrations mocks base method
func (m *MockDataStore) GetLogIntegrations(ctx context.Context) ([]*storage.LogIntegration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogIntegrations", ctx)
	ret0, _ := ret[0].([]*storage.LogIntegration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogIntegrations indicates an expected call of GetLogIntegrations
func (mr *MockDataStoreMockRecorder) GetLogIntegrations(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogIntegrations", reflect.TypeOf((*MockDataStore)(nil).GetLogIntegrations), ctx)
}

// CreateLogIntegration mocks base method
func (m *MockDataStore) CreateLogIntegration(ctx context.Context, integration *storage.LogIntegration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLogIntegration", ctx, integration)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLogIntegration indicates an expected call of CreateLogIntegration
func (mr *MockDataStoreMockRecorder) CreateLogIntegration(ctx, integration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLogIntegration", reflect.TypeOf((*MockDataStore)(nil).CreateLogIntegration), ctx, integration)
}

// UpdateLogIntegration mocks base method
func (m *MockDataStore) UpdateLogIntegration(ctx context.Context, integration *storage.LogIntegration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLogIntegration", ctx, integration)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLogIntegration indicates an expected call of UpdateLogIntegration
func (mr *MockDataStoreMockRecorder) UpdateLogIntegration(ctx, integration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLogIntegration", reflect.TypeOf((*MockDataStore)(nil).UpdateLogIntegration), ctx, integration)
}

// DeleteLogIntegration mocks base method
func (m *MockDataStore) DeleteLogIntegration(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLogIntegration", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLogIntegration indicates an expected call of DeleteLogIntegration
func (mr *MockDataStoreMockRecorder) DeleteLogIntegration(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLogIntegration", reflect.TypeOf((*MockDataStore)(nil).DeleteLogIntegration), ctx, id)
}
