// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackrox/rox/central/deploymentenvs (interfaces: Listener,Manager)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	deploymentenvs "github.com/stackrox/rox/central/deploymentenvs"
	reflect "reflect"
)

// MockListener is a mock of Listener interface
type MockListener struct {
	ctrl     *gomock.Controller
	recorder *MockListenerMockRecorder
}

// MockListenerMockRecorder is the mock recorder for MockListener
type MockListenerMockRecorder struct {
	mock *MockListener
}

// NewMockListener creates a new mock instance
func NewMockListener(ctrl *gomock.Controller) *MockListener {
	mock := &MockListener{ctrl: ctrl}
	mock.recorder = &MockListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockListener) EXPECT() *MockListenerMockRecorder {
	return m.recorder
}

// OnClusterMarkedInactive mocks base method
func (m *MockListener) OnClusterMarkedInactive(arg0 string) {
	m.ctrl.Call(m, "OnClusterMarkedInactive", arg0)
}

// OnClusterMarkedInactive indicates an expected call of OnClusterMarkedInactive
func (mr *MockListenerMockRecorder) OnClusterMarkedInactive(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnClusterMarkedInactive", reflect.TypeOf((*MockListener)(nil).OnClusterMarkedInactive), arg0)
}

// OnUpdate mocks base method
func (m *MockListener) OnUpdate(arg0 string, arg1 []string) {
	m.ctrl.Call(m, "OnUpdate", arg0, arg1)
}

// OnUpdate indicates an expected call of OnUpdate
func (mr *MockListenerMockRecorder) OnUpdate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnUpdate", reflect.TypeOf((*MockListener)(nil).OnUpdate), arg0, arg1)
}

// MockManager is a mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// GetDeploymentEnvironmentsByClusterID mocks base method
func (m *MockManager) GetDeploymentEnvironmentsByClusterID(arg0 bool) map[string][]string {
	ret := m.ctrl.Call(m, "GetDeploymentEnvironmentsByClusterID", arg0)
	ret0, _ := ret[0].(map[string][]string)
	return ret0
}

// GetDeploymentEnvironmentsByClusterID indicates an expected call of GetDeploymentEnvironmentsByClusterID
func (mr *MockManagerMockRecorder) GetDeploymentEnvironmentsByClusterID(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentEnvironmentsByClusterID", reflect.TypeOf((*MockManager)(nil).GetDeploymentEnvironmentsByClusterID), arg0)
}

// MarkClusterInactive mocks base method
func (m *MockManager) MarkClusterInactive(arg0 string) {
	m.ctrl.Call(m, "MarkClusterInactive", arg0)
}

// MarkClusterInactive indicates an expected call of MarkClusterInactive
func (mr *MockManagerMockRecorder) MarkClusterInactive(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkClusterInactive", reflect.TypeOf((*MockManager)(nil).MarkClusterInactive), arg0)
}

// RegisterListener mocks base method
func (m *MockManager) RegisterListener(arg0 deploymentenvs.Listener) {
	m.ctrl.Call(m, "RegisterListener", arg0)
}

// RegisterListener indicates an expected call of RegisterListener
func (mr *MockManagerMockRecorder) RegisterListener(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterListener", reflect.TypeOf((*MockManager)(nil).RegisterListener), arg0)
}

// UnregisterListener mocks base method
func (m *MockManager) UnregisterListener(arg0 deploymentenvs.Listener) {
	m.ctrl.Call(m, "UnregisterListener", arg0)
}

// UnregisterListener indicates an expected call of UnregisterListener
func (mr *MockManagerMockRecorder) UnregisterListener(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterListener", reflect.TypeOf((*MockManager)(nil).UnregisterListener), arg0)
}

// UpdateDeploymentEnvironments mocks base method
func (m *MockManager) UpdateDeploymentEnvironments(arg0 string, arg1 []string) {
	m.ctrl.Call(m, "UpdateDeploymentEnvironments", arg0, arg1)
}

// UpdateDeploymentEnvironments indicates an expected call of UpdateDeploymentEnvironments
func (mr *MockManagerMockRecorder) UpdateDeploymentEnvironments(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeploymentEnvironments", reflect.TypeOf((*MockManager)(nil).UpdateDeploymentEnvironments), arg0, arg1)
}
