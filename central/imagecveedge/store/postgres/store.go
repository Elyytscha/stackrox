// Code generated by pg-bindings generator. DO NOT EDIT.

package postgres

import (
	"bytes"
	"context"
	"reflect"
	"time"

	"github.com/gogo/protobuf/jsonpb"
	"github.com/gogo/protobuf/types"
	"github.com/jackc/pgx/v4"
	"github.com/jackc/pgx/v4/pgxpool"
	"github.com/stackrox/rox/central/globaldb"
	"github.com/stackrox/rox/central/metrics"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/logging"
	ops "github.com/stackrox/rox/pkg/metrics"
)

const (
	countStmt  = "SELECT COUNT(*) FROM ImageCVEEdgeEntry"
	existsStmt = "SELECT EXISTS(SELECT 1 FROM ImageCVEEdgeEntry WHERE ImageId = $1 AND CveId = $2)"

	getStmt             = "SELECT serialized FROM ImageCVEEdgeEntry WHERE ImageId = $1 AND CveId = $2"
	deleteStmt          = "DELETE FROM ImageCVEEdgeEntry WHERE ImageId = $1 AND CveId = $2"
	walkStmt            = "SELECT serialized FROM ImageCVEEdgeEntry"
	deleteByImageIdStmt = "DELETE FROM ImageCVEEdgeEntry WHERE ImageId = $1"
	deleteByCveIdStmt   = "DELETE FROM ImageCVEEdgeEntry WHERE CveId = $1"
)

var (
	log = logging.LoggerForModule()

	table = "ImageCVEEdgeEntry"

	marshaler = &jsonpb.Marshaler{EnumsAsInts: true, EmitDefaults: true}
)

type Store interface {
	Count() (int, error)
	Exists(imageId string, cveId string) (bool, error)
	Get(imageId string, cveId string) (*storage.ImageCVEEdgeEntry, bool, error)
	Upsert(obj *storage.ImageCVEEdgeEntry) error
	UpsertMany(objs []*storage.ImageCVEEdgeEntry) error
	Delete(imageId string, cveId string) error
	DeleteByImageId(imageId string) error
	DeleteByCveId(cveId string) error

	Walk(fn func(obj *storage.ImageCVEEdgeEntry) error) error
	AckKeysIndexed(keys ...string) error
	GetKeysToIndex() ([]string, error)
}

type storeImpl struct {
	db *pgxpool.Pool
}

const (
	batchInsertTemplate = "<no value>"
)

// New returns a new Store instance using the provided sql instance.
func New(db *pgxpool.Pool) Store {
	globaldb.RegisterTable(table, "ImageCVEEdgeEntry")

	for _, table := range []string{
		"create table if not exists ImageCVEEdgeEntry(serialized jsonb not null, ImageId varchar, CveId varchar, PRIMARY KEY (ImageId, CveId));",
	} {
		_, err := db.Exec(context.Background(), table)
		if err != nil {
			panic("error creating table: " + table)
		}
	}

	return &storeImpl{
		db: db,
	}
}

// Count returns the number of objects in the store
func (s *storeImpl) Count() (int, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Count, "ImageCVEEdgeEntry")

	row := s.db.QueryRow(context.Background(), countStmt)
	var count int
	if err := row.Scan(&count); err != nil {
		return 0, err
	}
	return count, nil
}

// Exists returns if the id exists in the store
func (s *storeImpl) Exists(imageId string, cveId string) (bool, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Exists, "ImageCVEEdgeEntry")

	row := s.db.QueryRow(context.Background(), existsStmt, imageId, cveId)
	var exists bool
	if err := row.Scan(&exists); err != nil {
		return false, nilNoRows(err)
	}
	return exists, nil
}

func nilNoRows(err error) error {
	if err == pgx.ErrNoRows {
		return nil
	}
	return err
}

// Get returns the object, if it exists from the store
func (s *storeImpl) Get(imageId string, cveId string) (*storage.ImageCVEEdgeEntry, bool, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Get, "ImageCVEEdgeEntry")

	conn, release := s.acquireConn(ops.Get, "ImageCVEEdgeEntry")
	defer release()

	row := conn.QueryRow(context.Background(), getStmt, imageId, cveId)
	var data []byte
	if err := row.Scan(&data); err != nil {
		return nil, false, nilNoRows(err)
	}

	var msg storage.ImageCVEEdgeEntry
	buf := bytes.NewBuffer(data)
	defer metrics.SetJSONPBOperationDurationTime(time.Now(), "Unmarshal", "ImageCVEEdgeEntry")
	if err := jsonpb.Unmarshal(buf, &msg); err != nil {
		return nil, false, err
	}
	return &msg, true, nil
}

func convertEnumSliceToIntArray(i interface{}) []int32 {
	enumSlice := reflect.ValueOf(i)
	enumSliceLen := enumSlice.Len()
	resultSlice := make([]int32, 0, enumSliceLen)
	for i := 0; i < enumSlice.Len(); i++ {
		resultSlice = append(resultSlice, int32(enumSlice.Index(i).Int()))
	}
	return resultSlice
}

func nilOrStringTimestamp(t *types.Timestamp) *string {
	if t == nil {
		return nil
	}
	s := t.String()
	return &s
}

// Upsert inserts the object into the DB
func (s *storeImpl) Upsert(obj0 *storage.ImageCVEEdgeEntry) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Add, "ImageCVEEdgeEntry")

	t := time.Now()
	serialized, err := marshaler.MarshalToString(obj0)
	if err != nil {
		return err
	}
	metrics.SetJSONPBOperationDurationTime(t, "Marshal", "ImageCVEEdgeEntry")
	conn, release := s.acquireConn(ops.Add, "ImageCVEEdgeEntry")
	defer release()

	tx, err := conn.BeginTx(context.Background(), pgx.TxOptions{})
	if err != nil {
		return err
	}
	doRollback := true
	defer func() {
		if doRollback {
			if rollbackErr := tx.Rollback(context.Background()); rollbackErr != nil {
				log.Errorf("error rolling backing: %v", err)
			}
		}
	}()

	localQuery := "insert into ImageCVEEdgeEntry(serialized, ImageId, CveId) values($1, $2, $3) on conflict(ImageId, CveId) do update set serialized = EXCLUDED.serialized, ImageId = EXCLUDED.ImageId, CveId = EXCLUDED.CveId"
	_, err = tx.Exec(context.Background(), localQuery, serialized, obj0.GetImageId(), obj0.GetCveId())
	if err != nil {
		return err
	}

	doRollback = false
	return tx.Commit(context.Background())
}

func (s *storeImpl) acquireConn(op ops.Op, typ string) (*pgxpool.Conn, func()) {
	defer metrics.SetAcquireDuration(time.Now(), op, typ)
	conn, err := s.db.Acquire(context.Background())
	if err != nil {
		panic(err)
	}
	return conn, conn.Release
}

// UpsertMany batches objects into the DB
func (s *storeImpl) UpsertMany(objs []*storage.ImageCVEEdgeEntry) error {
	if len(objs) == 0 {
		return nil
	}

	batch := &pgx.Batch{}
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.AddMany, "ImageCVEEdgeEntry")
	for _, obj0 := range objs {
		t := time.Now()
		serialized, err := marshaler.MarshalToString(obj0)
		if err != nil {
			return err
		}
		metrics.SetJSONPBOperationDurationTime(t, "Marshal", "ImageCVEEdgeEntry")
		localQuery := "insert into ImageCVEEdgeEntry(serialized, ImageId, CveId) values($1, $2, $3) on conflict(ImageId, CveId) do update set serialized = EXCLUDED.serialized, ImageId = EXCLUDED.ImageId, CveId = EXCLUDED.CveId"
		batch.Queue(localQuery, serialized, obj0.GetImageId(), obj0.GetCveId())

	}

	conn, release := s.acquireConn(ops.AddMany, "ImageCVEEdgeEntry")
	defer release()

	results := conn.SendBatch(context.Background(), batch)
	if err := results.Close(); err != nil {
		return err
	}
	return nil
}

// Delete removes the specified ID from the store
func (s *storeImpl) Delete(imageId string, cveId string) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Remove, "ImageCVEEdgeEntry")

	conn, release := s.acquireConn(ops.Remove, "ImageCVEEdgeEntry")
	defer release()

	if _, err := conn.Exec(context.Background(), deleteStmt, imageId, cveId); err != nil {
		return err
	}
	return nil
}
func (s *storeImpl) DeleteByImageId(imageId string) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.RemoveMany, "ImageCVEEdgeEntry")

	conn, release := s.acquireConn(ops.RemoveMany, "ImageCVEEdgeEntry")
	defer release()
	if _, err := conn.Exec(context.Background(), deleteByImageIdStmt, imageId); err != nil {
		return err
	}
	return nil
}
func (s *storeImpl) DeleteByCveId(cveId string) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.RemoveMany, "ImageCVEEdgeEntry")

	conn, release := s.acquireConn(ops.RemoveMany, "ImageCVEEdgeEntry")
	defer release()
	if _, err := conn.Exec(context.Background(), deleteByCveIdStmt, cveId); err != nil {
		return err
	}
	return nil
}

// Walk iterates over all of the objects in the store and applies the closure
func (s *storeImpl) Walk(fn func(obj *storage.ImageCVEEdgeEntry) error) error {
	rows, err := s.db.Query(context.Background(), walkStmt)
	if err != nil {
		return nilNoRows(err)
	}
	defer rows.Close()
	for rows.Next() {
		var data []byte
		if err := rows.Scan(&data); err != nil {
			return err
		}
		var msg storage.ImageCVEEdgeEntry
		buf := bytes.NewReader(data)
		if err := jsonpb.Unmarshal(buf, &msg); err != nil {
			return err
		}
		return fn(&msg)
	}
	return nil
}

// AckKeysIndexed acknowledges the passed keys were indexed
func (s *storeImpl) AckKeysIndexed(keys ...string) error {
	return nil
}

// GetKeysToIndex returns the keys that need to be indexed
func (s *storeImpl) GetKeysToIndex() ([]string, error) {
	return nil, nil
}
