// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackrox/rox/central/image/datastore/internal/store (interfaces: Store)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	storage "github.com/stackrox/rox/generated/storage"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CountImages mocks base method
func (m *MockStore) CountImages() (int, error) {
	ret := m.ctrl.Call(m, "CountImages")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountImages indicates an expected call of CountImages
func (mr *MockStoreMockRecorder) CountImages() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountImages", reflect.TypeOf((*MockStore)(nil).CountImages))
}

// DeleteImage mocks base method
func (m *MockStore) DeleteImage(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteImage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImage indicates an expected call of DeleteImage
func (mr *MockStoreMockRecorder) DeleteImage(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockStore)(nil).DeleteImage), arg0)
}

// GetImage mocks base method
func (m *MockStore) GetImage(arg0 string) (*storage.Image, bool, error) {
	ret := m.ctrl.Call(m, "GetImage", arg0)
	ret0, _ := ret[0].(*storage.Image)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetImage indicates an expected call of GetImage
func (mr *MockStoreMockRecorder) GetImage(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockStore)(nil).GetImage), arg0)
}

// GetImages mocks base method
func (m *MockStore) GetImages() ([]*storage.Image, error) {
	ret := m.ctrl.Call(m, "GetImages")
	ret0, _ := ret[0].([]*storage.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImages indicates an expected call of GetImages
func (mr *MockStoreMockRecorder) GetImages() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImages", reflect.TypeOf((*MockStore)(nil).GetImages))
}

// GetImagesBatch mocks base method
func (m *MockStore) GetImagesBatch(arg0 []string) ([]*storage.Image, error) {
	ret := m.ctrl.Call(m, "GetImagesBatch", arg0)
	ret0, _ := ret[0].([]*storage.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImagesBatch indicates an expected call of GetImagesBatch
func (mr *MockStoreMockRecorder) GetImagesBatch(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImagesBatch", reflect.TypeOf((*MockStore)(nil).GetImagesBatch), arg0)
}

// ListImage mocks base method
func (m *MockStore) ListImage(arg0 string) (*storage.ListImage, bool, error) {
	ret := m.ctrl.Call(m, "ListImage", arg0)
	ret0, _ := ret[0].(*storage.ListImage)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListImage indicates an expected call of ListImage
func (mr *MockStoreMockRecorder) ListImage(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImage", reflect.TypeOf((*MockStore)(nil).ListImage), arg0)
}

// ListImages mocks base method
func (m *MockStore) ListImages() ([]*storage.ListImage, error) {
	ret := m.ctrl.Call(m, "ListImages")
	ret0, _ := ret[0].([]*storage.ListImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImages indicates an expected call of ListImages
func (mr *MockStoreMockRecorder) ListImages() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImages", reflect.TypeOf((*MockStore)(nil).ListImages))
}

// UpsertImage mocks base method
func (m *MockStore) UpsertImage(arg0 *storage.Image) error {
	ret := m.ctrl.Call(m, "UpsertImage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertImage indicates an expected call of UpsertImage
func (mr *MockStoreMockRecorder) UpsertImage(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertImage", reflect.TypeOf((*MockStore)(nil).UpsertImage), arg0)
}
