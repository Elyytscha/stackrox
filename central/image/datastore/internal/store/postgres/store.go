// Code generated by pg-bindings generator. DO NOT EDIT.

package postgres

import (
	"context"
	"reflect"
	"time"

	"github.com/gogo/protobuf/proto"
	"github.com/jackc/pgx/v4"
	"github.com/jackc/pgx/v4/pgxpool"
	"github.com/stackrox/rox/central/globaldb"
	"github.com/stackrox/rox/central/metrics"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/logging"
	ops "github.com/stackrox/rox/pkg/metrics"
	"github.com/stackrox/rox/pkg/postgres/pgutils"
	"github.com/stackrox/rox/pkg/postgres/walker"
)

const (
	baseTable  = "images"
	countStmt  = "SELECT COUNT(*) FROM images"
	existsStmt = "SELECT EXISTS(SELECT 1 FROM images WHERE id = $1)"

	getStmt     = "SELECT serialized FROM images WHERE id = $1"
	deleteStmt  = "DELETE FROM images WHERE id = $1"
	walkStmt    = "SELECT serialized FROM images"
	getIDsStmt  = "SELECT id FROM images"
	getManyStmt = "SELECT serialized FROM images WHERE id = ANY($1::text[])"

	deleteManyStmt = "DELETE FROM images WHERE id = ANY($1::text[])"

	batchAfter = 100

	// using copyFrom, we may not even want to batch.  It would probably be simpler
	// to deal with failures if we just sent it all.  Something to think about as we
	// proceed and move into more e2e and larger performance testing
	batchSize = 10000
)

var (
	schema = walker.Walk(reflect.TypeOf((*storage.Image)(nil)), baseTable)
	log    = logging.LoggerForModule()
)

func init() {
	globaldb.RegisterTable(schema)
}

type Store interface {
	Count(ctx context.Context) (int, error)
	Exists(ctx context.Context, id string) (bool, error)
	Get(ctx context.Context, id string) (*storage.Image, bool, error)
	Upsert(ctx context.Context, obj *storage.Image) error
	UpsertMany(ctx context.Context, objs []*storage.Image) error
	Delete(ctx context.Context, id string) error
	GetIDs(ctx context.Context) ([]string, error)
	GetMany(ctx context.Context, ids []string) ([]*storage.Image, []int, error)
	DeleteMany(ctx context.Context, ids []string) error

	Walk(ctx context.Context, fn func(obj *storage.Image) error) error

	AckKeysIndexed(ctx context.Context, keys ...string) error
	GetKeysToIndex(ctx context.Context) ([]string, error)
}

type storeImpl struct {
	db *pgxpool.Pool
}

func createTableImages(ctx context.Context, db *pgxpool.Pool) {
	table := `
create table if not exists images (
    id varchar,
    name_registry varchar,
    name_remote varchar,
    name_tag varchar,
    name_fullname varchar,
    metadata_v1_digest varchar,
    metadata_v1_created timestamp,
    metadata_v1_author varchar,
    metadata_v1_user varchar,
    metadata_v1_command text[],
    metadata_v1_entrypoint text[],
    metadata_v1_volumes text[],
    metadata_v1_labels jsonb,
    metadata_v2_digest varchar,
    metadata_layershas text[],
    metadata_datasource_id varchar,
    metadata_datasource_name varchar,
    metadata_version integer,
    scan_scannerversion varchar,
    scan_scantime timestamp,
    scan_operatingsystem varchar,
    scan_datasource_id varchar,
    scan_datasource_name varchar,
    scan_notes int[],
    components integer,
    cves integer,
    fixablecves integer,
    lastupdated timestamp,
    notpullable bool,
    isclusterlocal bool,
    priority integer,
    riskscore numeric,
    topcvss numeric,
    notes int[],
    serialized bytea,
    PRIMARY KEY(id)
)
`

	_, err := db.Exec(ctx, table)
	if err != nil {
		log.Panicf("Error creating table %s: %v", table, err)
	}

	indexes := []string{}
	for _, index := range indexes {
		if _, err := db.Exec(ctx, index); err != nil {
			log.Panicf("Error creating index %s: %v", index, err)
		}
	}

	createTableImagesLayers(ctx, db)
	createTableImagesResults(ctx, db)
	createTableImagesSignatures(ctx, db)
}

func createTableImagesLayers(ctx context.Context, db *pgxpool.Pool) {
	table := `
create table if not exists images_Layers (
    imageid varchar,
    idx integer,
    instruction varchar,
    value varchar,
    created timestamp,
    author varchar,
    empty bool,
    PRIMARY KEY(imageid, idx),
    CONSTRAINT fk_parent_table_0 FOREIGN KEY (imageid) REFERENCES images(id) ON DELETE CASCADE
)
`

	_, err := db.Exec(ctx, table)
	if err != nil {
		log.Panicf("Error creating table %s: %v", table, err)
	}

	indexes := []string{

		"create index if not exists imagesLayers_idx on images_Layers using btree(idx)",
	}
	for _, index := range indexes {
		if _, err := db.Exec(ctx, index); err != nil {
			log.Panicf("Error creating index %s: %v", index, err)
		}
	}

}

func createTableImagesResults(ctx context.Context, db *pgxpool.Pool) {
	table := `
create table if not exists images_Results (
    imageid varchar,
    idx integer,
    verificationtime timestamp,
    verifierid varchar,
    status integer,
    description varchar,
    PRIMARY KEY(imageid, idx),
    CONSTRAINT fk_parent_table_0 FOREIGN KEY (imageid) REFERENCES images(id) ON DELETE CASCADE
)
`

	_, err := db.Exec(ctx, table)
	if err != nil {
		log.Panicf("Error creating table %s: %v", table, err)
	}

	indexes := []string{

		"create index if not exists imagesResults_idx on images_Results using btree(idx)",
	}
	for _, index := range indexes {
		if _, err := db.Exec(ctx, index); err != nil {
			log.Panicf("Error creating index %s: %v", index, err)
		}
	}

}

func createTableImagesSignatures(ctx context.Context, db *pgxpool.Pool) {
	table := `
create table if not exists images_Signatures (
    imageid varchar,
    idx integer,
    cosign_rawsignature varchar,
    cosign_signaturepayload varchar,
    PRIMARY KEY(imageid, idx),
    CONSTRAINT fk_parent_table_0 FOREIGN KEY (imageid) REFERENCES images(id) ON DELETE CASCADE
)
`

	_, err := db.Exec(ctx, table)
	if err != nil {
		log.Panicf("Error creating table %s: %v", table, err)
	}

	indexes := []string{

		"create index if not exists imagesSignatures_idx on images_Signatures using btree(idx)",
	}
	for _, index := range indexes {
		if _, err := db.Exec(ctx, index); err != nil {
			log.Panicf("Error creating index %s: %v", index, err)
		}
	}

}

func insertIntoImages(ctx context.Context, tx pgx.Tx, obj *storage.Image) error {

	serialized, marshalErr := obj.Marshal()
	if marshalErr != nil {
		return marshalErr
	}

	values := []interface{}{
		// parent primary keys start
		obj.GetId(),
		obj.GetName().GetRegistry(),
		obj.GetName().GetRemote(),
		obj.GetName().GetTag(),
		obj.GetName().GetFullName(),
		obj.GetMetadata().GetV1().GetDigest(),
		pgutils.NilOrTime(obj.GetMetadata().GetV1().GetCreated()),
		obj.GetMetadata().GetV1().GetAuthor(),
		obj.GetMetadata().GetV1().GetUser(),
		obj.GetMetadata().GetV1().GetCommand(),
		obj.GetMetadata().GetV1().GetEntrypoint(),
		obj.GetMetadata().GetV1().GetVolumes(),
		obj.GetMetadata().GetV1().GetLabels(),
		obj.GetMetadata().GetV2().GetDigest(),
		obj.GetMetadata().GetLayerShas(),
		obj.GetMetadata().GetDataSource().GetId(),
		obj.GetMetadata().GetDataSource().GetName(),
		obj.GetMetadata().GetVersion(),
		obj.GetScan().GetScannerVersion(),
		pgutils.NilOrTime(obj.GetScan().GetScanTime()),
		obj.GetScan().GetOperatingSystem(),
		obj.GetScan().GetDataSource().GetId(),
		obj.GetScan().GetDataSource().GetName(),
		obj.GetScan().GetNotes(),
		obj.GetComponents(),
		obj.GetCves(),
		obj.GetFixableCves(),
		pgutils.NilOrTime(obj.GetLastUpdated()),
		obj.GetNotPullable(),
		obj.GetIsClusterLocal(),
		obj.GetPriority(),
		obj.GetRiskScore(),
		obj.GetTopCvss(),
		obj.GetNotes(),
		serialized,
	}

	finalStr := "INSERT INTO images (id, name_registry, name_remote, name_tag, name_fullname, metadata_v1_digest, metadata_v1_created, metadata_v1_author, metadata_v1_user, metadata_v1_command, metadata_v1_entrypoint, metadata_v1_volumes, metadata_v1_labels, metadata_v2_digest, metadata_layershas, metadata_datasource_id, metadata_datasource_name, metadata_version, scan_scannerversion, scan_scantime, scan_operatingsystem, scan_datasource_id, scan_datasource_name, scan_notes, components, cves, fixablecves, lastupdated, notpullable, isclusterlocal, priority, riskscore, topcvss, notes, serialized) VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35) ON CONFLICT(id) DO UPDATE SET id = EXCLUDED.id, name_registry = EXCLUDED.name_registry, name_remote = EXCLUDED.name_remote, name_tag = EXCLUDED.name_tag, name_fullname = EXCLUDED.name_fullname, metadata_v1_digest = EXCLUDED.metadata_v1_digest, metadata_v1_created = EXCLUDED.metadata_v1_created, metadata_v1_author = EXCLUDED.metadata_v1_author, metadata_v1_user = EXCLUDED.metadata_v1_user, metadata_v1_command = EXCLUDED.metadata_v1_command, metadata_v1_entrypoint = EXCLUDED.metadata_v1_entrypoint, metadata_v1_volumes = EXCLUDED.metadata_v1_volumes, metadata_v1_labels = EXCLUDED.metadata_v1_labels, metadata_v2_digest = EXCLUDED.metadata_v2_digest, metadata_layershas = EXCLUDED.metadata_layershas, metadata_datasource_id = EXCLUDED.metadata_datasource_id, metadata_datasource_name = EXCLUDED.metadata_datasource_name, metadata_version = EXCLUDED.metadata_version, scan_scannerversion = EXCLUDED.scan_scannerversion, scan_scantime = EXCLUDED.scan_scantime, scan_operatingsystem = EXCLUDED.scan_operatingsystem, scan_datasource_id = EXCLUDED.scan_datasource_id, scan_datasource_name = EXCLUDED.scan_datasource_name, scan_notes = EXCLUDED.scan_notes, components = EXCLUDED.components, cves = EXCLUDED.cves, fixablecves = EXCLUDED.fixablecves, lastupdated = EXCLUDED.lastupdated, notpullable = EXCLUDED.notpullable, isclusterlocal = EXCLUDED.isclusterlocal, priority = EXCLUDED.priority, riskscore = EXCLUDED.riskscore, topcvss = EXCLUDED.topcvss, notes = EXCLUDED.notes, serialized = EXCLUDED.serialized"
	_, err := tx.Exec(ctx, finalStr, values...)
	if err != nil {
		return err
	}

	var query string

	for childIdx, child := range obj.GetMetadata().GetV1().GetLayers() {
		if err := insertIntoImagesLayers(ctx, tx, child, obj.GetId(), childIdx); err != nil {
			return err
		}
	}

	query = "delete from images_Layers where imageid = $1 AND idx >= $2"
	_, err = tx.Exec(ctx, query, obj.GetId(), len(obj.GetMetadata().GetV1().GetLayers()))
	if err != nil {
		return err
	}
	for childIdx, child := range obj.GetSignatureVerificationData().GetResults() {
		if err := insertIntoImagesResults(ctx, tx, child, obj.GetId(), childIdx); err != nil {
			return err
		}
	}

	query = "delete from images_Results where imageid = $1 AND idx >= $2"
	_, err = tx.Exec(ctx, query, obj.GetId(), len(obj.GetSignatureVerificationData().GetResults()))
	if err != nil {
		return err
	}
	for childIdx, child := range obj.GetSignature().GetSignatures() {
		if err := insertIntoImagesSignatures(ctx, tx, child, obj.GetId(), childIdx); err != nil {
			return err
		}
	}

	query = "delete from images_Signatures where imageid = $1 AND idx >= $2"
	_, err = tx.Exec(ctx, query, obj.GetId(), len(obj.GetSignature().GetSignatures()))
	if err != nil {
		return err
	}
	return nil
}

func insertIntoImagesLayers(ctx context.Context, tx pgx.Tx, obj *storage.ImageLayer, imageid string, idx int) error {

	values := []interface{}{
		// parent primary keys start
		imageid,
		idx,
		obj.GetInstruction(),
		obj.GetValue(),
		pgutils.NilOrTime(obj.GetCreated()),
		obj.GetAuthor(),
		obj.GetEmpty(),
	}

	finalStr := "INSERT INTO images_Layers (imageid, idx, instruction, value, created, author, empty) VALUES($1, $2, $3, $4, $5, $6, $7) ON CONFLICT(imageid, idx) DO UPDATE SET imageid = EXCLUDED.imageid, idx = EXCLUDED.idx, instruction = EXCLUDED.instruction, value = EXCLUDED.value, created = EXCLUDED.created, author = EXCLUDED.author, empty = EXCLUDED.empty"
	_, err := tx.Exec(ctx, finalStr, values...)
	if err != nil {
		return err
	}

	return nil
}

func insertIntoImagesResults(ctx context.Context, tx pgx.Tx, obj *storage.ImageSignatureVerificationResult, imageid string, idx int) error {

	values := []interface{}{
		// parent primary keys start
		imageid,
		idx,
		pgutils.NilOrTime(obj.GetVerificationTime()),
		obj.GetVerifierId(),
		obj.GetStatus(),
		obj.GetDescription(),
	}

	finalStr := "INSERT INTO images_Results (imageid, idx, verificationtime, verifierid, status, description) VALUES($1, $2, $3, $4, $5, $6) ON CONFLICT(imageid, idx) DO UPDATE SET imageid = EXCLUDED.imageid, idx = EXCLUDED.idx, verificationtime = EXCLUDED.verificationtime, verifierid = EXCLUDED.verifierid, status = EXCLUDED.status, description = EXCLUDED.description"
	_, err := tx.Exec(ctx, finalStr, values...)
	if err != nil {
		return err
	}

	return nil
}

func insertIntoImagesSignatures(ctx context.Context, tx pgx.Tx, obj *storage.Signature, imageid string, idx int) error {

	values := []interface{}{
		// parent primary keys start
		imageid,
		idx,
		obj.GetCosign().GetRawSignature(),
		obj.GetCosign().GetSignaturePayload(),
	}

	finalStr := "INSERT INTO images_Signatures (imageid, idx, cosign_rawsignature, cosign_signaturepayload) VALUES($1, $2, $3, $4) ON CONFLICT(imageid, idx) DO UPDATE SET imageid = EXCLUDED.imageid, idx = EXCLUDED.idx, cosign_rawsignature = EXCLUDED.cosign_rawsignature, cosign_signaturepayload = EXCLUDED.cosign_signaturepayload"
	_, err := tx.Exec(ctx, finalStr, values...)
	if err != nil {
		return err
	}

	return nil
}

func (s *storeImpl) copyFromImages(ctx context.Context, tx pgx.Tx, objs ...*storage.Image) error {

	inputRows := [][]interface{}{}

	var err error

	// This is a copy so first we must delete the rows and re-add them
	// Which is essentially the desired behaviour of an upsert.
	var deletes []string

	copyCols := []string{

		"id",

		"name_registry",

		"name_remote",

		"name_tag",

		"name_fullname",

		"metadata_v1_digest",

		"metadata_v1_created",

		"metadata_v1_author",

		"metadata_v1_user",

		"metadata_v1_command",

		"metadata_v1_entrypoint",

		"metadata_v1_volumes",

		"metadata_v1_labels",

		"metadata_v2_digest",

		"metadata_layershas",

		"metadata_datasource_id",

		"metadata_datasource_name",

		"metadata_version",

		"scan_scannerversion",

		"scan_scantime",

		"scan_operatingsystem",

		"scan_datasource_id",

		"scan_datasource_name",

		"scan_notes",

		"components",

		"cves",

		"fixablecves",

		"lastupdated",

		"notpullable",

		"isclusterlocal",

		"priority",

		"riskscore",

		"topcvss",

		"notes",

		"serialized",
	}

	for idx, obj := range objs {
		// Todo: ROX-9499 Figure out how to more cleanly template around this issue.
		log.Debugf("This is here for now because there is an issue with pods_TerminatedInstances where the obj in the loop is not used as it only consists of the parent id and the idx.  Putting this here as a stop gap to simply use the object.  %s", obj)

		serialized, marshalErr := obj.Marshal()
		if marshalErr != nil {
			return marshalErr
		}

		inputRows = append(inputRows, []interface{}{

			obj.GetId(),

			obj.GetName().GetRegistry(),

			obj.GetName().GetRemote(),

			obj.GetName().GetTag(),

			obj.GetName().GetFullName(),

			obj.GetMetadata().GetV1().GetDigest(),

			pgutils.NilOrTime(obj.GetMetadata().GetV1().GetCreated()),

			obj.GetMetadata().GetV1().GetAuthor(),

			obj.GetMetadata().GetV1().GetUser(),

			obj.GetMetadata().GetV1().GetCommand(),

			obj.GetMetadata().GetV1().GetEntrypoint(),

			obj.GetMetadata().GetV1().GetVolumes(),

			obj.GetMetadata().GetV1().GetLabels(),

			obj.GetMetadata().GetV2().GetDigest(),

			obj.GetMetadata().GetLayerShas(),

			obj.GetMetadata().GetDataSource().GetId(),

			obj.GetMetadata().GetDataSource().GetName(),

			obj.GetMetadata().GetVersion(),

			obj.GetScan().GetScannerVersion(),

			pgutils.NilOrTime(obj.GetScan().GetScanTime()),

			obj.GetScan().GetOperatingSystem(),

			obj.GetScan().GetDataSource().GetId(),

			obj.GetScan().GetDataSource().GetName(),

			obj.GetScan().GetNotes(),

			obj.GetComponents(),

			obj.GetCves(),

			obj.GetFixableCves(),

			pgutils.NilOrTime(obj.GetLastUpdated()),

			obj.GetNotPullable(),

			obj.GetIsClusterLocal(),

			obj.GetPriority(),

			obj.GetRiskScore(),

			obj.GetTopCvss(),

			obj.GetNotes(),

			serialized,
		})

		// Add the id to be deleted.
		deletes = append(deletes, obj.GetId())

		// if we hit our batch size we need to push the data
		if (idx+1)%batchSize == 0 || idx == len(objs)-1 {
			// copy does not upsert so have to delete first.  parent deletion cascades so only need to
			// delete for the top level parent

			_, err = tx.Exec(ctx, deleteManyStmt, deletes)
			if err != nil {
				return err
			}
			// clear the inserts and vals for the next batch
			deletes = nil

			_, err = tx.CopyFrom(ctx, pgx.Identifier{"images"}, copyCols, pgx.CopyFromRows(inputRows))

			if err != nil {
				return err
			}

			// clear the input rows for the next batch
			inputRows = inputRows[:0]
		}
	}

	for _, obj := range objs {

		if err = s.copyFromImagesLayers(ctx, tx, obj.GetId(), obj.GetMetadata().GetV1().GetLayers()...); err != nil {
			return err
		}
		if err = s.copyFromImagesResults(ctx, tx, obj.GetId(), obj.GetSignatureVerificationData().GetResults()...); err != nil {
			return err
		}
		if err = s.copyFromImagesSignatures(ctx, tx, obj.GetId(), obj.GetSignature().GetSignatures()...); err != nil {
			return err
		}
	}

	return err
}

func (s *storeImpl) copyFromImagesLayers(ctx context.Context, tx pgx.Tx, imageid string, objs ...*storage.ImageLayer) error {

	inputRows := [][]interface{}{}

	var err error

	copyCols := []string{

		"imageid",

		"idx",

		"instruction",

		"value",

		"created",

		"author",

		"empty",
	}

	for idx, obj := range objs {
		// Todo: ROX-9499 Figure out how to more cleanly template around this issue.
		log.Debugf("This is here for now because there is an issue with pods_TerminatedInstances where the obj in the loop is not used as it only consists of the parent id and the idx.  Putting this here as a stop gap to simply use the object.  %s", obj)

		inputRows = append(inputRows, []interface{}{

			imageid,

			idx,

			obj.GetInstruction(),

			obj.GetValue(),

			pgutils.NilOrTime(obj.GetCreated()),

			obj.GetAuthor(),

			obj.GetEmpty(),
		})

		// if we hit our batch size we need to push the data
		if (idx+1)%batchSize == 0 || idx == len(objs)-1 {
			// copy does not upsert so have to delete first.  parent deletion cascades so only need to
			// delete for the top level parent

			_, err = tx.CopyFrom(ctx, pgx.Identifier{"images_layers"}, copyCols, pgx.CopyFromRows(inputRows))

			if err != nil {
				return err
			}

			// clear the input rows for the next batch
			inputRows = inputRows[:0]
		}
	}

	return err
}

func (s *storeImpl) copyFromImagesResults(ctx context.Context, tx pgx.Tx, imageid string, objs ...*storage.ImageSignatureVerificationResult) error {

	inputRows := [][]interface{}{}

	var err error

	copyCols := []string{

		"imageid",

		"idx",

		"verificationtime",

		"verifierid",

		"status",

		"description",
	}

	for idx, obj := range objs {
		// Todo: ROX-9499 Figure out how to more cleanly template around this issue.
		log.Debugf("This is here for now because there is an issue with pods_TerminatedInstances where the obj in the loop is not used as it only consists of the parent id and the idx.  Putting this here as a stop gap to simply use the object.  %s", obj)

		inputRows = append(inputRows, []interface{}{

			imageid,

			idx,

			pgutils.NilOrTime(obj.GetVerificationTime()),

			obj.GetVerifierId(),

			obj.GetStatus(),

			obj.GetDescription(),
		})

		// if we hit our batch size we need to push the data
		if (idx+1)%batchSize == 0 || idx == len(objs)-1 {
			// copy does not upsert so have to delete first.  parent deletion cascades so only need to
			// delete for the top level parent

			_, err = tx.CopyFrom(ctx, pgx.Identifier{"images_results"}, copyCols, pgx.CopyFromRows(inputRows))

			if err != nil {
				return err
			}

			// clear the input rows for the next batch
			inputRows = inputRows[:0]
		}
	}

	return err
}

func (s *storeImpl) copyFromImagesSignatures(ctx context.Context, tx pgx.Tx, imageid string, objs ...*storage.Signature) error {

	inputRows := [][]interface{}{}

	var err error

	copyCols := []string{

		"imageid",

		"idx",

		"cosign_rawsignature",

		"cosign_signaturepayload",
	}

	for idx, obj := range objs {
		// Todo: ROX-9499 Figure out how to more cleanly template around this issue.
		log.Debugf("This is here for now because there is an issue with pods_TerminatedInstances where the obj in the loop is not used as it only consists of the parent id and the idx.  Putting this here as a stop gap to simply use the object.  %s", obj)

		inputRows = append(inputRows, []interface{}{

			imageid,

			idx,

			obj.GetCosign().GetRawSignature(),

			obj.GetCosign().GetSignaturePayload(),
		})

		// if we hit our batch size we need to push the data
		if (idx+1)%batchSize == 0 || idx == len(objs)-1 {
			// copy does not upsert so have to delete first.  parent deletion cascades so only need to
			// delete for the top level parent

			_, err = tx.CopyFrom(ctx, pgx.Identifier{"images_signatures"}, copyCols, pgx.CopyFromRows(inputRows))

			if err != nil {
				return err
			}

			// clear the input rows for the next batch
			inputRows = inputRows[:0]
		}
	}

	return err
}

// New returns a new Store instance using the provided sql instance.
func New(ctx context.Context, db *pgxpool.Pool) Store {
	createTableImages(ctx, db)

	return &storeImpl{
		db: db,
	}
}

func (s *storeImpl) copyFrom(ctx context.Context, objs ...*storage.Image) error {
	conn, release := s.acquireConn(ctx, ops.Get, "Image")
	defer release()

	tx, err := conn.Begin(ctx)
	if err != nil {
		return err
	}

	if err := s.copyFromImages(ctx, tx, objs...); err != nil {
		if err := tx.Rollback(ctx); err != nil {
			return err
		}
		return err
	}
	if err := tx.Commit(ctx); err != nil {
		return err
	}
	return nil
}

func (s *storeImpl) upsert(ctx context.Context, objs ...*storage.Image) error {
	conn, release := s.acquireConn(ctx, ops.Get, "Image")
	defer release()

	for _, obj := range objs {
		tx, err := conn.Begin(ctx)
		if err != nil {
			return err
		}

		if err := insertIntoImages(ctx, tx, obj); err != nil {
			if err := tx.Rollback(ctx); err != nil {
				return err
			}
			return err
		}
		if err := tx.Commit(ctx); err != nil {
			return err
		}
	}
	return nil
}

func (s *storeImpl) Upsert(ctx context.Context, obj *storage.Image) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Upsert, "Image")

	return s.upsert(ctx, obj)
}

func (s *storeImpl) UpsertMany(ctx context.Context, objs []*storage.Image) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.UpdateMany, "Image")

	if len(objs) < batchAfter {
		return s.upsert(ctx, objs...)
	} else {
		return s.copyFrom(ctx, objs...)
	}
}

// Count returns the number of objects in the store
func (s *storeImpl) Count(ctx context.Context) (int, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Count, "Image")

	row := s.db.QueryRow(ctx, countStmt)
	var count int
	if err := row.Scan(&count); err != nil {
		return 0, err
	}
	return count, nil
}

// Exists returns if the id exists in the store
func (s *storeImpl) Exists(ctx context.Context, id string) (bool, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Exists, "Image")

	row := s.db.QueryRow(ctx, existsStmt, id)
	var exists bool
	if err := row.Scan(&exists); err != nil {
		return false, pgutils.ErrNilIfNoRows(err)
	}
	return exists, nil
}

// Get returns the object, if it exists from the store
func (s *storeImpl) Get(ctx context.Context, id string) (*storage.Image, bool, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Get, "Image")

	conn, release := s.acquireConn(ctx, ops.Get, "Image")
	defer release()

	row := conn.QueryRow(ctx, getStmt, id)
	var data []byte
	if err := row.Scan(&data); err != nil {
		return nil, false, pgutils.ErrNilIfNoRows(err)
	}

	var msg storage.Image
	if err := proto.Unmarshal(data, &msg); err != nil {
		return nil, false, err
	}
	return &msg, true, nil
}

func (s *storeImpl) acquireConn(ctx context.Context, op ops.Op, typ string) (*pgxpool.Conn, func()) {
	defer metrics.SetAcquireDBConnDuration(time.Now(), op, typ)
	conn, err := s.db.Acquire(ctx)
	if err != nil {
		panic(err)
	}
	return conn, conn.Release
}

// Delete removes the specified ID from the store
func (s *storeImpl) Delete(ctx context.Context, id string) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Remove, "Image")

	conn, release := s.acquireConn(ctx, ops.Remove, "Image")
	defer release()

	if _, err := conn.Exec(ctx, deleteStmt, id); err != nil {
		return err
	}
	return nil
}

// GetIDs returns all the IDs for the store
func (s *storeImpl) GetIDs(ctx context.Context) ([]string, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.GetAll, "storage.ImageIDs")

	rows, err := s.db.Query(ctx, getIDsStmt)
	if err != nil {
		return nil, pgutils.ErrNilIfNoRows(err)
	}
	defer rows.Close()
	var ids []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		ids = append(ids, id)
	}
	return ids, nil
}

// GetMany returns the objects specified by the IDs or the index in the missing indices slice
func (s *storeImpl) GetMany(ctx context.Context, ids []string) ([]*storage.Image, []int, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.GetMany, "Image")

	conn, release := s.acquireConn(ctx, ops.GetMany, "Image")
	defer release()

	rows, err := conn.Query(ctx, getManyStmt, ids)
	if err != nil {
		if err == pgx.ErrNoRows {
			missingIndices := make([]int, 0, len(ids))
			for i := range ids {
				missingIndices = append(missingIndices, i)
			}
			return nil, missingIndices, nil
		}
		return nil, nil, err
	}
	defer rows.Close()
	resultsByID := make(map[string]*storage.Image)
	for rows.Next() {
		var data []byte
		if err := rows.Scan(&data); err != nil {
			return nil, nil, err
		}
		msg := &storage.Image{}
		if err := proto.Unmarshal(data, msg); err != nil {
			return nil, nil, err
		}
		resultsByID[msg.GetId()] = msg
	}
	missingIndices := make([]int, 0, len(ids)-len(resultsByID))
	// It is important that the elems are populated in the same order as the input ids
	// slice, since some calling code relies on that to maintain order.
	elems := make([]*storage.Image, 0, len(resultsByID))
	for i, id := range ids {
		if result, ok := resultsByID[id]; !ok {
			missingIndices = append(missingIndices, i)
		} else {
			elems = append(elems, result)
		}
	}
	return elems, missingIndices, nil
}

// Delete removes the specified IDs from the store
func (s *storeImpl) DeleteMany(ctx context.Context, ids []string) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.RemoveMany, "Image")

	conn, release := s.acquireConn(ctx, ops.RemoveMany, "Image")
	defer release()
	if _, err := conn.Exec(ctx, deleteManyStmt, ids); err != nil {
		return err
	}
	return nil
}

// Walk iterates over all of the objects in the store and applies the closure
func (s *storeImpl) Walk(ctx context.Context, fn func(obj *storage.Image) error) error {
	rows, err := s.db.Query(ctx, walkStmt)
	if err != nil {
		return pgutils.ErrNilIfNoRows(err)
	}
	defer rows.Close()
	for rows.Next() {
		var data []byte
		if err := rows.Scan(&data); err != nil {
			return err
		}
		var msg storage.Image
		if err := proto.Unmarshal(data, &msg); err != nil {
			return err
		}
		if err := fn(&msg); err != nil {
			return err
		}
	}
	return nil
}

//// Used for testing

func dropTableImages(ctx context.Context, db *pgxpool.Pool) {
	_, _ = db.Exec(ctx, "DROP TABLE IF EXISTS images CASCADE")
	dropTableImagesLayers(ctx, db)
	dropTableImagesResults(ctx, db)
	dropTableImagesSignatures(ctx, db)

}

func dropTableImagesLayers(ctx context.Context, db *pgxpool.Pool) {
	_, _ = db.Exec(ctx, "DROP TABLE IF EXISTS images_Layers CASCADE")

}

func dropTableImagesResults(ctx context.Context, db *pgxpool.Pool) {
	_, _ = db.Exec(ctx, "DROP TABLE IF EXISTS images_Results CASCADE")

}

func dropTableImagesSignatures(ctx context.Context, db *pgxpool.Pool) {
	_, _ = db.Exec(ctx, "DROP TABLE IF EXISTS images_Signatures CASCADE")

}

func Destroy(ctx context.Context, db *pgxpool.Pool) {
	dropTableImages(ctx, db)
}

//// Stubs for satisfying legacy interfaces

// AckKeysIndexed acknowledges the passed keys were indexed
func (s *storeImpl) AckKeysIndexed(ctx context.Context, keys ...string) error {
	return nil
}

// GetKeysToIndex returns the keys that need to be indexed
func (s *storeImpl) GetKeysToIndex(ctx context.Context) ([]string, error) {
	return nil, nil
}
