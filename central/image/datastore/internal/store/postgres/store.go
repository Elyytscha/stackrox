// Code generated by pg-bindings generator. DO NOT EDIT.

package postgres

import (
	"bytes"
	"context"
	"reflect"
	"time"

	"github.com/gogo/protobuf/jsonpb"
	"github.com/gogo/protobuf/types"
	"github.com/jackc/pgx/v4"
	"github.com/jackc/pgx/v4/pgxpool"
	"github.com/stackrox/rox/central/globaldb"
	"github.com/stackrox/rox/central/metrics"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/logging"
	ops "github.com/stackrox/rox/pkg/metrics"
)

const (
	countStmt  = "SELECT COUNT(*) FROM Image"
	existsStmt = "SELECT EXISTS(SELECT 1 FROM Image WHERE Id = $1)"

	getStmt        = "SELECT serialized FROM Image WHERE Id = $1"
	deleteStmt     = "DELETE FROM Image WHERE Id = $1"
	walkStmt       = "SELECT serialized FROM Image"
	getIDsStmt     = "SELECT Id FROM Image"
	getManyStmt    = "SELECT serialized FROM Image WHERE Id = ANY($1::text[])"
	deleteManyStmt = "DELETE FROM Image WHERE Id = ANY($1::text[])"
)

var (
	log = logging.LoggerForModule()

	table = "Image"

	marshaler = &jsonpb.Marshaler{EnumsAsInts: true, EmitDefaults: true}
)

type Store interface {
	Count() (int, error)
	Exists(id string) (bool, error)
	Get(id string) (*storage.Image, bool, error)
	Upsert(obj *storage.Image) error
	UpsertMany(objs []*storage.Image) error
	Delete(id string) error
	GetIDs() ([]string, error)
	GetMany(ids []string) ([]*storage.Image, []int, error)
	DeleteMany(ids []string) error

	Walk(fn func(obj *storage.Image) error) error
	AckKeysIndexed(keys ...string) error
	GetKeysToIndex() ([]string, error)
}

type storeImpl struct {
	db *pgxpool.Pool
}

const (
	batchInsertTemplate = "<no value>"
)

// New returns a new Store instance using the provided sql instance.
func New(db *pgxpool.Pool) Store {
	globaldb.RegisterTable(table, "Image")

	for _, table := range []string{
		"create table if not exists Image(serialized jsonb not null, Id varchar, LastUpdated timestamp, RiskScore numeric, Name_Registry varchar, Name_Remote varchar, Name_Tag varchar, Name_FullName varchar, Metadata_V1_Created timestamp, Metadata_V1_User varchar, Metadata_V1_Command text[], Metadata_V1_Entrypoint text[], Metadata_V1_Volumes text[], Metadata_V1_Labels jsonb, Scan_ScanTime timestamp, Scan_OperatingSystem varchar, SetComponents_Components numeric, SetCves_Cves numeric, SetFixable_FixableCves numeric, SetTopCvss_TopCvss numeric, PRIMARY KEY (Id));",
		"create table if not exists Image_Layers(parent_Id varchar not null, idx integer not null, Instruction varchar, Value varchar, PRIMARY KEY (parent_Id, idx), CONSTRAINT fk_parent_table FOREIGN KEY (parent_Id) REFERENCES Image(Id) ON DELETE CASCADE);",
		"create table if not exists Image_Components(parent_Id varchar not null, idx integer not null, Name varchar, Version varchar, PRIMARY KEY (parent_Id, idx), CONSTRAINT fk_parent_table FOREIGN KEY (parent_Id) REFERENCES Image(Id) ON DELETE CASCADE);",
		"create table if not exists Image_Components_Vulns(parent_parent_Id varchar not null, parent_idx integer not null, idx integer not null, Cve varchar, Cvss numeric, PublishedOn timestamp, Suppressed bool, SetFixedBy_FixedBy varchar, PRIMARY KEY (parent_parent_Id, parent_idx, idx), CONSTRAINT fk_parent_table FOREIGN KEY (parent_parent_Id, parent_idx) REFERENCES Image_Components(parent_Id, idx) ON DELETE CASCADE);",
	} {
		_, err := db.Exec(context.Background(), table)
		if err != nil {
			panic("error creating table: " + table)
		}
	}

	return &storeImpl{
		db: db,
	}
}

// Count returns the number of objects in the store
func (s *storeImpl) Count() (int, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Count, "Image")

	row := s.db.QueryRow(context.Background(), countStmt)
	var count int
	if err := row.Scan(&count); err != nil {
		return 0, err
	}
	return count, nil
}

// Exists returns if the id exists in the store
func (s *storeImpl) Exists(id string) (bool, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Exists, "Image")

	row := s.db.QueryRow(context.Background(), existsStmt, id)
	var exists bool
	if err := row.Scan(&exists); err != nil {
		return false, nilNoRows(err)
	}
	return exists, nil
}

func nilNoRows(err error) error {
	if err == pgx.ErrNoRows {
		return nil
	}
	return err
}

// Get returns the object, if it exists from the store
func (s *storeImpl) Get(id string) (*storage.Image, bool, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Get, "Image")

	conn, release := s.acquireConn(ops.Get, "Image")
	defer release()

	row := conn.QueryRow(context.Background(), getStmt, id)
	var data []byte
	if err := row.Scan(&data); err != nil {
		return nil, false, nilNoRows(err)
	}

	var msg storage.Image
	buf := bytes.NewBuffer(data)
	defer metrics.SetJSONPBOperationDurationTime(time.Now(), "Unmarshal", "Image")
	if err := jsonpb.Unmarshal(buf, &msg); err != nil {
		return nil, false, err
	}
	return &msg, true, nil
}

func convertEnumSliceToIntArray(i interface{}) []int32 {
	enumSlice := reflect.ValueOf(i)
	enumSliceLen := enumSlice.Len()
	resultSlice := make([]int32, 0, enumSliceLen)
	for i := 0; i < enumSlice.Len(); i++ {
		resultSlice = append(resultSlice, int32(enumSlice.Index(i).Int()))
	}
	return resultSlice
}

func nilOrStringTimestamp(t *types.Timestamp) *string {
	if t == nil {
		return nil
	}
	s := t.String()
	return &s
}

// Upsert inserts the object into the DB
func (s *storeImpl) Upsert(obj0 *storage.Image) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Add, "Image")

	t := time.Now()
	serialized, err := marshaler.MarshalToString(obj0)
	if err != nil {
		return err
	}
	metrics.SetJSONPBOperationDurationTime(t, "Marshal", "Image")
	conn, release := s.acquireConn(ops.Add, "Image")
	defer release()

	tx, err := conn.BeginTx(context.Background(), pgx.TxOptions{})
	if err != nil {
		return err
	}
	doRollback := true
	defer func() {
		if doRollback {
			if rollbackErr := tx.Rollback(context.Background()); rollbackErr != nil {
				log.Errorf("error rolling backing: %v", err)
			}
		}
	}()

	localQuery := "insert into Image(serialized, Id, LastUpdated, RiskScore, Name_Registry, Name_Remote, Name_Tag, Name_FullName, Metadata_V1_Created, Metadata_V1_User, Metadata_V1_Command, Metadata_V1_Entrypoint, Metadata_V1_Volumes, Metadata_V1_Labels, Scan_ScanTime, Scan_OperatingSystem, SetComponents_Components, SetCves_Cves, SetFixable_FixableCves, SetTopCvss_TopCvss) values($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) on conflict(Id) do update set serialized = EXCLUDED.serialized, Id = EXCLUDED.Id, LastUpdated = EXCLUDED.LastUpdated, RiskScore = EXCLUDED.RiskScore, Name_Registry = EXCLUDED.Name_Registry, Name_Remote = EXCLUDED.Name_Remote, Name_Tag = EXCLUDED.Name_Tag, Name_FullName = EXCLUDED.Name_FullName, Metadata_V1_Created = EXCLUDED.Metadata_V1_Created, Metadata_V1_User = EXCLUDED.Metadata_V1_User, Metadata_V1_Command = EXCLUDED.Metadata_V1_Command, Metadata_V1_Entrypoint = EXCLUDED.Metadata_V1_Entrypoint, Metadata_V1_Volumes = EXCLUDED.Metadata_V1_Volumes, Metadata_V1_Labels = EXCLUDED.Metadata_V1_Labels, Scan_ScanTime = EXCLUDED.Scan_ScanTime, Scan_OperatingSystem = EXCLUDED.Scan_OperatingSystem, SetComponents_Components = EXCLUDED.SetComponents_Components, SetCves_Cves = EXCLUDED.SetCves_Cves, SetFixable_FixableCves = EXCLUDED.SetFixable_FixableCves, SetTopCvss_TopCvss = EXCLUDED.SetTopCvss_TopCvss"
	_, err = tx.Exec(context.Background(), localQuery, serialized, obj0.GetId(), nilOrStringTimestamp(obj0.GetLastUpdated()), obj0.GetRiskScore(), obj0.GetName().GetRegistry(), obj0.GetName().GetRemote(), obj0.GetName().GetTag(), obj0.GetName().GetFullName(), nilOrStringTimestamp(obj0.GetMetadata().GetV1().GetCreated()), obj0.GetMetadata().GetV1().GetUser(), obj0.GetMetadata().GetV1().GetCommand(), obj0.GetMetadata().GetV1().GetEntrypoint(), obj0.GetMetadata().GetV1().GetVolumes(), obj0.GetMetadata().GetV1().GetLabels(), nilOrStringTimestamp(obj0.GetScan().GetScanTime()), obj0.GetScan().GetOperatingSystem(), obj0.GetComponents(), obj0.GetCves(), obj0.GetFixableCves(), obj0.GetTopCvss())
	if err != nil {
		return err
	}

	doRollback = false
	return tx.Commit(context.Background())
}

func (s *storeImpl) acquireConn(op ops.Op, typ string) (*pgxpool.Conn, func()) {
	defer metrics.SetAcquireDuration(time.Now(), op, typ)
	conn, err := s.db.Acquire(context.Background())
	if err != nil {
		panic(err)
	}
	return conn, conn.Release
}

// UpsertMany batches objects into the DB
func (s *storeImpl) UpsertMany(objs []*storage.Image) error {
	if len(objs) == 0 {
		return nil
	}

	batch := &pgx.Batch{}
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.AddMany, "Image")
	for _, obj0 := range objs {
		t := time.Now()
		serialized, err := marshaler.MarshalToString(obj0)
		if err != nil {
			return err
		}
		metrics.SetJSONPBOperationDurationTime(t, "Marshal", "Image")
		localQuery := "insert into Image(serialized, Id, LastUpdated, RiskScore, Name_Registry, Name_Remote, Name_Tag, Name_FullName, Metadata_V1_Created, Metadata_V1_User, Metadata_V1_Command, Metadata_V1_Entrypoint, Metadata_V1_Volumes, Metadata_V1_Labels, Scan_ScanTime, Scan_OperatingSystem, SetComponents_Components, SetCves_Cves, SetFixable_FixableCves, SetTopCvss_TopCvss) values($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) on conflict(Id) do update set serialized = EXCLUDED.serialized, Id = EXCLUDED.Id, LastUpdated = EXCLUDED.LastUpdated, RiskScore = EXCLUDED.RiskScore, Name_Registry = EXCLUDED.Name_Registry, Name_Remote = EXCLUDED.Name_Remote, Name_Tag = EXCLUDED.Name_Tag, Name_FullName = EXCLUDED.Name_FullName, Metadata_V1_Created = EXCLUDED.Metadata_V1_Created, Metadata_V1_User = EXCLUDED.Metadata_V1_User, Metadata_V1_Command = EXCLUDED.Metadata_V1_Command, Metadata_V1_Entrypoint = EXCLUDED.Metadata_V1_Entrypoint, Metadata_V1_Volumes = EXCLUDED.Metadata_V1_Volumes, Metadata_V1_Labels = EXCLUDED.Metadata_V1_Labels, Scan_ScanTime = EXCLUDED.Scan_ScanTime, Scan_OperatingSystem = EXCLUDED.Scan_OperatingSystem, SetComponents_Components = EXCLUDED.SetComponents_Components, SetCves_Cves = EXCLUDED.SetCves_Cves, SetFixable_FixableCves = EXCLUDED.SetFixable_FixableCves, SetTopCvss_TopCvss = EXCLUDED.SetTopCvss_TopCvss"
		batch.Queue(localQuery, serialized, obj0.GetId(), nilOrStringTimestamp(obj0.GetLastUpdated()), obj0.GetRiskScore(), obj0.GetName().GetRegistry(), obj0.GetName().GetRemote(), obj0.GetName().GetTag(), obj0.GetName().GetFullName(), nilOrStringTimestamp(obj0.GetMetadata().GetV1().GetCreated()), obj0.GetMetadata().GetV1().GetUser(), obj0.GetMetadata().GetV1().GetCommand(), obj0.GetMetadata().GetV1().GetEntrypoint(), obj0.GetMetadata().GetV1().GetVolumes(), obj0.GetMetadata().GetV1().GetLabels(), nilOrStringTimestamp(obj0.GetScan().GetScanTime()), obj0.GetScan().GetOperatingSystem(), obj0.GetComponents(), obj0.GetCves(), obj0.GetFixableCves(), obj0.GetTopCvss())

	}

	conn, release := s.acquireConn(ops.AddMany, "Image")
	defer release()

	results := conn.SendBatch(context.Background(), batch)
	if err := results.Close(); err != nil {
		return err
	}
	return nil
}

// Delete removes the specified ID from the store
func (s *storeImpl) Delete(id string) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Remove, "Image")

	conn, release := s.acquireConn(ops.Remove, "Image")
	defer release()

	if _, err := conn.Exec(context.Background(), deleteStmt, id); err != nil {
		return err
	}
	return nil
}

// GetIDs returns all the IDs for the store
func (s *storeImpl) GetIDs() ([]string, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.GetAll, "ImageIDs")

	rows, err := s.db.Query(context.Background(), getIDsStmt)
	if err != nil {
		return nil, nilNoRows(err)
	}
	defer rows.Close()
	var ids []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		ids = append(ids, id)
	}
	return ids, nil
}

// GetMany returns the objects specified by the IDs or the index in the missing indices slice
func (s *storeImpl) GetMany(ids []string) ([]*storage.Image, []int, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.GetMany, "Image")

	conn, release := s.acquireConn(ops.GetMany, "Image")
	defer release()

	rows, err := conn.Query(context.Background(), getManyStmt, ids)
	if err != nil {
		if err == pgx.ErrNoRows {
			missingIndices := make([]int, 0, len(ids))
			for i := range ids {
				missingIndices = append(missingIndices, i)
			}
			return nil, missingIndices, nil
		}
		return nil, nil, err
	}
	defer rows.Close()
	elems := make([]*storage.Image, 0, len(ids))
	foundSet := make(map[string]struct{})
	for rows.Next() {
		var data []byte
		if err := rows.Scan(&data); err != nil {
			return nil, nil, err
		}
		var msg storage.Image
		buf := bytes.NewBuffer(data)
		t := time.Now()
		if err := jsonpb.Unmarshal(buf, &msg); err != nil {
			return nil, nil, err
		}
		metrics.SetJSONPBOperationDurationTime(t, "Unmarshal", "Image")
		foundSet[msg.GetId()] = struct{}{}
		elems = append(elems, &msg)
	}
	missingIndices := make([]int, 0, len(ids)-len(foundSet))
	for i, id := range ids {
		if _, ok := foundSet[id]; !ok {
			missingIndices = append(missingIndices, i)
		}
	}
	return elems, missingIndices, nil
}

// Delete removes the specified IDs from the store
func (s *storeImpl) DeleteMany(ids []string) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.RemoveMany, "Image")

	conn, release := s.acquireConn(ops.RemoveMany, "Image")
	defer release()
	if _, err := conn.Exec(context.Background(), deleteManyStmt, ids); err != nil {
		return err
	}
	return nil
}

// Walk iterates over all of the objects in the store and applies the closure
func (s *storeImpl) Walk(fn func(obj *storage.Image) error) error {
	rows, err := s.db.Query(context.Background(), walkStmt)
	if err != nil {
		return nilNoRows(err)
	}
	defer rows.Close()
	for rows.Next() {
		var data []byte
		if err := rows.Scan(&data); err != nil {
			return err
		}
		var msg storage.Image
		buf := bytes.NewReader(data)
		if err := jsonpb.Unmarshal(buf, &msg); err != nil {
			return err
		}
		return fn(&msg)
	}
	return nil
}

// AckKeysIndexed acknowledges the passed keys were indexed
func (s *storeImpl) AckKeysIndexed(keys ...string) error {
	return nil
}

// GetKeysToIndex returns the keys that need to be indexed
func (s *storeImpl) GetKeysToIndex() ([]string, error) {
	return nil, nil
}
