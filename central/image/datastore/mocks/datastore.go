// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackrox/rox/central/image/datastore (interfaces: DataStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	v1 "github.com/stackrox/rox/generated/api/v1"
	storage "github.com/stackrox/rox/generated/storage"
	reflect "reflect"
)

// MockDataStore is a mock of DataStore interface
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// CountImages mocks base method
func (m *MockDataStore) CountImages() (int, error) {
	ret := m.ctrl.Call(m, "CountImages")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountImages indicates an expected call of CountImages
func (mr *MockDataStoreMockRecorder) CountImages() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountImages", reflect.TypeOf((*MockDataStore)(nil).CountImages))
}

// GetImage mocks base method
func (m *MockDataStore) GetImage(arg0 string) (*storage.Image, bool, error) {
	ret := m.ctrl.Call(m, "GetImage", arg0)
	ret0, _ := ret[0].(*storage.Image)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetImage indicates an expected call of GetImage
func (mr *MockDataStoreMockRecorder) GetImage(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockDataStore)(nil).GetImage), arg0)
}

// GetImages mocks base method
func (m *MockDataStore) GetImages() ([]*storage.Image, error) {
	ret := m.ctrl.Call(m, "GetImages")
	ret0, _ := ret[0].([]*storage.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImages indicates an expected call of GetImages
func (mr *MockDataStoreMockRecorder) GetImages() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImages", reflect.TypeOf((*MockDataStore)(nil).GetImages))
}

// GetImagesBatch mocks base method
func (m *MockDataStore) GetImagesBatch(arg0 []string) ([]*storage.Image, error) {
	ret := m.ctrl.Call(m, "GetImagesBatch", arg0)
	ret0, _ := ret[0].([]*storage.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImagesBatch indicates an expected call of GetImagesBatch
func (mr *MockDataStoreMockRecorder) GetImagesBatch(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImagesBatch", reflect.TypeOf((*MockDataStore)(nil).GetImagesBatch), arg0)
}

// ListImage mocks base method
func (m *MockDataStore) ListImage(arg0 string) (*storage.ListImage, bool, error) {
	ret := m.ctrl.Call(m, "ListImage", arg0)
	ret0, _ := ret[0].(*storage.ListImage)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListImage indicates an expected call of ListImage
func (mr *MockDataStoreMockRecorder) ListImage(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImage", reflect.TypeOf((*MockDataStore)(nil).ListImage), arg0)
}

// ListImages mocks base method
func (m *MockDataStore) ListImages() ([]*storage.ListImage, error) {
	ret := m.ctrl.Call(m, "ListImages")
	ret0, _ := ret[0].([]*storage.ListImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImages indicates an expected call of ListImages
func (mr *MockDataStoreMockRecorder) ListImages() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImages", reflect.TypeOf((*MockDataStore)(nil).ListImages))
}

// SearchImages mocks base method
func (m *MockDataStore) SearchImages(arg0 *v1.Query) ([]*v1.SearchResult, error) {
	ret := m.ctrl.Call(m, "SearchImages", arg0)
	ret0, _ := ret[0].([]*v1.SearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchImages indicates an expected call of SearchImages
func (mr *MockDataStoreMockRecorder) SearchImages(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchImages", reflect.TypeOf((*MockDataStore)(nil).SearchImages), arg0)
}

// SearchListImages mocks base method
func (m *MockDataStore) SearchListImages(arg0 *v1.Query) ([]*storage.ListImage, error) {
	ret := m.ctrl.Call(m, "SearchListImages", arg0)
	ret0, _ := ret[0].([]*storage.ListImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchListImages indicates an expected call of SearchListImages
func (mr *MockDataStoreMockRecorder) SearchListImages(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchListImages", reflect.TypeOf((*MockDataStore)(nil).SearchListImages), arg0)
}

// SearchRawImages mocks base method
func (m *MockDataStore) SearchRawImages(arg0 *v1.Query) ([]*storage.Image, error) {
	ret := m.ctrl.Call(m, "SearchRawImages", arg0)
	ret0, _ := ret[0].([]*storage.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchRawImages indicates an expected call of SearchRawImages
func (mr *MockDataStoreMockRecorder) SearchRawImages(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchRawImages", reflect.TypeOf((*MockDataStore)(nil).SearchRawImages), arg0)
}

// UpsertImage mocks base method
func (m *MockDataStore) UpsertImage(arg0 *storage.Image) error {
	ret := m.ctrl.Call(m, "UpsertImage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertImage indicates an expected call of UpsertImage
func (mr *MockDataStoreMockRecorder) UpsertImage(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertImage", reflect.TypeOf((*MockDataStore)(nil).UpsertImage), arg0)
}
