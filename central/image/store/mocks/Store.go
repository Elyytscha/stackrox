// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

import v1 "github.com/stackrox/rox/generated/api/v1"

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// CountImages provides a mock function with given fields:
func (_m *Store) CountImages() (int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteImage provides a mock function with given fields: sha
func (_m *Store) DeleteImage(sha string) error {
	ret := _m.Called(sha)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(sha)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRegistrySha provides a mock function with given fields: orchSha
func (_m *Store) DeleteRegistrySha(orchSha string) error {
	ret := _m.Called(orchSha)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(orchSha)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetImage provides a mock function with given fields: sha
func (_m *Store) GetImage(sha string) (*v1.Image, bool, error) {
	ret := _m.Called(sha)

	var r0 *v1.Image
	if rf, ok := ret.Get(0).(func(string) *v1.Image); ok {
		r0 = rf(sha)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Image)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(sha)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(sha)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetImages provides a mock function with given fields:
func (_m *Store) GetImages() ([]*v1.Image, error) {
	ret := _m.Called()

	var r0 []*v1.Image
	if rf, ok := ret.Get(0).(func() []*v1.Image); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImagesBatch provides a mock function with given fields: shas
func (_m *Store) GetImagesBatch(shas []string) ([]*v1.Image, error) {
	ret := _m.Called(shas)

	var r0 []*v1.Image
	if rf, ok := ret.Get(0).(func([]string) []*v1.Image); ok {
		r0 = rf(shas)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(shas)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRegistrySha provides a mock function with given fields: orchSha
func (_m *Store) GetRegistrySha(orchSha string) (string, bool, error) {
	ret := _m.Called(orchSha)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(orchSha)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(orchSha)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(orchSha)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListImage provides a mock function with given fields: sha
func (_m *Store) ListImage(sha string) (*v1.ListImage, bool, error) {
	ret := _m.Called(sha)

	var r0 *v1.ListImage
	if rf, ok := ret.Get(0).(func(string) *v1.ListImage); ok {
		r0 = rf(sha)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ListImage)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(sha)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(sha)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListImages provides a mock function with given fields:
func (_m *Store) ListImages() ([]*v1.ListImage, error) {
	ret := _m.Called()

	var r0 []*v1.ListImage
	if rf, ok := ret.Get(0).(func() []*v1.ListImage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1.ListImage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertImage provides a mock function with given fields: image
func (_m *Store) UpsertImage(image *v1.Image) error {
	ret := _m.Called(image)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.Image) error); ok {
		r0 = rf(image)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpsertRegistrySha provides a mock function with given fields: orchSha, regSha
func (_m *Store) UpsertRegistrySha(orchSha string, regSha string) error {
	ret := _m.Called(orchSha, regSha)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(orchSha, regSha)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
