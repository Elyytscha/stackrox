// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackrox/rox/central/notifiers (interfaces: ResolvableAlertNotifier)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	storage "github.com/stackrox/rox/generated/storage"
	reflect "reflect"
)

// MockResolvableAlertNotifier is a mock of ResolvableAlertNotifier interface
type MockResolvableAlertNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockResolvableAlertNotifierMockRecorder
}

// MockResolvableAlertNotifierMockRecorder is the mock recorder for MockResolvableAlertNotifier
type MockResolvableAlertNotifierMockRecorder struct {
	mock *MockResolvableAlertNotifier
}

// NewMockResolvableAlertNotifier creates a new mock instance
func NewMockResolvableAlertNotifier(ctrl *gomock.Controller) *MockResolvableAlertNotifier {
	mock := &MockResolvableAlertNotifier{ctrl: ctrl}
	mock.recorder = &MockResolvableAlertNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResolvableAlertNotifier) EXPECT() *MockResolvableAlertNotifierMockRecorder {
	return m.recorder
}

// AckAlert mocks base method
func (m *MockResolvableAlertNotifier) AckAlert(arg0 *storage.Alert) error {
	ret := m.ctrl.Call(m, "AckAlert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AckAlert indicates an expected call of AckAlert
func (mr *MockResolvableAlertNotifierMockRecorder) AckAlert(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AckAlert", reflect.TypeOf((*MockResolvableAlertNotifier)(nil).AckAlert), arg0)
}

// AlertNotify mocks base method
func (m *MockResolvableAlertNotifier) AlertNotify(arg0 *storage.Alert) error {
	ret := m.ctrl.Call(m, "AlertNotify", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AlertNotify indicates an expected call of AlertNotify
func (mr *MockResolvableAlertNotifierMockRecorder) AlertNotify(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlertNotify", reflect.TypeOf((*MockResolvableAlertNotifier)(nil).AlertNotify), arg0)
}

// ProtoNotifier mocks base method
func (m *MockResolvableAlertNotifier) ProtoNotifier() *storage.Notifier {
	ret := m.ctrl.Call(m, "ProtoNotifier")
	ret0, _ := ret[0].(*storage.Notifier)
	return ret0
}

// ProtoNotifier indicates an expected call of ProtoNotifier
func (mr *MockResolvableAlertNotifierMockRecorder) ProtoNotifier() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtoNotifier", reflect.TypeOf((*MockResolvableAlertNotifier)(nil).ProtoNotifier))
}

// ResolveAlert mocks base method
func (m *MockResolvableAlertNotifier) ResolveAlert(arg0 *storage.Alert) error {
	ret := m.ctrl.Call(m, "ResolveAlert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResolveAlert indicates an expected call of ResolveAlert
func (mr *MockResolvableAlertNotifierMockRecorder) ResolveAlert(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveAlert", reflect.TypeOf((*MockResolvableAlertNotifier)(nil).ResolveAlert), arg0)
}

// Test mocks base method
func (m *MockResolvableAlertNotifier) Test() error {
	ret := m.ctrl.Call(m, "Test")
	ret0, _ := ret[0].(error)
	return ret0
}

// Test indicates an expected call of Test
func (mr *MockResolvableAlertNotifierMockRecorder) Test() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Test", reflect.TypeOf((*MockResolvableAlertNotifier)(nil).Test))
}
