// +build rocksdb

// Code generated by rocksdb-bindings generator. DO NOT EDIT.

package rocksdb

import (
	"time"

	"github.com/gogo/protobuf/proto"
	"github.com/stackrox/rox/central/globaldb"
	"github.com/stackrox/rox/central/pod/store"
	"github.com/stackrox/rox/central/metrics"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/logging"
	ops "github.com/stackrox/rox/pkg/metrics"
	generic "github.com/stackrox/rox/pkg/rocksdb/crud"
	"github.com/tecbot/gorocksdb"
)

var (
	log = logging.LoggerForModule()

	bucket = []byte("pods")
)

type storeImpl struct {
	crud generic.Crud
}

func alloc() proto.Message {
	return &storage.Pod{}
}

func keyFunc(msg proto.Message) []byte {
	return []byte(msg.(*storage.Pod).GetId())
}

// New returns a new Store instance using the provided rocksdb instance.
func New(db *gorocksdb.DB) store.Store {
	globaldb.RegisterBucket(bucket, "Pod")
	return &storeImpl{
		crud: generic.NewCRUD(db, bucket, keyFunc, alloc),
	}
}

func (b *storeImpl) Count() (int, error) {
	defer metrics.SetRocksDBOperationDurationTime(time.Now(), ops.Count, "Pod")

	return b.crud.Count()
}

func (b *storeImpl) Exists(id string) (bool, error) {
	defer metrics.SetRocksDBOperationDurationTime(time.Now(), ops.Exists, "Pod")

	return b.crud.Exists(id)
}

func (b *storeImpl) GetIDs() ([]string, error) {
	defer metrics.SetRocksDBOperationDurationTime(time.Now(), ops.GetAll, "PodIDs")

	return b.crud.GetKeys()
}

func (b *storeImpl) Get(id string) (*storage.Pod, bool, error) {
	defer metrics.SetRocksDBOperationDurationTime(time.Now(), ops.Get, "Pod")

	msg, exists, err := b.crud.Get(id)
	if err != nil || !exists {
		return nil, false, err
	}
	return msg.(*storage.Pod), true, nil
}

func (b *storeImpl) GetMany(ids []string) ([]*storage.Pod, []int, error) {
	defer metrics.SetRocksDBOperationDurationTime(time.Now(), ops.GetMany, "Pod")

	msgs, missingIndices, err := b.crud.GetMany(ids)
	if err != nil {
		return nil, nil, err
	}
	objs := make([]*storage.Pod, 0, len(msgs))
	for _, m := range msgs {
		objs = append(objs, m.(*storage.Pod))
	}
	return objs, missingIndices, nil
}

func (b *storeImpl) Upsert(obj *storage.Pod) error {
	defer metrics.SetRocksDBOperationDurationTime(time.Now(), ops.Add, "Pod")

	return b.crud.Upsert(obj)
}

func (b *storeImpl) UpsertMany(objs []*storage.Pod) error {
	defer metrics.SetRocksDBOperationDurationTime(time.Now(), ops.AddMany, "Pod")

	msgs := make([]proto.Message, 0, len(objs))
	for _, o := range objs {
		msgs = append(msgs, o)
    }

	return b.crud.UpsertMany(msgs)
}

func (b *storeImpl) Delete(id string) error {
	defer metrics.SetRocksDBOperationDurationTime(time.Now(), ops.Remove, "Pod")

	return b.crud.Delete(id)
}

func (b *storeImpl) DeleteMany(ids []string) error {
	defer metrics.SetRocksDBOperationDurationTime(time.Now(), ops.RemoveMany, "Pod")

	return b.crud.DeleteMany(ids)
}

func (b *storeImpl) Walk(fn func(obj *storage.Pod) error) error {
	return b.crud.Walk(func(msg proto.Message) error {
		return fn(msg.(*storage.Pod))
	})
}

func (b *storeImpl) AckKeysIndexed(keys ...string) error {
	return b.crud.AckKeysIndexed(keys...)
}

func (b *storeImpl) GetKeysToIndex() ([]string, error) {
	return b.crud.GetKeysToIndex()
}
