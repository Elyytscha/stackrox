// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	storage "github.com/stackrox/rox/generated/storage"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// GetPod mocks base method
func (m *MockStore) GetPod(id string) (*storage.Pod, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPod", id)
	ret0, _ := ret[0].(*storage.Pod)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPod indicates an expected call of GetPod
func (mr *MockStoreMockRecorder) GetPod(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPod", reflect.TypeOf((*MockStore)(nil).GetPod), id)
}

// GetPods mocks base method
func (m *MockStore) GetPods() ([]*storage.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPods")
	ret0, _ := ret[0].([]*storage.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPods indicates an expected call of GetPods
func (mr *MockStoreMockRecorder) GetPods() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPods", reflect.TypeOf((*MockStore)(nil).GetPods))
}

// GetPodsWithIDs mocks base method
func (m *MockStore) GetPodsWithIDs(ids ...string) ([]*storage.Pod, []int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range ids {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPodsWithIDs", varargs...)
	ret0, _ := ret[0].([]*storage.Pod)
	ret1, _ := ret[1].([]int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPodsWithIDs indicates an expected call of GetPodsWithIDs
func (mr *MockStoreMockRecorder) GetPodsWithIDs(ids ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodsWithIDs", reflect.TypeOf((*MockStore)(nil).GetPodsWithIDs), ids...)
}

// CountPods mocks base method
func (m *MockStore) CountPods() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountPods")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountPods indicates an expected call of CountPods
func (mr *MockStoreMockRecorder) CountPods() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountPods", reflect.TypeOf((*MockStore)(nil).CountPods))
}

// UpsertPod mocks base method
func (m *MockStore) UpsertPod(pod *storage.Pod) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertPod", pod)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertPod indicates an expected call of UpsertPod
func (mr *MockStoreMockRecorder) UpsertPod(pod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertPod", reflect.TypeOf((*MockStore)(nil).UpsertPod), pod)
}

// RemovePod mocks base method
func (m *MockStore) RemovePod(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePod", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePod indicates an expected call of RemovePod
func (mr *MockStoreMockRecorder) RemovePod(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePod", reflect.TypeOf((*MockStore)(nil).RemovePod), id)
}

// AckKeysIndexed mocks base method
func (m *MockStore) AckKeysIndexed(keys ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AckKeysIndexed", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AckKeysIndexed indicates an expected call of AckKeysIndexed
func (mr *MockStoreMockRecorder) AckKeysIndexed(keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AckKeysIndexed", reflect.TypeOf((*MockStore)(nil).AckKeysIndexed), keys...)
}

// GetKeysToIndex mocks base method
func (m *MockStore) GetKeysToIndex() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeysToIndex")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeysToIndex indicates an expected call of GetKeysToIndex
func (mr *MockStoreMockRecorder) GetKeysToIndex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeysToIndex", reflect.TypeOf((*MockStore)(nil).GetKeysToIndex))
}

// GetPodIDs mocks base method
func (m *MockStore) GetPodIDs() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodIDs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodIDs indicates an expected call of GetPodIDs
func (mr *MockStoreMockRecorder) GetPodIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodIDs", reflect.TypeOf((*MockStore)(nil).GetPodIDs))
}
