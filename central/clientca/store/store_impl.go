// Code generated by boltbindings generator. DO NOT EDIT.

package store

import (
	"context"

	bbolt "github.com/etcd-io/bbolt"
	proto1 "github.com/gogo/protobuf/proto"
	storage "github.com/stackrox/rox/generated/storage"
	bolthelper "github.com/stackrox/rox/pkg/bolthelper"
	proto "github.com/stackrox/rox/pkg/bolthelper/crud/proto"
)

var (
	bucketName = []byte("clientCAs")
)

type store struct {
	crud proto.MessageCrud
	*bbolt.DB
}

func key(msg proto1.Message) []byte {
	return []byte(msg.(*storage.Certificate).GetId())
}

func alloc() proto1.Message {
	return new(storage.Certificate)
}

func newStore(db *bbolt.DB) (*store, error) {
	if err := bolthelper.RegisterBucket(db, bucketName); err != nil {
		return nil, err
	}
	return &store{crud: proto.NewMessageCrud(db, bucketName, key, alloc)}, nil
}

func (s *store) DeleteCertificate(ctx context.Context, id string) error {
	return s.crud.Delete(id)
}

func (s *store) ListCertificates(ctx context.Context) ([]*storage.Certificate, error) {
	msgs, err := s.crud.ReadAll()
	if err != nil {
		return nil, err
	}
	storedKeys := make([]*storage.Certificate, len(msgs))
	for i, msg := range msgs {
		storedKeys[i] = msg.(*storage.Certificate)
	}
	return storedKeys, nil
}

func (s *store) UpsertCertificates(ctx context.Context, certificates []*storage.Certificate) error {
	msgs := make([]proto1.Message, len(certificates))
	for i, key := range certificates {
		msgs[i] = key
	}
	return s.crud.UpsertBatch(msgs)
}
