// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackrox/rox/central/clientca/store (interfaces: Store)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	storage "github.com/stackrox/rox/generated/storage"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// DeleteCertificate mocks base method
func (m *MockStore) DeleteCertificate(arg0 context.Context, arg1 string) error {
	ret := m.ctrl.Call(m, "DeleteCertificate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCertificate indicates an expected call of DeleteCertificate
func (mr *MockStoreMockRecorder) DeleteCertificate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCertificate", reflect.TypeOf((*MockStore)(nil).DeleteCertificate), arg0, arg1)
}

// ListCertificates mocks base method
func (m *MockStore) ListCertificates(arg0 context.Context) ([]*storage.Certificate, error) {
	ret := m.ctrl.Call(m, "ListCertificates", arg0)
	ret0, _ := ret[0].([]*storage.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCertificates indicates an expected call of ListCertificates
func (mr *MockStoreMockRecorder) ListCertificates(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCertificates", reflect.TypeOf((*MockStore)(nil).ListCertificates), arg0)
}

// UpsertCertificates mocks base method
func (m *MockStore) UpsertCertificates(arg0 context.Context, arg1 []*storage.Certificate) error {
	ret := m.ctrl.Call(m, "UpsertCertificates", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertCertificates indicates an expected call of UpsertCertificates
func (mr *MockStoreMockRecorder) UpsertCertificates(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertCertificates", reflect.TypeOf((*MockStore)(nil).UpsertCertificates), arg0, arg1)
}
