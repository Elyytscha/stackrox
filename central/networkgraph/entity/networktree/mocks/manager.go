// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	tree "github.com/stackrox/rox/pkg/networkgraph/tree"
	reflect "reflect"
)

// MockManager is a mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// CreateDefaultNetworkTree mocks base method
func (m *MockManager) CreateDefaultNetworkTree() tree.NetworkTree {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDefaultNetworkTree")
	ret0, _ := ret[0].(tree.NetworkTree)
	return ret0
}

// CreateDefaultNetworkTree indicates an expected call of CreateDefaultNetworkTree
func (mr *MockManagerMockRecorder) CreateDefaultNetworkTree() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDefaultNetworkTree", reflect.TypeOf((*MockManager)(nil).CreateDefaultNetworkTree))
}

// CreateNetworkTree mocks base method
func (m *MockManager) CreateNetworkTree(clusterID string) tree.NetworkTree {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetworkTree", clusterID)
	ret0, _ := ret[0].(tree.NetworkTree)
	return ret0
}

// CreateNetworkTree indicates an expected call of CreateNetworkTree
func (mr *MockManagerMockRecorder) CreateNetworkTree(clusterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkTree", reflect.TypeOf((*MockManager)(nil).CreateNetworkTree), clusterID)
}

// GetNetworkTree mocks base method
func (m *MockManager) GetNetworkTree(clusterID string) tree.NetworkTree {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkTree", clusterID)
	ret0, _ := ret[0].(tree.NetworkTree)
	return ret0
}

// GetNetworkTree indicates an expected call of GetNetworkTree
func (mr *MockManagerMockRecorder) GetNetworkTree(clusterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkTree", reflect.TypeOf((*MockManager)(nil).GetNetworkTree), clusterID)
}

// GetReadOnlyNetworkTree mocks base method
func (m *MockManager) GetReadOnlyNetworkTree(clusterID string) tree.ReadOnlyNetworkTree {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReadOnlyNetworkTree", clusterID)
	ret0, _ := ret[0].(tree.ReadOnlyNetworkTree)
	return ret0
}

// GetReadOnlyNetworkTree indicates an expected call of GetReadOnlyNetworkTree
func (mr *MockManagerMockRecorder) GetReadOnlyNetworkTree(clusterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadOnlyNetworkTree", reflect.TypeOf((*MockManager)(nil).GetReadOnlyNetworkTree), clusterID)
}

// GetDefaultNetworkTree mocks base method
func (m *MockManager) GetDefaultNetworkTree() tree.ReadOnlyNetworkTree {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultNetworkTree")
	ret0, _ := ret[0].(tree.ReadOnlyNetworkTree)
	return ret0
}

// GetDefaultNetworkTree indicates an expected call of GetDefaultNetworkTree
func (mr *MockManagerMockRecorder) GetDefaultNetworkTree() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultNetworkTree", reflect.TypeOf((*MockManager)(nil).GetDefaultNetworkTree))
}

// DeleteNetworkTree mocks base method
func (m *MockManager) DeleteNetworkTree(clusterID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteNetworkTree", clusterID)
}

// DeleteNetworkTree indicates an expected call of DeleteNetworkTree
func (mr *MockManagerMockRecorder) DeleteNetworkTree(clusterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetworkTree", reflect.TypeOf((*MockManager)(nil).DeleteNetworkTree), clusterID)
}
