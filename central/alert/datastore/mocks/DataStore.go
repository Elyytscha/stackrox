// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import v1 "github.com/stackrox/rox/generated/api/v1"

// DataStore is an autogenerated mock type for the DataStore type
type DataStore struct {
	mock.Mock
}

// AddAlert provides a mock function with given fields: alert
func (_m *DataStore) AddAlert(alert *v1.Alert) error {
	ret := _m.Called(alert)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.Alert) error); ok {
		r0 = rf(alert)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CountAlerts provides a mock function with given fields:
func (_m *DataStore) CountAlerts() (int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAlert provides a mock function with given fields: id
func (_m *DataStore) GetAlert(id string) (*v1.Alert, bool, error) {
	ret := _m.Called(id)

	var r0 *v1.Alert
	if rf, ok := ret.Get(0).(func(string) *v1.Alert); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Alert)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListAlerts provides a mock function with given fields: request
func (_m *DataStore) ListAlerts(request *v1.ListAlertsRequest) ([]*v1.ListAlert, error) {
	ret := _m.Called(request)

	var r0 []*v1.ListAlert
	if rf, ok := ret.Get(0).(func(*v1.ListAlertsRequest) []*v1.ListAlert); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1.ListAlert)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1.ListAlertsRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarkAlertStale provides a mock function with given fields: id
func (_m *DataStore) MarkAlertStale(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchAlerts provides a mock function with given fields: request
func (_m *DataStore) SearchAlerts(request *v1.ParsedSearchRequest) ([]*v1.SearchResult, error) {
	ret := _m.Called(request)

	var r0 []*v1.SearchResult
	if rf, ok := ret.Get(0).(func(*v1.ParsedSearchRequest) []*v1.SearchResult); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1.SearchResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1.ParsedSearchRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchListAlerts provides a mock function with given fields: request
func (_m *DataStore) SearchListAlerts(request *v1.ParsedSearchRequest) ([]*v1.ListAlert, error) {
	ret := _m.Called(request)

	var r0 []*v1.ListAlert
	if rf, ok := ret.Get(0).(func(*v1.ParsedSearchRequest) []*v1.ListAlert); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1.ListAlert)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1.ParsedSearchRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchRawAlerts provides a mock function with given fields: request
func (_m *DataStore) SearchRawAlerts(request *v1.ParsedSearchRequest) ([]*v1.Alert, error) {
	ret := _m.Called(request)

	var r0 []*v1.Alert
	if rf, ok := ret.Get(0).(func(*v1.ParsedSearchRequest) []*v1.Alert); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1.Alert)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1.ParsedSearchRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAlert provides a mock function with given fields: alert
func (_m *DataStore) UpdateAlert(alert *v1.Alert) error {
	ret := _m.Called(alert)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.Alert) error); ok {
		r0 = rf(alert)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
