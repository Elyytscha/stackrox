// Code generated by pg-bindings generator. DO NOT EDIT.

package postgres

import (
	"context"
	"reflect"
	"time"

	"github.com/gogo/protobuf/proto"
	"github.com/jackc/pgx/v4/pgxpool"
	"github.com/stackrox/rox/central/globaldb"
	"github.com/stackrox/rox/central/metrics"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/logging"
	ops "github.com/stackrox/rox/pkg/metrics"
	"github.com/stackrox/rox/pkg/postgres/pgutils"
	"github.com/stackrox/rox/pkg/postgres/walker"
)

const (
	baseTable  = "image_component_relation"
	countStmt  = "SELECT COUNT(*) FROM image_component_relation"
	existsStmt = "SELECT EXISTS(SELECT 1 FROM image_component_relation WHERE ImageId = $1 AND ImageComponentId = $2)"

	getStmt    = "SELECT serialized FROM image_component_relation WHERE ImageId = $1 AND ImageComponentId = $2"
	deleteStmt = "DELETE FROM image_component_relation WHERE ImageId = $1 AND ImageComponentId = $2"
	walkStmt   = "SELECT serialized FROM image_component_relation"

	batchAfter = 100

	// using copyFrom, we may not even want to batch.  It would probably be simpler
	// to deal with failures if we just sent it all.  Something to think about as we
	// proceed and move into more e2e and larger performance testing
	batchSize = 10000
)

var (
	schema = walker.Walk(reflect.TypeOf((*storage.ImageComponentEdge)(nil)), baseTable).
		WithReference(&walker.ReferenceInfo{
			ForeignKey: "image_id",
			RefSchema:  walker.Walk(reflect.TypeOf((*storage.Image)(nil)), "images"),
			Reference:  "id",
		}).
		WithReference(&walker.ReferenceInfo{
			ForeignKey: "image_component_id",
			RefSchema:  walker.Walk(reflect.TypeOf((*storage.ImageComponent)(nil)), "image_components"),
			Reference:  "id",
		})
	log = logging.LoggerForModule()
)

func init() {
	globaldb.RegisterTable(schema)
}

type Store interface {
	Count(ctx context.Context) (int, error)
	Exists(ctx context.Context, imageId string, imageComponentId string) (bool, error)
	Get(ctx context.Context, imageId string, imageComponentId string) (*storage.ImageComponentEdge, bool, error)

	Walk(ctx context.Context, fn func(obj *storage.ImageComponentEdge) error) error

	AckKeysIndexed(ctx context.Context, keys ...string) error
	GetKeysToIndex(ctx context.Context) ([]string, error)
}

type storeImpl struct {
	db *pgxpool.Pool
}

func createTableImages(ctx context.Context, db *pgxpool.Pool) {
	table := `
create table if not exists images (
    Id varchar,
    Name_Registry varchar,
    Name_Remote varchar,
    Name_Tag varchar,
    Name_FullName varchar,
    Metadata_V1_Digest varchar,
    Metadata_V1_Created timestamp,
    Metadata_V1_Author varchar,
    Metadata_V1_User varchar,
    Metadata_V1_Command text[],
    Metadata_V1_Entrypoint text[],
    Metadata_V1_Volumes text[],
    Metadata_V1_Labels jsonb,
    Metadata_V2_Digest varchar,
    Metadata_LayerShas text[],
    Metadata_DataSource_Id varchar,
    Metadata_DataSource_Name varchar,
    Metadata_Version integer,
    Scan_ScannerVersion varchar,
    Scan_ScanTime timestamp,
    Scan_OperatingSystem varchar,
    Scan_DataSource_Id varchar,
    Scan_DataSource_Name varchar,
    Scan_Notes int[],
    Components integer,
    Cves integer,
    FixableCves integer,
    LastUpdated timestamp,
    NotPullable bool,
    IsClusterLocal bool,
    Priority integer,
    RiskScore numeric,
    TopCvss numeric,
    Notes int[],
    serialized bytea,
    PRIMARY KEY(Id)
)
`

	_, err := db.Exec(ctx, table)
	if err != nil {
		log.Panicf("Error creating table %s: %v", table, err)
	}

	indexes := []string{}
	for _, index := range indexes {
		if _, err := db.Exec(ctx, index); err != nil {
			log.Panicf("Error creating index %s: %v", index, err)
		}
	}

	createTableImagesLayers(ctx, db)
	createTableImagesResults(ctx, db)
	createTableImagesSignatures(ctx, db)
}

func createTableImagesLayers(ctx context.Context, db *pgxpool.Pool) {
	table := `
create table if not exists images_Layers (
    images_Id varchar,
    idx integer,
    Instruction varchar,
    Value varchar,
    Created timestamp,
    Author varchar,
    Empty bool,
    PRIMARY KEY(images_Id, idx),
    CONSTRAINT fk_parent_table_0 FOREIGN KEY (images_Id) REFERENCES images(Id) ON DELETE CASCADE
)
`

	_, err := db.Exec(ctx, table)
	if err != nil {
		log.Panicf("Error creating table %s: %v", table, err)
	}

	indexes := []string{

		"create index if not exists imagesLayers_idx on images_Layers using btree(idx)",
	}
	for _, index := range indexes {
		if _, err := db.Exec(ctx, index); err != nil {
			log.Panicf("Error creating index %s: %v", index, err)
		}
	}

}

func createTableImagesResults(ctx context.Context, db *pgxpool.Pool) {
	table := `
create table if not exists images_Results (
    images_Id varchar,
    idx integer,
    VerificationTime timestamp,
    VerifierId varchar,
    Status integer,
    Description varchar,
    PRIMARY KEY(images_Id, idx),
    CONSTRAINT fk_parent_table_0 FOREIGN KEY (images_Id) REFERENCES images(Id) ON DELETE CASCADE
)
`

	_, err := db.Exec(ctx, table)
	if err != nil {
		log.Panicf("Error creating table %s: %v", table, err)
	}

	indexes := []string{

		"create index if not exists imagesResults_idx on images_Results using btree(idx)",
	}
	for _, index := range indexes {
		if _, err := db.Exec(ctx, index); err != nil {
			log.Panicf("Error creating index %s: %v", index, err)
		}
	}

}

func createTableImagesSignatures(ctx context.Context, db *pgxpool.Pool) {
	table := `
create table if not exists images_Signatures (
    images_Id varchar,
    idx integer,
    Cosign_RawSignature varchar,
    Cosign_SignaturePayload varchar,
    PRIMARY KEY(images_Id, idx),
    CONSTRAINT fk_parent_table_0 FOREIGN KEY (images_Id) REFERENCES images(Id) ON DELETE CASCADE
)
`

	_, err := db.Exec(ctx, table)
	if err != nil {
		log.Panicf("Error creating table %s: %v", table, err)
	}

	indexes := []string{

		"create index if not exists imagesSignatures_idx on images_Signatures using btree(idx)",
	}
	for _, index := range indexes {
		if _, err := db.Exec(ctx, index); err != nil {
			log.Panicf("Error creating index %s: %v", index, err)
		}
	}

}

func createTableImageComponents(ctx context.Context, db *pgxpool.Pool) {
	table := `
create table if not exists image_components (
    Id varchar,
    Name varchar,
    Version varchar,
    License_Name varchar,
    License_Type varchar,
    License_Url varchar,
    Priority integer,
    Source integer,
    RiskScore numeric,
    TopCvss numeric,
    FixedBy varchar,
    OperatingSystem varchar,
    serialized bytea,
    PRIMARY KEY(Id, Name, Version, OperatingSystem)
)
`

	_, err := db.Exec(ctx, table)
	if err != nil {
		log.Panicf("Error creating table %s: %v", table, err)
	}

	indexes := []string{}
	for _, index := range indexes {
		if _, err := db.Exec(ctx, index); err != nil {
			log.Panicf("Error creating index %s: %v", index, err)
		}
	}

}

func createTableImageComponentRelation(ctx context.Context, db *pgxpool.Pool) {
	table := `
create table if not exists image_component_relation (
    image_components_Name varchar,
    image_components_Version varchar,
    image_components_OperatingSystem varchar,
    Id varchar,
    LayerIndex integer,
    Location varchar,
    ImageId varchar,
    ImageComponentId varchar,
    serialized bytea,
    PRIMARY KEY(image_components_Name, image_components_Version, image_components_OperatingSystem, ImageId, ImageComponentId),
    CONSTRAINT fk_parent_table_0 FOREIGN KEY (ImageId) REFERENCES images(Id) ON DELETE CASCADE,
    CONSTRAINT fk_parent_table_1 FOREIGN KEY (ImageComponentId, image_components_Name, image_components_Version, image_components_OperatingSystem) REFERENCES image_components(Id, Name, Version, OperatingSystem) ON DELETE CASCADE
)
`

	_, err := db.Exec(ctx, table)
	if err != nil {
		log.Panicf("Error creating table %s: %v", table, err)
	}

	indexes := []string{}
	for _, index := range indexes {
		if _, err := db.Exec(ctx, index); err != nil {
			log.Panicf("Error creating index %s: %v", index, err)
		}
	}

}

// New returns a new Store instance using the provided sql instance.
func New(ctx context.Context, db *pgxpool.Pool) Store {
	createTableImages(ctx, db)
	createTableImageComponents(ctx, db)
	createTableImageComponentRelation(ctx, db)

	return &storeImpl{
		db: db,
	}
}

// Count returns the number of objects in the store
func (s *storeImpl) Count(ctx context.Context) (int, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Count, "ImageComponentEdge")

	row := s.db.QueryRow(ctx, countStmt)
	var count int
	if err := row.Scan(&count); err != nil {
		return 0, err
	}
	return count, nil
}

// Exists returns if the id exists in the store
func (s *storeImpl) Exists(ctx context.Context, imageId string, imageComponentId string) (bool, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Exists, "ImageComponentEdge")

	row := s.db.QueryRow(ctx, existsStmt, imageId, imageComponentId)
	var exists bool
	if err := row.Scan(&exists); err != nil {
		return false, pgutils.ErrNilIfNoRows(err)
	}
	return exists, nil
}

// Get returns the object, if it exists from the store
func (s *storeImpl) Get(ctx context.Context, imageId string, imageComponentId string) (*storage.ImageComponentEdge, bool, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Get, "ImageComponentEdge")

	conn, release := s.acquireConn(ctx, ops.Get, "ImageComponentEdge")
	defer release()

	row := conn.QueryRow(ctx, getStmt, imageId, imageComponentId)
	var data []byte
	if err := row.Scan(&data); err != nil {
		return nil, false, pgutils.ErrNilIfNoRows(err)
	}

	var msg storage.ImageComponentEdge
	if err := proto.Unmarshal(data, &msg); err != nil {
		return nil, false, err
	}
	return &msg, true, nil
}

func (s *storeImpl) acquireConn(ctx context.Context, op ops.Op, typ string) (*pgxpool.Conn, func()) {
	defer metrics.SetAcquireDBConnDuration(time.Now(), op, typ)
	conn, err := s.db.Acquire(ctx)
	if err != nil {
		panic(err)
	}
	return conn, conn.Release
}

// Walk iterates over all of the objects in the store and applies the closure
func (s *storeImpl) Walk(ctx context.Context, fn func(obj *storage.ImageComponentEdge) error) error {
	rows, err := s.db.Query(ctx, walkStmt)
	if err != nil {
		return pgutils.ErrNilIfNoRows(err)
	}
	defer rows.Close()
	for rows.Next() {
		var data []byte
		if err := rows.Scan(&data); err != nil {
			return err
		}
		var msg storage.ImageComponentEdge
		if err := proto.Unmarshal(data, &msg); err != nil {
			return err
		}
		if err := fn(&msg); err != nil {
			return err
		}
	}
	return nil
}

//// Used for testing

func dropTableImageComponentRelation(ctx context.Context, db *pgxpool.Pool) {
	_, _ = db.Exec(ctx, "DROP TABLE IF EXISTS image_component_relation CASCADE")

}

func Destroy(ctx context.Context, db *pgxpool.Pool) {
	dropTableImageComponentRelation(ctx, db)
}

//// Stubs for satisfying legacy interfaces

// AckKeysIndexed acknowledges the passed keys were indexed
func (s *storeImpl) AckKeysIndexed(ctx context.Context, keys ...string) error {
	return nil
}

// GetKeysToIndex returns the keys that need to be indexed
func (s *storeImpl) GetKeysToIndex(ctx context.Context) ([]string, error) {
	return nil, nil
}
