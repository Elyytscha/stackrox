// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	risk "github.com/stackrox/rox/pkg/risk"
	reflect "reflect"
)

// MockManager is a mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// ReprocessDeploymentRisk mocks base method
func (m *MockManager) ReprocessDeploymentRisk(deploymentID string, riskIndicators ...risk.Indicator) {
	m.ctrl.T.Helper()
	varargs := []interface{}{deploymentID}
	for _, a := range riskIndicators {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "ReprocessDeploymentRisk", varargs...)
}

// ReprocessDeploymentRisk indicates an expected call of ReprocessDeploymentRisk
func (mr *MockManagerMockRecorder) ReprocessDeploymentRisk(deploymentID interface{}, riskIndicators ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{deploymentID}, riskIndicators...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReprocessDeploymentRisk", reflect.TypeOf((*MockManager)(nil).ReprocessDeploymentRisk), varargs...)
}

// ReprocessRiskForDeployments mocks base method
func (m *MockManager) ReprocessRiskForDeployments(deploymentIDs []string, riskIndicators ...risk.Indicator) {
	m.ctrl.T.Helper()
	varargs := []interface{}{deploymentIDs}
	for _, a := range riskIndicators {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "ReprocessRiskForDeployments", varargs...)
}

// ReprocessRiskForDeployments indicates an expected call of ReprocessRiskForDeployments
func (mr *MockManagerMockRecorder) ReprocessRiskForDeployments(deploymentIDs interface{}, riskIndicators ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{deploymentIDs}, riskIndicators...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReprocessRiskForDeployments", reflect.TypeOf((*MockManager)(nil).ReprocessRiskForDeployments), varargs...)
}

// ReprocessRiskForAllDeployments mocks base method
func (m *MockManager) ReprocessRiskForAllDeployments(riskIndicators ...risk.Indicator) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range riskIndicators {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "ReprocessRiskForAllDeployments", varargs...)
}

// ReprocessRiskForAllDeployments indicates an expected call of ReprocessRiskForAllDeployments
func (mr *MockManagerMockRecorder) ReprocessRiskForAllDeployments(riskIndicators ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReprocessRiskForAllDeployments", reflect.TypeOf((*MockManager)(nil).ReprocessRiskForAllDeployments), riskIndicators...)
}
