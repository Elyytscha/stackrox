// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackrox/rox/central/risk/manager (interfaces: Manager)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	storage "github.com/stackrox/rox/generated/storage"
	reflect "reflect"
)

// MockManager is a mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// CalculateRiskAndUpsertImage mocks base method
func (m *MockManager) CalculateRiskAndUpsertImage(arg0 *storage.Image) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateRiskAndUpsertImage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CalculateRiskAndUpsertImage indicates an expected call of CalculateRiskAndUpsertImage
func (mr *MockManagerMockRecorder) CalculateRiskAndUpsertImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateRiskAndUpsertImage", reflect.TypeOf((*MockManager)(nil).CalculateRiskAndUpsertImage), arg0)
}

// ReprocessDeploymentRisk mocks base method
func (m *MockManager) ReprocessDeploymentRisk(arg0 *storage.Deployment) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReprocessDeploymentRisk", arg0)
}

// ReprocessDeploymentRisk indicates an expected call of ReprocessDeploymentRisk
func (mr *MockManagerMockRecorder) ReprocessDeploymentRisk(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReprocessDeploymentRisk", reflect.TypeOf((*MockManager)(nil).ReprocessDeploymentRisk), arg0)
}

// ReprocessDeploymentRiskWithImages mocks base method
func (m *MockManager) ReprocessDeploymentRiskWithImages(arg0 *storage.Deployment, arg1 []*storage.Image) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReprocessDeploymentRiskWithImages", arg0, arg1)
}

// ReprocessDeploymentRiskWithImages indicates an expected call of ReprocessDeploymentRiskWithImages
func (mr *MockManagerMockRecorder) ReprocessDeploymentRiskWithImages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReprocessDeploymentRiskWithImages", reflect.TypeOf((*MockManager)(nil).ReprocessDeploymentRiskWithImages), arg0, arg1)
}
