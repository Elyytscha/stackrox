// Code generated by MockGen. DO NOT EDIT.
// Source: datastore.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	v1 "github.com/stackrox/rox/generated/api/v1"
	storage "github.com/stackrox/rox/generated/storage"
	search "github.com/stackrox/rox/pkg/search"
	reflect "reflect"
)

// MockDataStore is a mock of DataStore interface
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// Search mocks base method
func (m *MockDataStore) Search(ctx context.Context, q *v1.Query) ([]search.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, q)
	ret0, _ := ret[0].([]search.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockDataStoreMockRecorder) Search(ctx, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockDataStore)(nil).Search), ctx, q)
}

// SearchRawRisks mocks base method
func (m *MockDataStore) SearchRawRisks(ctx context.Context, q *v1.Query) ([]*storage.Risk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchRawRisks", ctx, q)
	ret0, _ := ret[0].([]*storage.Risk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchRawRisks indicates an expected call of SearchRawRisks
func (mr *MockDataStoreMockRecorder) SearchRawRisks(ctx, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchRawRisks", reflect.TypeOf((*MockDataStore)(nil).SearchRawRisks), ctx, q)
}

// GetRisk mocks base method
func (m *MockDataStore) GetRisk(ctx context.Context, entityID string, entityType storage.RiskEntityType, aggregateRisk bool) (*storage.Risk, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRisk", ctx, entityID, entityType, aggregateRisk)
	ret0, _ := ret[0].(*storage.Risk)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRisk indicates an expected call of GetRisk
func (mr *MockDataStoreMockRecorder) GetRisk(ctx, entityID, entityType, aggregateRisk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRisk", reflect.TypeOf((*MockDataStore)(nil).GetRisk), ctx, entityID, entityType, aggregateRisk)
}

// GetRiskByIndicators mocks base method
func (m *MockDataStore) GetRiskByIndicators(ctx context.Context, entityID string, entityType storage.RiskEntityType, riskIndicatorNames []string) (*storage.Risk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRiskByIndicators", ctx, entityID, entityType, riskIndicatorNames)
	ret0, _ := ret[0].(*storage.Risk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRiskByIndicators indicates an expected call of GetRiskByIndicators
func (mr *MockDataStoreMockRecorder) GetRiskByIndicators(ctx, entityID, entityType, riskIndicatorNames interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRiskByIndicators", reflect.TypeOf((*MockDataStore)(nil).GetRiskByIndicators), ctx, entityID, entityType, riskIndicatorNames)
}

// UpsertRisk mocks base method
func (m *MockDataStore) UpsertRisk(ctx context.Context, risk *storage.Risk) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertRisk", ctx, risk)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertRisk indicates an expected call of UpsertRisk
func (mr *MockDataStoreMockRecorder) UpsertRisk(ctx, risk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRisk", reflect.TypeOf((*MockDataStore)(nil).UpsertRisk), ctx, risk)
}

// RemoveRisk mocks base method
func (m *MockDataStore) RemoveRisk(ctx context.Context, entityID string, entityType storage.RiskEntityType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRisk", ctx, entityID, entityType)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRisk indicates an expected call of RemoveRisk
func (mr *MockDataStoreMockRecorder) RemoveRisk(ctx, entityID, entityType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRisk", reflect.TypeOf((*MockDataStore)(nil).RemoveRisk), ctx, entityID, entityType)
}

// GetDependingRiskIDs mocks base method
func (m *MockDataStore) GetDependingRiskIDs(riskID string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDependingRiskIDs", riskID)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetDependingRiskIDs indicates an expected call of GetDependingRiskIDs
func (mr *MockDataStoreMockRecorder) GetDependingRiskIDs(riskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDependingRiskIDs", reflect.TypeOf((*MockDataStore)(nil).GetDependingRiskIDs), riskID)
}

// GetDependentRiskIDs mocks base method
func (m *MockDataStore) GetDependentRiskIDs(riskID string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDependentRiskIDs", riskID)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetDependentRiskIDs indicates an expected call of GetDependentRiskIDs
func (mr *MockDataStoreMockRecorder) GetDependentRiskIDs(riskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDependentRiskIDs", reflect.TypeOf((*MockDataStore)(nil).GetDependentRiskIDs), riskID)
}

// AddRiskDependencies mocks base method
func (m *MockDataStore) AddRiskDependencies(parentRiskID string, dependentIDs ...string) {
	m.ctrl.T.Helper()
	varargs := []interface{}{parentRiskID}
	for _, a := range dependentIDs {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddRiskDependencies", varargs...)
}

// AddRiskDependencies indicates an expected call of AddRiskDependencies
func (mr *MockDataStoreMockRecorder) AddRiskDependencies(parentRiskID interface{}, dependentIDs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{parentRiskID}, dependentIDs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRiskDependencies", reflect.TypeOf((*MockDataStore)(nil).AddRiskDependencies), varargs...)
}

// RemoveRiskDependencies mocks base method
func (m *MockDataStore) RemoveRiskDependencies(riskID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveRiskDependencies", riskID)
}

// RemoveRiskDependencies indicates an expected call of RemoveRiskDependencies
func (mr *MockDataStoreMockRecorder) RemoveRiskDependencies(riskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRiskDependencies", reflect.TypeOf((*MockDataStore)(nil).RemoveRiskDependencies), riskID)
}
