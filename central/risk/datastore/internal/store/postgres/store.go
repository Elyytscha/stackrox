// Code generated by rocksdb-bindings generator. DO NOT EDIT.

package pg

import (
	"time"

	"github.com/gogo/protobuf/proto"
	"github.com/stackrox/rox/central/globaldb"
	"github.com/stackrox/rox/central/metrics"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/logging"
	ops "github.com/stackrox/rox/pkg/metrics"
	"database/sql"
)

var (
	log = logging.LoggerForModule()

	table = "risk"
)

type Store interface {
	Count() (int, error)
	Exists(id string) (bool, error)
	GetIDs() ([]string, error)
	Get(id string) (*storage.Risk, bool, error)
	GetMany(ids []string) ([]*storage.Risk, []int, error)
	Upsert(obj *storage.Risk) error
	UpsertMany(objs []*storage.Risk) error
	Delete(id string) error
	DeleteMany(ids []string) error
	Walk(fn func(obj *storage.Risk) error) error
	AckKeysIndexed(keys ...string) error
	GetKeysToIndex() ([]string, error)
}

type storeImpl struct {
	db *sql.DB

	countStmt *sql.Stmt
	existsStmt *sql.Stmt
	getIDsStmt *sql.Stmt
	getStmt *sql.Stmt
	getManyStmt *sql.Stmt
	upsertWithIDStmt *sql.Stmt
	// UpsertManyWithIDsStmt
	upsertStmt *sql.Stmt
	// UpsertMany
	deleteStmt *sql.Stmt
	deleteManyStmt *sql.Stmt
}

func alloc() proto.Message {
	return &storage.Risk{}
}

func keyFunc(msg proto.Message) string {
	return msg.(*storage.Risk).GetId()
}

func compileStmtOrPanic(db *sql.DB, query string) *sql.Stmt {
	vulnStmt, err := db.Prepare(query)
	if err != nil {
		panic(err)
	}
	return vulnStmt
}

// New returns a new Store instance using the provided sql instance.
func New(db *sql.DB) Store {
	globaldb.RegisterTable(table, "Risk")
//
	return &storeImpl{
		db: db,

		countStmt: compileStmtOrPanic(db, "select count(*) from risk"),
		existsStmt: compileStmtOrPanic(db, "select exists(select 1 from risk where id = $1)"),
		getIDsStmt: compileStmtOrPanic(db, "select id from risk"),
		getStmt: compileStmtOrPanic(db, ""),
		getManyStmt: compileStmtOrPanic(db, ""),
		upsertWithIDStmt: compileStmtOrPanic(db, ""),
		// UpsertManyWithIDsStmt
		upsertStmt: compileStmtOrPanic(db, ""),
		// UpsertMany
		deleteStmt: compileStmtOrPanic(db, ""),
		deleteManyStmt: compileStmtOrPanic(db, ""),
	}
//
}

// Count returns the number of objects in the store
func (s *storeImpl) Count() (int, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Count, "Risk")

	row := s.countStmt.QueryRow()
	if err := row.Err(); err != nil {
		return 0, err
	}
	var count int
	if err := row.Scan(&count); err != nil {
		return 0, err
	}
	return count, nil
}

// Exists returns if the id exists in the store
func (s *storeImpl) Exists(id string) (bool, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Exists, "Risk")

	row := s.existsStmt.QueryRow()
	if err := row.Err(); err != nil {
		return false, err
	}
	var exists bool
	if err := row.Scan(&exists); err != nil {
		return false, err
	}
	return exists, nil
}

// GetIDs returns all the IDs for the store
func (s *storeImpl) GetIDs() ([]string, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.GetAll, "RiskIDs")

	rows, err := s.getIDsStmt.Query()
	if err != nil {
		return nil, err
	}
	var ids []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		ids = append(ids, id)
	}
	return ids, nil
}

// Get returns the object, if it exists from the store
func (s *storeImpl) Get(id string) (*storage.Risk, bool, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Get, "Risk")

	msg, exists, err := b.crud.Get(id)
	if err != nil || !exists {
		return nil, false, err
	}
	return msg.(*storage.Risk), true, nil
}

// GetMany returns the objects specified by the IDs or the index in the missing indices slice 
func (s *storeImpl) GetMany(ids []string) ([]*storage.Risk, []int, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.GetMany, "Risk")

	//msgs, missingIndices, err := b.crud.GetMany(ids)
	//if err != nil {
	//	return nil, nil, err
	//}
	//objs := make([]*storage.Risk, 0, len(msgs))
	//for _, m := range msgs {
	//	objs = append(objs, m.(*storage.Risk))
	//}
	//return objs, missingIndices, nil
}

// Upsert inserts the object into the DB
func (s *storeImpl) Upsert(obj *storage.Risk) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Add, "Risk")

	panic("unimplemented")

	//return b.crud.Upsert(obj)
}

// UpsertMany batches objects into the DB
func (s *storeImpl) UpsertMany(objs []*storage.Risk) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.AddMany, "Risk")
	panic("unimplemented")
	//msgs := make([]proto.Message, 0, len(objs))
	//for _, o := range objs {
	//	msgs = append(msgs, o)
    //}
	//
	//return b.crud.UpsertMany(msgs)
}

// Delete removes the specified ID from the store
func (s *storeImpl) Delete(id string) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Remove, "Risk")
	panic("unimplemented")
	//return b.crud.Delete(id)
}

// Delete removes the specified IDs from the store
func (s *storeImpl) DeleteMany(ids []string) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.RemoveMany, "Risk")
	panic("unimplemented")
		
	//
	//return b.crud.DeleteMany(ids)
}

// Walk iterates over all of the objects in the store and applies the closure
func (s *storeImpl) Walk(fn func(obj *storage.Risk) error) error {
	panic("unimplemented")
	//return b.crud.Walk(func(msg proto.Message) error {
	//	return fn(msg.(*storage.Risk))
	//})
}

// AckKeysIndexed acknowledges the passed keys were indexed
func (s *storeImpl) AckKeysIndexed(keys ...string) error {
	return nil
}

// GetKeysToIndex returns the keys that need to be indexed
func (s *storeImpl) GetKeysToIndex() ([]string, error) {
	return nil, nil
}
