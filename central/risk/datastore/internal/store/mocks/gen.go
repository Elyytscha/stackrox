// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackrox/rox/central/risk/datastore/internal/store (interfaces: Store)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	storage "github.com/stackrox/rox/generated/storage"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// DeleteRisk mocks base method
func (m *MockStore) DeleteRisk(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRisk", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRisk indicates an expected call of DeleteRisk
func (mr *MockStoreMockRecorder) DeleteRisk(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRisk", reflect.TypeOf((*MockStore)(nil).DeleteRisk), arg0)
}

// GetRisk mocks base method
func (m *MockStore) GetRisk(arg0 string) (*storage.Risk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRisk", arg0)
	ret0, _ := ret[0].(*storage.Risk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRisk indicates an expected call of GetRisk
func (mr *MockStoreMockRecorder) GetRisk(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRisk", reflect.TypeOf((*MockStore)(nil).GetRisk), arg0)
}

// GetRisks mocks base method
func (m *MockStore) GetRisks(arg0 []string) ([]*storage.Risk, []int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRisks", arg0)
	ret0, _ := ret[0].([]*storage.Risk)
	ret1, _ := ret[1].([]int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRisks indicates an expected call of GetRisks
func (mr *MockStoreMockRecorder) GetRisks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRisks", reflect.TypeOf((*MockStore)(nil).GetRisks), arg0)
}

// ListRisks mocks base method
func (m *MockStore) ListRisks() ([]*storage.Risk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRisks")
	ret0, _ := ret[0].([]*storage.Risk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRisks indicates an expected call of ListRisks
func (mr *MockStoreMockRecorder) ListRisks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRisks", reflect.TypeOf((*MockStore)(nil).ListRisks))
}

// UpsertRisk mocks base method
func (m *MockStore) UpsertRisk(arg0 *storage.Risk) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertRisk", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertRisk indicates an expected call of UpsertRisk
func (mr *MockStoreMockRecorder) UpsertRisk(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRisk", reflect.TypeOf((*MockStore)(nil).UpsertRisk), arg0)
}
