// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

import v1 "github.com/stackrox/rox/generated/api/v1"

// AlertManager is an autogenerated mock type for the AlertManager type
type AlertManager struct {
	mock.Mock
}

// AlertAndNotify provides a mock function with given fields: previousAlerts, currentAlerts
func (_m *AlertManager) AlertAndNotify(previousAlerts []*v1.Alert, currentAlerts []*v1.Alert) error {
	ret := _m.Called(previousAlerts, currentAlerts)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*v1.Alert, []*v1.Alert) error); ok {
		r0 = rf(previousAlerts, currentAlerts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAlertsByDeployment provides a mock function with given fields: deploymentID
func (_m *AlertManager) GetAlertsByDeployment(deploymentID string) ([]*v1.Alert, error) {
	ret := _m.Called(deploymentID)

	var r0 []*v1.Alert
	if rf, ok := ret.Get(0).(func(string) []*v1.Alert); ok {
		r0 = rf(deploymentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1.Alert)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(deploymentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAlertsByLifecycle provides a mock function with given fields: lifecyle
func (_m *AlertManager) GetAlertsByLifecycle(lifecyle v1.LifecycleStage) ([]*v1.Alert, error) {
	ret := _m.Called(lifecyle)

	var r0 []*v1.Alert
	if rf, ok := ret.Get(0).(func(v1.LifecycleStage) []*v1.Alert); ok {
		r0 = rf(lifecyle)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1.Alert)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(v1.LifecycleStage) error); ok {
		r1 = rf(lifecyle)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAlertsByLifecycleAndDeployments provides a mock function with given fields: lifecycle, deploymentIDs
func (_m *AlertManager) GetAlertsByLifecycleAndDeployments(lifecycle v1.LifecycleStage, deploymentIDs ...string) ([]*v1.Alert, error) {
	_va := make([]interface{}, len(deploymentIDs))
	for _i := range deploymentIDs {
		_va[_i] = deploymentIDs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, lifecycle)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*v1.Alert
	if rf, ok := ret.Get(0).(func(v1.LifecycleStage, ...string) []*v1.Alert); ok {
		r0 = rf(lifecycle, deploymentIDs...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1.Alert)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(v1.LifecycleStage, ...string) error); ok {
		r1 = rf(lifecycle, deploymentIDs...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAlertsByPolicy provides a mock function with given fields: policyID
func (_m *AlertManager) GetAlertsByPolicy(policyID string) ([]*v1.Alert, error) {
	ret := _m.Called(policyID)

	var r0 []*v1.Alert
	if rf, ok := ret.Get(0).(func(string) []*v1.Alert); ok {
		r0 = rf(policyID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1.Alert)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(policyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAlertsByPolicyAndLifecycle provides a mock function with given fields: policyID, lifecycle
func (_m *AlertManager) GetAlertsByPolicyAndLifecycle(policyID string, lifecycle v1.LifecycleStage) ([]*v1.Alert, error) {
	ret := _m.Called(policyID, lifecycle)

	var r0 []*v1.Alert
	if rf, ok := ret.Get(0).(func(string, v1.LifecycleStage) []*v1.Alert); ok {
		r0 = rf(policyID, lifecycle)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1.Alert)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, v1.LifecycleStage) error); ok {
		r1 = rf(policyID, lifecycle)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
