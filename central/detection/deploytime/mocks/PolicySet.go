// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import matcher "github.com/stackrox/rox/pkg/compiledpolicies/deployment/matcher"
import mock "github.com/stretchr/testify/mock"
import v1 "github.com/stackrox/rox/generated/api/v1"

// PolicySet is an autogenerated mock type for the PolicySet type
type PolicySet struct {
	mock.Mock
}

// ForEach provides a mock function with given fields: fe, runtime
func (_m *PolicySet) ForEach(fe func(*v1.Policy, matcher.Matcher) error, runtime bool) error {
	ret := _m.Called(fe, runtime)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*v1.Policy, matcher.Matcher) error, bool) error); ok {
		r0 = rf(fe, runtime)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ForOne provides a mock function with given fields: _a0, _a1
func (_m *PolicySet) ForOne(_a0 string, _a1 func(*v1.Policy, matcher.Matcher) error) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, func(*v1.Policy, matcher.Matcher) error) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveNotifier provides a mock function with given fields: notifierID
func (_m *PolicySet) RemoveNotifier(notifierID string) error {
	ret := _m.Called(notifierID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(notifierID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemovePolicy provides a mock function with given fields: policyID
func (_m *PolicySet) RemovePolicy(policyID string) error {
	ret := _m.Called(policyID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(policyID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpsertPolicy provides a mock function with given fields: _a0
func (_m *PolicySet) UpsertPolicy(_a0 *v1.Policy) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.Policy) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
