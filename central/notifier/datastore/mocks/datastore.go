// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackrox/rox/central/notifier/datastore (interfaces: DataStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	v1 "github.com/stackrox/rox/generated/api/v1"
	storage "github.com/stackrox/rox/generated/storage"
	reflect "reflect"
)

// MockDataStore is a mock of DataStore interface
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// AddNotifier mocks base method
func (m *MockDataStore) AddNotifier(arg0 context.Context, arg1 *storage.Notifier) (string, error) {
	ret := m.ctrl.Call(m, "AddNotifier", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNotifier indicates an expected call of AddNotifier
func (mr *MockDataStoreMockRecorder) AddNotifier(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNotifier", reflect.TypeOf((*MockDataStore)(nil).AddNotifier), arg0, arg1)
}

// GetNotifier mocks base method
func (m *MockDataStore) GetNotifier(arg0 context.Context, arg1 string) (*storage.Notifier, bool, error) {
	ret := m.ctrl.Call(m, "GetNotifier", arg0, arg1)
	ret0, _ := ret[0].(*storage.Notifier)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNotifier indicates an expected call of GetNotifier
func (mr *MockDataStoreMockRecorder) GetNotifier(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotifier", reflect.TypeOf((*MockDataStore)(nil).GetNotifier), arg0, arg1)
}

// GetNotifiers mocks base method
func (m *MockDataStore) GetNotifiers(arg0 context.Context, arg1 *v1.GetNotifiersRequest) ([]*storage.Notifier, error) {
	ret := m.ctrl.Call(m, "GetNotifiers", arg0, arg1)
	ret0, _ := ret[0].([]*storage.Notifier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotifiers indicates an expected call of GetNotifiers
func (mr *MockDataStoreMockRecorder) GetNotifiers(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotifiers", reflect.TypeOf((*MockDataStore)(nil).GetNotifiers), arg0, arg1)
}

// RemoveNotifier mocks base method
func (m *MockDataStore) RemoveNotifier(arg0 context.Context, arg1 string) error {
	ret := m.ctrl.Call(m, "RemoveNotifier", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveNotifier indicates an expected call of RemoveNotifier
func (mr *MockDataStoreMockRecorder) RemoveNotifier(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNotifier", reflect.TypeOf((*MockDataStore)(nil).RemoveNotifier), arg0, arg1)
}

// UpdateNotifier mocks base method
func (m *MockDataStore) UpdateNotifier(arg0 context.Context, arg1 *storage.Notifier) error {
	ret := m.ctrl.Call(m, "UpdateNotifier", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNotifier indicates an expected call of UpdateNotifier
func (mr *MockDataStoreMockRecorder) UpdateNotifier(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotifier", reflect.TypeOf((*MockDataStore)(nil).UpdateNotifier), arg0, arg1)
}
