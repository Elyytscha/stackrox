// Code generated by MockGen. DO NOT EDIT.
// Source: processor.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	notifiers "github.com/stackrox/rox/central/notifiers"
	v1 "github.com/stackrox/rox/generated/api/v1"
	storage "github.com/stackrox/rox/generated/storage"
	reflect "reflect"
)

// MockProcessor is a mock of Processor interface
type MockProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockProcessorMockRecorder
}

// MockProcessorMockRecorder is the mock recorder for MockProcessor
type MockProcessorMockRecorder struct {
	mock *MockProcessor
}

// NewMockProcessor creates a new mock instance
func NewMockProcessor(ctrl *gomock.Controller) *MockProcessor {
	mock := &MockProcessor{ctrl: ctrl}
	mock.recorder = &MockProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProcessor) EXPECT() *MockProcessorMockRecorder {
	return m.recorder
}

// ProcessAlert mocks base method
func (m *MockProcessor) ProcessAlert(alert *storage.Alert) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProcessAlert", alert)
}

// ProcessAlert indicates an expected call of ProcessAlert
func (mr *MockProcessorMockRecorder) ProcessAlert(alert interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessAlert", reflect.TypeOf((*MockProcessor)(nil).ProcessAlert), alert)
}

// ProcessAuditMessage mocks base method
func (m *MockProcessor) ProcessAuditMessage(msg *v1.Audit_Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProcessAuditMessage", msg)
}

// ProcessAuditMessage indicates an expected call of ProcessAuditMessage
func (mr *MockProcessorMockRecorder) ProcessAuditMessage(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessAuditMessage", reflect.TypeOf((*MockProcessor)(nil).ProcessAuditMessage), msg)
}

// HasNotifiers mocks base method
func (m *MockProcessor) HasNotifiers() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasNotifiers")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasNotifiers indicates an expected call of HasNotifiers
func (mr *MockProcessorMockRecorder) HasNotifiers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasNotifiers", reflect.TypeOf((*MockProcessor)(nil).HasNotifiers))
}

// HasEnabledAuditNotifiers mocks base method
func (m *MockProcessor) HasEnabledAuditNotifiers() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasEnabledAuditNotifiers")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasEnabledAuditNotifiers indicates an expected call of HasEnabledAuditNotifiers
func (mr *MockProcessorMockRecorder) HasEnabledAuditNotifiers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasEnabledAuditNotifiers", reflect.TypeOf((*MockProcessor)(nil).HasEnabledAuditNotifiers))
}

// UpdateNotifier mocks base method
func (m *MockProcessor) UpdateNotifier(notifier notifiers.Notifier) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateNotifier", notifier)
}

// UpdateNotifier indicates an expected call of UpdateNotifier
func (mr *MockProcessorMockRecorder) UpdateNotifier(notifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotifier", reflect.TypeOf((*MockProcessor)(nil).UpdateNotifier), notifier)
}

// RemoveNotifier mocks base method
func (m *MockProcessor) RemoveNotifier(id string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveNotifier", id)
}

// RemoveNotifier indicates an expected call of RemoveNotifier
func (mr *MockProcessorMockRecorder) RemoveNotifier(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNotifier", reflect.TypeOf((*MockProcessor)(nil).RemoveNotifier), id)
}
