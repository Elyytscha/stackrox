// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackrox/rox/central/notifier/processor (interfaces: Processor)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	v1 "github.com/stackrox/rox/generated/api/v1"
	notifiers "github.com/stackrox/rox/pkg/notifiers"
	reflect "reflect"
)

// MockProcessor is a mock of Processor interface
type MockProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockProcessorMockRecorder
}

// MockProcessorMockRecorder is the mock recorder for MockProcessor
type MockProcessorMockRecorder struct {
	mock *MockProcessor
}

// NewMockProcessor creates a new mock instance
func NewMockProcessor(ctrl *gomock.Controller) *MockProcessor {
	mock := &MockProcessor{ctrl: ctrl}
	mock.recorder = &MockProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProcessor) EXPECT() *MockProcessorMockRecorder {
	return m.recorder
}

// GetIntegratedPolicies mocks base method
func (m *MockProcessor) GetIntegratedPolicies(arg0 string) []*v1.Policy {
	ret := m.ctrl.Call(m, "GetIntegratedPolicies", arg0)
	ret0, _ := ret[0].([]*v1.Policy)
	return ret0
}

// GetIntegratedPolicies indicates an expected call of GetIntegratedPolicies
func (mr *MockProcessorMockRecorder) GetIntegratedPolicies(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntegratedPolicies", reflect.TypeOf((*MockProcessor)(nil).GetIntegratedPolicies), arg0)
}

// ProcessAlert mocks base method
func (m *MockProcessor) ProcessAlert(arg0 *v1.Alert) {
	m.ctrl.Call(m, "ProcessAlert", arg0)
}

// ProcessAlert indicates an expected call of ProcessAlert
func (mr *MockProcessorMockRecorder) ProcessAlert(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessAlert", reflect.TypeOf((*MockProcessor)(nil).ProcessAlert), arg0)
}

// ProcessBenchmark mocks base method
func (m *MockProcessor) ProcessBenchmark(arg0 *v1.BenchmarkSchedule) {
	m.ctrl.Call(m, "ProcessBenchmark", arg0)
}

// ProcessBenchmark indicates an expected call of ProcessBenchmark
func (mr *MockProcessorMockRecorder) ProcessBenchmark(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessBenchmark", reflect.TypeOf((*MockProcessor)(nil).ProcessBenchmark), arg0)
}

// RemoveNotifier mocks base method
func (m *MockProcessor) RemoveNotifier(arg0 string) {
	m.ctrl.Call(m, "RemoveNotifier", arg0)
}

// RemoveNotifier indicates an expected call of RemoveNotifier
func (mr *MockProcessorMockRecorder) RemoveNotifier(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNotifier", reflect.TypeOf((*MockProcessor)(nil).RemoveNotifier), arg0)
}

// RemovePolicy mocks base method
func (m *MockProcessor) RemovePolicy(arg0 *v1.Policy) {
	m.ctrl.Call(m, "RemovePolicy", arg0)
}

// RemovePolicy indicates an expected call of RemovePolicy
func (mr *MockProcessorMockRecorder) RemovePolicy(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePolicy", reflect.TypeOf((*MockProcessor)(nil).RemovePolicy), arg0)
}

// Start mocks base method
func (m *MockProcessor) Start() {
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start
func (mr *MockProcessorMockRecorder) Start() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockProcessor)(nil).Start))
}

// UpdateNotifier mocks base method
func (m *MockProcessor) UpdateNotifier(arg0 notifiers.Notifier) {
	m.ctrl.Call(m, "UpdateNotifier", arg0)
}

// UpdateNotifier indicates an expected call of UpdateNotifier
func (mr *MockProcessorMockRecorder) UpdateNotifier(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotifier", reflect.TypeOf((*MockProcessor)(nil).UpdateNotifier), arg0)
}

// UpdatePolicy mocks base method
func (m *MockProcessor) UpdatePolicy(arg0 *v1.Policy) {
	m.ctrl.Call(m, "UpdatePolicy", arg0)
}

// UpdatePolicy indicates an expected call of UpdatePolicy
func (mr *MockProcessorMockRecorder) UpdatePolicy(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePolicy", reflect.TypeOf((*MockProcessor)(nil).UpdatePolicy), arg0)
}
