// Code generated by MockGen. DO NOT EDIT.
// Source: certprovider.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	clusters "github.com/stackrox/rox/central/clusters"
	uuid "github.com/stackrox/rox/pkg/uuid"
	reflect "reflect"
)

// MockCertificateProvider is a mock of CertificateProvider interface
type MockCertificateProvider struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateProviderMockRecorder
}

// MockCertificateProviderMockRecorder is the mock recorder for MockCertificateProvider
type MockCertificateProviderMockRecorder struct {
	mock *MockCertificateProvider
}

// NewMockCertificateProvider creates a new mock instance
func NewMockCertificateProvider(ctrl *gomock.Controller) *MockCertificateProvider {
	mock := &MockCertificateProvider{ctrl: ctrl}
	mock.recorder = &MockCertificateProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCertificateProvider) EXPECT() *MockCertificateProviderMockRecorder {
	return m.recorder
}

// GetCA mocks base method
func (m *MockCertificateProvider) GetCA() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCA")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCA indicates an expected call of GetCA
func (mr *MockCertificateProviderMockRecorder) GetCA() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCA", reflect.TypeOf((*MockCertificateProvider)(nil).GetCA))
}

// GetBundle mocks base method
func (m *MockCertificateProvider) GetBundle() (clusters.CertBundle, uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBundle")
	ret0, _ := ret[0].(clusters.CertBundle)
	ret1, _ := ret[1].(uuid.UUID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBundle indicates an expected call of GetBundle
func (mr *MockCertificateProviderMockRecorder) GetBundle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBundle", reflect.TypeOf((*MockCertificateProvider)(nil).GetBundle))
}
