// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	networkgraph "github.com/stackrox/rox/pkg/networkgraph"
	timestamp "github.com/stackrox/rox/pkg/timestamp"
	reflect "reflect"
)

// MockManager is a mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// ProcessDeploymentCreate mocks base method
func (m *MockManager) ProcessDeploymentCreate(deploymentID, clusterID, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessDeploymentCreate", deploymentID, clusterID, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessDeploymentCreate indicates an expected call of ProcessDeploymentCreate
func (mr *MockManagerMockRecorder) ProcessDeploymentCreate(deploymentID, clusterID, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessDeploymentCreate", reflect.TypeOf((*MockManager)(nil).ProcessDeploymentCreate), deploymentID, clusterID, namespace)
}

// ProcessFlowUpdate mocks base method
func (m *MockManager) ProcessFlowUpdate(flows map[networkgraph.NetworkConnIndicator]timestamp.MicroTS) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessFlowUpdate", flows)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessFlowUpdate indicates an expected call of ProcessFlowUpdate
func (mr *MockManagerMockRecorder) ProcessFlowUpdate(flows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessFlowUpdate", reflect.TypeOf((*MockManager)(nil).ProcessFlowUpdate), flows)
}
