// Code generated by MockGen. DO NOT EDIT.
// Source: datastore.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	storage "github.com/stackrox/rox/generated/storage"
	reflect "reflect"
)

// MockDataStore is a mock of DataStore interface
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// Exists mocks base method
func (m *MockDataStore) Exists(ctx context.Context, deploymentID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, deploymentID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists
func (mr *MockDataStoreMockRecorder) Exists(ctx, deploymentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockDataStore)(nil).Exists), ctx, deploymentID)
}

// GetNetworkBaseline mocks base method
func (m *MockDataStore) GetNetworkBaseline(ctx context.Context, deploymentID string) (*storage.NetworkBaseline, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkBaseline", ctx, deploymentID)
	ret0, _ := ret[0].(*storage.NetworkBaseline)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNetworkBaseline indicates an expected call of GetNetworkBaseline
func (mr *MockDataStoreMockRecorder) GetNetworkBaseline(ctx, deploymentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkBaseline", reflect.TypeOf((*MockDataStore)(nil).GetNetworkBaseline), ctx, deploymentID)
}

// CreateNetworkBaselineIfNotExists mocks base method
func (m *MockDataStore) CreateNetworkBaselineIfNotExists(ctx context.Context, deploymentID, clusterID, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetworkBaselineIfNotExists", ctx, deploymentID, clusterID, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNetworkBaselineIfNotExists indicates an expected call of CreateNetworkBaselineIfNotExists
func (mr *MockDataStoreMockRecorder) CreateNetworkBaselineIfNotExists(ctx, deploymentID, clusterID, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkBaselineIfNotExists", reflect.TypeOf((*MockDataStore)(nil).CreateNetworkBaselineIfNotExists), ctx, deploymentID, clusterID, namespace)
}

// UpdateNetworkBaseline mocks base method
func (m *MockDataStore) UpdateNetworkBaseline(ctx context.Context, baseline *storage.NetworkBaseline) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNetworkBaseline", ctx, baseline)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNetworkBaseline indicates an expected call of UpdateNetworkBaseline
func (mr *MockDataStoreMockRecorder) UpdateNetworkBaseline(ctx, baseline interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetworkBaseline", reflect.TypeOf((*MockDataStore)(nil).UpdateNetworkBaseline), ctx, baseline)
}

// DeleteNetworkBaseline mocks base method
func (m *MockDataStore) DeleteNetworkBaseline(ctx context.Context, deploymentID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetworkBaseline", ctx, deploymentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetworkBaseline indicates an expected call of DeleteNetworkBaseline
func (mr *MockDataStoreMockRecorder) DeleteNetworkBaseline(ctx, deploymentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetworkBaseline", reflect.TypeOf((*MockDataStore)(nil).DeleteNetworkBaseline), ctx, deploymentID)
}
