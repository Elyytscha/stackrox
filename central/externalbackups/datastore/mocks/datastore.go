// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackrox/rox/central/externalbackups/datastore (interfaces: DataStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	storage "github.com/stackrox/rox/generated/storage"
	reflect "reflect"
)

// MockDataStore is a mock of DataStore interface
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// GetBackup mocks base method
func (m *MockDataStore) GetBackup(arg0 context.Context, arg1 string) (*storage.ExternalBackup, error) {
	ret := m.ctrl.Call(m, "GetBackup", arg0, arg1)
	ret0, _ := ret[0].(*storage.ExternalBackup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackup indicates an expected call of GetBackup
func (mr *MockDataStoreMockRecorder) GetBackup(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackup", reflect.TypeOf((*MockDataStore)(nil).GetBackup), arg0, arg1)
}

// ListBackups mocks base method
func (m *MockDataStore) ListBackups(arg0 context.Context) ([]*storage.ExternalBackup, error) {
	ret := m.ctrl.Call(m, "ListBackups", arg0)
	ret0, _ := ret[0].([]*storage.ExternalBackup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBackups indicates an expected call of ListBackups
func (mr *MockDataStoreMockRecorder) ListBackups(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackups", reflect.TypeOf((*MockDataStore)(nil).ListBackups), arg0)
}

// RemoveBackup mocks base method
func (m *MockDataStore) RemoveBackup(arg0 context.Context, arg1 string) error {
	ret := m.ctrl.Call(m, "RemoveBackup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveBackup indicates an expected call of RemoveBackup
func (mr *MockDataStoreMockRecorder) RemoveBackup(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBackup", reflect.TypeOf((*MockDataStore)(nil).RemoveBackup), arg0, arg1)
}

// UpsertBackup mocks base method
func (m *MockDataStore) UpsertBackup(arg0 context.Context, arg1 *storage.ExternalBackup) error {
	ret := m.ctrl.Call(m, "UpsertBackup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertBackup indicates an expected call of UpsertBackup
func (mr *MockDataStoreMockRecorder) UpsertBackup(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertBackup", reflect.TypeOf((*MockDataStore)(nil).UpsertBackup), arg0, arg1)
}
