// +build !release

package singleton

import (
	"time"

	"github.com/stackrox/rox/pkg/license/validator"
	"github.com/stackrox/rox/pkg/timeutil"
	"github.com/stackrox/rox/pkg/utils"
)

func init() {
	utils.Must(
		validatorInstance.RegisterSigningKey(
			validator.EC256,
			[]byte{
				0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02,
				0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03,
				0x42, 0x00, 0x04, 0x2e, 0x93, 0xd3, 0xdc, 0xa9, 0x93, 0x8c, 0xe2, 0xf4,
				0xf9, 0x46, 0xdb, 0x30, 0x8a, 0xc5, 0x0e, 0xcf, 0x52, 0x7d, 0xfc, 0x48,
				0x49, 0x00, 0xd9, 0xf5, 0x20, 0xd0, 0x02, 0x5b, 0xb3, 0xb7, 0x4c, 0x10,
				0x82, 0xbb, 0xbf, 0x25, 0x0d, 0xc8, 0xe6, 0x90, 0xf4, 0xea, 0x8f, 0x3d,
				0x0b, 0xb6, 0xcf, 0xac, 0xa7, 0xcb, 0x3f, 0xe0, 0xd5, 0x08, 0xd1, 0x44,
				0x9f, 0x9f, 0x2a, 0x4b, 0xf8, 0xd8, 0x70,
			},
			validator.SigningKeyRestrictions{
				EarliestNotValidBefore:                  timeutil.MustParse(time.RFC3339, "2019-04-01T00:00:00Z"),
				LatestNotValidAfter:                     timeutil.MustParse(time.RFC3339, "2019-04-25T00:00:00Z"),
				MaxDuration:                             16 * 24 * time.Hour,
				AllowOffline:                            true,
				MaxNodeLimit:                            50,
				BuildFlavors:                            []string{"development"},
				AllowNoDeploymentEnvironmentRestriction: true,
			}),
	)

	utils.Must(
		validatorInstance.RegisterSigningKey(
			validator.EC384,
			// projects/stackrox-licensing/locations/global/keyRings/development-key-ring/cryptoKeys/development-key/cryptoKeyVersions/1
			[]byte{
				0x30, 0x76, 0x30, 0x10, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02,
				0x01, 0x06, 0x05, 0x2b, 0x81, 0x04, 0x00, 0x22, 0x03, 0x62, 0x00, 0x04,
				0xc0, 0x5e, 0x08, 0xf6, 0x07, 0x0f, 0xed, 0x69, 0xa9, 0xed, 0x29, 0xb4,
				0x23, 0x33, 0xcf, 0x4f, 0x0b, 0xf5, 0xa0, 0x5f, 0x93, 0xc0, 0xf4, 0x24,
				0x2e, 0x83, 0x7b, 0xb5, 0x21, 0xda, 0x45, 0xfc, 0xe4, 0x68, 0xf0, 0x87,
				0xb2, 0x6f, 0xa7, 0x7e, 0x83, 0x54, 0x29, 0x5f, 0x71, 0x74, 0x40, 0x73,
				0x90, 0xe0, 0xce, 0x11, 0x3b, 0x2c, 0x56, 0x9f, 0x81, 0xd8, 0x39, 0xa8,
				0xfe, 0x9d, 0xb9, 0x05, 0x43, 0x04, 0xef, 0x4d, 0x42, 0x11, 0xa8, 0x5f,
				0x93, 0x7a, 0xda, 0x8b, 0x1d, 0x19, 0x9a, 0x0b, 0x30, 0xf8, 0x80, 0x25,
				0xda, 0x80, 0x33, 0xee, 0xd9, 0x73, 0x4f, 0xe1, 0x11, 0xe0, 0x1f, 0x16,
			},
			validator.SigningKeyRestrictions{
				EarliestNotValidBefore:                  timeutil.MustParse(time.RFC3339, "2019-04-17T00:00:00Z"),
				LatestNotValidAfter:                     timeutil.MustParse(time.RFC3339, "2019-07-17T00:00:00Z"),
				MaxDuration:                             16 * 24 * time.Hour,
				AllowOffline:                            true,
				MaxNodeLimit:                            50,
				BuildFlavors:                            []string{"development"},
				AllowNoDeploymentEnvironmentRestriction: true,
			}),
	)
}
