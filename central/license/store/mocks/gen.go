// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackrox/rox/central/license/store (interfaces: Store)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	storage "github.com/stackrox/rox/generated/storage"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// DeleteLicenseKey mocks base method
func (m *MockStore) DeleteLicenseKey(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteLicenseKey", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLicenseKey indicates an expected call of DeleteLicenseKey
func (mr *MockStoreMockRecorder) DeleteLicenseKey(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLicenseKey", reflect.TypeOf((*MockStore)(nil).DeleteLicenseKey), arg0)
}

// ListLicenseKeys mocks base method
func (m *MockStore) ListLicenseKeys() ([]*storage.StoredLicenseKey, error) {
	ret := m.ctrl.Call(m, "ListLicenseKeys")
	ret0, _ := ret[0].([]*storage.StoredLicenseKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLicenseKeys indicates an expected call of ListLicenseKeys
func (mr *MockStoreMockRecorder) ListLicenseKeys() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLicenseKeys", reflect.TypeOf((*MockStore)(nil).ListLicenseKeys))
}

// UpsertLicenseKeys mocks base method
func (m *MockStore) UpsertLicenseKeys(arg0 []*storage.StoredLicenseKey) error {
	ret := m.ctrl.Call(m, "UpsertLicenseKeys", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertLicenseKeys indicates an expected call of UpsertLicenseKeys
func (mr *MockStoreMockRecorder) UpsertLicenseKeys(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertLicenseKeys", reflect.TypeOf((*MockStore)(nil).UpsertLicenseKeys), arg0)
}
