// Code generated by boltbindings generator. DO NOT EDIT.

package store

import (
	bbolt "github.com/etcd-io/bbolt"
	proto1 "github.com/gogo/protobuf/proto"
	metrics "github.com/stackrox/rox/central/metrics"
	storage "github.com/stackrox/rox/generated/storage"
	bolthelper "github.com/stackrox/rox/pkg/bolthelper"
	proto "github.com/stackrox/rox/pkg/bolthelper/crud/proto"
	ops "github.com/stackrox/rox/pkg/metrics"
	"time"
)

var (
	bucketName = []byte("licenseKeys")
)

type store struct {
	crud proto.MessageCrud
}

func key(msg proto1.Message) []byte {
	return []byte(msg.(*storage.StoredLicenseKey).GetLicenseId())
}

func alloc() proto1.Message {
	return new(storage.StoredLicenseKey)
}

func newStore(db *bbolt.DB) (*store, error) {
	if err := bolthelper.RegisterBucket(db, bucketName); err != nil {
		return nil, err
	}
	return &store{crud: proto.NewMessageCrud(db, bucketName, key, alloc)}, nil
}

func (s *store) DeleteLicenseKey(id string) error {
	defer metrics.SetBoltOperationDurationTime(time.Now(), ops.Remove, "LicenseKey")
	return s.crud.Delete(id)
}

func (s *store) ListLicenseKeys() ([]*storage.StoredLicenseKey, error) {
	defer metrics.SetBoltOperationDurationTime(time.Now(), ops.GetAll, "LicenseKey")
	msgs, err := s.crud.ReadAll()
	if err != nil {
		return nil, err
	}
	storedKeys := make([]*storage.StoredLicenseKey, len(msgs))
	for i, msg := range msgs {
		storedKeys[i] = msg.(*storage.StoredLicenseKey)
	}
	return storedKeys, nil
}

func (s *store) UpsertLicenseKeys(licensekeys []*storage.StoredLicenseKey) error {
	msgs := make([]proto1.Message, len(licensekeys))
	for i, key := range licensekeys {
		msgs[i] = key
	}
	return s.crud.UpsertBatch(msgs)
}
