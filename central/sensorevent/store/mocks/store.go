// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackrox/rox/central/sensorevent/store (interfaces: Store)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	v1 "github.com/stackrox/rox/generated/api/v1"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddSensorEvent mocks base method
func (m *MockStore) AddSensorEvent(arg0 *v1.SensorEvent) (uint64, error) {
	ret := m.ctrl.Call(m, "AddSensorEvent", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSensorEvent indicates an expected call of AddSensorEvent
func (mr *MockStoreMockRecorder) AddSensorEvent(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSensorEvent", reflect.TypeOf((*MockStore)(nil).AddSensorEvent), arg0)
}

// GetSensorEvent mocks base method
func (m *MockStore) GetSensorEvent(arg0 uint64) (*v1.SensorEvent, bool, error) {
	ret := m.ctrl.Call(m, "GetSensorEvent", arg0)
	ret0, _ := ret[0].(*v1.SensorEvent)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSensorEvent indicates an expected call of GetSensorEvent
func (mr *MockStoreMockRecorder) GetSensorEvent(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSensorEvent", reflect.TypeOf((*MockStore)(nil).GetSensorEvent), arg0)
}

// GetSensorEventIds mocks base method
func (m *MockStore) GetSensorEventIds(arg0 string) ([]uint64, map[string]uint64, error) {
	ret := m.ctrl.Call(m, "GetSensorEventIds", arg0)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(map[string]uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSensorEventIds indicates an expected call of GetSensorEventIds
func (mr *MockStoreMockRecorder) GetSensorEventIds(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSensorEventIds", reflect.TypeOf((*MockStore)(nil).GetSensorEventIds), arg0)
}

// RemoveSensorEvent mocks base method
func (m *MockStore) RemoveSensorEvent(arg0 uint64) error {
	ret := m.ctrl.Call(m, "RemoveSensorEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSensorEvent indicates an expected call of RemoveSensorEvent
func (mr *MockStoreMockRecorder) RemoveSensorEvent(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSensorEvent", reflect.TypeOf((*MockStore)(nil).RemoveSensorEvent), arg0)
}

// UpdateSensorEvent mocks base method
func (m *MockStore) UpdateSensorEvent(arg0 uint64, arg1 *v1.SensorEvent) error {
	ret := m.ctrl.Call(m, "UpdateSensorEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSensorEvent indicates an expected call of UpdateSensorEvent
func (mr *MockStoreMockRecorder) UpdateSensorEvent(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSensorEvent", reflect.TypeOf((*MockStore)(nil).UpdateSensorEvent), arg0, arg1)
}
