// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackrox/rox/central/sensorevent/service/pipeline (interfaces: Pipeline)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	pipeline "github.com/stackrox/rox/central/sensorevent/service/pipeline"
	central "github.com/stackrox/rox/generated/internalapi/central"
	reflect "reflect"
)

// MockPipeline is a mock of Pipeline interface
type MockPipeline struct {
	ctrl     *gomock.Controller
	recorder *MockPipelineMockRecorder
}

// MockPipelineMockRecorder is the mock recorder for MockPipeline
type MockPipelineMockRecorder struct {
	mock *MockPipeline
}

// NewMockPipeline creates a new mock instance
func NewMockPipeline(ctrl *gomock.Controller) *MockPipeline {
	mock := &MockPipeline{ctrl: ctrl}
	mock.recorder = &MockPipelineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPipeline) EXPECT() *MockPipelineMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockPipeline) Run(arg0 *central.SensorEvent, arg1 pipeline.EnforcementInjector) error {
	ret := m.ctrl.Call(m, "Run", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockPipelineMockRecorder) Run(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockPipeline)(nil).Run), arg0, arg1)
}
