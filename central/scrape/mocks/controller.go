// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackrox/rox/central/scrape (interfaces: Factory)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	framework "github.com/stackrox/rox/central/compliance/framework"
	compliance "github.com/stackrox/rox/generated/internalapi/compliance"
	concurrency "github.com/stackrox/rox/pkg/concurrency"
	reflect "reflect"
)

// MockFactory is a mock of Factory interface
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
}

// MockFactoryMockRecorder is the mock recorder for MockFactory
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// RunScrape mocks base method
func (m *MockFactory) RunScrape(arg0 framework.ComplianceDomain, arg1 concurrency.Waitable) (map[string]*compliance.ComplianceReturn, error) {
	ret := m.ctrl.Call(m, "RunScrape", arg0, arg1)
	ret0, _ := ret[0].(map[string]*compliance.ComplianceReturn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunScrape indicates an expected call of RunScrape
func (mr *MockFactoryMockRecorder) RunScrape(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunScrape", reflect.TypeOf((*MockFactory)(nil).RunScrape), arg0, arg1)
}
