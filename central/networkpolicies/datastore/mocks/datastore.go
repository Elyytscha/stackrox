// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackrox/rox/central/networkpolicies/datastore (interfaces: DataStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	storage "github.com/stackrox/rox/generated/storage"
	reflect "reflect"
)

// MockDataStore is a mock of DataStore interface
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// AddNetworkPolicy mocks base method
func (m *MockDataStore) AddNetworkPolicy(arg0 context.Context, arg1 *storage.NetworkPolicy) error {
	ret := m.ctrl.Call(m, "AddNetworkPolicy", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNetworkPolicy indicates an expected call of AddNetworkPolicy
func (mr *MockDataStoreMockRecorder) AddNetworkPolicy(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNetworkPolicy", reflect.TypeOf((*MockDataStore)(nil).AddNetworkPolicy), arg0, arg1)
}

// CountMatchingNetworkPolicies mocks base method
func (m *MockDataStore) CountMatchingNetworkPolicies(arg0 context.Context, arg1, arg2 string) (int, error) {
	ret := m.ctrl.Call(m, "CountMatchingNetworkPolicies", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountMatchingNetworkPolicies indicates an expected call of CountMatchingNetworkPolicies
func (mr *MockDataStoreMockRecorder) CountMatchingNetworkPolicies(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountMatchingNetworkPolicies", reflect.TypeOf((*MockDataStore)(nil).CountMatchingNetworkPolicies), arg0, arg1, arg2)
}

// CountNetworkPolicies mocks base method
func (m *MockDataStore) CountNetworkPolicies(arg0 context.Context) (int, error) {
	ret := m.ctrl.Call(m, "CountNetworkPolicies", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountNetworkPolicies indicates an expected call of CountNetworkPolicies
func (mr *MockDataStoreMockRecorder) CountNetworkPolicies(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountNetworkPolicies", reflect.TypeOf((*MockDataStore)(nil).CountNetworkPolicies), arg0)
}

// GetNetworkPolicies mocks base method
func (m *MockDataStore) GetNetworkPolicies(arg0 context.Context, arg1, arg2 string) ([]*storage.NetworkPolicy, error) {
	ret := m.ctrl.Call(m, "GetNetworkPolicies", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*storage.NetworkPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkPolicies indicates an expected call of GetNetworkPolicies
func (mr *MockDataStoreMockRecorder) GetNetworkPolicies(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkPolicies", reflect.TypeOf((*MockDataStore)(nil).GetNetworkPolicies), arg0, arg1, arg2)
}

// GetNetworkPolicy mocks base method
func (m *MockDataStore) GetNetworkPolicy(arg0 context.Context, arg1 string) (*storage.NetworkPolicy, bool, error) {
	ret := m.ctrl.Call(m, "GetNetworkPolicy", arg0, arg1)
	ret0, _ := ret[0].(*storage.NetworkPolicy)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNetworkPolicy indicates an expected call of GetNetworkPolicy
func (mr *MockDataStoreMockRecorder) GetNetworkPolicy(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkPolicy", reflect.TypeOf((*MockDataStore)(nil).GetNetworkPolicy), arg0, arg1)
}

// GetUndoRecord mocks base method
func (m *MockDataStore) GetUndoRecord(arg0 context.Context, arg1 string) (*storage.NetworkPolicyApplicationUndoRecord, bool, error) {
	ret := m.ctrl.Call(m, "GetUndoRecord", arg0, arg1)
	ret0, _ := ret[0].(*storage.NetworkPolicyApplicationUndoRecord)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUndoRecord indicates an expected call of GetUndoRecord
func (mr *MockDataStoreMockRecorder) GetUndoRecord(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUndoRecord", reflect.TypeOf((*MockDataStore)(nil).GetUndoRecord), arg0, arg1)
}

// RemoveNetworkPolicy mocks base method
func (m *MockDataStore) RemoveNetworkPolicy(arg0 context.Context, arg1 string) error {
	ret := m.ctrl.Call(m, "RemoveNetworkPolicy", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveNetworkPolicy indicates an expected call of RemoveNetworkPolicy
func (mr *MockDataStoreMockRecorder) RemoveNetworkPolicy(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNetworkPolicy", reflect.TypeOf((*MockDataStore)(nil).RemoveNetworkPolicy), arg0, arg1)
}

// UpdateNetworkPolicy mocks base method
func (m *MockDataStore) UpdateNetworkPolicy(arg0 context.Context, arg1 *storage.NetworkPolicy) error {
	ret := m.ctrl.Call(m, "UpdateNetworkPolicy", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNetworkPolicy indicates an expected call of UpdateNetworkPolicy
func (mr *MockDataStoreMockRecorder) UpdateNetworkPolicy(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetworkPolicy", reflect.TypeOf((*MockDataStore)(nil).UpdateNetworkPolicy), arg0, arg1)
}

// UpsertUndoRecord mocks base method
func (m *MockDataStore) UpsertUndoRecord(arg0 context.Context, arg1 string, arg2 *storage.NetworkPolicyApplicationUndoRecord) error {
	ret := m.ctrl.Call(m, "UpsertUndoRecord", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertUndoRecord indicates an expected call of UpsertUndoRecord
func (mr *MockDataStoreMockRecorder) UpsertUndoRecord(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertUndoRecord", reflect.TypeOf((*MockDataStore)(nil).UpsertUndoRecord), arg0, arg1, arg2)
}
