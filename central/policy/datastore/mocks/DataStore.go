// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import mock "github.com/stretchr/testify/mock"
import v1 "github.com/stackrox/rox/generated/api/v1"

// DataStore is an autogenerated mock type for the DataStore type
type DataStore struct {
	mock.Mock
}

// AddPolicy provides a mock function with given fields: _a0
func (_m *DataStore) AddPolicy(_a0 *v1.Policy) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(*v1.Policy) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1.Policy) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePolicyCategory provides a mock function with given fields: request
func (_m *DataStore) DeletePolicyCategory(request *v1.DeletePolicyCategoryRequest) error {
	ret := _m.Called(request)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.DeletePolicyCategoryRequest) error); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPolicies provides a mock function with given fields:
func (_m *DataStore) GetPolicies() ([]*v1.Policy, error) {
	ret := _m.Called()

	var r0 []*v1.Policy
	if rf, ok := ret.Get(0).(func() []*v1.Policy); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1.Policy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPolicy provides a mock function with given fields: id
func (_m *DataStore) GetPolicy(id string) (*v1.Policy, bool, error) {
	ret := _m.Called(id)

	var r0 *v1.Policy
	if rf, ok := ret.Get(0).(func(string) *v1.Policy); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Policy)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RemovePolicy provides a mock function with given fields: id
func (_m *DataStore) RemovePolicy(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RenamePolicyCategory provides a mock function with given fields: request
func (_m *DataStore) RenamePolicyCategory(request *v1.RenamePolicyCategoryRequest) error {
	ret := _m.Called(request)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.RenamePolicyCategoryRequest) error); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchPolicies provides a mock function with given fields: q
func (_m *DataStore) SearchPolicies(q *v1.Query) ([]*v1.SearchResult, error) {
	ret := _m.Called(q)

	var r0 []*v1.SearchResult
	if rf, ok := ret.Get(0).(func(*v1.Query) []*v1.SearchResult); ok {
		r0 = rf(q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1.SearchResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1.Query) error); ok {
		r1 = rf(q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchRawPolicies provides a mock function with given fields: q
func (_m *DataStore) SearchRawPolicies(q *v1.Query) ([]*v1.Policy, error) {
	ret := _m.Called(q)

	var r0 []*v1.Policy
	if rf, ok := ret.Get(0).(func(*v1.Query) []*v1.Policy); ok {
		r0 = rf(q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1.Policy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1.Query) error); ok {
		r1 = rf(q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePolicy provides a mock function with given fields: _a0
func (_m *DataStore) UpdatePolicy(_a0 *v1.Policy) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.Policy) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
