// Code generated by pg-bindings generator. DO NOT EDIT.

package postgres

import (
	"context"
	"reflect"
	"time"

	"github.com/gogo/protobuf/proto"
	"github.com/jackc/pgx/v4"
	"github.com/jackc/pgx/v4/pgxpool"
	"github.com/stackrox/rox/central/globaldb"
	"github.com/stackrox/rox/central/metrics"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/logging"
	ops "github.com/stackrox/rox/pkg/metrics"
	"github.com/stackrox/rox/pkg/postgres/pgutils"
	"github.com/stackrox/rox/pkg/postgres/walker"
)

const (
	baseTable  = "policy"
	countStmt  = "SELECT COUNT(*) FROM policy"
	existsStmt = "SELECT EXISTS(SELECT 1 FROM policy WHERE id = $1)"

	getStmt     = "SELECT serialized FROM policy WHERE id = $1"
	deleteStmt  = "DELETE FROM policy WHERE id = $1"
	walkStmt    = "SELECT serialized FROM policy"
	getIDsStmt  = "SELECT id FROM policy"
	getManyStmt = "SELECT serialized FROM policy WHERE id = ANY($1::text[])"

	deleteManyStmt = "DELETE FROM policy WHERE id = ANY($1::text[])"

	batchAfter = 100

	// using copyFrom, we may not even want to batch.  It would probably be simpler
	// to deal with failures if we just sent it all.  Something to think about as we
	// proceed and move into more e2e and larger performance testing
	batchSize = 10000
)

var (
	schema = walker.Walk(reflect.TypeOf((*storage.Policy)(nil)), baseTable)
	log    = logging.LoggerForModule()
)

func init() {
	globaldb.RegisterTable(schema)
}

type Store interface {
	Count(ctx context.Context) (int, error)
	Exists(ctx context.Context, id string) (bool, error)
	Get(ctx context.Context, id string) (*storage.Policy, bool, error)
	Upsert(ctx context.Context, obj *storage.Policy) error
	UpsertMany(ctx context.Context, objs []*storage.Policy) error
	Delete(ctx context.Context, id string) error
	GetIDs(ctx context.Context) ([]string, error)
	GetMany(ctx context.Context, ids []string) ([]*storage.Policy, []int, error)
	DeleteMany(ctx context.Context, ids []string) error

	Walk(ctx context.Context, fn func(obj *storage.Policy) error) error

	AckKeysIndexed(ctx context.Context, keys ...string) error
	GetKeysToIndex(ctx context.Context) ([]string, error)
}

type storeImpl struct {
	db *pgxpool.Pool
}

func createTablePolicy(ctx context.Context, db *pgxpool.Pool) {
	table := `
create table if not exists policy (
    id varchar,
    name varchar UNIQUE,
    description varchar,
    rationale varchar,
    remediation varchar,
    disabled bool,
    categories text[],
    lifecyclestages int[],
    eventsource integer,
    severity integer,
    enforcementactions int[],
    notifiers text[],
    lastupdated timestamp,
    sortname varchar,
    sortlifecyclestage varchar,
    sortenforcement bool,
    policyversion varchar,
    criterialocked bool,
    mitrevectorslocked bool,
    isdefault bool,
    serialized bytea,
    PRIMARY KEY(id)
)
`

	_, err := db.Exec(ctx, table)
	if err != nil {
		log.Panicf("Error creating table %s: %v", table, err)
	}

	indexes := []string{}
	for _, index := range indexes {
		if _, err := db.Exec(ctx, index); err != nil {
			log.Panicf("Error creating index %s: %v", index, err)
		}
	}

	createTablePolicyWhitelists(ctx, db)
	createTablePolicyExclusions(ctx, db)
	createTablePolicyScope(ctx, db)
	createTablePolicyPolicySections(ctx, db)
	createTablePolicyMitreAttackVectors(ctx, db)
}

func createTablePolicyWhitelists(ctx context.Context, db *pgxpool.Pool) {
	table := `
create table if not exists policy_Whitelists (
    policyid varchar,
    idx integer,
    name varchar,
    deployment_name varchar,
    deployment_scope_cluster varchar,
    deployment_scope_namespace varchar,
    deployment_scope_label_key varchar,
    deployment_scope_label_value varchar,
    image_name varchar,
    expiration timestamp,
    PRIMARY KEY(policyid, idx),
    CONSTRAINT fk_parent_table_0 FOREIGN KEY (policyid) REFERENCES policy(id) ON DELETE CASCADE
)
`

	_, err := db.Exec(ctx, table)
	if err != nil {
		log.Panicf("Error creating table %s: %v", table, err)
	}

	indexes := []string{

		"create index if not exists policyWhitelists_idx on policy_Whitelists using btree(idx)",
	}
	for _, index := range indexes {
		if _, err := db.Exec(ctx, index); err != nil {
			log.Panicf("Error creating index %s: %v", index, err)
		}
	}

}

func createTablePolicyExclusions(ctx context.Context, db *pgxpool.Pool) {
	table := `
create table if not exists policy_Exclusions (
    policyid varchar,
    idx integer,
    name varchar,
    deployment_name varchar,
    deployment_scope_cluster varchar,
    deployment_scope_namespace varchar,
    deployment_scope_label_key varchar,
    deployment_scope_label_value varchar,
    image_name varchar,
    expiration timestamp,
    PRIMARY KEY(policyid, idx),
    CONSTRAINT fk_parent_table_0 FOREIGN KEY (policyid) REFERENCES policy(id) ON DELETE CASCADE
)
`

	_, err := db.Exec(ctx, table)
	if err != nil {
		log.Panicf("Error creating table %s: %v", table, err)
	}

	indexes := []string{

		"create index if not exists policyExclusions_idx on policy_Exclusions using btree(idx)",
	}
	for _, index := range indexes {
		if _, err := db.Exec(ctx, index); err != nil {
			log.Panicf("Error creating index %s: %v", index, err)
		}
	}

}

func createTablePolicyScope(ctx context.Context, db *pgxpool.Pool) {
	table := `
create table if not exists policy_Scope (
    policyid varchar,
    idx integer,
    cluster varchar,
    namespace varchar,
    label_key varchar,
    label_value varchar,
    PRIMARY KEY(policyid, idx),
    CONSTRAINT fk_parent_table_0 FOREIGN KEY (policyid) REFERENCES policy(id) ON DELETE CASCADE
)
`

	_, err := db.Exec(ctx, table)
	if err != nil {
		log.Panicf("Error creating table %s: %v", table, err)
	}

	indexes := []string{

		"create index if not exists policyScope_idx on policy_Scope using btree(idx)",
	}
	for _, index := range indexes {
		if _, err := db.Exec(ctx, index); err != nil {
			log.Panicf("Error creating index %s: %v", index, err)
		}
	}

}

func createTablePolicyPolicySections(ctx context.Context, db *pgxpool.Pool) {
	table := `
create table if not exists policy_PolicySections (
    policyid varchar,
    idx integer,
    sectionname varchar,
    PRIMARY KEY(policyid, idx),
    CONSTRAINT fk_parent_table_0 FOREIGN KEY (policyid) REFERENCES policy(id) ON DELETE CASCADE
)
`

	_, err := db.Exec(ctx, table)
	if err != nil {
		log.Panicf("Error creating table %s: %v", table, err)
	}

	indexes := []string{

		"create index if not exists policyPolicySections_idx on policy_PolicySections using btree(idx)",
	}
	for _, index := range indexes {
		if _, err := db.Exec(ctx, index); err != nil {
			log.Panicf("Error creating index %s: %v", index, err)
		}
	}

	createTablePolicyPolicySectionsPolicyGroups(ctx, db)
}

func createTablePolicyPolicySectionsPolicyGroups(ctx context.Context, db *pgxpool.Pool) {
	table := `
create table if not exists policy_PolicySections_PolicyGroups (
    policyid varchar,
    policysectionidx integer,
    idx integer,
    fieldname varchar,
    booleanoperator integer,
    negate bool,
    PRIMARY KEY(policyid, policysectionidx, idx),
    CONSTRAINT fk_parent_table_0 FOREIGN KEY (policyid, policysectionidx) REFERENCES policy_PolicySections(policyid, idx) ON DELETE CASCADE
)
`

	_, err := db.Exec(ctx, table)
	if err != nil {
		log.Panicf("Error creating table %s: %v", table, err)
	}

	indexes := []string{

		"create index if not exists policyPolicySectionsPolicyGroups_idx on policy_PolicySections_PolicyGroups using btree(idx)",
	}
	for _, index := range indexes {
		if _, err := db.Exec(ctx, index); err != nil {
			log.Panicf("Error creating index %s: %v", index, err)
		}
	}

	createTablePolicyPolicySectionsPolicyGroupsValues(ctx, db)
}

func createTablePolicyPolicySectionsPolicyGroupsValues(ctx context.Context, db *pgxpool.Pool) {
	table := `
create table if not exists policy_PolicySections_PolicyGroups_Values (
    policyid varchar,
    policysectionidx integer,
    policygroupidx integer,
    idx integer,
    value varchar,
    PRIMARY KEY(policyid, policysectionidx, policygroupidx, idx),
    CONSTRAINT fk_parent_table_0 FOREIGN KEY (policyid, policysectionidx, policygroupidx) REFERENCES policy_PolicySections_PolicyGroups(policyid, policysectionidx, idx) ON DELETE CASCADE
)
`

	_, err := db.Exec(ctx, table)
	if err != nil {
		log.Panicf("Error creating table %s: %v", table, err)
	}

	indexes := []string{

		"create index if not exists policyPolicySectionsPolicyGroupsValues_idx on policy_PolicySections_PolicyGroups_Values using btree(idx)",
	}
	for _, index := range indexes {
		if _, err := db.Exec(ctx, index); err != nil {
			log.Panicf("Error creating index %s: %v", index, err)
		}
	}

}

func createTablePolicyMitreAttackVectors(ctx context.Context, db *pgxpool.Pool) {
	table := `
create table if not exists policy_MitreAttackVectors (
    policyid varchar,
    idx integer,
    tactic varchar,
    techniques text[],
    PRIMARY KEY(policyid, idx),
    CONSTRAINT fk_parent_table_0 FOREIGN KEY (policyid) REFERENCES policy(id) ON DELETE CASCADE
)
`

	_, err := db.Exec(ctx, table)
	if err != nil {
		log.Panicf("Error creating table %s: %v", table, err)
	}

	indexes := []string{

		"create index if not exists policyMitreAttackVectors_idx on policy_MitreAttackVectors using btree(idx)",
	}
	for _, index := range indexes {
		if _, err := db.Exec(ctx, index); err != nil {
			log.Panicf("Error creating index %s: %v", index, err)
		}
	}

}

func insertIntoPolicy(ctx context.Context, tx pgx.Tx, obj *storage.Policy) error {

	serialized, marshalErr := obj.Marshal()
	if marshalErr != nil {
		return marshalErr
	}

	values := []interface{}{
		// parent primary keys start
		obj.GetId(),
		obj.GetName(),
		obj.GetDescription(),
		obj.GetRationale(),
		obj.GetRemediation(),
		obj.GetDisabled(),
		obj.GetCategories(),
		obj.GetLifecycleStages(),
		obj.GetEventSource(),
		obj.GetSeverity(),
		obj.GetEnforcementActions(),
		obj.GetNotifiers(),
		pgutils.NilOrTime(obj.GetLastUpdated()),
		obj.GetSORTName(),
		obj.GetSORTLifecycleStage(),
		obj.GetSORTEnforcement(),
		obj.GetPolicyVersion(),
		obj.GetCriteriaLocked(),
		obj.GetMitreVectorsLocked(),
		obj.GetIsDefault(),
		serialized,
	}

	finalStr := "INSERT INTO policy (id, name, description, rationale, remediation, disabled, categories, lifecyclestages, eventsource, severity, enforcementactions, notifiers, lastupdated, sortname, sortlifecyclestage, sortenforcement, policyversion, criterialocked, mitrevectorslocked, isdefault, serialized) VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) ON CONFLICT(id) DO UPDATE SET id = EXCLUDED.id, name = EXCLUDED.name, description = EXCLUDED.description, rationale = EXCLUDED.rationale, remediation = EXCLUDED.remediation, disabled = EXCLUDED.disabled, categories = EXCLUDED.categories, lifecyclestages = EXCLUDED.lifecyclestages, eventsource = EXCLUDED.eventsource, severity = EXCLUDED.severity, enforcementactions = EXCLUDED.enforcementactions, notifiers = EXCLUDED.notifiers, lastupdated = EXCLUDED.lastupdated, sortname = EXCLUDED.sortname, sortlifecyclestage = EXCLUDED.sortlifecyclestage, sortenforcement = EXCLUDED.sortenforcement, policyversion = EXCLUDED.policyversion, criterialocked = EXCLUDED.criterialocked, mitrevectorslocked = EXCLUDED.mitrevectorslocked, isdefault = EXCLUDED.isdefault, serialized = EXCLUDED.serialized"
	_, err := tx.Exec(ctx, finalStr, values...)
	if err != nil {
		return err
	}

	var query string

	for childIdx, child := range obj.GetWhitelists() {
		if err := insertIntoPolicyWhitelists(ctx, tx, child, obj.GetId(), childIdx); err != nil {
			return err
		}
	}

	query = "delete from policy_Whitelists where policyid = $1 AND idx >= $2"
	_, err = tx.Exec(ctx, query, obj.GetId(), len(obj.GetWhitelists()))
	if err != nil {
		return err
	}
	for childIdx, child := range obj.GetExclusions() {
		if err := insertIntoPolicyExclusions(ctx, tx, child, obj.GetId(), childIdx); err != nil {
			return err
		}
	}

	query = "delete from policy_Exclusions where policyid = $1 AND idx >= $2"
	_, err = tx.Exec(ctx, query, obj.GetId(), len(obj.GetExclusions()))
	if err != nil {
		return err
	}
	for childIdx, child := range obj.GetScope() {
		if err := insertIntoPolicyScope(ctx, tx, child, obj.GetId(), childIdx); err != nil {
			return err
		}
	}

	query = "delete from policy_Scope where policyid = $1 AND idx >= $2"
	_, err = tx.Exec(ctx, query, obj.GetId(), len(obj.GetScope()))
	if err != nil {
		return err
	}
	for childIdx, child := range obj.GetPolicySections() {
		if err := insertIntoPolicyPolicySections(ctx, tx, child, obj.GetId(), childIdx); err != nil {
			return err
		}
	}

	query = "delete from policy_PolicySections where policyid = $1 AND idx >= $2"
	_, err = tx.Exec(ctx, query, obj.GetId(), len(obj.GetPolicySections()))
	if err != nil {
		return err
	}
	for childIdx, child := range obj.GetMitreAttackVectors() {
		if err := insertIntoPolicyMitreAttackVectors(ctx, tx, child, obj.GetId(), childIdx); err != nil {
			return err
		}
	}

	query = "delete from policy_MitreAttackVectors where policyid = $1 AND idx >= $2"
	_, err = tx.Exec(ctx, query, obj.GetId(), len(obj.GetMitreAttackVectors()))
	if err != nil {
		return err
	}
	return nil
}

func insertIntoPolicyWhitelists(ctx context.Context, tx pgx.Tx, obj *storage.Exclusion, policyid string, idx int) error {

	values := []interface{}{
		// parent primary keys start
		policyid,
		idx,
		obj.GetName(),
		obj.GetDeployment().GetName(),
		obj.GetDeployment().GetScope().GetCluster(),
		obj.GetDeployment().GetScope().GetNamespace(),
		obj.GetDeployment().GetScope().GetLabel().GetKey(),
		obj.GetDeployment().GetScope().GetLabel().GetValue(),
		obj.GetImage().GetName(),
		pgutils.NilOrTime(obj.GetExpiration()),
	}

	finalStr := "INSERT INTO policy_Whitelists (policyid, idx, name, deployment_name, deployment_scope_cluster, deployment_scope_namespace, deployment_scope_label_key, deployment_scope_label_value, image_name, expiration) VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) ON CONFLICT(policyid, idx) DO UPDATE SET policyid = EXCLUDED.policyid, idx = EXCLUDED.idx, name = EXCLUDED.name, deployment_name = EXCLUDED.deployment_name, deployment_scope_cluster = EXCLUDED.deployment_scope_cluster, deployment_scope_namespace = EXCLUDED.deployment_scope_namespace, deployment_scope_label_key = EXCLUDED.deployment_scope_label_key, deployment_scope_label_value = EXCLUDED.deployment_scope_label_value, image_name = EXCLUDED.image_name, expiration = EXCLUDED.expiration"
	_, err := tx.Exec(ctx, finalStr, values...)
	if err != nil {
		return err
	}

	return nil
}

func insertIntoPolicyExclusions(ctx context.Context, tx pgx.Tx, obj *storage.Exclusion, policyid string, idx int) error {

	values := []interface{}{
		// parent primary keys start
		policyid,
		idx,
		obj.GetName(),
		obj.GetDeployment().GetName(),
		obj.GetDeployment().GetScope().GetCluster(),
		obj.GetDeployment().GetScope().GetNamespace(),
		obj.GetDeployment().GetScope().GetLabel().GetKey(),
		obj.GetDeployment().GetScope().GetLabel().GetValue(),
		obj.GetImage().GetName(),
		pgutils.NilOrTime(obj.GetExpiration()),
	}

	finalStr := "INSERT INTO policy_Exclusions (policyid, idx, name, deployment_name, deployment_scope_cluster, deployment_scope_namespace, deployment_scope_label_key, deployment_scope_label_value, image_name, expiration) VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) ON CONFLICT(policyid, idx) DO UPDATE SET policyid = EXCLUDED.policyid, idx = EXCLUDED.idx, name = EXCLUDED.name, deployment_name = EXCLUDED.deployment_name, deployment_scope_cluster = EXCLUDED.deployment_scope_cluster, deployment_scope_namespace = EXCLUDED.deployment_scope_namespace, deployment_scope_label_key = EXCLUDED.deployment_scope_label_key, deployment_scope_label_value = EXCLUDED.deployment_scope_label_value, image_name = EXCLUDED.image_name, expiration = EXCLUDED.expiration"
	_, err := tx.Exec(ctx, finalStr, values...)
	if err != nil {
		return err
	}

	return nil
}

func insertIntoPolicyScope(ctx context.Context, tx pgx.Tx, obj *storage.Scope, policyid string, idx int) error {

	values := []interface{}{
		// parent primary keys start
		policyid,
		idx,
		obj.GetCluster(),
		obj.GetNamespace(),
		obj.GetLabel().GetKey(),
		obj.GetLabel().GetValue(),
	}

	finalStr := "INSERT INTO policy_Scope (policyid, idx, cluster, namespace, label_key, label_value) VALUES($1, $2, $3, $4, $5, $6) ON CONFLICT(policyid, idx) DO UPDATE SET policyid = EXCLUDED.policyid, idx = EXCLUDED.idx, cluster = EXCLUDED.cluster, namespace = EXCLUDED.namespace, label_key = EXCLUDED.label_key, label_value = EXCLUDED.label_value"
	_, err := tx.Exec(ctx, finalStr, values...)
	if err != nil {
		return err
	}

	return nil
}

func insertIntoPolicyPolicySections(ctx context.Context, tx pgx.Tx, obj *storage.PolicySection, policyid string, idx int) error {

	values := []interface{}{
		// parent primary keys start
		policyid,
		idx,
		obj.GetSectionName(),
	}

	finalStr := "INSERT INTO policy_PolicySections (policyid, idx, sectionname) VALUES($1, $2, $3) ON CONFLICT(policyid, idx) DO UPDATE SET policyid = EXCLUDED.policyid, idx = EXCLUDED.idx, sectionname = EXCLUDED.sectionname"
	_, err := tx.Exec(ctx, finalStr, values...)
	if err != nil {
		return err
	}

	var query string

	for childIdx, child := range obj.GetPolicyGroups() {
		if err := insertIntoPolicyPolicySectionsPolicyGroups(ctx, tx, child, policyid, idx, childIdx); err != nil {
			return err
		}
	}

	query = "delete from policy_PolicySections_PolicyGroups where policyid = $1 AND policysectionidx = $2 AND idx >= $3"
	_, err = tx.Exec(ctx, query, policyid, idx, len(obj.GetPolicyGroups()))
	if err != nil {
		return err
	}
	return nil
}

func insertIntoPolicyPolicySectionsPolicyGroups(ctx context.Context, tx pgx.Tx, obj *storage.PolicyGroup, policyid string, policysectionidx int, idx int) error {

	values := []interface{}{
		// parent primary keys start
		policyid,
		policysectionidx,
		idx,
		obj.GetFieldName(),
		obj.GetBooleanOperator(),
		obj.GetNegate(),
	}

	finalStr := "INSERT INTO policy_PolicySections_PolicyGroups (policyid, policysectionidx, idx, fieldname, booleanoperator, negate) VALUES($1, $2, $3, $4, $5, $6) ON CONFLICT(policyid, policysectionidx, idx) DO UPDATE SET policyid = EXCLUDED.policyid, policysectionidx = EXCLUDED.policysectionidx, idx = EXCLUDED.idx, fieldname = EXCLUDED.fieldname, booleanoperator = EXCLUDED.booleanoperator, negate = EXCLUDED.negate"
	_, err := tx.Exec(ctx, finalStr, values...)
	if err != nil {
		return err
	}

	var query string

	for childIdx, child := range obj.GetValues() {
		if err := insertIntoPolicyPolicySectionsPolicyGroupsValues(ctx, tx, child, policyid, policysectionidx, idx, childIdx); err != nil {
			return err
		}
	}

	query = "delete from policy_PolicySections_PolicyGroups_Values where policyid = $1 AND policysectionidx = $2 AND policygroupidx = $3 AND idx >= $4"
	_, err = tx.Exec(ctx, query, policyid, policysectionidx, idx, len(obj.GetValues()))
	if err != nil {
		return err
	}
	return nil
}

func insertIntoPolicyPolicySectionsPolicyGroupsValues(ctx context.Context, tx pgx.Tx, obj *storage.PolicyValue, policyid string, policysectionidx int, policygroupidx int, idx int) error {

	values := []interface{}{
		// parent primary keys start
		policyid,
		policysectionidx,
		policygroupidx,
		idx,
		obj.GetValue(),
	}

	finalStr := "INSERT INTO policy_PolicySections_PolicyGroups_Values (policyid, policysectionidx, policygroupidx, idx, value) VALUES($1, $2, $3, $4, $5) ON CONFLICT(policyid, policysectionidx, policygroupidx, idx) DO UPDATE SET policyid = EXCLUDED.policyid, policysectionidx = EXCLUDED.policysectionidx, policygroupidx = EXCLUDED.policygroupidx, idx = EXCLUDED.idx, value = EXCLUDED.value"
	_, err := tx.Exec(ctx, finalStr, values...)
	if err != nil {
		return err
	}

	return nil
}

func insertIntoPolicyMitreAttackVectors(ctx context.Context, tx pgx.Tx, obj *storage.Policy_MitreAttackVectors, policyid string, idx int) error {

	values := []interface{}{
		// parent primary keys start
		policyid,
		idx,
		obj.GetTactic(),
		obj.GetTechniques(),
	}

	finalStr := "INSERT INTO policy_MitreAttackVectors (policyid, idx, tactic, techniques) VALUES($1, $2, $3, $4) ON CONFLICT(policyid, idx) DO UPDATE SET policyid = EXCLUDED.policyid, idx = EXCLUDED.idx, tactic = EXCLUDED.tactic, techniques = EXCLUDED.techniques"
	_, err := tx.Exec(ctx, finalStr, values...)
	if err != nil {
		return err
	}

	return nil
}

func (s *storeImpl) copyFromPolicy(ctx context.Context, tx pgx.Tx, objs ...*storage.Policy) error {

	inputRows := [][]interface{}{}

	var err error

	// This is a copy so first we must delete the rows and re-add them
	// Which is essentially the desired behaviour of an upsert.
	var deletes []string

	copyCols := []string{

		"id",

		"name",

		"description",

		"rationale",

		"remediation",

		"disabled",

		"categories",

		"lifecyclestages",

		"eventsource",

		"severity",

		"enforcementactions",

		"notifiers",

		"lastupdated",

		"sortname",

		"sortlifecyclestage",

		"sortenforcement",

		"policyversion",

		"criterialocked",

		"mitrevectorslocked",

		"isdefault",

		"serialized",
	}

	for idx, obj := range objs {
		// Todo: ROX-9499 Figure out how to more cleanly template around this issue.
		log.Debugf("This is here for now because there is an issue with pods_TerminatedInstances where the obj in the loop is not used as it only consists of the parent id and the idx.  Putting this here as a stop gap to simply use the object.  %s", obj)

		serialized, marshalErr := obj.Marshal()
		if marshalErr != nil {
			return marshalErr
		}

		inputRows = append(inputRows, []interface{}{

			obj.GetId(),

			obj.GetName(),

			obj.GetDescription(),

			obj.GetRationale(),

			obj.GetRemediation(),

			obj.GetDisabled(),

			obj.GetCategories(),

			obj.GetLifecycleStages(),

			obj.GetEventSource(),

			obj.GetSeverity(),

			obj.GetEnforcementActions(),

			obj.GetNotifiers(),

			pgutils.NilOrTime(obj.GetLastUpdated()),

			obj.GetSORTName(),

			obj.GetSORTLifecycleStage(),

			obj.GetSORTEnforcement(),

			obj.GetPolicyVersion(),

			obj.GetCriteriaLocked(),

			obj.GetMitreVectorsLocked(),

			obj.GetIsDefault(),

			serialized,
		})

		// Add the id to be deleted.
		deletes = append(deletes, obj.GetId())

		// if we hit our batch size we need to push the data
		if (idx+1)%batchSize == 0 || idx == len(objs)-1 {
			// copy does not upsert so have to delete first.  parent deletion cascades so only need to
			// delete for the top level parent

			_, err = tx.Exec(ctx, deleteManyStmt, deletes)
			if err != nil {
				return err
			}
			// clear the inserts and vals for the next batch
			deletes = nil

			_, err = tx.CopyFrom(ctx, pgx.Identifier{"policy"}, copyCols, pgx.CopyFromRows(inputRows))

			if err != nil {
				return err
			}

			// clear the input rows for the next batch
			inputRows = inputRows[:0]
		}
	}

	for _, obj := range objs {

		if err = s.copyFromPolicyWhitelists(ctx, tx, obj.GetId(), obj.GetWhitelists()...); err != nil {
			return err
		}
		if err = s.copyFromPolicyExclusions(ctx, tx, obj.GetId(), obj.GetExclusions()...); err != nil {
			return err
		}
		if err = s.copyFromPolicyScope(ctx, tx, obj.GetId(), obj.GetScope()...); err != nil {
			return err
		}
		if err = s.copyFromPolicyPolicySections(ctx, tx, obj.GetId(), obj.GetPolicySections()...); err != nil {
			return err
		}
		if err = s.copyFromPolicyMitreAttackVectors(ctx, tx, obj.GetId(), obj.GetMitreAttackVectors()...); err != nil {
			return err
		}
	}

	return err
}

func (s *storeImpl) copyFromPolicyWhitelists(ctx context.Context, tx pgx.Tx, policyid string, objs ...*storage.Exclusion) error {

	inputRows := [][]interface{}{}

	var err error

	copyCols := []string{

		"policyid",

		"idx",

		"name",

		"deployment_name",

		"deployment_scope_cluster",

		"deployment_scope_namespace",

		"deployment_scope_label_key",

		"deployment_scope_label_value",

		"image_name",

		"expiration",
	}

	for idx, obj := range objs {
		// Todo: ROX-9499 Figure out how to more cleanly template around this issue.
		log.Debugf("This is here for now because there is an issue with pods_TerminatedInstances where the obj in the loop is not used as it only consists of the parent id and the idx.  Putting this here as a stop gap to simply use the object.  %s", obj)

		inputRows = append(inputRows, []interface{}{

			policyid,

			idx,

			obj.GetName(),

			obj.GetDeployment().GetName(),

			obj.GetDeployment().GetScope().GetCluster(),

			obj.GetDeployment().GetScope().GetNamespace(),

			obj.GetDeployment().GetScope().GetLabel().GetKey(),

			obj.GetDeployment().GetScope().GetLabel().GetValue(),

			obj.GetImage().GetName(),

			pgutils.NilOrTime(obj.GetExpiration()),
		})

		// if we hit our batch size we need to push the data
		if (idx+1)%batchSize == 0 || idx == len(objs)-1 {
			// copy does not upsert so have to delete first.  parent deletion cascades so only need to
			// delete for the top level parent

			_, err = tx.CopyFrom(ctx, pgx.Identifier{"policy_whitelists"}, copyCols, pgx.CopyFromRows(inputRows))

			if err != nil {
				return err
			}

			// clear the input rows for the next batch
			inputRows = inputRows[:0]
		}
	}

	return err
}

func (s *storeImpl) copyFromPolicyExclusions(ctx context.Context, tx pgx.Tx, policyid string, objs ...*storage.Exclusion) error {

	inputRows := [][]interface{}{}

	var err error

	copyCols := []string{

		"policyid",

		"idx",

		"name",

		"deployment_name",

		"deployment_scope_cluster",

		"deployment_scope_namespace",

		"deployment_scope_label_key",

		"deployment_scope_label_value",

		"image_name",

		"expiration",
	}

	for idx, obj := range objs {
		// Todo: ROX-9499 Figure out how to more cleanly template around this issue.
		log.Debugf("This is here for now because there is an issue with pods_TerminatedInstances where the obj in the loop is not used as it only consists of the parent id and the idx.  Putting this here as a stop gap to simply use the object.  %s", obj)

		inputRows = append(inputRows, []interface{}{

			policyid,

			idx,

			obj.GetName(),

			obj.GetDeployment().GetName(),

			obj.GetDeployment().GetScope().GetCluster(),

			obj.GetDeployment().GetScope().GetNamespace(),

			obj.GetDeployment().GetScope().GetLabel().GetKey(),

			obj.GetDeployment().GetScope().GetLabel().GetValue(),

			obj.GetImage().GetName(),

			pgutils.NilOrTime(obj.GetExpiration()),
		})

		// if we hit our batch size we need to push the data
		if (idx+1)%batchSize == 0 || idx == len(objs)-1 {
			// copy does not upsert so have to delete first.  parent deletion cascades so only need to
			// delete for the top level parent

			_, err = tx.CopyFrom(ctx, pgx.Identifier{"policy_exclusions"}, copyCols, pgx.CopyFromRows(inputRows))

			if err != nil {
				return err
			}

			// clear the input rows for the next batch
			inputRows = inputRows[:0]
		}
	}

	return err
}

func (s *storeImpl) copyFromPolicyScope(ctx context.Context, tx pgx.Tx, policyid string, objs ...*storage.Scope) error {

	inputRows := [][]interface{}{}

	var err error

	copyCols := []string{

		"policyid",

		"idx",

		"cluster",

		"namespace",

		"label_key",

		"label_value",
	}

	for idx, obj := range objs {
		// Todo: ROX-9499 Figure out how to more cleanly template around this issue.
		log.Debugf("This is here for now because there is an issue with pods_TerminatedInstances where the obj in the loop is not used as it only consists of the parent id and the idx.  Putting this here as a stop gap to simply use the object.  %s", obj)

		inputRows = append(inputRows, []interface{}{

			policyid,

			idx,

			obj.GetCluster(),

			obj.GetNamespace(),

			obj.GetLabel().GetKey(),

			obj.GetLabel().GetValue(),
		})

		// if we hit our batch size we need to push the data
		if (idx+1)%batchSize == 0 || idx == len(objs)-1 {
			// copy does not upsert so have to delete first.  parent deletion cascades so only need to
			// delete for the top level parent

			_, err = tx.CopyFrom(ctx, pgx.Identifier{"policy_scope"}, copyCols, pgx.CopyFromRows(inputRows))

			if err != nil {
				return err
			}

			// clear the input rows for the next batch
			inputRows = inputRows[:0]
		}
	}

	return err
}

func (s *storeImpl) copyFromPolicyPolicySections(ctx context.Context, tx pgx.Tx, policyid string, objs ...*storage.PolicySection) error {

	inputRows := [][]interface{}{}

	var err error

	copyCols := []string{

		"policyid",

		"idx",

		"sectionname",
	}

	for idx, obj := range objs {
		// Todo: ROX-9499 Figure out how to more cleanly template around this issue.
		log.Debugf("This is here for now because there is an issue with pods_TerminatedInstances where the obj in the loop is not used as it only consists of the parent id and the idx.  Putting this here as a stop gap to simply use the object.  %s", obj)

		inputRows = append(inputRows, []interface{}{

			policyid,

			idx,

			obj.GetSectionName(),
		})

		// if we hit our batch size we need to push the data
		if (idx+1)%batchSize == 0 || idx == len(objs)-1 {
			// copy does not upsert so have to delete first.  parent deletion cascades so only need to
			// delete for the top level parent

			_, err = tx.CopyFrom(ctx, pgx.Identifier{"policy_policysections"}, copyCols, pgx.CopyFromRows(inputRows))

			if err != nil {
				return err
			}

			// clear the input rows for the next batch
			inputRows = inputRows[:0]
		}
	}

	for idx, obj := range objs {

		if err = s.copyFromPolicyPolicySectionsPolicyGroups(ctx, tx, policyid, idx, obj.GetPolicyGroups()...); err != nil {
			return err
		}
	}

	return err
}

func (s *storeImpl) copyFromPolicyPolicySectionsPolicyGroups(ctx context.Context, tx pgx.Tx, policyid string, policysectionidx int, objs ...*storage.PolicyGroup) error {

	inputRows := [][]interface{}{}

	var err error

	copyCols := []string{

		"policyid",

		"policysectionidx",

		"idx",

		"fieldname",

		"booleanoperator",

		"negate",
	}

	for idx, obj := range objs {
		// Todo: ROX-9499 Figure out how to more cleanly template around this issue.
		log.Debugf("This is here for now because there is an issue with pods_TerminatedInstances where the obj in the loop is not used as it only consists of the parent id and the idx.  Putting this here as a stop gap to simply use the object.  %s", obj)

		inputRows = append(inputRows, []interface{}{

			policyid,

			policysectionidx,

			idx,

			obj.GetFieldName(),

			obj.GetBooleanOperator(),

			obj.GetNegate(),
		})

		// if we hit our batch size we need to push the data
		if (idx+1)%batchSize == 0 || idx == len(objs)-1 {
			// copy does not upsert so have to delete first.  parent deletion cascades so only need to
			// delete for the top level parent

			_, err = tx.CopyFrom(ctx, pgx.Identifier{"policy_policysections_policygroups"}, copyCols, pgx.CopyFromRows(inputRows))

			if err != nil {
				return err
			}

			// clear the input rows for the next batch
			inputRows = inputRows[:0]
		}
	}

	for idx, obj := range objs {

		if err = s.copyFromPolicyPolicySectionsPolicyGroupsValues(ctx, tx, policyid, policysectionidx, idx, obj.GetValues()...); err != nil {
			return err
		}
	}

	return err
}

func (s *storeImpl) copyFromPolicyPolicySectionsPolicyGroupsValues(ctx context.Context, tx pgx.Tx, policyid string, policysectionidx int, policygroupidx int, objs ...*storage.PolicyValue) error {

	inputRows := [][]interface{}{}

	var err error

	copyCols := []string{

		"policyid",

		"policysectionidx",

		"policygroupidx",

		"idx",

		"value",
	}

	for idx, obj := range objs {
		// Todo: ROX-9499 Figure out how to more cleanly template around this issue.
		log.Debugf("This is here for now because there is an issue with pods_TerminatedInstances where the obj in the loop is not used as it only consists of the parent id and the idx.  Putting this here as a stop gap to simply use the object.  %s", obj)

		inputRows = append(inputRows, []interface{}{

			policyid,

			policysectionidx,

			policygroupidx,

			idx,

			obj.GetValue(),
		})

		// if we hit our batch size we need to push the data
		if (idx+1)%batchSize == 0 || idx == len(objs)-1 {
			// copy does not upsert so have to delete first.  parent deletion cascades so only need to
			// delete for the top level parent

			_, err = tx.CopyFrom(ctx, pgx.Identifier{"policy_policysections_policygroups_values"}, copyCols, pgx.CopyFromRows(inputRows))

			if err != nil {
				return err
			}

			// clear the input rows for the next batch
			inputRows = inputRows[:0]
		}
	}

	return err
}

func (s *storeImpl) copyFromPolicyMitreAttackVectors(ctx context.Context, tx pgx.Tx, policyid string, objs ...*storage.Policy_MitreAttackVectors) error {

	inputRows := [][]interface{}{}

	var err error

	copyCols := []string{

		"policyid",

		"idx",

		"tactic",

		"techniques",
	}

	for idx, obj := range objs {
		// Todo: ROX-9499 Figure out how to more cleanly template around this issue.
		log.Debugf("This is here for now because there is an issue with pods_TerminatedInstances where the obj in the loop is not used as it only consists of the parent id and the idx.  Putting this here as a stop gap to simply use the object.  %s", obj)

		inputRows = append(inputRows, []interface{}{

			policyid,

			idx,

			obj.GetTactic(),

			obj.GetTechniques(),
		})

		// if we hit our batch size we need to push the data
		if (idx+1)%batchSize == 0 || idx == len(objs)-1 {
			// copy does not upsert so have to delete first.  parent deletion cascades so only need to
			// delete for the top level parent

			_, err = tx.CopyFrom(ctx, pgx.Identifier{"policy_mitreattackvectors"}, copyCols, pgx.CopyFromRows(inputRows))

			if err != nil {
				return err
			}

			// clear the input rows for the next batch
			inputRows = inputRows[:0]
		}
	}

	return err
}

// New returns a new Store instance using the provided sql instance.
func New(ctx context.Context, db *pgxpool.Pool) Store {
	createTablePolicy(ctx, db)

	return &storeImpl{
		db: db,
	}
}

func (s *storeImpl) copyFrom(ctx context.Context, objs ...*storage.Policy) error {
	conn, release := s.acquireConn(ctx, ops.Get, "Policy")
	defer release()

	tx, err := conn.Begin(ctx)
	if err != nil {
		return err
	}

	if err := s.copyFromPolicy(ctx, tx, objs...); err != nil {
		if err := tx.Rollback(ctx); err != nil {
			return err
		}
		return err
	}
	if err := tx.Commit(ctx); err != nil {
		return err
	}
	return nil
}

func (s *storeImpl) upsert(ctx context.Context, objs ...*storage.Policy) error {
	conn, release := s.acquireConn(ctx, ops.Get, "Policy")
	defer release()

	for _, obj := range objs {
		tx, err := conn.Begin(ctx)
		if err != nil {
			return err
		}

		if err := insertIntoPolicy(ctx, tx, obj); err != nil {
			if err := tx.Rollback(ctx); err != nil {
				return err
			}
			return err
		}
		if err := tx.Commit(ctx); err != nil {
			return err
		}
	}
	return nil
}

func (s *storeImpl) Upsert(ctx context.Context, obj *storage.Policy) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Upsert, "Policy")

	return s.upsert(ctx, obj)
}

func (s *storeImpl) UpsertMany(ctx context.Context, objs []*storage.Policy) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.UpdateMany, "Policy")

	if len(objs) < batchAfter {
		return s.upsert(ctx, objs...)
	} else {
		return s.copyFrom(ctx, objs...)
	}
}

// Count returns the number of objects in the store
func (s *storeImpl) Count(ctx context.Context) (int, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Count, "Policy")

	row := s.db.QueryRow(ctx, countStmt)
	var count int
	if err := row.Scan(&count); err != nil {
		return 0, err
	}
	return count, nil
}

// Exists returns if the id exists in the store
func (s *storeImpl) Exists(ctx context.Context, id string) (bool, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Exists, "Policy")

	row := s.db.QueryRow(ctx, existsStmt, id)
	var exists bool
	if err := row.Scan(&exists); err != nil {
		return false, pgutils.ErrNilIfNoRows(err)
	}
	return exists, nil
}

// Get returns the object, if it exists from the store
func (s *storeImpl) Get(ctx context.Context, id string) (*storage.Policy, bool, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Get, "Policy")

	conn, release := s.acquireConn(ctx, ops.Get, "Policy")
	defer release()

	row := conn.QueryRow(ctx, getStmt, id)
	var data []byte
	if err := row.Scan(&data); err != nil {
		return nil, false, pgutils.ErrNilIfNoRows(err)
	}

	var msg storage.Policy
	if err := proto.Unmarshal(data, &msg); err != nil {
		return nil, false, err
	}
	return &msg, true, nil
}

func (s *storeImpl) acquireConn(ctx context.Context, op ops.Op, typ string) (*pgxpool.Conn, func()) {
	defer metrics.SetAcquireDBConnDuration(time.Now(), op, typ)
	conn, err := s.db.Acquire(ctx)
	if err != nil {
		panic(err)
	}
	return conn, conn.Release
}

// Delete removes the specified ID from the store
func (s *storeImpl) Delete(ctx context.Context, id string) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Remove, "Policy")

	conn, release := s.acquireConn(ctx, ops.Remove, "Policy")
	defer release()

	if _, err := conn.Exec(ctx, deleteStmt, id); err != nil {
		return err
	}
	return nil
}

// GetIDs returns all the IDs for the store
func (s *storeImpl) GetIDs(ctx context.Context) ([]string, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.GetAll, "storage.PolicyIDs")

	rows, err := s.db.Query(ctx, getIDsStmt)
	if err != nil {
		return nil, pgutils.ErrNilIfNoRows(err)
	}
	defer rows.Close()
	var ids []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		ids = append(ids, id)
	}
	return ids, nil
}

// GetMany returns the objects specified by the IDs or the index in the missing indices slice
func (s *storeImpl) GetMany(ctx context.Context, ids []string) ([]*storage.Policy, []int, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.GetMany, "Policy")

	conn, release := s.acquireConn(ctx, ops.GetMany, "Policy")
	defer release()

	rows, err := conn.Query(ctx, getManyStmt, ids)
	if err != nil {
		if err == pgx.ErrNoRows {
			missingIndices := make([]int, 0, len(ids))
			for i := range ids {
				missingIndices = append(missingIndices, i)
			}
			return nil, missingIndices, nil
		}
		return nil, nil, err
	}
	defer rows.Close()
	resultsByID := make(map[string]*storage.Policy)
	for rows.Next() {
		var data []byte
		if err := rows.Scan(&data); err != nil {
			return nil, nil, err
		}
		msg := &storage.Policy{}
		if err := proto.Unmarshal(data, msg); err != nil {
			return nil, nil, err
		}
		resultsByID[msg.GetId()] = msg
	}
	missingIndices := make([]int, 0, len(ids)-len(resultsByID))
	// It is important that the elems are populated in the same order as the input ids
	// slice, since some calling code relies on that to maintain order.
	elems := make([]*storage.Policy, 0, len(resultsByID))
	for i, id := range ids {
		if result, ok := resultsByID[id]; !ok {
			missingIndices = append(missingIndices, i)
		} else {
			elems = append(elems, result)
		}
	}
	return elems, missingIndices, nil
}

// Delete removes the specified IDs from the store
func (s *storeImpl) DeleteMany(ctx context.Context, ids []string) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.RemoveMany, "Policy")

	conn, release := s.acquireConn(ctx, ops.RemoveMany, "Policy")
	defer release()
	if _, err := conn.Exec(ctx, deleteManyStmt, ids); err != nil {
		return err
	}
	return nil
}

// Walk iterates over all of the objects in the store and applies the closure
func (s *storeImpl) Walk(ctx context.Context, fn func(obj *storage.Policy) error) error {
	rows, err := s.db.Query(ctx, walkStmt)
	if err != nil {
		return pgutils.ErrNilIfNoRows(err)
	}
	defer rows.Close()
	for rows.Next() {
		var data []byte
		if err := rows.Scan(&data); err != nil {
			return err
		}
		var msg storage.Policy
		if err := proto.Unmarshal(data, &msg); err != nil {
			return err
		}
		if err := fn(&msg); err != nil {
			return err
		}
	}
	return nil
}

//// Used for testing

func dropTablePolicy(ctx context.Context, db *pgxpool.Pool) {
	_, _ = db.Exec(ctx, "DROP TABLE IF EXISTS policy CASCADE")
	dropTablePolicyWhitelists(ctx, db)
	dropTablePolicyExclusions(ctx, db)
	dropTablePolicyScope(ctx, db)
	dropTablePolicyPolicySections(ctx, db)
	dropTablePolicyMitreAttackVectors(ctx, db)

}

func dropTablePolicyWhitelists(ctx context.Context, db *pgxpool.Pool) {
	_, _ = db.Exec(ctx, "DROP TABLE IF EXISTS policy_Whitelists CASCADE")

}

func dropTablePolicyExclusions(ctx context.Context, db *pgxpool.Pool) {
	_, _ = db.Exec(ctx, "DROP TABLE IF EXISTS policy_Exclusions CASCADE")

}

func dropTablePolicyScope(ctx context.Context, db *pgxpool.Pool) {
	_, _ = db.Exec(ctx, "DROP TABLE IF EXISTS policy_Scope CASCADE")

}

func dropTablePolicyPolicySections(ctx context.Context, db *pgxpool.Pool) {
	_, _ = db.Exec(ctx, "DROP TABLE IF EXISTS policy_PolicySections CASCADE")
	dropTablePolicyPolicySectionsPolicyGroups(ctx, db)

}

func dropTablePolicyPolicySectionsPolicyGroups(ctx context.Context, db *pgxpool.Pool) {
	_, _ = db.Exec(ctx, "DROP TABLE IF EXISTS policy_PolicySections_PolicyGroups CASCADE")
	dropTablePolicyPolicySectionsPolicyGroupsValues(ctx, db)

}

func dropTablePolicyPolicySectionsPolicyGroupsValues(ctx context.Context, db *pgxpool.Pool) {
	_, _ = db.Exec(ctx, "DROP TABLE IF EXISTS policy_PolicySections_PolicyGroups_Values CASCADE")

}

func dropTablePolicyMitreAttackVectors(ctx context.Context, db *pgxpool.Pool) {
	_, _ = db.Exec(ctx, "DROP TABLE IF EXISTS policy_MitreAttackVectors CASCADE")

}

func Destroy(ctx context.Context, db *pgxpool.Pool) {
	dropTablePolicy(ctx, db)
}

//// Stubs for satisfying legacy interfaces

// AckKeysIndexed acknowledges the passed keys were indexed
func (s *storeImpl) AckKeysIndexed(ctx context.Context, keys ...string) error {
	return nil
}

// GetKeysToIndex returns the keys that need to be indexed
func (s *storeImpl) GetKeysToIndex(ctx context.Context) ([]string, error) {
	return nil, nil
}
