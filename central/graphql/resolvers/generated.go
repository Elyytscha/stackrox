// Code generated by graphql-generator. DO NOT EDIT.

package resolvers

import (
	"reflect"

	"github.com/graph-gophers/graphql-go"
	"github.com/stackrox/rox/central/graphql/generator"
	"github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage" // end range imports
	"github.com/stackrox/rox/pkg/utils"
)

func registerGeneratedTypes(builder generator.SchemaBuilder) {
	utils.Must(builder.AddType("Label", []string{"key: String!", "value: String!"}))
	utils.Must(builder.AddType("AWSProviderMetadata", []string{
		"accountId: String!",
	}))
	generator.RegisterProtoEnum(builder, reflect.TypeOf(storage.Access(0)))
	utils.Must(builder.AddType("Alert", []string{
		"deployment: Deployment",
		"enforcement: Alert_Enforcement",
		"firstOccurred: Time",
		"id: ID!",
		"lifecycleStage: LifecycleStage!",
		"policy: Policy",
		"processViolation: Alert_ProcessViolation",
		"snoozeTill: Time",
		"state: ViolationState!",
		"time: Time",
		"violations: [Alert_Violation]!",
	}))
	utils.Must(builder.AddType("Alert_Enforcement", []string{
		"action: EnforcementAction!",
		"message: String!",
	}))
	utils.Must(builder.AddType("Alert_ProcessViolation", []string{
		"message: String!",
		"processes: [ProcessIndicator]!",
	}))
	utils.Must(builder.AddType("Alert_Violation", []string{
		"link: String!",
		"message: String!",
	}))
	utils.Must(builder.AddType("AzureProviderMetadata", []string{
		"subscriptionId: String!",
	}))
	utils.Must(builder.AddType("CSCC", []string{
		"serviceAccount: String!",
		"sourceId: String!",
	}))
	utils.Must(builder.AddType("CVSSV2", []string{
		"accessComplexity: CVSSV2_AccessComplexity!",
		"attackVector: CVSSV2_AttackVector!",
		"authentication: CVSSV2_Authentication!",
		"availability: CVSSV2_Impact!",
		"confidentiality: CVSSV2_Impact!",
		"integrity: CVSSV2_Impact!",
		"vector: String!",
	}))
	generator.RegisterProtoEnum(builder, reflect.TypeOf(storage.CVSSV2_AccessComplexity(0)))
	generator.RegisterProtoEnum(builder, reflect.TypeOf(storage.CVSSV2_AttackVector(0)))
	generator.RegisterProtoEnum(builder, reflect.TypeOf(storage.CVSSV2_Authentication(0)))
	generator.RegisterProtoEnum(builder, reflect.TypeOf(storage.CVSSV2_Impact(0)))
	utils.Must(builder.AddType("Cert", []string{
		"algorithm: String!",
		"endDate: Time",
		"issuer: CertName",
		"sans: [String!]!",
		"startDate: Time",
		"subject: CertName",
	}))
	utils.Must(builder.AddType("CertName", []string{
		"commonName: String!",
		"country: String!",
		"locality: String!",
		"names: [String!]!",
		"organization: String!",
		"organizationUnit: String!",
		"postalCode: String!",
		"province: String!",
		"streetAddress: String!",
	}))
	utils.Must(builder.AddType("Cluster", []string{
		"admissionController: Boolean!",
		"centralApiEndpoint: String!",
		"collectionMethod: CollectionMethod!",
		"collectorImage: String!",
		"id: ID!",
		"mainImage: String!",
		"monitoringEndpoint: String!",
		"name: String!",
		"runtimeSupport: Boolean!",
		"status: ClusterStatus",
		"type: ClusterType!",
	}))
	utils.Must(builder.AddType("ClusterStatus", []string{
		"lastContact: Time",
		"orchestratorMetadata: OrchestratorMetadata",
		"providerMetadata: ProviderMetadata",
		"sensorVersion: String!",
	}))
	generator.RegisterProtoEnum(builder, reflect.TypeOf(storage.ClusterType(0)))
	generator.RegisterProtoEnum(builder, reflect.TypeOf(storage.CollectionMethod(0)))
	generator.RegisterProtoEnum(builder, reflect.TypeOf(storage.Comparator(0)))
	utils.Must(builder.AddType("ComplianceAggregation_AggregationKey", []string{
		"id: ID!",
		"scope: ComplianceAggregation_Scope!",
	}))
	utils.Must(builder.AddType("ComplianceAggregation_Response", []string{
		"results: [ComplianceAggregation_Result]!",
		"sources: [ComplianceAggregation_Source]!",
	}))
	utils.Must(builder.AddType("ComplianceAggregation_Result", []string{
		"aggregationKeys: [ComplianceAggregation_AggregationKey]!",
		"numFailing: Int!",
		"numPassing: Int!",
		"unit: ComplianceAggregation_Scope!",
	}))
	generator.RegisterProtoEnum(builder, reflect.TypeOf(v1.ComplianceAggregation_Scope(0)))
	utils.Must(builder.AddType("ComplianceAggregation_Source", []string{
		"clusterId: String!",
		"failedRuns: [ComplianceRunMetadata]!",
		"standardId: String!",
		"successfulRun: ComplianceRunMetadata",
	}))
	utils.Must(builder.AddType("ComplianceControl", []string{
		"description: String!",
		"groupId: String!",
		"id: ID!",
		"implemented: Boolean!",
		"interpretationText: String!",
		"name: String!",
		"standardId: String!",
	}))
	utils.Must(builder.AddType("ComplianceControlGroup", []string{
		"description: String!",
		"id: ID!",
		"name: String!",
		"numImplementedChecks: Int!",
		"standardId: String!",
	}))
	utils.Must(builder.AddType("ComplianceControlResult", []string{
		"controlId: String!",
		"resource: ComplianceResource",
		"value: ComplianceResultValue",
	}))
	utils.Must(builder.AddType("ComplianceResource", []string{
		"resource: ComplianceResourceResource",
	}))
	utils.Must(builder.AddUnionType("ComplianceResourceResource", []string{
		"ComplianceResource_ClusterName",
		"ComplianceResource_DeploymentName",
		"ComplianceResource_NodeName",
		"ImageName",
	}))
	utils.Must(builder.AddType("ComplianceResource_ClusterName", []string{
		"id: ID!",
		"name: String!",
	}))
	utils.Must(builder.AddType("ComplianceResource_DeploymentName", []string{
		"cluster: ComplianceResource_ClusterName",
		"id: ID!",
		"name: String!",
		"namespace: String!",
	}))
	utils.Must(builder.AddType("ComplianceResource_NodeName", []string{
		"cluster: ComplianceResource_ClusterName",
		"id: ID!",
		"name: String!",
	}))
	utils.Must(builder.AddType("ComplianceResultValue", []string{
		"evidence: [ComplianceResultValue_Evidence]!",
		"overallState: ComplianceState!",
	}))
	utils.Must(builder.AddType("ComplianceResultValue_Evidence", []string{
		"message: String!",
		"messageId: Int!",
		"state: ComplianceState!",
	}))
	utils.Must(builder.AddType("ComplianceRun", []string{
		"clusterId: String!",
		"errorMessage: String!",
		"finishTime: Time",
		"id: ID!",
		"scheduleId: String!",
		"standardId: String!",
		"startTime: Time",
		"state: ComplianceRun_State!",
	}))
	utils.Must(builder.AddType("ComplianceRunMetadata", []string{
		"clusterId: String!",
		"errorMessage: String!",
		"finishTimestamp: Time",
		"runId: String!",
		"standardId: String!",
		"startTimestamp: Time",
		"success: Boolean!",
	}))
	utils.Must(builder.AddType("ComplianceRunSchedule", []string{
		"clusterId: String!",
		"crontabSpec: String!",
		"id: ID!",
		"standardId: String!",
		"suspended: Boolean!",
	}))
	utils.Must(builder.AddType("ComplianceRunScheduleInfo", []string{
		"lastCompletedRun: ComplianceRun",
		"lastRun: ComplianceRun",
		"nextRunTime: Time",
		"schedule: ComplianceRunSchedule",
	}))
	generator.RegisterProtoEnum(builder, reflect.TypeOf(v1.ComplianceRun_State(0)))
	utils.Must(builder.AddType("ComplianceStandard", []string{
		"controls: [ComplianceControl]!",
		"groups: [ComplianceControlGroup]!",
		"metadata: ComplianceStandardMetadata",
	}))
	utils.Must(builder.AddType("ComplianceStandardMetadata", []string{
		"description: String!",
		"id: ID!",
		"name: String!",
		"numImplementedChecks: Int!",
	}))
	generator.RegisterProtoEnum(builder, reflect.TypeOf(storage.ComplianceState(0)))
	utils.Must(builder.AddType("Component", []string{
		"name: String!",
		"version: String!",
	}))
	utils.Must(builder.AddType("Container", []string{
		"config: ContainerConfig",
		"id: ID!",
		"image: Image",
		"instances: [ContainerInstance]!",
		"name: String!",
		"ports: [PortConfig]!",
		"resources: Resources",
		"secrets: [EmbeddedSecret]!",
		"securityContext: SecurityContext",
		"volumes: [Volume]!",
	}))
	utils.Must(builder.AddType("ContainerConfig", []string{
		"args: [String!]!",
		"command: [String!]!",
		"directory: String!",
		"env: [ContainerConfig_EnvironmentConfig]!",
		"uid: Int!",
		"user: String!",
	}))
	utils.Must(builder.AddType("ContainerConfig_EnvironmentConfig", []string{
		"key: String!",
		"value: String!",
	}))
	utils.Must(builder.AddType("ContainerInstance", []string{
		"containerIps: [String!]!",
		"containingPodId: String!",
		"instanceId: ContainerInstanceID",
	}))
	utils.Must(builder.AddType("ContainerInstanceID", []string{
		"containerRuntime: ContainerRuntime!",
		"id: ID!",
		"node: String!",
	}))
	generator.RegisterProtoEnum(builder, reflect.TypeOf(storage.ContainerRuntime(0)))
	utils.Must(builder.AddType("Deployment", []string{
		"annotations: [Label!]!",
		"clusterId: String!",
		"clusterName: String!",
		"containers: [Container]!",
		"hostNetwork: Boolean!",
		"id: ID!",
		"imagePullSecrets: [String!]!",
		"inactive: Boolean!",
		"labelSelector: LabelSelector",
		"labels: [Label!]!",
		"name: String!",
		"namespace: String!",
		"namespaceId: String!",
		"podLabels: [Label!]!",
		"ports: [PortConfig]!",
		"priority: Int!",
		"replicas: Int!",
		"risk: Risk",
		"serviceAccount: String!",
		"tolerations: [Toleration]!",
		"type: String!",
		"updatedAt: Time",
		"version: String!",
	}))
	utils.Must(builder.AddType("DockerfileLineRuleField", []string{
		"instruction: String!",
		"value: String!",
	}))
	utils.Must(builder.AddType("Email", []string{
		"disableTLS: Boolean!",
		"from: String!",
		"password: String!",
		"sender: String!",
		"server: String!",
		"useSTARTTLS: Boolean!",
		"username: String!",
	}))
	utils.Must(builder.AddType("EmbeddedSecret", []string{
		"name: String!",
		"path: String!",
	}))
	generator.RegisterProtoEnum(builder, reflect.TypeOf(storage.EnforcementAction(0)))
	utils.Must(builder.AddType("GenerateTokenResponse", []string{
		"metadata: TokenMetadata",
		"token: String!",
	}))
	utils.Must(builder.AddType("Generic", []string{
		"caCert: String!",
		"endpoint: String!",
		"extraFields: [KeyValuePair]!",
		"headers: [KeyValuePair]!",
		"password: String!",
		"skipTLSVerify: Boolean!",
		"username: String!",
	}))
	utils.Must(builder.AddType("GetComplianceRunStatusesResponse", []string{
		"invalidRunIds: [String!]!",
		"runs: [ComplianceRun]!",
	}))
	utils.Must(builder.AddType("GoogleProviderMetadata", []string{
		"clusterName: String!",
		"project: String!",
	}))
	utils.Must(builder.AddType("Group", []string{
		"props: GroupProperties",
		"roleName: String!",
	}))
	utils.Must(builder.AddType("GroupProperties", []string{
		"authProviderId: String!",
		"key: String!",
		"value: String!",
	}))
	utils.Must(builder.AddType("Image", []string{
		"id: ID!",
		"metadata: ImageMetadata",
		"name: ImageName",
		"scan: ImageScan",
	}))
	utils.Must(builder.AddType("ImageLayer", []string{
		"author: String!",
		"components: [ImageScanComponent]!",
		"created: Time",
		"empty: Boolean!",
		"instruction: String!",
		"value: String!",
	}))
	utils.Must(builder.AddType("ImageMetadata", []string{
		"layerShas: [String!]!",
		"v1: V1Metadata",
		"v2: V2Metadata",
	}))
	utils.Must(builder.AddType("ImageName", []string{
		"fullName: String!",
		"registry: String!",
		"remote: String!",
		"tag: String!",
	}))
	utils.Must(builder.AddType("ImageNamePolicy", []string{
		"registry: String!",
		"remote: String!",
		"tag: String!",
	}))
	utils.Must(builder.AddType("ImageScan", []string{
		"components: [ImageScanComponent]!",
		"scanTime: Time",
	}))
	utils.Must(builder.AddType("ImageScanComponent", []string{
		"license: License",
		"name: String!",
		"version: String!",
		"vulns: [Vulnerability]!",
	}))
	utils.Must(builder.AddType("Jira", []string{
		"issueType: String!",
		"password: String!",
		"url: String!",
		"username: String!",
	}))
	utils.Must(builder.AddType("KeyValuePair", []string{
		"key: String!",
		"value: String!",
	}))
	utils.Must(builder.AddType("KeyValuePolicy", []string{
		"key: String!",
		"value: String!",
	}))
	generator.RegisterProtoEnum(builder, reflect.TypeOf(storage.L4Protocol(0)))
	utils.Must(builder.AddType("LabelSelector", []string{
		"matchLabels: [Label!]!",
		"requirements: [LabelSelector_Requirement]!",
	}))
	generator.RegisterProtoEnum(builder, reflect.TypeOf(storage.LabelSelector_Operator(0)))
	utils.Must(builder.AddType("LabelSelector_Requirement", []string{
		"key: String!",
		"op: LabelSelector_Operator!",
		"values: [String!]!",
	}))
	utils.Must(builder.AddType("License", []string{
		"name: String!",
		"type: String!",
		"url: String!",
	}))
	generator.RegisterProtoEnum(builder, reflect.TypeOf(storage.LifecycleStage(0)))
	utils.Must(builder.AddType("Metadata", []string{
		"buildFlavor: String!",
		"releaseBuild: Boolean!",
		"version: String!",
	}))
	utils.Must(builder.AddType("Namespace", []string{
		"metadata: NamespaceMetadata",
		"numDeployments: Int!",
		"numNetworkPolicies: Int!",
		"numSecrets: Int!",
	}))
	utils.Must(builder.AddType("NamespaceMetadata", []string{
		"clusterId: String!",
		"clusterName: String!",
		"creationTime: Time",
		"id: ID!",
		"labels: [Label!]!",
		"name: String!",
	}))
	utils.Must(builder.AddType("NetworkEntityInfo", []string{
		"id: ID!",
		"type: NetworkEntityInfo_Type!",
		"desc: NetworkEntityInfoDesc",
	}))
	utils.Must(builder.AddUnionType("NetworkEntityInfoDesc", []string{
		"NetworkEntityInfo_Deployment",
	}))
	utils.Must(builder.AddType("NetworkEntityInfo_Deployment", []string{
		"cluster: String!",
		"name: String!",
		"namespace: String!",
	}))
	generator.RegisterProtoEnum(builder, reflect.TypeOf(storage.NetworkEntityInfo_Type(0)))
	utils.Must(builder.AddType("NetworkFlow", []string{
		"lastSeenTimestamp: Time",
		"props: NetworkFlowProperties",
	}))
	utils.Must(builder.AddType("NetworkFlowProperties", []string{
		"dstEntity: NetworkEntityInfo",
		"dstPort: Int!",
		"l4Protocol: L4Protocol!",
		"srcEntity: NetworkEntityInfo",
	}))
	utils.Must(builder.AddType("Node", []string{
		"annotations: [Label!]!",
		"clusterId: String!",
		"clusterName: String!",
		"containerRuntimeVersion: String!",
		"externalIpAddresses: [String!]!",
		"id: ID!",
		"internalIpAddresses: [String!]!",
		"joinedAt: Time",
		"kernelVersion: String!",
		"labels: [Label!]!",
		"name: String!",
		"osImage: String!",
		"taints: [Taint]!",
	}))
	utils.Must(builder.AddType("Notifier", []string{
		"enabled: Boolean!",
		"id: ID!",
		"labelDefault: String!",
		"labelKey: String!",
		"name: String!",
		"type: String!",
		"uiEndpoint: String!",
		"config: NotifierConfig",
	}))
	utils.Must(builder.AddUnionType("NotifierConfig", []string{
		"Jira",
		"Email",
		"CSCC",
		"Splunk",
		"PagerDuty",
		"Generic",
	}))
	utils.Must(builder.AddType("NumericalPolicy", []string{
		"op: Comparator!",
		"value: Float!",
	}))
	utils.Must(builder.AddType("OrchestratorMetadata", []string{
		"buildDate: Time",
		"version: String!",
	}))
	utils.Must(builder.AddType("PagerDuty", []string{
		"apiKey: String!",
	}))
	utils.Must(builder.AddType("Policy", []string{
		"categories: [String!]!",
		"description: String!",
		"disabled: Boolean!",
		"enforcementActions: [EnforcementAction!]!",
		"fields: PolicyFields",
		"id: ID!",
		"lifecycleStages: [LifecycleStage!]!",
		"name: String!",
		"notifiers: [String!]!",
		"rationale: String!",
		"remediation: String!",
		"scope: [Scope]!",
		"severity: Severity!",
		"whitelists: [Whitelist]!",
	}))
	utils.Must(builder.AddType("PolicyFields", []string{
		"addCapabilities: [String!]!",
		"args: String!",
		"command: String!",
		"component: Component",
		"containerResourcePolicy: ResourcePolicy",
		"cve: String!",
		"cvss: NumericalPolicy",
		"directory: String!",
		"disallowedAnnotation: KeyValuePolicy",
		"dropCapabilities: [String!]!",
		"env: KeyValuePolicy",
		"fixedBy: String!",
		"imageName: ImageNamePolicy",
		"lineRule: DockerfileLineRuleField",
		"portPolicy: PortPolicy",
		"processPolicy: ProcessPolicy",
		"requiredAnnotation: KeyValuePolicy",
		"requiredLabel: KeyValuePolicy",
		"user: String!",
		"volumePolicy: VolumePolicy",
	}))
	utils.Must(builder.AddType("PortConfig", []string{
		"containerPort: Int!",
		"exposedPort: Int!",
		"exposure: PortConfig_ExposureLevel!",
		"exposureInfos: [PortConfig_ExposureInfo]!",
		"name: String!",
		"protocol: String!",
	}))
	utils.Must(builder.AddType("PortConfig_ExposureInfo", []string{
		"externalHostnames: [String!]!",
		"externalIps: [String!]!",
		"level: PortConfig_ExposureLevel!",
		"nodePort: Int!",
		"serviceClusterIp: String!",
		"serviceId: String!",
		"serviceName: String!",
		"servicePort: Int!",
	}))
	generator.RegisterProtoEnum(builder, reflect.TypeOf(storage.PortConfig_ExposureLevel(0)))
	utils.Must(builder.AddType("PortPolicy", []string{
		"port: Int!",
		"protocol: String!",
	}))
	utils.Must(builder.AddType("ProcessGroup", []string{
		"args: String!",
		"signals: [ProcessIndicator]!",
	}))
	utils.Must(builder.AddType("ProcessIndicator", []string{
		"containerName: String!",
		"deploymentId: String!",
		"emitTimestamp: Time",
		"id: ID!",
		"podId: String!",
		"signal: ProcessSignal",
	}))
	utils.Must(builder.AddType("ProcessNameGroup", []string{
		"groups: [ProcessGroup]!",
		"name: String!",
		"timesExecuted: Int!",
	}))
	utils.Must(builder.AddType("ProcessPolicy", []string{
		"ancestor: String!",
		"args: String!",
		"name: String!",
		"uid: String!",
	}))
	utils.Must(builder.AddType("ProcessSignal", []string{
		"args: String!",
		"containerId: String!",
		"execFilePath: String!",
		"gid: Int!",
		"id: ID!",
		"lineage: [String!]!",
		"name: String!",
		"pid: Int!",
		"time: Time",
		"uid: Int!",
	}))
	utils.Must(builder.AddType("ProviderMetadata", []string{
		"region: String!",
		"zone: String!",
		"provider: ProviderMetadataProvider",
	}))
	utils.Must(builder.AddUnionType("ProviderMetadataProvider", []string{
		"GoogleProviderMetadata",
		"AWSProviderMetadata",
		"AzureProviderMetadata",
	}))
	utils.Must(builder.AddType("ResourcePolicy", []string{
		"cpuResourceLimit: NumericalPolicy",
		"cpuResourceRequest: NumericalPolicy",
		"memoryResourceLimit: NumericalPolicy",
		"memoryResourceRequest: NumericalPolicy",
	}))
	utils.Must(builder.AddType("Resources", []string{
		"cpuCoresLimit: Float!",
		"cpuCoresRequest: Float!",
		"memoryMbLimit: Float!",
		"memoryMbRequest: Float!",
	}))
	utils.Must(builder.AddType("Risk", []string{
		"results: [Risk_Result]!",
		"score: Float!",
	}))
	utils.Must(builder.AddType("Risk_Result", []string{
		"factors: [Risk_Result_Factor]!",
		"name: String!",
		"score: Float!",
	}))
	utils.Must(builder.AddType("Risk_Result_Factor", []string{
		"message: String!",
		"url: String!",
	}))
	utils.Must(builder.AddType("Role", []string{
		"globalAccess: Access!",
		"name: String!",
	}))
	utils.Must(builder.AddType("Scope", []string{
		"cluster: String!",
		"label: Scope_Label",
		"namespace: String!",
	}))
	utils.Must(builder.AddType("Scope_Label", []string{
		"key: String!",
		"value: String!",
	}))
	generator.RegisterProtoEnum(builder, reflect.TypeOf(v1.SearchCategory(0)))
	utils.Must(builder.AddType("SearchResult", []string{
		"category: SearchCategory!",
		"id: ID!",
		"location: String!",
		"name: String!",
		"score: Float!",
	}))
	utils.Must(builder.AddType("Secret", []string{
		"annotations: [Label!]!",
		"clusterId: String!",
		"clusterName: String!",
		"createdAt: Time",
		"files: [SecretDataFile]!",
		"id: ID!",
		"labels: [Label!]!",
		"name: String!",
		"namespace: String!",
		"relationship: SecretRelationship",
		"type: String!",
	}))
	utils.Must(builder.AddType("SecretContainerRelationship", []string{
		"id: ID!",
		"path: String!",
	}))
	utils.Must(builder.AddType("SecretDataFile", []string{
		"name: String!",
		"type: SecretType!",
		"metadata: SecretDataFileMetadata",
	}))
	utils.Must(builder.AddUnionType("SecretDataFileMetadata", []string{
		"Cert",
	}))
	utils.Must(builder.AddType("SecretDeploymentRelationship", []string{
		"id: ID!",
		"name: String!",
	}))
	utils.Must(builder.AddType("SecretRelationship", []string{
		"containerRelationships: [SecretContainerRelationship]!",
		"deploymentRelationships: [SecretDeploymentRelationship]!",
		"id: ID!",
	}))
	generator.RegisterProtoEnum(builder, reflect.TypeOf(storage.SecretType(0)))
	utils.Must(builder.AddType("SecurityContext", []string{
		"addCapabilities: [String!]!",
		"dropCapabilities: [String!]!",
		"privileged: Boolean!",
		"readOnlyRootFilesystem: Boolean!",
		"selinux: SecurityContext_SELinux",
	}))
	utils.Must(builder.AddType("SecurityContext_SELinux", []string{
		"level: String!",
		"role: String!",
		"type: String!",
		"user: String!",
	}))
	generator.RegisterProtoEnum(builder, reflect.TypeOf(storage.Severity(0)))
	utils.Must(builder.AddType("Splunk", []string{
		"httpEndpoint: String!",
		"httpToken: String!",
		"insecure: Boolean!",
		"truncate: Int!",
	}))
	utils.Must(builder.AddType("Taint", []string{
		"key: String!",
		"taintEffect: TaintEffect!",
		"value: String!",
	}))
	generator.RegisterProtoEnum(builder, reflect.TypeOf(storage.TaintEffect(0)))
	utils.Must(builder.AddType("TokenMetadata", []string{
		"expiration: Time",
		"id: ID!",
		"issuedAt: Time",
		"name: String!",
		"revoked: Boolean!",
		"role: String!",
	}))
	utils.Must(builder.AddType("Toleration", []string{
		"key: String!",
		"operator: Toleration_Operator!",
		"taintEffect: TaintEffect!",
		"value: String!",
	}))
	generator.RegisterProtoEnum(builder, reflect.TypeOf(storage.Toleration_Operator(0)))
	utils.Must(builder.AddType("V1Metadata", []string{
		"author: String!",
		"command: [String!]!",
		"created: Time",
		"digest: String!",
		"entrypoint: [String!]!",
		"layers: [ImageLayer]!",
		"user: String!",
		"volumes: [String!]!",
	}))
	utils.Must(builder.AddType("V2Metadata", []string{
		"digest: String!",
	}))
	generator.RegisterProtoEnum(builder, reflect.TypeOf(storage.ViolationState(0)))
	utils.Must(builder.AddType("Volume", []string{
		"destination: String!",
		"name: String!",
		"readOnly: Boolean!",
		"source: String!",
		"type: String!",
	}))
	utils.Must(builder.AddType("VolumePolicy", []string{
		"destination: String!",
		"name: String!",
		"source: String!",
		"type: String!",
	}))
	utils.Must(builder.AddType("Vulnerability", []string{
		"cve: String!",
		"cvss: Float!",
		"cvssV2: CVSSV2",
		"link: String!",
		"summary: String!",
	}))
	utils.Must(builder.AddType("Whitelist", []string{
		"container: Whitelist_Container",
		"deployment: Whitelist_Deployment",
		"expiration: Time",
		"image: Whitelist_Image",
		"name: String!",
	}))
	utils.Must(builder.AddType("Whitelist_Container", []string{
		"imageName: ImageName",
	}))
	utils.Must(builder.AddType("Whitelist_Deployment", []string{
		"name: String!",
		"scope: Scope",
	}))
	utils.Must(builder.AddType("Whitelist_Image", []string{
		"name: String!",
	}))
}

type aWSProviderMetadataResolver struct {
	root *Resolver
	data *storage.AWSProviderMetadata
}

func (resolver *Resolver) wrapAWSProviderMetadata(value *storage.AWSProviderMetadata, ok bool, err error) (*aWSProviderMetadataResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &aWSProviderMetadataResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapAWSProviderMetadatas(values []*storage.AWSProviderMetadata, err error) ([]*aWSProviderMetadataResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*aWSProviderMetadataResolver, len(values))
	for i, v := range values {
		output[i] = &aWSProviderMetadataResolver{resolver, v}
	}
	return output, nil
}

func (resolver *aWSProviderMetadataResolver) AccountId() string {
	value := resolver.data.GetAccountId()
	return value
}

func toAccess(value *string) storage.Access {
	if value != nil {
		return storage.Access(storage.Access_value[*value])
	}
	return storage.Access(0)
}

func toAccesses(values *[]string) []storage.Access {
	if values == nil {
		return nil
	}
	output := make([]storage.Access, len(*values))
	for i, v := range *values {
		output[i] = toAccess(&v)
	}
	return output
}

type alertResolver struct {
	root *Resolver
	data *storage.Alert
	list *storage.ListAlert
}

func (resolver *Resolver) wrapAlert(value *storage.Alert, ok bool, err error) (*alertResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &alertResolver{resolver, value, nil}, nil
}

func (resolver *Resolver) wrapAlerts(values []*storage.Alert, err error) ([]*alertResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*alertResolver, len(values))
	for i, v := range values {
		output[i] = &alertResolver{resolver, v, nil}
	}
	return output, nil
}

func (resolver *Resolver) wrapListAlerts(values []*storage.ListAlert, err error) ([]*alertResolver, error) {
	if err != nil || values == nil {
		return nil, err
	}
	output := make([]*alertResolver, len(values))
	for i, v := range values {
		output[i] = &alertResolver{resolver, nil, v}
	}
	return output, nil
}

func (resolver *alertResolver) ensureData() {
	if resolver.data == nil {
		resolver.data = resolver.root.getAlert(resolver.list.GetId())
	}
}

func (resolver *alertResolver) Deployment() (*deploymentResolver, error) {
	resolver.ensureData()
	value := resolver.data.GetDeployment()
	return resolver.root.wrapDeployment(value, true, nil)
}

func (resolver *alertResolver) Enforcement() (*alert_EnforcementResolver, error) {
	resolver.ensureData()
	value := resolver.data.GetEnforcement()
	return resolver.root.wrapAlert_Enforcement(value, true, nil)
}

func (resolver *alertResolver) FirstOccurred() (*graphql.Time, error) {
	resolver.ensureData()
	value := resolver.data.GetFirstOccurred()
	return timestamp(value)
}

func (resolver *alertResolver) Id() graphql.ID {
	value := resolver.data.GetId()
	if resolver.data == nil {
		value = resolver.list.GetId()
	}
	return graphql.ID(value)
}

func (resolver *alertResolver) LifecycleStage() string {
	value := resolver.data.GetLifecycleStage()
	if resolver.data == nil {
		value = resolver.list.GetLifecycleStage()
	}
	return value.String()
}

func (resolver *alertResolver) Policy() (*policyResolver, error) {
	resolver.ensureData()
	value := resolver.data.GetPolicy()
	return resolver.root.wrapPolicy(value, true, nil)
}

func (resolver *alertResolver) ProcessViolation() (*alert_ProcessViolationResolver, error) {
	resolver.ensureData()
	value := resolver.data.GetProcessViolation()
	return resolver.root.wrapAlert_ProcessViolation(value, true, nil)
}

func (resolver *alertResolver) SnoozeTill() (*graphql.Time, error) {
	resolver.ensureData()
	value := resolver.data.GetSnoozeTill()
	return timestamp(value)
}

func (resolver *alertResolver) State() string {
	value := resolver.data.GetState()
	if resolver.data == nil {
		value = resolver.list.GetState()
	}
	return value.String()
}

func (resolver *alertResolver) Time() (*graphql.Time, error) {
	value := resolver.data.GetTime()
	if resolver.data == nil {
		value = resolver.list.GetTime()
	}
	return timestamp(value)
}

func (resolver *alertResolver) Violations() ([]*alert_ViolationResolver, error) {
	resolver.ensureData()
	value := resolver.data.GetViolations()
	return resolver.root.wrapAlert_Violations(value, nil)
}

type alert_EnforcementResolver struct {
	root *Resolver
	data *storage.Alert_Enforcement
}

func (resolver *Resolver) wrapAlert_Enforcement(value *storage.Alert_Enforcement, ok bool, err error) (*alert_EnforcementResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &alert_EnforcementResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapAlert_Enforcements(values []*storage.Alert_Enforcement, err error) ([]*alert_EnforcementResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*alert_EnforcementResolver, len(values))
	for i, v := range values {
		output[i] = &alert_EnforcementResolver{resolver, v}
	}
	return output, nil
}

func (resolver *alert_EnforcementResolver) Action() string {
	value := resolver.data.GetAction()
	return value.String()
}

func (resolver *alert_EnforcementResolver) Message() string {
	value := resolver.data.GetMessage()
	return value
}

type alert_ProcessViolationResolver struct {
	root *Resolver
	data *storage.Alert_ProcessViolation
}

func (resolver *Resolver) wrapAlert_ProcessViolation(value *storage.Alert_ProcessViolation, ok bool, err error) (*alert_ProcessViolationResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &alert_ProcessViolationResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapAlert_ProcessViolations(values []*storage.Alert_ProcessViolation, err error) ([]*alert_ProcessViolationResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*alert_ProcessViolationResolver, len(values))
	for i, v := range values {
		output[i] = &alert_ProcessViolationResolver{resolver, v}
	}
	return output, nil
}

func (resolver *alert_ProcessViolationResolver) Message() string {
	value := resolver.data.GetMessage()
	return value
}

func (resolver *alert_ProcessViolationResolver) Processes() ([]*processIndicatorResolver, error) {
	value := resolver.data.GetProcesses()
	return resolver.root.wrapProcessIndicators(value, nil)
}

type alert_ViolationResolver struct {
	root *Resolver
	data *storage.Alert_Violation
}

func (resolver *Resolver) wrapAlert_Violation(value *storage.Alert_Violation, ok bool, err error) (*alert_ViolationResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &alert_ViolationResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapAlert_Violations(values []*storage.Alert_Violation, err error) ([]*alert_ViolationResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*alert_ViolationResolver, len(values))
	for i, v := range values {
		output[i] = &alert_ViolationResolver{resolver, v}
	}
	return output, nil
}

func (resolver *alert_ViolationResolver) Link() string {
	value := resolver.data.GetLink()
	return value
}

func (resolver *alert_ViolationResolver) Message() string {
	value := resolver.data.GetMessage()
	return value
}

type azureProviderMetadataResolver struct {
	root *Resolver
	data *storage.AzureProviderMetadata
}

func (resolver *Resolver) wrapAzureProviderMetadata(value *storage.AzureProviderMetadata, ok bool, err error) (*azureProviderMetadataResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &azureProviderMetadataResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapAzureProviderMetadatas(values []*storage.AzureProviderMetadata, err error) ([]*azureProviderMetadataResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*azureProviderMetadataResolver, len(values))
	for i, v := range values {
		output[i] = &azureProviderMetadataResolver{resolver, v}
	}
	return output, nil
}

func (resolver *azureProviderMetadataResolver) SubscriptionId() string {
	value := resolver.data.GetSubscriptionId()
	return value
}

type cSCCResolver struct {
	root *Resolver
	data *storage.CSCC
}

func (resolver *Resolver) wrapCSCC(value *storage.CSCC, ok bool, err error) (*cSCCResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &cSCCResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapCSCCs(values []*storage.CSCC, err error) ([]*cSCCResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*cSCCResolver, len(values))
	for i, v := range values {
		output[i] = &cSCCResolver{resolver, v}
	}
	return output, nil
}

func (resolver *cSCCResolver) ServiceAccount() string {
	value := resolver.data.GetServiceAccount()
	return value
}

func (resolver *cSCCResolver) SourceId() string {
	value := resolver.data.GetSourceId()
	return value
}

type cVSSV2Resolver struct {
	root *Resolver
	data *storage.CVSSV2
}

func (resolver *Resolver) wrapCVSSV2(value *storage.CVSSV2, ok bool, err error) (*cVSSV2Resolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &cVSSV2Resolver{resolver, value}, nil
}

func (resolver *Resolver) wrapCVSSV2s(values []*storage.CVSSV2, err error) ([]*cVSSV2Resolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*cVSSV2Resolver, len(values))
	for i, v := range values {
		output[i] = &cVSSV2Resolver{resolver, v}
	}
	return output, nil
}

func (resolver *cVSSV2Resolver) AccessComplexity() string {
	value := resolver.data.GetAccessComplexity()
	return value.String()
}

func (resolver *cVSSV2Resolver) AttackVector() string {
	value := resolver.data.GetAttackVector()
	return value.String()
}

func (resolver *cVSSV2Resolver) Authentication() string {
	value := resolver.data.GetAuthentication()
	return value.String()
}

func (resolver *cVSSV2Resolver) Availability() string {
	value := resolver.data.GetAvailability()
	return value.String()
}

func (resolver *cVSSV2Resolver) Confidentiality() string {
	value := resolver.data.GetConfidentiality()
	return value.String()
}

func (resolver *cVSSV2Resolver) Integrity() string {
	value := resolver.data.GetIntegrity()
	return value.String()
}

func (resolver *cVSSV2Resolver) Vector() string {
	value := resolver.data.GetVector()
	return value
}

func toCVSSV2_AccessComplexity(value *string) storage.CVSSV2_AccessComplexity {
	if value != nil {
		return storage.CVSSV2_AccessComplexity(storage.CVSSV2_AccessComplexity_value[*value])
	}
	return storage.CVSSV2_AccessComplexity(0)
}

func toCVSSV2_AccessComplexities(values *[]string) []storage.CVSSV2_AccessComplexity {
	if values == nil {
		return nil
	}
	output := make([]storage.CVSSV2_AccessComplexity, len(*values))
	for i, v := range *values {
		output[i] = toCVSSV2_AccessComplexity(&v)
	}
	return output
}

func toCVSSV2_AttackVector(value *string) storage.CVSSV2_AttackVector {
	if value != nil {
		return storage.CVSSV2_AttackVector(storage.CVSSV2_AttackVector_value[*value])
	}
	return storage.CVSSV2_AttackVector(0)
}

func toCVSSV2_AttackVectors(values *[]string) []storage.CVSSV2_AttackVector {
	if values == nil {
		return nil
	}
	output := make([]storage.CVSSV2_AttackVector, len(*values))
	for i, v := range *values {
		output[i] = toCVSSV2_AttackVector(&v)
	}
	return output
}

func toCVSSV2_Authentication(value *string) storage.CVSSV2_Authentication {
	if value != nil {
		return storage.CVSSV2_Authentication(storage.CVSSV2_Authentication_value[*value])
	}
	return storage.CVSSV2_Authentication(0)
}

func toCVSSV2_Authentications(values *[]string) []storage.CVSSV2_Authentication {
	if values == nil {
		return nil
	}
	output := make([]storage.CVSSV2_Authentication, len(*values))
	for i, v := range *values {
		output[i] = toCVSSV2_Authentication(&v)
	}
	return output
}

func toCVSSV2_Impact(value *string) storage.CVSSV2_Impact {
	if value != nil {
		return storage.CVSSV2_Impact(storage.CVSSV2_Impact_value[*value])
	}
	return storage.CVSSV2_Impact(0)
}

func toCVSSV2_Impacts(values *[]string) []storage.CVSSV2_Impact {
	if values == nil {
		return nil
	}
	output := make([]storage.CVSSV2_Impact, len(*values))
	for i, v := range *values {
		output[i] = toCVSSV2_Impact(&v)
	}
	return output
}

type certResolver struct {
	root *Resolver
	data *storage.Cert
}

func (resolver *Resolver) wrapCert(value *storage.Cert, ok bool, err error) (*certResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &certResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapCerts(values []*storage.Cert, err error) ([]*certResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*certResolver, len(values))
	for i, v := range values {
		output[i] = &certResolver{resolver, v}
	}
	return output, nil
}

func (resolver *certResolver) Algorithm() string {
	value := resolver.data.GetAlgorithm()
	return value
}

func (resolver *certResolver) EndDate() (*graphql.Time, error) {
	value := resolver.data.GetEndDate()
	return timestamp(value)
}

func (resolver *certResolver) Issuer() (*certNameResolver, error) {
	value := resolver.data.GetIssuer()
	return resolver.root.wrapCertName(value, true, nil)
}

func (resolver *certResolver) Sans() []string {
	value := resolver.data.GetSans()
	return value
}

func (resolver *certResolver) StartDate() (*graphql.Time, error) {
	value := resolver.data.GetStartDate()
	return timestamp(value)
}

func (resolver *certResolver) Subject() (*certNameResolver, error) {
	value := resolver.data.GetSubject()
	return resolver.root.wrapCertName(value, true, nil)
}

type certNameResolver struct {
	root *Resolver
	data *storage.CertName
}

func (resolver *Resolver) wrapCertName(value *storage.CertName, ok bool, err error) (*certNameResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &certNameResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapCertNames(values []*storage.CertName, err error) ([]*certNameResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*certNameResolver, len(values))
	for i, v := range values {
		output[i] = &certNameResolver{resolver, v}
	}
	return output, nil
}

func (resolver *certNameResolver) CommonName() string {
	value := resolver.data.GetCommonName()
	return value
}

func (resolver *certNameResolver) Country() string {
	value := resolver.data.GetCountry()
	return value
}

func (resolver *certNameResolver) Locality() string {
	value := resolver.data.GetLocality()
	return value
}

func (resolver *certNameResolver) Names() []string {
	value := resolver.data.GetNames()
	return value
}

func (resolver *certNameResolver) Organization() string {
	value := resolver.data.GetOrganization()
	return value
}

func (resolver *certNameResolver) OrganizationUnit() string {
	value := resolver.data.GetOrganizationUnit()
	return value
}

func (resolver *certNameResolver) PostalCode() string {
	value := resolver.data.GetPostalCode()
	return value
}

func (resolver *certNameResolver) Province() string {
	value := resolver.data.GetProvince()
	return value
}

func (resolver *certNameResolver) StreetAddress() string {
	value := resolver.data.GetStreetAddress()
	return value
}

type clusterResolver struct {
	root *Resolver
	data *storage.Cluster
}

func (resolver *Resolver) wrapCluster(value *storage.Cluster, ok bool, err error) (*clusterResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &clusterResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapClusters(values []*storage.Cluster, err error) ([]*clusterResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*clusterResolver, len(values))
	for i, v := range values {
		output[i] = &clusterResolver{resolver, v}
	}
	return output, nil
}

func (resolver *clusterResolver) AdmissionController() bool {
	value := resolver.data.GetAdmissionController()
	return value
}

func (resolver *clusterResolver) CentralApiEndpoint() string {
	value := resolver.data.GetCentralApiEndpoint()
	return value
}

func (resolver *clusterResolver) CollectionMethod() string {
	value := resolver.data.GetCollectionMethod()
	return value.String()
}

func (resolver *clusterResolver) CollectorImage() string {
	value := resolver.data.GetCollectorImage()
	return value
}

func (resolver *clusterResolver) Id() graphql.ID {
	value := resolver.data.GetId()
	return graphql.ID(value)
}

func (resolver *clusterResolver) MainImage() string {
	value := resolver.data.GetMainImage()
	return value
}

func (resolver *clusterResolver) MonitoringEndpoint() string {
	value := resolver.data.GetMonitoringEndpoint()
	return value
}

func (resolver *clusterResolver) Name() string {
	value := resolver.data.GetName()
	return value
}

func (resolver *clusterResolver) RuntimeSupport() bool {
	value := resolver.data.GetRuntimeSupport()
	return value
}

func (resolver *clusterResolver) Status() (*clusterStatusResolver, error) {
	value := resolver.data.GetStatus()
	return resolver.root.wrapClusterStatus(value, true, nil)
}

func (resolver *clusterResolver) Type() string {
	value := resolver.data.GetType()
	return value.String()
}

type clusterStatusResolver struct {
	root *Resolver
	data *storage.ClusterStatus
}

func (resolver *Resolver) wrapClusterStatus(value *storage.ClusterStatus, ok bool, err error) (*clusterStatusResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &clusterStatusResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapClusterStatuses(values []*storage.ClusterStatus, err error) ([]*clusterStatusResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*clusterStatusResolver, len(values))
	for i, v := range values {
		output[i] = &clusterStatusResolver{resolver, v}
	}
	return output, nil
}

func (resolver *clusterStatusResolver) LastContact() (*graphql.Time, error) {
	value := resolver.data.GetLastContact()
	return timestamp(value)
}

func (resolver *clusterStatusResolver) OrchestratorMetadata() (*orchestratorMetadataResolver, error) {
	value := resolver.data.GetOrchestratorMetadata()
	return resolver.root.wrapOrchestratorMetadata(value, true, nil)
}

func (resolver *clusterStatusResolver) ProviderMetadata() (*providerMetadataResolver, error) {
	value := resolver.data.GetProviderMetadata()
	return resolver.root.wrapProviderMetadata(value, true, nil)
}

func (resolver *clusterStatusResolver) SensorVersion() string {
	value := resolver.data.GetSensorVersion()
	return value
}

func toClusterType(value *string) storage.ClusterType {
	if value != nil {
		return storage.ClusterType(storage.ClusterType_value[*value])
	}
	return storage.ClusterType(0)
}

func toClusterTypes(values *[]string) []storage.ClusterType {
	if values == nil {
		return nil
	}
	output := make([]storage.ClusterType, len(*values))
	for i, v := range *values {
		output[i] = toClusterType(&v)
	}
	return output
}

func toCollectionMethod(value *string) storage.CollectionMethod {
	if value != nil {
		return storage.CollectionMethod(storage.CollectionMethod_value[*value])
	}
	return storage.CollectionMethod(0)
}

func toCollectionMethods(values *[]string) []storage.CollectionMethod {
	if values == nil {
		return nil
	}
	output := make([]storage.CollectionMethod, len(*values))
	for i, v := range *values {
		output[i] = toCollectionMethod(&v)
	}
	return output
}

func toComparator(value *string) storage.Comparator {
	if value != nil {
		return storage.Comparator(storage.Comparator_value[*value])
	}
	return storage.Comparator(0)
}

func toComparators(values *[]string) []storage.Comparator {
	if values == nil {
		return nil
	}
	output := make([]storage.Comparator, len(*values))
	for i, v := range *values {
		output[i] = toComparator(&v)
	}
	return output
}

type complianceAggregation_AggregationKeyResolver struct {
	root *Resolver
	data *v1.ComplianceAggregation_AggregationKey
}

func (resolver *Resolver) wrapComplianceAggregation_AggregationKey(value *v1.ComplianceAggregation_AggregationKey, ok bool, err error) (*complianceAggregation_AggregationKeyResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &complianceAggregation_AggregationKeyResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapComplianceAggregation_AggregationKeies(values []*v1.ComplianceAggregation_AggregationKey, err error) ([]*complianceAggregation_AggregationKeyResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*complianceAggregation_AggregationKeyResolver, len(values))
	for i, v := range values {
		output[i] = &complianceAggregation_AggregationKeyResolver{resolver, v}
	}
	return output, nil
}

func (resolver *complianceAggregation_AggregationKeyResolver) Id() graphql.ID {
	value := resolver.data.GetId()
	return graphql.ID(value)
}

func (resolver *complianceAggregation_AggregationKeyResolver) Scope() string {
	value := resolver.data.GetScope()
	return value.String()
}

type complianceAggregation_ResponseResolver struct {
	root *Resolver
	data *v1.ComplianceAggregation_Response
}

func (resolver *Resolver) wrapComplianceAggregation_Response(value *v1.ComplianceAggregation_Response, ok bool, err error) (*complianceAggregation_ResponseResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &complianceAggregation_ResponseResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapComplianceAggregation_Responses(values []*v1.ComplianceAggregation_Response, err error) ([]*complianceAggregation_ResponseResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*complianceAggregation_ResponseResolver, len(values))
	for i, v := range values {
		output[i] = &complianceAggregation_ResponseResolver{resolver, v}
	}
	return output, nil
}

func (resolver *complianceAggregation_ResponseResolver) Results() ([]*complianceAggregation_ResultResolver, error) {
	value := resolver.data.GetResults()
	return resolver.root.wrapComplianceAggregation_Results(value, nil)
}

func (resolver *complianceAggregation_ResponseResolver) Sources() ([]*complianceAggregation_SourceResolver, error) {
	value := resolver.data.GetSources()
	return resolver.root.wrapComplianceAggregation_Sources(value, nil)
}

type complianceAggregation_ResultResolver struct {
	root *Resolver
	data *v1.ComplianceAggregation_Result
}

func (resolver *Resolver) wrapComplianceAggregation_Result(value *v1.ComplianceAggregation_Result, ok bool, err error) (*complianceAggregation_ResultResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &complianceAggregation_ResultResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapComplianceAggregation_Results(values []*v1.ComplianceAggregation_Result, err error) ([]*complianceAggregation_ResultResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*complianceAggregation_ResultResolver, len(values))
	for i, v := range values {
		output[i] = &complianceAggregation_ResultResolver{resolver, v}
	}
	return output, nil
}

func (resolver *complianceAggregation_ResultResolver) AggregationKeys() ([]*complianceAggregation_AggregationKeyResolver, error) {
	value := resolver.data.GetAggregationKeys()
	return resolver.root.wrapComplianceAggregation_AggregationKeies(value, nil)
}

func (resolver *complianceAggregation_ResultResolver) NumFailing() int32 {
	value := resolver.data.GetNumFailing()
	return value
}

func (resolver *complianceAggregation_ResultResolver) NumPassing() int32 {
	value := resolver.data.GetNumPassing()
	return value
}

func (resolver *complianceAggregation_ResultResolver) Unit() string {
	value := resolver.data.GetUnit()
	return value.String()
}

func toComplianceAggregation_Scope(value *string) v1.ComplianceAggregation_Scope {
	if value != nil {
		return v1.ComplianceAggregation_Scope(v1.ComplianceAggregation_Scope_value[*value])
	}
	return v1.ComplianceAggregation_Scope(0)
}

func toComplianceAggregation_Scopes(values *[]string) []v1.ComplianceAggregation_Scope {
	if values == nil {
		return nil
	}
	output := make([]v1.ComplianceAggregation_Scope, len(*values))
	for i, v := range *values {
		output[i] = toComplianceAggregation_Scope(&v)
	}
	return output
}

type complianceAggregation_SourceResolver struct {
	root *Resolver
	data *v1.ComplianceAggregation_Source
}

func (resolver *Resolver) wrapComplianceAggregation_Source(value *v1.ComplianceAggregation_Source, ok bool, err error) (*complianceAggregation_SourceResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &complianceAggregation_SourceResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapComplianceAggregation_Sources(values []*v1.ComplianceAggregation_Source, err error) ([]*complianceAggregation_SourceResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*complianceAggregation_SourceResolver, len(values))
	for i, v := range values {
		output[i] = &complianceAggregation_SourceResolver{resolver, v}
	}
	return output, nil
}

func (resolver *complianceAggregation_SourceResolver) ClusterId() string {
	value := resolver.data.GetClusterId()
	return value
}

func (resolver *complianceAggregation_SourceResolver) FailedRuns() ([]*complianceRunMetadataResolver, error) {
	value := resolver.data.GetFailedRuns()
	return resolver.root.wrapComplianceRunMetadatas(value, nil)
}

func (resolver *complianceAggregation_SourceResolver) StandardId() string {
	value := resolver.data.GetStandardId()
	return value
}

func (resolver *complianceAggregation_SourceResolver) SuccessfulRun() (*complianceRunMetadataResolver, error) {
	value := resolver.data.GetSuccessfulRun()
	return resolver.root.wrapComplianceRunMetadata(value, true, nil)
}

type complianceControlResolver struct {
	root *Resolver
	data *v1.ComplianceControl
}

func (resolver *Resolver) wrapComplianceControl(value *v1.ComplianceControl, ok bool, err error) (*complianceControlResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &complianceControlResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapComplianceControls(values []*v1.ComplianceControl, err error) ([]*complianceControlResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*complianceControlResolver, len(values))
	for i, v := range values {
		output[i] = &complianceControlResolver{resolver, v}
	}
	return output, nil
}

func (resolver *complianceControlResolver) Description() string {
	value := resolver.data.GetDescription()
	return value
}

func (resolver *complianceControlResolver) GroupId() string {
	value := resolver.data.GetGroupId()
	return value
}

func (resolver *complianceControlResolver) Id() graphql.ID {
	value := resolver.data.GetId()
	return graphql.ID(value)
}

func (resolver *complianceControlResolver) Implemented() bool {
	value := resolver.data.GetImplemented()
	return value
}

func (resolver *complianceControlResolver) InterpretationText() string {
	value := resolver.data.GetInterpretationText()
	return value
}

func (resolver *complianceControlResolver) Name() string {
	value := resolver.data.GetName()
	return value
}

func (resolver *complianceControlResolver) StandardId() string {
	value := resolver.data.GetStandardId()
	return value
}

type complianceControlGroupResolver struct {
	root *Resolver
	data *v1.ComplianceControlGroup
}

func (resolver *Resolver) wrapComplianceControlGroup(value *v1.ComplianceControlGroup, ok bool, err error) (*complianceControlGroupResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &complianceControlGroupResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapComplianceControlGroups(values []*v1.ComplianceControlGroup, err error) ([]*complianceControlGroupResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*complianceControlGroupResolver, len(values))
	for i, v := range values {
		output[i] = &complianceControlGroupResolver{resolver, v}
	}
	return output, nil
}

func (resolver *complianceControlGroupResolver) Description() string {
	value := resolver.data.GetDescription()
	return value
}

func (resolver *complianceControlGroupResolver) Id() graphql.ID {
	value := resolver.data.GetId()
	return graphql.ID(value)
}

func (resolver *complianceControlGroupResolver) Name() string {
	value := resolver.data.GetName()
	return value
}

func (resolver *complianceControlGroupResolver) NumImplementedChecks() int32 {
	value := resolver.data.GetNumImplementedChecks()
	return value
}

func (resolver *complianceControlGroupResolver) StandardId() string {
	value := resolver.data.GetStandardId()
	return value
}

type complianceControlResultResolver struct {
	root *Resolver
	data *storage.ComplianceControlResult
}

func (resolver *Resolver) wrapComplianceControlResult(value *storage.ComplianceControlResult, ok bool, err error) (*complianceControlResultResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &complianceControlResultResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapComplianceControlResults(values []*storage.ComplianceControlResult, err error) ([]*complianceControlResultResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*complianceControlResultResolver, len(values))
	for i, v := range values {
		output[i] = &complianceControlResultResolver{resolver, v}
	}
	return output, nil
}

func (resolver *complianceControlResultResolver) ControlId() string {
	value := resolver.data.GetControlId()
	return value
}

func (resolver *complianceControlResultResolver) Resource() (*complianceResourceResolver, error) {
	value := resolver.data.GetResource()
	return resolver.root.wrapComplianceResource(value, true, nil)
}

func (resolver *complianceControlResultResolver) Value() (*complianceResultValueResolver, error) {
	value := resolver.data.GetValue()
	return resolver.root.wrapComplianceResultValue(value, true, nil)
}

type complianceResourceResolver struct {
	root *Resolver
	data *storage.ComplianceResource
}

func (resolver *Resolver) wrapComplianceResource(value *storage.ComplianceResource, ok bool, err error) (*complianceResourceResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &complianceResourceResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapComplianceResources(values []*storage.ComplianceResource, err error) ([]*complianceResourceResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*complianceResourceResolver, len(values))
	for i, v := range values {
		output[i] = &complianceResourceResolver{resolver, v}
	}
	return output, nil
}

type complianceResourceResourceResolver struct {
	resolver *complianceResourceResolver
}

func (resolver *complianceResourceResolver) Resource() *complianceResourceResourceResolver {
	return &complianceResourceResourceResolver{resolver}
}

func (resolver *complianceResourceResourceResolver) ToComplianceResource_ClusterName() (*complianceResource_ClusterNameResolver, bool) {
	value := resolver.resolver.data.GetCluster()
	if value != nil {
		return &complianceResource_ClusterNameResolver{resolver.resolver.root, value}, true
	}
	return nil, false
}

func (resolver *complianceResourceResourceResolver) ToComplianceResource_DeploymentName() (*complianceResource_DeploymentNameResolver, bool) {
	value := resolver.resolver.data.GetDeployment()
	if value != nil {
		return &complianceResource_DeploymentNameResolver{resolver.resolver.root, value}, true
	}
	return nil, false
}

func (resolver *complianceResourceResourceResolver) ToComplianceResource_NodeName() (*complianceResource_NodeNameResolver, bool) {
	value := resolver.resolver.data.GetNode()
	if value != nil {
		return &complianceResource_NodeNameResolver{resolver.resolver.root, value}, true
	}
	return nil, false
}

func (resolver *complianceResourceResourceResolver) ToImageName() (*imageNameResolver, bool) {
	value := resolver.resolver.data.GetImage()
	if value != nil {
		return &imageNameResolver{resolver.resolver.root, value}, true
	}
	return nil, false
}

type complianceResource_ClusterNameResolver struct {
	root *Resolver
	data *storage.ComplianceResource_ClusterName
}

func (resolver *Resolver) wrapComplianceResource_ClusterName(value *storage.ComplianceResource_ClusterName, ok bool, err error) (*complianceResource_ClusterNameResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &complianceResource_ClusterNameResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapComplianceResource_ClusterNames(values []*storage.ComplianceResource_ClusterName, err error) ([]*complianceResource_ClusterNameResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*complianceResource_ClusterNameResolver, len(values))
	for i, v := range values {
		output[i] = &complianceResource_ClusterNameResolver{resolver, v}
	}
	return output, nil
}

func (resolver *complianceResource_ClusterNameResolver) Id() graphql.ID {
	value := resolver.data.GetId()
	return graphql.ID(value)
}

func (resolver *complianceResource_ClusterNameResolver) Name() string {
	value := resolver.data.GetName()
	return value
}

type complianceResource_DeploymentNameResolver struct {
	root *Resolver
	data *storage.ComplianceResource_DeploymentName
}

func (resolver *Resolver) wrapComplianceResource_DeploymentName(value *storage.ComplianceResource_DeploymentName, ok bool, err error) (*complianceResource_DeploymentNameResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &complianceResource_DeploymentNameResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapComplianceResource_DeploymentNames(values []*storage.ComplianceResource_DeploymentName, err error) ([]*complianceResource_DeploymentNameResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*complianceResource_DeploymentNameResolver, len(values))
	for i, v := range values {
		output[i] = &complianceResource_DeploymentNameResolver{resolver, v}
	}
	return output, nil
}

func (resolver *complianceResource_DeploymentNameResolver) Cluster() (*complianceResource_ClusterNameResolver, error) {
	value := resolver.data.GetCluster()
	return resolver.root.wrapComplianceResource_ClusterName(value, true, nil)
}

func (resolver *complianceResource_DeploymentNameResolver) Id() graphql.ID {
	value := resolver.data.GetId()
	return graphql.ID(value)
}

func (resolver *complianceResource_DeploymentNameResolver) Name() string {
	value := resolver.data.GetName()
	return value
}

func (resolver *complianceResource_DeploymentNameResolver) Namespace() string {
	value := resolver.data.GetNamespace()
	return value
}

type complianceResource_NodeNameResolver struct {
	root *Resolver
	data *storage.ComplianceResource_NodeName
}

func (resolver *Resolver) wrapComplianceResource_NodeName(value *storage.ComplianceResource_NodeName, ok bool, err error) (*complianceResource_NodeNameResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &complianceResource_NodeNameResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapComplianceResource_NodeNames(values []*storage.ComplianceResource_NodeName, err error) ([]*complianceResource_NodeNameResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*complianceResource_NodeNameResolver, len(values))
	for i, v := range values {
		output[i] = &complianceResource_NodeNameResolver{resolver, v}
	}
	return output, nil
}

func (resolver *complianceResource_NodeNameResolver) Cluster() (*complianceResource_ClusterNameResolver, error) {
	value := resolver.data.GetCluster()
	return resolver.root.wrapComplianceResource_ClusterName(value, true, nil)
}

func (resolver *complianceResource_NodeNameResolver) Id() graphql.ID {
	value := resolver.data.GetId()
	return graphql.ID(value)
}

func (resolver *complianceResource_NodeNameResolver) Name() string {
	value := resolver.data.GetName()
	return value
}

type complianceResultValueResolver struct {
	root *Resolver
	data *storage.ComplianceResultValue
}

func (resolver *Resolver) wrapComplianceResultValue(value *storage.ComplianceResultValue, ok bool, err error) (*complianceResultValueResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &complianceResultValueResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapComplianceResultValues(values []*storage.ComplianceResultValue, err error) ([]*complianceResultValueResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*complianceResultValueResolver, len(values))
	for i, v := range values {
		output[i] = &complianceResultValueResolver{resolver, v}
	}
	return output, nil
}

func (resolver *complianceResultValueResolver) Evidence() ([]*complianceResultValue_EvidenceResolver, error) {
	value := resolver.data.GetEvidence()
	return resolver.root.wrapComplianceResultValue_Evidences(value, nil)
}

func (resolver *complianceResultValueResolver) OverallState() string {
	value := resolver.data.GetOverallState()
	return value.String()
}

type complianceResultValue_EvidenceResolver struct {
	root *Resolver
	data *storage.ComplianceResultValue_Evidence
}

func (resolver *Resolver) wrapComplianceResultValue_Evidence(value *storage.ComplianceResultValue_Evidence, ok bool, err error) (*complianceResultValue_EvidenceResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &complianceResultValue_EvidenceResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapComplianceResultValue_Evidences(values []*storage.ComplianceResultValue_Evidence, err error) ([]*complianceResultValue_EvidenceResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*complianceResultValue_EvidenceResolver, len(values))
	for i, v := range values {
		output[i] = &complianceResultValue_EvidenceResolver{resolver, v}
	}
	return output, nil
}

func (resolver *complianceResultValue_EvidenceResolver) Message() string {
	value := resolver.data.GetMessage()
	return value
}

func (resolver *complianceResultValue_EvidenceResolver) MessageId() int32 {
	value := resolver.data.GetMessageId()
	return value
}

func (resolver *complianceResultValue_EvidenceResolver) State() string {
	value := resolver.data.GetState()
	return value.String()
}

type complianceRunResolver struct {
	root *Resolver
	data *v1.ComplianceRun
}

func (resolver *Resolver) wrapComplianceRun(value *v1.ComplianceRun, ok bool, err error) (*complianceRunResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &complianceRunResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapComplianceRuns(values []*v1.ComplianceRun, err error) ([]*complianceRunResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*complianceRunResolver, len(values))
	for i, v := range values {
		output[i] = &complianceRunResolver{resolver, v}
	}
	return output, nil
}

func (resolver *complianceRunResolver) ClusterId() string {
	value := resolver.data.GetClusterId()
	return value
}

func (resolver *complianceRunResolver) ErrorMessage() string {
	value := resolver.data.GetErrorMessage()
	return value
}

func (resolver *complianceRunResolver) FinishTime() (*graphql.Time, error) {
	value := resolver.data.GetFinishTime()
	return timestamp(value)
}

func (resolver *complianceRunResolver) Id() graphql.ID {
	value := resolver.data.GetId()
	return graphql.ID(value)
}

func (resolver *complianceRunResolver) ScheduleId() string {
	value := resolver.data.GetScheduleId()
	return value
}

func (resolver *complianceRunResolver) StandardId() string {
	value := resolver.data.GetStandardId()
	return value
}

func (resolver *complianceRunResolver) StartTime() (*graphql.Time, error) {
	value := resolver.data.GetStartTime()
	return timestamp(value)
}

func (resolver *complianceRunResolver) State() string {
	value := resolver.data.GetState()
	return value.String()
}

type complianceRunMetadataResolver struct {
	root *Resolver
	data *storage.ComplianceRunMetadata
}

func (resolver *Resolver) wrapComplianceRunMetadata(value *storage.ComplianceRunMetadata, ok bool, err error) (*complianceRunMetadataResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &complianceRunMetadataResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapComplianceRunMetadatas(values []*storage.ComplianceRunMetadata, err error) ([]*complianceRunMetadataResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*complianceRunMetadataResolver, len(values))
	for i, v := range values {
		output[i] = &complianceRunMetadataResolver{resolver, v}
	}
	return output, nil
}

func (resolver *complianceRunMetadataResolver) ClusterId() string {
	value := resolver.data.GetClusterId()
	return value
}

func (resolver *complianceRunMetadataResolver) ErrorMessage() string {
	value := resolver.data.GetErrorMessage()
	return value
}

func (resolver *complianceRunMetadataResolver) FinishTimestamp() (*graphql.Time, error) {
	value := resolver.data.GetFinishTimestamp()
	return timestamp(value)
}

func (resolver *complianceRunMetadataResolver) RunId() string {
	value := resolver.data.GetRunId()
	return value
}

func (resolver *complianceRunMetadataResolver) StandardId() string {
	value := resolver.data.GetStandardId()
	return value
}

func (resolver *complianceRunMetadataResolver) StartTimestamp() (*graphql.Time, error) {
	value := resolver.data.GetStartTimestamp()
	return timestamp(value)
}

func (resolver *complianceRunMetadataResolver) Success() bool {
	value := resolver.data.GetSuccess()
	return value
}

type complianceRunScheduleResolver struct {
	root *Resolver
	data *storage.ComplianceRunSchedule
}

func (resolver *Resolver) wrapComplianceRunSchedule(value *storage.ComplianceRunSchedule, ok bool, err error) (*complianceRunScheduleResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &complianceRunScheduleResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapComplianceRunSchedules(values []*storage.ComplianceRunSchedule, err error) ([]*complianceRunScheduleResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*complianceRunScheduleResolver, len(values))
	for i, v := range values {
		output[i] = &complianceRunScheduleResolver{resolver, v}
	}
	return output, nil
}

func (resolver *complianceRunScheduleResolver) ClusterId() string {
	value := resolver.data.GetClusterId()
	return value
}

func (resolver *complianceRunScheduleResolver) CrontabSpec() string {
	value := resolver.data.GetCrontabSpec()
	return value
}

func (resolver *complianceRunScheduleResolver) Id() graphql.ID {
	value := resolver.data.GetId()
	return graphql.ID(value)
}

func (resolver *complianceRunScheduleResolver) StandardId() string {
	value := resolver.data.GetStandardId()
	return value
}

func (resolver *complianceRunScheduleResolver) Suspended() bool {
	value := resolver.data.GetSuspended()
	return value
}

type complianceRunScheduleInfoResolver struct {
	root *Resolver
	data *v1.ComplianceRunScheduleInfo
}

func (resolver *Resolver) wrapComplianceRunScheduleInfo(value *v1.ComplianceRunScheduleInfo, ok bool, err error) (*complianceRunScheduleInfoResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &complianceRunScheduleInfoResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapComplianceRunScheduleInfos(values []*v1.ComplianceRunScheduleInfo, err error) ([]*complianceRunScheduleInfoResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*complianceRunScheduleInfoResolver, len(values))
	for i, v := range values {
		output[i] = &complianceRunScheduleInfoResolver{resolver, v}
	}
	return output, nil
}

func (resolver *complianceRunScheduleInfoResolver) LastCompletedRun() (*complianceRunResolver, error) {
	value := resolver.data.GetLastCompletedRun()
	return resolver.root.wrapComplianceRun(value, true, nil)
}

func (resolver *complianceRunScheduleInfoResolver) LastRun() (*complianceRunResolver, error) {
	value := resolver.data.GetLastRun()
	return resolver.root.wrapComplianceRun(value, true, nil)
}

func (resolver *complianceRunScheduleInfoResolver) NextRunTime() (*graphql.Time, error) {
	value := resolver.data.GetNextRunTime()
	return timestamp(value)
}

func (resolver *complianceRunScheduleInfoResolver) Schedule() (*complianceRunScheduleResolver, error) {
	value := resolver.data.GetSchedule()
	return resolver.root.wrapComplianceRunSchedule(value, true, nil)
}

func toComplianceRun_State(value *string) v1.ComplianceRun_State {
	if value != nil {
		return v1.ComplianceRun_State(v1.ComplianceRun_State_value[*value])
	}
	return v1.ComplianceRun_State(0)
}

func toComplianceRun_States(values *[]string) []v1.ComplianceRun_State {
	if values == nil {
		return nil
	}
	output := make([]v1.ComplianceRun_State, len(*values))
	for i, v := range *values {
		output[i] = toComplianceRun_State(&v)
	}
	return output
}

type complianceStandardResolver struct {
	root *Resolver
	data *v1.ComplianceStandard
}

func (resolver *Resolver) wrapComplianceStandard(value *v1.ComplianceStandard, ok bool, err error) (*complianceStandardResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &complianceStandardResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapComplianceStandards(values []*v1.ComplianceStandard, err error) ([]*complianceStandardResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*complianceStandardResolver, len(values))
	for i, v := range values {
		output[i] = &complianceStandardResolver{resolver, v}
	}
	return output, nil
}

func (resolver *complianceStandardResolver) Controls() ([]*complianceControlResolver, error) {
	value := resolver.data.GetControls()
	return resolver.root.wrapComplianceControls(value, nil)
}

func (resolver *complianceStandardResolver) Groups() ([]*complianceControlGroupResolver, error) {
	value := resolver.data.GetGroups()
	return resolver.root.wrapComplianceControlGroups(value, nil)
}

func (resolver *complianceStandardResolver) Metadata() (*complianceStandardMetadataResolver, error) {
	value := resolver.data.GetMetadata()
	return resolver.root.wrapComplianceStandardMetadata(value, true, nil)
}

type complianceStandardMetadataResolver struct {
	root *Resolver
	data *v1.ComplianceStandardMetadata
}

func (resolver *Resolver) wrapComplianceStandardMetadata(value *v1.ComplianceStandardMetadata, ok bool, err error) (*complianceStandardMetadataResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &complianceStandardMetadataResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapComplianceStandardMetadatas(values []*v1.ComplianceStandardMetadata, err error) ([]*complianceStandardMetadataResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*complianceStandardMetadataResolver, len(values))
	for i, v := range values {
		output[i] = &complianceStandardMetadataResolver{resolver, v}
	}
	return output, nil
}

func (resolver *complianceStandardMetadataResolver) Description() string {
	value := resolver.data.GetDescription()
	return value
}

func (resolver *complianceStandardMetadataResolver) Id() graphql.ID {
	value := resolver.data.GetId()
	return graphql.ID(value)
}

func (resolver *complianceStandardMetadataResolver) Name() string {
	value := resolver.data.GetName()
	return value
}

func (resolver *complianceStandardMetadataResolver) NumImplementedChecks() int32 {
	value := resolver.data.GetNumImplementedChecks()
	return value
}

func toComplianceState(value *string) storage.ComplianceState {
	if value != nil {
		return storage.ComplianceState(storage.ComplianceState_value[*value])
	}
	return storage.ComplianceState(0)
}

func toComplianceStates(values *[]string) []storage.ComplianceState {
	if values == nil {
		return nil
	}
	output := make([]storage.ComplianceState, len(*values))
	for i, v := range *values {
		output[i] = toComplianceState(&v)
	}
	return output
}

type componentResolver struct {
	root *Resolver
	data *storage.Component
}

func (resolver *Resolver) wrapComponent(value *storage.Component, ok bool, err error) (*componentResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &componentResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapComponents(values []*storage.Component, err error) ([]*componentResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*componentResolver, len(values))
	for i, v := range values {
		output[i] = &componentResolver{resolver, v}
	}
	return output, nil
}

func (resolver *componentResolver) Name() string {
	value := resolver.data.GetName()
	return value
}

func (resolver *componentResolver) Version() string {
	value := resolver.data.GetVersion()
	return value
}

type containerResolver struct {
	root *Resolver
	data *storage.Container
}

func (resolver *Resolver) wrapContainer(value *storage.Container, ok bool, err error) (*containerResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &containerResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapContainers(values []*storage.Container, err error) ([]*containerResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*containerResolver, len(values))
	for i, v := range values {
		output[i] = &containerResolver{resolver, v}
	}
	return output, nil
}

func (resolver *containerResolver) Config() (*containerConfigResolver, error) {
	value := resolver.data.GetConfig()
	return resolver.root.wrapContainerConfig(value, true, nil)
}

func (resolver *containerResolver) Id() graphql.ID {
	value := resolver.data.GetId()
	return graphql.ID(value)
}

func (resolver *containerResolver) Image() (*imageResolver, error) {
	value := resolver.data.GetImage()
	return resolver.root.wrapImage(value, true, nil)
}

func (resolver *containerResolver) Instances() ([]*containerInstanceResolver, error) {
	value := resolver.data.GetInstances()
	return resolver.root.wrapContainerInstances(value, nil)
}

func (resolver *containerResolver) Name() string {
	value := resolver.data.GetName()
	return value
}

func (resolver *containerResolver) Ports() ([]*portConfigResolver, error) {
	value := resolver.data.GetPorts()
	return resolver.root.wrapPortConfigs(value, nil)
}

func (resolver *containerResolver) Resources() (*resourcesResolver, error) {
	value := resolver.data.GetResources()
	return resolver.root.wrapResources(value, true, nil)
}

func (resolver *containerResolver) Secrets() ([]*embeddedSecretResolver, error) {
	value := resolver.data.GetSecrets()
	return resolver.root.wrapEmbeddedSecrets(value, nil)
}

func (resolver *containerResolver) SecurityContext() (*securityContextResolver, error) {
	value := resolver.data.GetSecurityContext()
	return resolver.root.wrapSecurityContext(value, true, nil)
}

func (resolver *containerResolver) Volumes() ([]*volumeResolver, error) {
	value := resolver.data.GetVolumes()
	return resolver.root.wrapVolumes(value, nil)
}

type containerConfigResolver struct {
	root *Resolver
	data *storage.ContainerConfig
}

func (resolver *Resolver) wrapContainerConfig(value *storage.ContainerConfig, ok bool, err error) (*containerConfigResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &containerConfigResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapContainerConfigs(values []*storage.ContainerConfig, err error) ([]*containerConfigResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*containerConfigResolver, len(values))
	for i, v := range values {
		output[i] = &containerConfigResolver{resolver, v}
	}
	return output, nil
}

func (resolver *containerConfigResolver) Args() []string {
	value := resolver.data.GetArgs()
	return value
}

func (resolver *containerConfigResolver) Command() []string {
	value := resolver.data.GetCommand()
	return value
}

func (resolver *containerConfigResolver) Directory() string {
	value := resolver.data.GetDirectory()
	return value
}

func (resolver *containerConfigResolver) Env() ([]*containerConfig_EnvironmentConfigResolver, error) {
	value := resolver.data.GetEnv()
	return resolver.root.wrapContainerConfig_EnvironmentConfigs(value, nil)
}

func (resolver *containerConfigResolver) Uid() int32 {
	value := resolver.data.GetUid()
	return int32(value)
}

func (resolver *containerConfigResolver) User() string {
	value := resolver.data.GetUser()
	return value
}

type containerConfig_EnvironmentConfigResolver struct {
	root *Resolver
	data *storage.ContainerConfig_EnvironmentConfig
}

func (resolver *Resolver) wrapContainerConfig_EnvironmentConfig(value *storage.ContainerConfig_EnvironmentConfig, ok bool, err error) (*containerConfig_EnvironmentConfigResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &containerConfig_EnvironmentConfigResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapContainerConfig_EnvironmentConfigs(values []*storage.ContainerConfig_EnvironmentConfig, err error) ([]*containerConfig_EnvironmentConfigResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*containerConfig_EnvironmentConfigResolver, len(values))
	for i, v := range values {
		output[i] = &containerConfig_EnvironmentConfigResolver{resolver, v}
	}
	return output, nil
}

func (resolver *containerConfig_EnvironmentConfigResolver) Key() string {
	value := resolver.data.GetKey()
	return value
}

func (resolver *containerConfig_EnvironmentConfigResolver) Value() string {
	value := resolver.data.GetValue()
	return value
}

type containerInstanceResolver struct {
	root *Resolver
	data *storage.ContainerInstance
}

func (resolver *Resolver) wrapContainerInstance(value *storage.ContainerInstance, ok bool, err error) (*containerInstanceResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &containerInstanceResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapContainerInstances(values []*storage.ContainerInstance, err error) ([]*containerInstanceResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*containerInstanceResolver, len(values))
	for i, v := range values {
		output[i] = &containerInstanceResolver{resolver, v}
	}
	return output, nil
}

func (resolver *containerInstanceResolver) ContainerIps() []string {
	value := resolver.data.GetContainerIps()
	return value
}

func (resolver *containerInstanceResolver) ContainingPodId() string {
	value := resolver.data.GetContainingPodId()
	return value
}

func (resolver *containerInstanceResolver) InstanceId() (*containerInstanceIDResolver, error) {
	value := resolver.data.GetInstanceId()
	return resolver.root.wrapContainerInstanceID(value, true, nil)
}

type containerInstanceIDResolver struct {
	root *Resolver
	data *storage.ContainerInstanceID
}

func (resolver *Resolver) wrapContainerInstanceID(value *storage.ContainerInstanceID, ok bool, err error) (*containerInstanceIDResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &containerInstanceIDResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapContainerInstanceIDs(values []*storage.ContainerInstanceID, err error) ([]*containerInstanceIDResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*containerInstanceIDResolver, len(values))
	for i, v := range values {
		output[i] = &containerInstanceIDResolver{resolver, v}
	}
	return output, nil
}

func (resolver *containerInstanceIDResolver) ContainerRuntime() string {
	value := resolver.data.GetContainerRuntime()
	return value.String()
}

func (resolver *containerInstanceIDResolver) Id() graphql.ID {
	value := resolver.data.GetId()
	return graphql.ID(value)
}

func (resolver *containerInstanceIDResolver) Node() string {
	value := resolver.data.GetNode()
	return value
}

func toContainerRuntime(value *string) storage.ContainerRuntime {
	if value != nil {
		return storage.ContainerRuntime(storage.ContainerRuntime_value[*value])
	}
	return storage.ContainerRuntime(0)
}

func toContainerRuntimes(values *[]string) []storage.ContainerRuntime {
	if values == nil {
		return nil
	}
	output := make([]storage.ContainerRuntime, len(*values))
	for i, v := range *values {
		output[i] = toContainerRuntime(&v)
	}
	return output
}

type deploymentResolver struct {
	root *Resolver
	data *storage.Deployment
	list *storage.ListDeployment
}

func (resolver *Resolver) wrapDeployment(value *storage.Deployment, ok bool, err error) (*deploymentResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &deploymentResolver{resolver, value, nil}, nil
}

func (resolver *Resolver) wrapDeployments(values []*storage.Deployment, err error) ([]*deploymentResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*deploymentResolver, len(values))
	for i, v := range values {
		output[i] = &deploymentResolver{resolver, v, nil}
	}
	return output, nil
}

func (resolver *Resolver) wrapListDeployments(values []*storage.ListDeployment, err error) ([]*deploymentResolver, error) {
	if err != nil || values == nil {
		return nil, err
	}
	output := make([]*deploymentResolver, len(values))
	for i, v := range values {
		output[i] = &deploymentResolver{resolver, nil, v}
	}
	return output, nil
}

func (resolver *deploymentResolver) ensureData() {
	if resolver.data == nil {
		resolver.data = resolver.root.getDeployment(resolver.list.GetId())
	}
}

func (resolver *deploymentResolver) Annotations() labels {
	resolver.ensureData()
	value := resolver.data.GetAnnotations()
	return labelsResolver(value)
}

func (resolver *deploymentResolver) ClusterId() string {
	value := resolver.data.GetClusterId()
	if resolver.data == nil {
		value = resolver.list.GetClusterId()
	}
	return value
}

func (resolver *deploymentResolver) ClusterName() string {
	resolver.ensureData()
	value := resolver.data.GetClusterName()
	return value
}

func (resolver *deploymentResolver) Containers() ([]*containerResolver, error) {
	resolver.ensureData()
	value := resolver.data.GetContainers()
	return resolver.root.wrapContainers(value, nil)
}

func (resolver *deploymentResolver) HostNetwork() bool {
	resolver.ensureData()
	value := resolver.data.GetHostNetwork()
	return value
}

func (resolver *deploymentResolver) Id() graphql.ID {
	value := resolver.data.GetId()
	if resolver.data == nil {
		value = resolver.list.GetId()
	}
	return graphql.ID(value)
}

func (resolver *deploymentResolver) ImagePullSecrets() []string {
	resolver.ensureData()
	value := resolver.data.GetImagePullSecrets()
	return value
}

func (resolver *deploymentResolver) Inactive() bool {
	resolver.ensureData()
	value := resolver.data.GetInactive()
	return value
}

func (resolver *deploymentResolver) LabelSelector() (*labelSelectorResolver, error) {
	resolver.ensureData()
	value := resolver.data.GetLabelSelector()
	return resolver.root.wrapLabelSelector(value, true, nil)
}

func (resolver *deploymentResolver) Labels() labels {
	resolver.ensureData()
	value := resolver.data.GetLabels()
	return labelsResolver(value)
}

func (resolver *deploymentResolver) Name() string {
	value := resolver.data.GetName()
	if resolver.data == nil {
		value = resolver.list.GetName()
	}
	return value
}

func (resolver *deploymentResolver) Namespace() string {
	value := resolver.data.GetNamespace()
	if resolver.data == nil {
		value = resolver.list.GetNamespace()
	}
	return value
}

func (resolver *deploymentResolver) NamespaceId() string {
	resolver.ensureData()
	value := resolver.data.GetNamespaceId()
	return value
}

func (resolver *deploymentResolver) PodLabels() labels {
	resolver.ensureData()
	value := resolver.data.GetPodLabels()
	return labelsResolver(value)
}

func (resolver *deploymentResolver) Ports() ([]*portConfigResolver, error) {
	resolver.ensureData()
	value := resolver.data.GetPorts()
	return resolver.root.wrapPortConfigs(value, nil)
}

func (resolver *deploymentResolver) Priority() int32 {
	value := resolver.data.GetPriority()
	if resolver.data == nil {
		value = resolver.list.GetPriority()
	}
	return int32(value)
}

func (resolver *deploymentResolver) Replicas() int32 {
	resolver.ensureData()
	value := resolver.data.GetReplicas()
	return int32(value)
}

func (resolver *deploymentResolver) Risk() (*riskResolver, error) {
	resolver.ensureData()
	value := resolver.data.GetRisk()
	return resolver.root.wrapRisk(value, true, nil)
}

func (resolver *deploymentResolver) ServiceAccount() string {
	resolver.ensureData()
	value := resolver.data.GetServiceAccount()
	return value
}

func (resolver *deploymentResolver) Tolerations() ([]*tolerationResolver, error) {
	resolver.ensureData()
	value := resolver.data.GetTolerations()
	return resolver.root.wrapTolerations(value, nil)
}

func (resolver *deploymentResolver) Type() string {
	resolver.ensureData()
	value := resolver.data.GetType()
	return value
}

func (resolver *deploymentResolver) UpdatedAt() (*graphql.Time, error) {
	value := resolver.data.GetUpdatedAt()
	if resolver.data == nil {
		value = resolver.list.GetUpdatedAt()
	}
	return timestamp(value)
}

func (resolver *deploymentResolver) Version() string {
	resolver.ensureData()
	value := resolver.data.GetVersion()
	return value
}

type dockerfileLineRuleFieldResolver struct {
	root *Resolver
	data *storage.DockerfileLineRuleField
}

func (resolver *Resolver) wrapDockerfileLineRuleField(value *storage.DockerfileLineRuleField, ok bool, err error) (*dockerfileLineRuleFieldResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &dockerfileLineRuleFieldResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapDockerfileLineRuleFields(values []*storage.DockerfileLineRuleField, err error) ([]*dockerfileLineRuleFieldResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*dockerfileLineRuleFieldResolver, len(values))
	for i, v := range values {
		output[i] = &dockerfileLineRuleFieldResolver{resolver, v}
	}
	return output, nil
}

func (resolver *dockerfileLineRuleFieldResolver) Instruction() string {
	value := resolver.data.GetInstruction()
	return value
}

func (resolver *dockerfileLineRuleFieldResolver) Value() string {
	value := resolver.data.GetValue()
	return value
}

type emailResolver struct {
	root *Resolver
	data *storage.Email
}

func (resolver *Resolver) wrapEmail(value *storage.Email, ok bool, err error) (*emailResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &emailResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapEmails(values []*storage.Email, err error) ([]*emailResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*emailResolver, len(values))
	for i, v := range values {
		output[i] = &emailResolver{resolver, v}
	}
	return output, nil
}

func (resolver *emailResolver) DisableTLS() bool {
	value := resolver.data.GetDisableTLS()
	return value
}

func (resolver *emailResolver) From() string {
	value := resolver.data.GetFrom()
	return value
}

func (resolver *emailResolver) Password() string {
	value := resolver.data.GetPassword()
	return value
}

func (resolver *emailResolver) Sender() string {
	value := resolver.data.GetSender()
	return value
}

func (resolver *emailResolver) Server() string {
	value := resolver.data.GetServer()
	return value
}

func (resolver *emailResolver) UseSTARTTLS() bool {
	value := resolver.data.GetUseSTARTTLS()
	return value
}

func (resolver *emailResolver) Username() string {
	value := resolver.data.GetUsername()
	return value
}

type embeddedSecretResolver struct {
	root *Resolver
	data *storage.EmbeddedSecret
}

func (resolver *Resolver) wrapEmbeddedSecret(value *storage.EmbeddedSecret, ok bool, err error) (*embeddedSecretResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &embeddedSecretResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapEmbeddedSecrets(values []*storage.EmbeddedSecret, err error) ([]*embeddedSecretResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*embeddedSecretResolver, len(values))
	for i, v := range values {
		output[i] = &embeddedSecretResolver{resolver, v}
	}
	return output, nil
}

func (resolver *embeddedSecretResolver) Name() string {
	value := resolver.data.GetName()
	return value
}

func (resolver *embeddedSecretResolver) Path() string {
	value := resolver.data.GetPath()
	return value
}

func toEnforcementAction(value *string) storage.EnforcementAction {
	if value != nil {
		return storage.EnforcementAction(storage.EnforcementAction_value[*value])
	}
	return storage.EnforcementAction(0)
}

func toEnforcementActions(values *[]string) []storage.EnforcementAction {
	if values == nil {
		return nil
	}
	output := make([]storage.EnforcementAction, len(*values))
	for i, v := range *values {
		output[i] = toEnforcementAction(&v)
	}
	return output
}

type generateTokenResponseResolver struct {
	root *Resolver
	data *v1.GenerateTokenResponse
}

func (resolver *Resolver) wrapGenerateTokenResponse(value *v1.GenerateTokenResponse, ok bool, err error) (*generateTokenResponseResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &generateTokenResponseResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapGenerateTokenResponses(values []*v1.GenerateTokenResponse, err error) ([]*generateTokenResponseResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*generateTokenResponseResolver, len(values))
	for i, v := range values {
		output[i] = &generateTokenResponseResolver{resolver, v}
	}
	return output, nil
}

func (resolver *generateTokenResponseResolver) Metadata() (*tokenMetadataResolver, error) {
	value := resolver.data.GetMetadata()
	return resolver.root.wrapTokenMetadata(value, true, nil)
}

func (resolver *generateTokenResponseResolver) Token() string {
	value := resolver.data.GetToken()
	return value
}

type genericResolver struct {
	root *Resolver
	data *storage.Generic
}

func (resolver *Resolver) wrapGeneric(value *storage.Generic, ok bool, err error) (*genericResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &genericResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapGenerics(values []*storage.Generic, err error) ([]*genericResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*genericResolver, len(values))
	for i, v := range values {
		output[i] = &genericResolver{resolver, v}
	}
	return output, nil
}

func (resolver *genericResolver) CaCert() string {
	value := resolver.data.GetCaCert()
	return value
}

func (resolver *genericResolver) Endpoint() string {
	value := resolver.data.GetEndpoint()
	return value
}

func (resolver *genericResolver) ExtraFields() ([]*keyValuePairResolver, error) {
	value := resolver.data.GetExtraFields()
	return resolver.root.wrapKeyValuePairs(value, nil)
}

func (resolver *genericResolver) Headers() ([]*keyValuePairResolver, error) {
	value := resolver.data.GetHeaders()
	return resolver.root.wrapKeyValuePairs(value, nil)
}

func (resolver *genericResolver) Password() string {
	value := resolver.data.GetPassword()
	return value
}

func (resolver *genericResolver) SkipTLSVerify() bool {
	value := resolver.data.GetSkipTLSVerify()
	return value
}

func (resolver *genericResolver) Username() string {
	value := resolver.data.GetUsername()
	return value
}

type getComplianceRunStatusesResponseResolver struct {
	root *Resolver
	data *v1.GetComplianceRunStatusesResponse
}

func (resolver *Resolver) wrapGetComplianceRunStatusesResponse(value *v1.GetComplianceRunStatusesResponse, ok bool, err error) (*getComplianceRunStatusesResponseResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &getComplianceRunStatusesResponseResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapGetComplianceRunStatusesResponses(values []*v1.GetComplianceRunStatusesResponse, err error) ([]*getComplianceRunStatusesResponseResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*getComplianceRunStatusesResponseResolver, len(values))
	for i, v := range values {
		output[i] = &getComplianceRunStatusesResponseResolver{resolver, v}
	}
	return output, nil
}

func (resolver *getComplianceRunStatusesResponseResolver) InvalidRunIds() []string {
	value := resolver.data.GetInvalidRunIds()
	return value
}

func (resolver *getComplianceRunStatusesResponseResolver) Runs() ([]*complianceRunResolver, error) {
	value := resolver.data.GetRuns()
	return resolver.root.wrapComplianceRuns(value, nil)
}

type googleProviderMetadataResolver struct {
	root *Resolver
	data *storage.GoogleProviderMetadata
}

func (resolver *Resolver) wrapGoogleProviderMetadata(value *storage.GoogleProviderMetadata, ok bool, err error) (*googleProviderMetadataResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &googleProviderMetadataResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapGoogleProviderMetadatas(values []*storage.GoogleProviderMetadata, err error) ([]*googleProviderMetadataResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*googleProviderMetadataResolver, len(values))
	for i, v := range values {
		output[i] = &googleProviderMetadataResolver{resolver, v}
	}
	return output, nil
}

func (resolver *googleProviderMetadataResolver) ClusterName() string {
	value := resolver.data.GetClusterName()
	return value
}

func (resolver *googleProviderMetadataResolver) Project() string {
	value := resolver.data.GetProject()
	return value
}

type groupResolver struct {
	root *Resolver
	data *storage.Group
}

func (resolver *Resolver) wrapGroup(value *storage.Group, ok bool, err error) (*groupResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &groupResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapGroups(values []*storage.Group, err error) ([]*groupResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*groupResolver, len(values))
	for i, v := range values {
		output[i] = &groupResolver{resolver, v}
	}
	return output, nil
}

func (resolver *groupResolver) Props() (*groupPropertiesResolver, error) {
	value := resolver.data.GetProps()
	return resolver.root.wrapGroupProperties(value, true, nil)
}

func (resolver *groupResolver) RoleName() string {
	value := resolver.data.GetRoleName()
	return value
}

type groupPropertiesResolver struct {
	root *Resolver
	data *storage.GroupProperties
}

func (resolver *Resolver) wrapGroupProperties(value *storage.GroupProperties, ok bool, err error) (*groupPropertiesResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &groupPropertiesResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapGroupPropertieses(values []*storage.GroupProperties, err error) ([]*groupPropertiesResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*groupPropertiesResolver, len(values))
	for i, v := range values {
		output[i] = &groupPropertiesResolver{resolver, v}
	}
	return output, nil
}

func (resolver *groupPropertiesResolver) AuthProviderId() string {
	value := resolver.data.GetAuthProviderId()
	return value
}

func (resolver *groupPropertiesResolver) Key() string {
	value := resolver.data.GetKey()
	return value
}

func (resolver *groupPropertiesResolver) Value() string {
	value := resolver.data.GetValue()
	return value
}

type imageResolver struct {
	root *Resolver
	data *storage.Image
	list *storage.ListImage
}

func (resolver *Resolver) wrapImage(value *storage.Image, ok bool, err error) (*imageResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &imageResolver{resolver, value, nil}, nil
}

func (resolver *Resolver) wrapImages(values []*storage.Image, err error) ([]*imageResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*imageResolver, len(values))
	for i, v := range values {
		output[i] = &imageResolver{resolver, v, nil}
	}
	return output, nil
}

func (resolver *Resolver) wrapListImages(values []*storage.ListImage, err error) ([]*imageResolver, error) {
	if err != nil || values == nil {
		return nil, err
	}
	output := make([]*imageResolver, len(values))
	for i, v := range values {
		output[i] = &imageResolver{resolver, nil, v}
	}
	return output, nil
}

func (resolver *imageResolver) ensureData() {
	if resolver.data == nil {
		resolver.data = resolver.root.getImage(resolver.list.GetId())
	}
}

func (resolver *imageResolver) Id() graphql.ID {
	value := resolver.data.GetId()
	if resolver.data == nil {
		value = resolver.list.GetId()
	}
	return graphql.ID(value)
}

func (resolver *imageResolver) Metadata() (*imageMetadataResolver, error) {
	resolver.ensureData()
	value := resolver.data.GetMetadata()
	return resolver.root.wrapImageMetadata(value, true, nil)
}

func (resolver *imageResolver) Name() (*imageNameResolver, error) {
	resolver.ensureData()
	value := resolver.data.GetName()
	return resolver.root.wrapImageName(value, true, nil)
}

func (resolver *imageResolver) Scan() (*imageScanResolver, error) {
	resolver.ensureData()
	value := resolver.data.GetScan()
	return resolver.root.wrapImageScan(value, true, nil)
}

type imageLayerResolver struct {
	root *Resolver
	data *storage.ImageLayer
}

func (resolver *Resolver) wrapImageLayer(value *storage.ImageLayer, ok bool, err error) (*imageLayerResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &imageLayerResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapImageLayers(values []*storage.ImageLayer, err error) ([]*imageLayerResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*imageLayerResolver, len(values))
	for i, v := range values {
		output[i] = &imageLayerResolver{resolver, v}
	}
	return output, nil
}

func (resolver *imageLayerResolver) Author() string {
	value := resolver.data.GetAuthor()
	return value
}

func (resolver *imageLayerResolver) Components() ([]*imageScanComponentResolver, error) {
	value := resolver.data.GetComponents()
	return resolver.root.wrapImageScanComponents(value, nil)
}

func (resolver *imageLayerResolver) Created() (*graphql.Time, error) {
	value := resolver.data.GetCreated()
	return timestamp(value)
}

func (resolver *imageLayerResolver) Empty() bool {
	value := resolver.data.GetEmpty()
	return value
}

func (resolver *imageLayerResolver) Instruction() string {
	value := resolver.data.GetInstruction()
	return value
}

func (resolver *imageLayerResolver) Value() string {
	value := resolver.data.GetValue()
	return value
}

type imageMetadataResolver struct {
	root *Resolver
	data *storage.ImageMetadata
}

func (resolver *Resolver) wrapImageMetadata(value *storage.ImageMetadata, ok bool, err error) (*imageMetadataResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &imageMetadataResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapImageMetadatas(values []*storage.ImageMetadata, err error) ([]*imageMetadataResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*imageMetadataResolver, len(values))
	for i, v := range values {
		output[i] = &imageMetadataResolver{resolver, v}
	}
	return output, nil
}

func (resolver *imageMetadataResolver) LayerShas() []string {
	value := resolver.data.GetLayerShas()
	return value
}

func (resolver *imageMetadataResolver) V1() (*v1MetadataResolver, error) {
	value := resolver.data.GetV1()
	return resolver.root.wrapV1Metadata(value, true, nil)
}

func (resolver *imageMetadataResolver) V2() (*v2MetadataResolver, error) {
	value := resolver.data.GetV2()
	return resolver.root.wrapV2Metadata(value, true, nil)
}

type imageNameResolver struct {
	root *Resolver
	data *storage.ImageName
}

func (resolver *Resolver) wrapImageName(value *storage.ImageName, ok bool, err error) (*imageNameResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &imageNameResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapImageNames(values []*storage.ImageName, err error) ([]*imageNameResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*imageNameResolver, len(values))
	for i, v := range values {
		output[i] = &imageNameResolver{resolver, v}
	}
	return output, nil
}

func (resolver *imageNameResolver) FullName() string {
	value := resolver.data.GetFullName()
	return value
}

func (resolver *imageNameResolver) Registry() string {
	value := resolver.data.GetRegistry()
	return value
}

func (resolver *imageNameResolver) Remote() string {
	value := resolver.data.GetRemote()
	return value
}

func (resolver *imageNameResolver) Tag() string {
	value := resolver.data.GetTag()
	return value
}

type imageNamePolicyResolver struct {
	root *Resolver
	data *storage.ImageNamePolicy
}

func (resolver *Resolver) wrapImageNamePolicy(value *storage.ImageNamePolicy, ok bool, err error) (*imageNamePolicyResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &imageNamePolicyResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapImageNamePolicies(values []*storage.ImageNamePolicy, err error) ([]*imageNamePolicyResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*imageNamePolicyResolver, len(values))
	for i, v := range values {
		output[i] = &imageNamePolicyResolver{resolver, v}
	}
	return output, nil
}

func (resolver *imageNamePolicyResolver) Registry() string {
	value := resolver.data.GetRegistry()
	return value
}

func (resolver *imageNamePolicyResolver) Remote() string {
	value := resolver.data.GetRemote()
	return value
}

func (resolver *imageNamePolicyResolver) Tag() string {
	value := resolver.data.GetTag()
	return value
}

type imageScanResolver struct {
	root *Resolver
	data *storage.ImageScan
}

func (resolver *Resolver) wrapImageScan(value *storage.ImageScan, ok bool, err error) (*imageScanResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &imageScanResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapImageScans(values []*storage.ImageScan, err error) ([]*imageScanResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*imageScanResolver, len(values))
	for i, v := range values {
		output[i] = &imageScanResolver{resolver, v}
	}
	return output, nil
}

func (resolver *imageScanResolver) Components() ([]*imageScanComponentResolver, error) {
	value := resolver.data.GetComponents()
	return resolver.root.wrapImageScanComponents(value, nil)
}

func (resolver *imageScanResolver) ScanTime() (*graphql.Time, error) {
	value := resolver.data.GetScanTime()
	return timestamp(value)
}

type imageScanComponentResolver struct {
	root *Resolver
	data *storage.ImageScanComponent
}

func (resolver *Resolver) wrapImageScanComponent(value *storage.ImageScanComponent, ok bool, err error) (*imageScanComponentResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &imageScanComponentResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapImageScanComponents(values []*storage.ImageScanComponent, err error) ([]*imageScanComponentResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*imageScanComponentResolver, len(values))
	for i, v := range values {
		output[i] = &imageScanComponentResolver{resolver, v}
	}
	return output, nil
}

func (resolver *imageScanComponentResolver) License() (*licenseResolver, error) {
	value := resolver.data.GetLicense()
	return resolver.root.wrapLicense(value, true, nil)
}

func (resolver *imageScanComponentResolver) Name() string {
	value := resolver.data.GetName()
	return value
}

func (resolver *imageScanComponentResolver) Version() string {
	value := resolver.data.GetVersion()
	return value
}

func (resolver *imageScanComponentResolver) Vulns() ([]*vulnerabilityResolver, error) {
	value := resolver.data.GetVulns()
	return resolver.root.wrapVulnerabilities(value, nil)
}

type jiraResolver struct {
	root *Resolver
	data *storage.Jira
}

func (resolver *Resolver) wrapJira(value *storage.Jira, ok bool, err error) (*jiraResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &jiraResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapJiras(values []*storage.Jira, err error) ([]*jiraResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*jiraResolver, len(values))
	for i, v := range values {
		output[i] = &jiraResolver{resolver, v}
	}
	return output, nil
}

func (resolver *jiraResolver) IssueType() string {
	value := resolver.data.GetIssueType()
	return value
}

func (resolver *jiraResolver) Password() string {
	value := resolver.data.GetPassword()
	return value
}

func (resolver *jiraResolver) Url() string {
	value := resolver.data.GetUrl()
	return value
}

func (resolver *jiraResolver) Username() string {
	value := resolver.data.GetUsername()
	return value
}

type keyValuePairResolver struct {
	root *Resolver
	data *storage.KeyValuePair
}

func (resolver *Resolver) wrapKeyValuePair(value *storage.KeyValuePair, ok bool, err error) (*keyValuePairResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &keyValuePairResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapKeyValuePairs(values []*storage.KeyValuePair, err error) ([]*keyValuePairResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*keyValuePairResolver, len(values))
	for i, v := range values {
		output[i] = &keyValuePairResolver{resolver, v}
	}
	return output, nil
}

func (resolver *keyValuePairResolver) Key() string {
	value := resolver.data.GetKey()
	return value
}

func (resolver *keyValuePairResolver) Value() string {
	value := resolver.data.GetValue()
	return value
}

type keyValuePolicyResolver struct {
	root *Resolver
	data *storage.KeyValuePolicy
}

func (resolver *Resolver) wrapKeyValuePolicy(value *storage.KeyValuePolicy, ok bool, err error) (*keyValuePolicyResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &keyValuePolicyResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapKeyValuePolicies(values []*storage.KeyValuePolicy, err error) ([]*keyValuePolicyResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*keyValuePolicyResolver, len(values))
	for i, v := range values {
		output[i] = &keyValuePolicyResolver{resolver, v}
	}
	return output, nil
}

func (resolver *keyValuePolicyResolver) Key() string {
	value := resolver.data.GetKey()
	return value
}

func (resolver *keyValuePolicyResolver) Value() string {
	value := resolver.data.GetValue()
	return value
}

func toL4Protocol(value *string) storage.L4Protocol {
	if value != nil {
		return storage.L4Protocol(storage.L4Protocol_value[*value])
	}
	return storage.L4Protocol(0)
}

func toL4Protocols(values *[]string) []storage.L4Protocol {
	if values == nil {
		return nil
	}
	output := make([]storage.L4Protocol, len(*values))
	for i, v := range *values {
		output[i] = toL4Protocol(&v)
	}
	return output
}

type labelSelectorResolver struct {
	root *Resolver
	data *storage.LabelSelector
}

func (resolver *Resolver) wrapLabelSelector(value *storage.LabelSelector, ok bool, err error) (*labelSelectorResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &labelSelectorResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapLabelSelectors(values []*storage.LabelSelector, err error) ([]*labelSelectorResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*labelSelectorResolver, len(values))
	for i, v := range values {
		output[i] = &labelSelectorResolver{resolver, v}
	}
	return output, nil
}

func (resolver *labelSelectorResolver) MatchLabels() labels {
	value := resolver.data.GetMatchLabels()
	return labelsResolver(value)
}

func (resolver *labelSelectorResolver) Requirements() ([]*labelSelector_RequirementResolver, error) {
	value := resolver.data.GetRequirements()
	return resolver.root.wrapLabelSelector_Requirements(value, nil)
}

func toLabelSelector_Operator(value *string) storage.LabelSelector_Operator {
	if value != nil {
		return storage.LabelSelector_Operator(storage.LabelSelector_Operator_value[*value])
	}
	return storage.LabelSelector_Operator(0)
}

func toLabelSelector_Operators(values *[]string) []storage.LabelSelector_Operator {
	if values == nil {
		return nil
	}
	output := make([]storage.LabelSelector_Operator, len(*values))
	for i, v := range *values {
		output[i] = toLabelSelector_Operator(&v)
	}
	return output
}

type labelSelector_RequirementResolver struct {
	root *Resolver
	data *storage.LabelSelector_Requirement
}

func (resolver *Resolver) wrapLabelSelector_Requirement(value *storage.LabelSelector_Requirement, ok bool, err error) (*labelSelector_RequirementResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &labelSelector_RequirementResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapLabelSelector_Requirements(values []*storage.LabelSelector_Requirement, err error) ([]*labelSelector_RequirementResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*labelSelector_RequirementResolver, len(values))
	for i, v := range values {
		output[i] = &labelSelector_RequirementResolver{resolver, v}
	}
	return output, nil
}

func (resolver *labelSelector_RequirementResolver) Key() string {
	value := resolver.data.GetKey()
	return value
}

func (resolver *labelSelector_RequirementResolver) Op() string {
	value := resolver.data.GetOp()
	return value.String()
}

func (resolver *labelSelector_RequirementResolver) Values() []string {
	value := resolver.data.GetValues()
	return value
}

type licenseResolver struct {
	root *Resolver
	data *storage.License
}

func (resolver *Resolver) wrapLicense(value *storage.License, ok bool, err error) (*licenseResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &licenseResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapLicenses(values []*storage.License, err error) ([]*licenseResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*licenseResolver, len(values))
	for i, v := range values {
		output[i] = &licenseResolver{resolver, v}
	}
	return output, nil
}

func (resolver *licenseResolver) Name() string {
	value := resolver.data.GetName()
	return value
}

func (resolver *licenseResolver) Type() string {
	value := resolver.data.GetType()
	return value
}

func (resolver *licenseResolver) Url() string {
	value := resolver.data.GetUrl()
	return value
}

func toLifecycleStage(value *string) storage.LifecycleStage {
	if value != nil {
		return storage.LifecycleStage(storage.LifecycleStage_value[*value])
	}
	return storage.LifecycleStage(0)
}

func toLifecycleStages(values *[]string) []storage.LifecycleStage {
	if values == nil {
		return nil
	}
	output := make([]storage.LifecycleStage, len(*values))
	for i, v := range *values {
		output[i] = toLifecycleStage(&v)
	}
	return output
}

type metadataResolver struct {
	root *Resolver
	data *v1.Metadata
}

func (resolver *Resolver) wrapMetadata(value *v1.Metadata, ok bool, err error) (*metadataResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &metadataResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapMetadatas(values []*v1.Metadata, err error) ([]*metadataResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*metadataResolver, len(values))
	for i, v := range values {
		output[i] = &metadataResolver{resolver, v}
	}
	return output, nil
}

func (resolver *metadataResolver) BuildFlavor() string {
	value := resolver.data.GetBuildFlavor()
	return value
}

func (resolver *metadataResolver) ReleaseBuild() bool {
	value := resolver.data.GetReleaseBuild()
	return value
}

func (resolver *metadataResolver) Version() string {
	value := resolver.data.GetVersion()
	return value
}

type namespaceResolver struct {
	root *Resolver
	data *v1.Namespace
}

func (resolver *Resolver) wrapNamespace(value *v1.Namespace, ok bool, err error) (*namespaceResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &namespaceResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapNamespaces(values []*v1.Namespace, err error) ([]*namespaceResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*namespaceResolver, len(values))
	for i, v := range values {
		output[i] = &namespaceResolver{resolver, v}
	}
	return output, nil
}

func (resolver *namespaceResolver) Metadata() (*namespaceMetadataResolver, error) {
	value := resolver.data.GetMetadata()
	return resolver.root.wrapNamespaceMetadata(value, true, nil)
}

func (resolver *namespaceResolver) NumDeployments() int32 {
	value := resolver.data.GetNumDeployments()
	return value
}

func (resolver *namespaceResolver) NumNetworkPolicies() int32 {
	value := resolver.data.GetNumNetworkPolicies()
	return value
}

func (resolver *namespaceResolver) NumSecrets() int32 {
	value := resolver.data.GetNumSecrets()
	return value
}

type namespaceMetadataResolver struct {
	root *Resolver
	data *storage.NamespaceMetadata
}

func (resolver *Resolver) wrapNamespaceMetadata(value *storage.NamespaceMetadata, ok bool, err error) (*namespaceMetadataResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &namespaceMetadataResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapNamespaceMetadatas(values []*storage.NamespaceMetadata, err error) ([]*namespaceMetadataResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*namespaceMetadataResolver, len(values))
	for i, v := range values {
		output[i] = &namespaceMetadataResolver{resolver, v}
	}
	return output, nil
}

func (resolver *namespaceMetadataResolver) ClusterId() string {
	value := resolver.data.GetClusterId()
	return value
}

func (resolver *namespaceMetadataResolver) ClusterName() string {
	value := resolver.data.GetClusterName()
	return value
}

func (resolver *namespaceMetadataResolver) CreationTime() (*graphql.Time, error) {
	value := resolver.data.GetCreationTime()
	return timestamp(value)
}

func (resolver *namespaceMetadataResolver) Id() graphql.ID {
	value := resolver.data.GetId()
	return graphql.ID(value)
}

func (resolver *namespaceMetadataResolver) Labels() labels {
	value := resolver.data.GetLabels()
	return labelsResolver(value)
}

func (resolver *namespaceMetadataResolver) Name() string {
	value := resolver.data.GetName()
	return value
}

type networkEntityInfoResolver struct {
	root *Resolver
	data *storage.NetworkEntityInfo
}

func (resolver *Resolver) wrapNetworkEntityInfo(value *storage.NetworkEntityInfo, ok bool, err error) (*networkEntityInfoResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &networkEntityInfoResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapNetworkEntityInfos(values []*storage.NetworkEntityInfo, err error) ([]*networkEntityInfoResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*networkEntityInfoResolver, len(values))
	for i, v := range values {
		output[i] = &networkEntityInfoResolver{resolver, v}
	}
	return output, nil
}

func (resolver *networkEntityInfoResolver) Id() graphql.ID {
	value := resolver.data.GetId()
	return graphql.ID(value)
}

func (resolver *networkEntityInfoResolver) Type() string {
	value := resolver.data.GetType()
	return value.String()
}

type networkEntityInfoDescResolver struct {
	resolver *networkEntityInfoResolver
}

func (resolver *networkEntityInfoResolver) Desc() *networkEntityInfoDescResolver {
	return &networkEntityInfoDescResolver{resolver}
}

func (resolver *networkEntityInfoDescResolver) ToNetworkEntityInfo_Deployment() (*networkEntityInfo_DeploymentResolver, bool) {
	value := resolver.resolver.data.GetDeployment()
	if value != nil {
		return &networkEntityInfo_DeploymentResolver{resolver.resolver.root, value}, true
	}
	return nil, false
}

type networkEntityInfo_DeploymentResolver struct {
	root *Resolver
	data *storage.NetworkEntityInfo_Deployment
}

func (resolver *Resolver) wrapNetworkEntityInfo_Deployment(value *storage.NetworkEntityInfo_Deployment, ok bool, err error) (*networkEntityInfo_DeploymentResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &networkEntityInfo_DeploymentResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapNetworkEntityInfo_Deployments(values []*storage.NetworkEntityInfo_Deployment, err error) ([]*networkEntityInfo_DeploymentResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*networkEntityInfo_DeploymentResolver, len(values))
	for i, v := range values {
		output[i] = &networkEntityInfo_DeploymentResolver{resolver, v}
	}
	return output, nil
}

func (resolver *networkEntityInfo_DeploymentResolver) Cluster() string {
	value := resolver.data.GetCluster()
	return value
}

func (resolver *networkEntityInfo_DeploymentResolver) Name() string {
	value := resolver.data.GetName()
	return value
}

func (resolver *networkEntityInfo_DeploymentResolver) Namespace() string {
	value := resolver.data.GetNamespace()
	return value
}

func toNetworkEntityInfo_Type(value *string) storage.NetworkEntityInfo_Type {
	if value != nil {
		return storage.NetworkEntityInfo_Type(storage.NetworkEntityInfo_Type_value[*value])
	}
	return storage.NetworkEntityInfo_Type(0)
}

func toNetworkEntityInfo_Types(values *[]string) []storage.NetworkEntityInfo_Type {
	if values == nil {
		return nil
	}
	output := make([]storage.NetworkEntityInfo_Type, len(*values))
	for i, v := range *values {
		output[i] = toNetworkEntityInfo_Type(&v)
	}
	return output
}

type networkFlowResolver struct {
	root *Resolver
	data *storage.NetworkFlow
}

func (resolver *Resolver) wrapNetworkFlow(value *storage.NetworkFlow, ok bool, err error) (*networkFlowResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &networkFlowResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapNetworkFlows(values []*storage.NetworkFlow, err error) ([]*networkFlowResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*networkFlowResolver, len(values))
	for i, v := range values {
		output[i] = &networkFlowResolver{resolver, v}
	}
	return output, nil
}

func (resolver *networkFlowResolver) LastSeenTimestamp() (*graphql.Time, error) {
	value := resolver.data.GetLastSeenTimestamp()
	return timestamp(value)
}

func (resolver *networkFlowResolver) Props() (*networkFlowPropertiesResolver, error) {
	value := resolver.data.GetProps()
	return resolver.root.wrapNetworkFlowProperties(value, true, nil)
}

type networkFlowPropertiesResolver struct {
	root *Resolver
	data *storage.NetworkFlowProperties
}

func (resolver *Resolver) wrapNetworkFlowProperties(value *storage.NetworkFlowProperties, ok bool, err error) (*networkFlowPropertiesResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &networkFlowPropertiesResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapNetworkFlowPropertieses(values []*storage.NetworkFlowProperties, err error) ([]*networkFlowPropertiesResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*networkFlowPropertiesResolver, len(values))
	for i, v := range values {
		output[i] = &networkFlowPropertiesResolver{resolver, v}
	}
	return output, nil
}

func (resolver *networkFlowPropertiesResolver) DstEntity() (*networkEntityInfoResolver, error) {
	value := resolver.data.GetDstEntity()
	return resolver.root.wrapNetworkEntityInfo(value, true, nil)
}

func (resolver *networkFlowPropertiesResolver) DstPort() int32 {
	value := resolver.data.GetDstPort()
	return int32(value)
}

func (resolver *networkFlowPropertiesResolver) L4Protocol() string {
	value := resolver.data.GetL4Protocol()
	return value.String()
}

func (resolver *networkFlowPropertiesResolver) SrcEntity() (*networkEntityInfoResolver, error) {
	value := resolver.data.GetSrcEntity()
	return resolver.root.wrapNetworkEntityInfo(value, true, nil)
}

type nodeResolver struct {
	root *Resolver
	data *storage.Node
}

func (resolver *Resolver) wrapNode(value *storage.Node, ok bool, err error) (*nodeResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &nodeResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapNodes(values []*storage.Node, err error) ([]*nodeResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*nodeResolver, len(values))
	for i, v := range values {
		output[i] = &nodeResolver{resolver, v}
	}
	return output, nil
}

func (resolver *nodeResolver) Annotations() labels {
	value := resolver.data.GetAnnotations()
	return labelsResolver(value)
}

func (resolver *nodeResolver) ClusterId() string {
	value := resolver.data.GetClusterId()
	return value
}

func (resolver *nodeResolver) ClusterName() string {
	value := resolver.data.GetClusterName()
	return value
}

func (resolver *nodeResolver) ContainerRuntimeVersion() string {
	value := resolver.data.GetContainerRuntimeVersion()
	return value
}

func (resolver *nodeResolver) ExternalIpAddresses() []string {
	value := resolver.data.GetExternalIpAddresses()
	return value
}

func (resolver *nodeResolver) Id() graphql.ID {
	value := resolver.data.GetId()
	return graphql.ID(value)
}

func (resolver *nodeResolver) InternalIpAddresses() []string {
	value := resolver.data.GetInternalIpAddresses()
	return value
}

func (resolver *nodeResolver) JoinedAt() (*graphql.Time, error) {
	value := resolver.data.GetJoinedAt()
	return timestamp(value)
}

func (resolver *nodeResolver) KernelVersion() string {
	value := resolver.data.GetKernelVersion()
	return value
}

func (resolver *nodeResolver) Labels() labels {
	value := resolver.data.GetLabels()
	return labelsResolver(value)
}

func (resolver *nodeResolver) Name() string {
	value := resolver.data.GetName()
	return value
}

func (resolver *nodeResolver) OsImage() string {
	value := resolver.data.GetOsImage()
	return value
}

func (resolver *nodeResolver) Taints() ([]*taintResolver, error) {
	value := resolver.data.GetTaints()
	return resolver.root.wrapTaints(value, nil)
}

type notifierResolver struct {
	root *Resolver
	data *storage.Notifier
}

func (resolver *Resolver) wrapNotifier(value *storage.Notifier, ok bool, err error) (*notifierResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &notifierResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapNotifiers(values []*storage.Notifier, err error) ([]*notifierResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*notifierResolver, len(values))
	for i, v := range values {
		output[i] = &notifierResolver{resolver, v}
	}
	return output, nil
}

func (resolver *notifierResolver) Enabled() bool {
	value := resolver.data.GetEnabled()
	return value
}

func (resolver *notifierResolver) Id() graphql.ID {
	value := resolver.data.GetId()
	return graphql.ID(value)
}

func (resolver *notifierResolver) LabelDefault() string {
	value := resolver.data.GetLabelDefault()
	return value
}

func (resolver *notifierResolver) LabelKey() string {
	value := resolver.data.GetLabelKey()
	return value
}

func (resolver *notifierResolver) Name() string {
	value := resolver.data.GetName()
	return value
}

func (resolver *notifierResolver) Type() string {
	value := resolver.data.GetType()
	return value
}

func (resolver *notifierResolver) UiEndpoint() string {
	value := resolver.data.GetUiEndpoint()
	return value
}

type notifierConfigResolver struct {
	resolver *notifierResolver
}

func (resolver *notifierResolver) Config() *notifierConfigResolver {
	return &notifierConfigResolver{resolver}
}

func (resolver *notifierConfigResolver) ToJira() (*jiraResolver, bool) {
	value := resolver.resolver.data.GetJira()
	if value != nil {
		return &jiraResolver{resolver.resolver.root, value}, true
	}
	return nil, false
}

func (resolver *notifierConfigResolver) ToEmail() (*emailResolver, bool) {
	value := resolver.resolver.data.GetEmail()
	if value != nil {
		return &emailResolver{resolver.resolver.root, value}, true
	}
	return nil, false
}

func (resolver *notifierConfigResolver) ToCSCC() (*cSCCResolver, bool) {
	value := resolver.resolver.data.GetCscc()
	if value != nil {
		return &cSCCResolver{resolver.resolver.root, value}, true
	}
	return nil, false
}

func (resolver *notifierConfigResolver) ToSplunk() (*splunkResolver, bool) {
	value := resolver.resolver.data.GetSplunk()
	if value != nil {
		return &splunkResolver{resolver.resolver.root, value}, true
	}
	return nil, false
}

func (resolver *notifierConfigResolver) ToPagerDuty() (*pagerDutyResolver, bool) {
	value := resolver.resolver.data.GetPagerduty()
	if value != nil {
		return &pagerDutyResolver{resolver.resolver.root, value}, true
	}
	return nil, false
}

func (resolver *notifierConfigResolver) ToGeneric() (*genericResolver, bool) {
	value := resolver.resolver.data.GetGeneric()
	if value != nil {
		return &genericResolver{resolver.resolver.root, value}, true
	}
	return nil, false
}

type numericalPolicyResolver struct {
	root *Resolver
	data *storage.NumericalPolicy
}

func (resolver *Resolver) wrapNumericalPolicy(value *storage.NumericalPolicy, ok bool, err error) (*numericalPolicyResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &numericalPolicyResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapNumericalPolicies(values []*storage.NumericalPolicy, err error) ([]*numericalPolicyResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*numericalPolicyResolver, len(values))
	for i, v := range values {
		output[i] = &numericalPolicyResolver{resolver, v}
	}
	return output, nil
}

func (resolver *numericalPolicyResolver) Op() string {
	value := resolver.data.GetOp()
	return value.String()
}

func (resolver *numericalPolicyResolver) Value() float64 {
	value := resolver.data.GetValue()
	return float64(value)
}

type orchestratorMetadataResolver struct {
	root *Resolver
	data *storage.OrchestratorMetadata
}

func (resolver *Resolver) wrapOrchestratorMetadata(value *storage.OrchestratorMetadata, ok bool, err error) (*orchestratorMetadataResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &orchestratorMetadataResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapOrchestratorMetadatas(values []*storage.OrchestratorMetadata, err error) ([]*orchestratorMetadataResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*orchestratorMetadataResolver, len(values))
	for i, v := range values {
		output[i] = &orchestratorMetadataResolver{resolver, v}
	}
	return output, nil
}

func (resolver *orchestratorMetadataResolver) BuildDate() (*graphql.Time, error) {
	value := resolver.data.GetBuildDate()
	return timestamp(value)
}

func (resolver *orchestratorMetadataResolver) Version() string {
	value := resolver.data.GetVersion()
	return value
}

type pagerDutyResolver struct {
	root *Resolver
	data *storage.PagerDuty
}

func (resolver *Resolver) wrapPagerDuty(value *storage.PagerDuty, ok bool, err error) (*pagerDutyResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &pagerDutyResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapPagerDuties(values []*storage.PagerDuty, err error) ([]*pagerDutyResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*pagerDutyResolver, len(values))
	for i, v := range values {
		output[i] = &pagerDutyResolver{resolver, v}
	}
	return output, nil
}

func (resolver *pagerDutyResolver) ApiKey() string {
	value := resolver.data.GetApiKey()
	return value
}

type policyResolver struct {
	root *Resolver
	data *storage.Policy
}

func (resolver *Resolver) wrapPolicy(value *storage.Policy, ok bool, err error) (*policyResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &policyResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapPolicies(values []*storage.Policy, err error) ([]*policyResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*policyResolver, len(values))
	for i, v := range values {
		output[i] = &policyResolver{resolver, v}
	}
	return output, nil
}

func (resolver *policyResolver) Categories() []string {
	value := resolver.data.GetCategories()
	return value
}

func (resolver *policyResolver) Description() string {
	value := resolver.data.GetDescription()
	return value
}

func (resolver *policyResolver) Disabled() bool {
	value := resolver.data.GetDisabled()
	return value
}

func (resolver *policyResolver) EnforcementActions() []string {
	value := resolver.data.GetEnforcementActions()
	return stringSlice(value)
}

func (resolver *policyResolver) Fields() (*policyFieldsResolver, error) {
	value := resolver.data.GetFields()
	return resolver.root.wrapPolicyFields(value, true, nil)
}

func (resolver *policyResolver) Id() graphql.ID {
	value := resolver.data.GetId()
	return graphql.ID(value)
}

func (resolver *policyResolver) LifecycleStages() []string {
	value := resolver.data.GetLifecycleStages()
	return stringSlice(value)
}

func (resolver *policyResolver) Name() string {
	value := resolver.data.GetName()
	return value
}

func (resolver *policyResolver) Notifiers() []string {
	value := resolver.data.GetNotifiers()
	return value
}

func (resolver *policyResolver) Rationale() string {
	value := resolver.data.GetRationale()
	return value
}

func (resolver *policyResolver) Remediation() string {
	value := resolver.data.GetRemediation()
	return value
}

func (resolver *policyResolver) Scope() ([]*scopeResolver, error) {
	value := resolver.data.GetScope()
	return resolver.root.wrapScopes(value, nil)
}

func (resolver *policyResolver) Severity() string {
	value := resolver.data.GetSeverity()
	return value.String()
}

func (resolver *policyResolver) Whitelists() ([]*whitelistResolver, error) {
	value := resolver.data.GetWhitelists()
	return resolver.root.wrapWhitelists(value, nil)
}

type policyFieldsResolver struct {
	root *Resolver
	data *storage.PolicyFields
}

func (resolver *Resolver) wrapPolicyFields(value *storage.PolicyFields, ok bool, err error) (*policyFieldsResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &policyFieldsResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapPolicyFieldses(values []*storage.PolicyFields, err error) ([]*policyFieldsResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*policyFieldsResolver, len(values))
	for i, v := range values {
		output[i] = &policyFieldsResolver{resolver, v}
	}
	return output, nil
}

func (resolver *policyFieldsResolver) AddCapabilities() []string {
	value := resolver.data.GetAddCapabilities()
	return value
}

func (resolver *policyFieldsResolver) Args() string {
	value := resolver.data.GetArgs()
	return value
}

func (resolver *policyFieldsResolver) Command() string {
	value := resolver.data.GetCommand()
	return value
}

func (resolver *policyFieldsResolver) Component() (*componentResolver, error) {
	value := resolver.data.GetComponent()
	return resolver.root.wrapComponent(value, true, nil)
}

func (resolver *policyFieldsResolver) ContainerResourcePolicy() (*resourcePolicyResolver, error) {
	value := resolver.data.GetContainerResourcePolicy()
	return resolver.root.wrapResourcePolicy(value, true, nil)
}

func (resolver *policyFieldsResolver) Cve() string {
	value := resolver.data.GetCve()
	return value
}

func (resolver *policyFieldsResolver) Cvss() (*numericalPolicyResolver, error) {
	value := resolver.data.GetCvss()
	return resolver.root.wrapNumericalPolicy(value, true, nil)
}

func (resolver *policyFieldsResolver) Directory() string {
	value := resolver.data.GetDirectory()
	return value
}

func (resolver *policyFieldsResolver) DisallowedAnnotation() (*keyValuePolicyResolver, error) {
	value := resolver.data.GetDisallowedAnnotation()
	return resolver.root.wrapKeyValuePolicy(value, true, nil)
}

func (resolver *policyFieldsResolver) DropCapabilities() []string {
	value := resolver.data.GetDropCapabilities()
	return value
}

func (resolver *policyFieldsResolver) Env() (*keyValuePolicyResolver, error) {
	value := resolver.data.GetEnv()
	return resolver.root.wrapKeyValuePolicy(value, true, nil)
}

func (resolver *policyFieldsResolver) FixedBy() string {
	value := resolver.data.GetFixedBy()
	return value
}

func (resolver *policyFieldsResolver) ImageName() (*imageNamePolicyResolver, error) {
	value := resolver.data.GetImageName()
	return resolver.root.wrapImageNamePolicy(value, true, nil)
}

func (resolver *policyFieldsResolver) LineRule() (*dockerfileLineRuleFieldResolver, error) {
	value := resolver.data.GetLineRule()
	return resolver.root.wrapDockerfileLineRuleField(value, true, nil)
}

func (resolver *policyFieldsResolver) PortPolicy() (*portPolicyResolver, error) {
	value := resolver.data.GetPortPolicy()
	return resolver.root.wrapPortPolicy(value, true, nil)
}

func (resolver *policyFieldsResolver) ProcessPolicy() (*processPolicyResolver, error) {
	value := resolver.data.GetProcessPolicy()
	return resolver.root.wrapProcessPolicy(value, true, nil)
}

func (resolver *policyFieldsResolver) RequiredAnnotation() (*keyValuePolicyResolver, error) {
	value := resolver.data.GetRequiredAnnotation()
	return resolver.root.wrapKeyValuePolicy(value, true, nil)
}

func (resolver *policyFieldsResolver) RequiredLabel() (*keyValuePolicyResolver, error) {
	value := resolver.data.GetRequiredLabel()
	return resolver.root.wrapKeyValuePolicy(value, true, nil)
}

func (resolver *policyFieldsResolver) User() string {
	value := resolver.data.GetUser()
	return value
}

func (resolver *policyFieldsResolver) VolumePolicy() (*volumePolicyResolver, error) {
	value := resolver.data.GetVolumePolicy()
	return resolver.root.wrapVolumePolicy(value, true, nil)
}

type portConfigResolver struct {
	root *Resolver
	data *storage.PortConfig
}

func (resolver *Resolver) wrapPortConfig(value *storage.PortConfig, ok bool, err error) (*portConfigResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &portConfigResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapPortConfigs(values []*storage.PortConfig, err error) ([]*portConfigResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*portConfigResolver, len(values))
	for i, v := range values {
		output[i] = &portConfigResolver{resolver, v}
	}
	return output, nil
}

func (resolver *portConfigResolver) ContainerPort() int32 {
	value := resolver.data.GetContainerPort()
	return value
}

func (resolver *portConfigResolver) ExposedPort() int32 {
	value := resolver.data.GetExposedPort()
	return value
}

func (resolver *portConfigResolver) Exposure() string {
	value := resolver.data.GetExposure()
	return value.String()
}

func (resolver *portConfigResolver) ExposureInfos() ([]*portConfig_ExposureInfoResolver, error) {
	value := resolver.data.GetExposureInfos()
	return resolver.root.wrapPortConfig_ExposureInfos(value, nil)
}

func (resolver *portConfigResolver) Name() string {
	value := resolver.data.GetName()
	return value
}

func (resolver *portConfigResolver) Protocol() string {
	value := resolver.data.GetProtocol()
	return value
}

type portConfig_ExposureInfoResolver struct {
	root *Resolver
	data *storage.PortConfig_ExposureInfo
}

func (resolver *Resolver) wrapPortConfig_ExposureInfo(value *storage.PortConfig_ExposureInfo, ok bool, err error) (*portConfig_ExposureInfoResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &portConfig_ExposureInfoResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapPortConfig_ExposureInfos(values []*storage.PortConfig_ExposureInfo, err error) ([]*portConfig_ExposureInfoResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*portConfig_ExposureInfoResolver, len(values))
	for i, v := range values {
		output[i] = &portConfig_ExposureInfoResolver{resolver, v}
	}
	return output, nil
}

func (resolver *portConfig_ExposureInfoResolver) ExternalHostnames() []string {
	value := resolver.data.GetExternalHostnames()
	return value
}

func (resolver *portConfig_ExposureInfoResolver) ExternalIps() []string {
	value := resolver.data.GetExternalIps()
	return value
}

func (resolver *portConfig_ExposureInfoResolver) Level() string {
	value := resolver.data.GetLevel()
	return value.String()
}

func (resolver *portConfig_ExposureInfoResolver) NodePort() int32 {
	value := resolver.data.GetNodePort()
	return value
}

func (resolver *portConfig_ExposureInfoResolver) ServiceClusterIp() string {
	value := resolver.data.GetServiceClusterIp()
	return value
}

func (resolver *portConfig_ExposureInfoResolver) ServiceId() string {
	value := resolver.data.GetServiceId()
	return value
}

func (resolver *portConfig_ExposureInfoResolver) ServiceName() string {
	value := resolver.data.GetServiceName()
	return value
}

func (resolver *portConfig_ExposureInfoResolver) ServicePort() int32 {
	value := resolver.data.GetServicePort()
	return value
}

func toPortConfig_ExposureLevel(value *string) storage.PortConfig_ExposureLevel {
	if value != nil {
		return storage.PortConfig_ExposureLevel(storage.PortConfig_ExposureLevel_value[*value])
	}
	return storage.PortConfig_ExposureLevel(0)
}

func toPortConfig_ExposureLevels(values *[]string) []storage.PortConfig_ExposureLevel {
	if values == nil {
		return nil
	}
	output := make([]storage.PortConfig_ExposureLevel, len(*values))
	for i, v := range *values {
		output[i] = toPortConfig_ExposureLevel(&v)
	}
	return output
}

type portPolicyResolver struct {
	root *Resolver
	data *storage.PortPolicy
}

func (resolver *Resolver) wrapPortPolicy(value *storage.PortPolicy, ok bool, err error) (*portPolicyResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &portPolicyResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapPortPolicies(values []*storage.PortPolicy, err error) ([]*portPolicyResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*portPolicyResolver, len(values))
	for i, v := range values {
		output[i] = &portPolicyResolver{resolver, v}
	}
	return output, nil
}

func (resolver *portPolicyResolver) Port() int32 {
	value := resolver.data.GetPort()
	return value
}

func (resolver *portPolicyResolver) Protocol() string {
	value := resolver.data.GetProtocol()
	return value
}

type processGroupResolver struct {
	root *Resolver
	data *v1.ProcessGroup
}

func (resolver *Resolver) wrapProcessGroup(value *v1.ProcessGroup, ok bool, err error) (*processGroupResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &processGroupResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapProcessGroups(values []*v1.ProcessGroup, err error) ([]*processGroupResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*processGroupResolver, len(values))
	for i, v := range values {
		output[i] = &processGroupResolver{resolver, v}
	}
	return output, nil
}

func (resolver *processGroupResolver) Args() string {
	value := resolver.data.GetArgs()
	return value
}

func (resolver *processGroupResolver) Signals() ([]*processIndicatorResolver, error) {
	value := resolver.data.GetSignals()
	return resolver.root.wrapProcessIndicators(value, nil)
}

type processIndicatorResolver struct {
	root *Resolver
	data *storage.ProcessIndicator
}

func (resolver *Resolver) wrapProcessIndicator(value *storage.ProcessIndicator, ok bool, err error) (*processIndicatorResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &processIndicatorResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapProcessIndicators(values []*storage.ProcessIndicator, err error) ([]*processIndicatorResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*processIndicatorResolver, len(values))
	for i, v := range values {
		output[i] = &processIndicatorResolver{resolver, v}
	}
	return output, nil
}

func (resolver *processIndicatorResolver) ContainerName() string {
	value := resolver.data.GetContainerName()
	return value
}

func (resolver *processIndicatorResolver) DeploymentId() string {
	value := resolver.data.GetDeploymentId()
	return value
}

func (resolver *processIndicatorResolver) EmitTimestamp() (*graphql.Time, error) {
	value := resolver.data.GetEmitTimestamp()
	return timestamp(value)
}

func (resolver *processIndicatorResolver) Id() graphql.ID {
	value := resolver.data.GetId()
	return graphql.ID(value)
}

func (resolver *processIndicatorResolver) PodId() string {
	value := resolver.data.GetPodId()
	return value
}

func (resolver *processIndicatorResolver) Signal() (*processSignalResolver, error) {
	value := resolver.data.GetSignal()
	return resolver.root.wrapProcessSignal(value, true, nil)
}

type processNameGroupResolver struct {
	root *Resolver
	data *v1.ProcessNameGroup
}

func (resolver *Resolver) wrapProcessNameGroup(value *v1.ProcessNameGroup, ok bool, err error) (*processNameGroupResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &processNameGroupResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapProcessNameGroups(values []*v1.ProcessNameGroup, err error) ([]*processNameGroupResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*processNameGroupResolver, len(values))
	for i, v := range values {
		output[i] = &processNameGroupResolver{resolver, v}
	}
	return output, nil
}

func (resolver *processNameGroupResolver) Groups() ([]*processGroupResolver, error) {
	value := resolver.data.GetGroups()
	return resolver.root.wrapProcessGroups(value, nil)
}

func (resolver *processNameGroupResolver) Name() string {
	value := resolver.data.GetName()
	return value
}

func (resolver *processNameGroupResolver) TimesExecuted() int32 {
	value := resolver.data.GetTimesExecuted()
	return int32(value)
}

type processPolicyResolver struct {
	root *Resolver
	data *storage.ProcessPolicy
}

func (resolver *Resolver) wrapProcessPolicy(value *storage.ProcessPolicy, ok bool, err error) (*processPolicyResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &processPolicyResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapProcessPolicies(values []*storage.ProcessPolicy, err error) ([]*processPolicyResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*processPolicyResolver, len(values))
	for i, v := range values {
		output[i] = &processPolicyResolver{resolver, v}
	}
	return output, nil
}

func (resolver *processPolicyResolver) Ancestor() string {
	value := resolver.data.GetAncestor()
	return value
}

func (resolver *processPolicyResolver) Args() string {
	value := resolver.data.GetArgs()
	return value
}

func (resolver *processPolicyResolver) Name() string {
	value := resolver.data.GetName()
	return value
}

func (resolver *processPolicyResolver) Uid() string {
	value := resolver.data.GetUid()
	return value
}

type processSignalResolver struct {
	root *Resolver
	data *storage.ProcessSignal
}

func (resolver *Resolver) wrapProcessSignal(value *storage.ProcessSignal, ok bool, err error) (*processSignalResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &processSignalResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapProcessSignals(values []*storage.ProcessSignal, err error) ([]*processSignalResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*processSignalResolver, len(values))
	for i, v := range values {
		output[i] = &processSignalResolver{resolver, v}
	}
	return output, nil
}

func (resolver *processSignalResolver) Args() string {
	value := resolver.data.GetArgs()
	return value
}

func (resolver *processSignalResolver) ContainerId() string {
	value := resolver.data.GetContainerId()
	return value
}

func (resolver *processSignalResolver) ExecFilePath() string {
	value := resolver.data.GetExecFilePath()
	return value
}

func (resolver *processSignalResolver) Gid() int32 {
	value := resolver.data.GetGid()
	return int32(value)
}

func (resolver *processSignalResolver) Id() graphql.ID {
	value := resolver.data.GetId()
	return graphql.ID(value)
}

func (resolver *processSignalResolver) Lineage() []string {
	value := resolver.data.GetLineage()
	return value
}

func (resolver *processSignalResolver) Name() string {
	value := resolver.data.GetName()
	return value
}

func (resolver *processSignalResolver) Pid() int32 {
	value := resolver.data.GetPid()
	return int32(value)
}

func (resolver *processSignalResolver) Time() (*graphql.Time, error) {
	value := resolver.data.GetTime()
	return timestamp(value)
}

func (resolver *processSignalResolver) Uid() int32 {
	value := resolver.data.GetUid()
	return int32(value)
}

type providerMetadataResolver struct {
	root *Resolver
	data *storage.ProviderMetadata
}

func (resolver *Resolver) wrapProviderMetadata(value *storage.ProviderMetadata, ok bool, err error) (*providerMetadataResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &providerMetadataResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapProviderMetadatas(values []*storage.ProviderMetadata, err error) ([]*providerMetadataResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*providerMetadataResolver, len(values))
	for i, v := range values {
		output[i] = &providerMetadataResolver{resolver, v}
	}
	return output, nil
}

func (resolver *providerMetadataResolver) Region() string {
	value := resolver.data.GetRegion()
	return value
}

func (resolver *providerMetadataResolver) Zone() string {
	value := resolver.data.GetZone()
	return value
}

type providerMetadataProviderResolver struct {
	resolver *providerMetadataResolver
}

func (resolver *providerMetadataResolver) Provider() *providerMetadataProviderResolver {
	return &providerMetadataProviderResolver{resolver}
}

func (resolver *providerMetadataProviderResolver) ToGoogleProviderMetadata() (*googleProviderMetadataResolver, bool) {
	value := resolver.resolver.data.GetGoogle()
	if value != nil {
		return &googleProviderMetadataResolver{resolver.resolver.root, value}, true
	}
	return nil, false
}

func (resolver *providerMetadataProviderResolver) ToAWSProviderMetadata() (*aWSProviderMetadataResolver, bool) {
	value := resolver.resolver.data.GetAws()
	if value != nil {
		return &aWSProviderMetadataResolver{resolver.resolver.root, value}, true
	}
	return nil, false
}

func (resolver *providerMetadataProviderResolver) ToAzureProviderMetadata() (*azureProviderMetadataResolver, bool) {
	value := resolver.resolver.data.GetAzure()
	if value != nil {
		return &azureProviderMetadataResolver{resolver.resolver.root, value}, true
	}
	return nil, false
}

type resourcePolicyResolver struct {
	root *Resolver
	data *storage.ResourcePolicy
}

func (resolver *Resolver) wrapResourcePolicy(value *storage.ResourcePolicy, ok bool, err error) (*resourcePolicyResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &resourcePolicyResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapResourcePolicies(values []*storage.ResourcePolicy, err error) ([]*resourcePolicyResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*resourcePolicyResolver, len(values))
	for i, v := range values {
		output[i] = &resourcePolicyResolver{resolver, v}
	}
	return output, nil
}

func (resolver *resourcePolicyResolver) CpuResourceLimit() (*numericalPolicyResolver, error) {
	value := resolver.data.GetCpuResourceLimit()
	return resolver.root.wrapNumericalPolicy(value, true, nil)
}

func (resolver *resourcePolicyResolver) CpuResourceRequest() (*numericalPolicyResolver, error) {
	value := resolver.data.GetCpuResourceRequest()
	return resolver.root.wrapNumericalPolicy(value, true, nil)
}

func (resolver *resourcePolicyResolver) MemoryResourceLimit() (*numericalPolicyResolver, error) {
	value := resolver.data.GetMemoryResourceLimit()
	return resolver.root.wrapNumericalPolicy(value, true, nil)
}

func (resolver *resourcePolicyResolver) MemoryResourceRequest() (*numericalPolicyResolver, error) {
	value := resolver.data.GetMemoryResourceRequest()
	return resolver.root.wrapNumericalPolicy(value, true, nil)
}

type resourcesResolver struct {
	root *Resolver
	data *storage.Resources
}

func (resolver *Resolver) wrapResources(value *storage.Resources, ok bool, err error) (*resourcesResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &resourcesResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapResourceses(values []*storage.Resources, err error) ([]*resourcesResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*resourcesResolver, len(values))
	for i, v := range values {
		output[i] = &resourcesResolver{resolver, v}
	}
	return output, nil
}

func (resolver *resourcesResolver) CpuCoresLimit() float64 {
	value := resolver.data.GetCpuCoresLimit()
	return float64(value)
}

func (resolver *resourcesResolver) CpuCoresRequest() float64 {
	value := resolver.data.GetCpuCoresRequest()
	return float64(value)
}

func (resolver *resourcesResolver) MemoryMbLimit() float64 {
	value := resolver.data.GetMemoryMbLimit()
	return float64(value)
}

func (resolver *resourcesResolver) MemoryMbRequest() float64 {
	value := resolver.data.GetMemoryMbRequest()
	return float64(value)
}

type riskResolver struct {
	root *Resolver
	data *storage.Risk
}

func (resolver *Resolver) wrapRisk(value *storage.Risk, ok bool, err error) (*riskResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &riskResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapRisks(values []*storage.Risk, err error) ([]*riskResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*riskResolver, len(values))
	for i, v := range values {
		output[i] = &riskResolver{resolver, v}
	}
	return output, nil
}

func (resolver *riskResolver) Results() ([]*risk_ResultResolver, error) {
	value := resolver.data.GetResults()
	return resolver.root.wrapRisk_Results(value, nil)
}

func (resolver *riskResolver) Score() float64 {
	value := resolver.data.GetScore()
	return float64(value)
}

type risk_ResultResolver struct {
	root *Resolver
	data *storage.Risk_Result
}

func (resolver *Resolver) wrapRisk_Result(value *storage.Risk_Result, ok bool, err error) (*risk_ResultResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &risk_ResultResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapRisk_Results(values []*storage.Risk_Result, err error) ([]*risk_ResultResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*risk_ResultResolver, len(values))
	for i, v := range values {
		output[i] = &risk_ResultResolver{resolver, v}
	}
	return output, nil
}

func (resolver *risk_ResultResolver) Factors() ([]*risk_Result_FactorResolver, error) {
	value := resolver.data.GetFactors()
	return resolver.root.wrapRisk_Result_Factors(value, nil)
}

func (resolver *risk_ResultResolver) Name() string {
	value := resolver.data.GetName()
	return value
}

func (resolver *risk_ResultResolver) Score() float64 {
	value := resolver.data.GetScore()
	return float64(value)
}

type risk_Result_FactorResolver struct {
	root *Resolver
	data *storage.Risk_Result_Factor
}

func (resolver *Resolver) wrapRisk_Result_Factor(value *storage.Risk_Result_Factor, ok bool, err error) (*risk_Result_FactorResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &risk_Result_FactorResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapRisk_Result_Factors(values []*storage.Risk_Result_Factor, err error) ([]*risk_Result_FactorResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*risk_Result_FactorResolver, len(values))
	for i, v := range values {
		output[i] = &risk_Result_FactorResolver{resolver, v}
	}
	return output, nil
}

func (resolver *risk_Result_FactorResolver) Message() string {
	value := resolver.data.GetMessage()
	return value
}

func (resolver *risk_Result_FactorResolver) Url() string {
	value := resolver.data.GetUrl()
	return value
}

type roleResolver struct {
	root *Resolver
	data *storage.Role
}

func (resolver *Resolver) wrapRole(value *storage.Role, ok bool, err error) (*roleResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &roleResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapRoles(values []*storage.Role, err error) ([]*roleResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*roleResolver, len(values))
	for i, v := range values {
		output[i] = &roleResolver{resolver, v}
	}
	return output, nil
}

func (resolver *roleResolver) GlobalAccess() string {
	value := resolver.data.GetGlobalAccess()
	return value.String()
}

func (resolver *roleResolver) Name() string {
	value := resolver.data.GetName()
	return value
}

type scopeResolver struct {
	root *Resolver
	data *storage.Scope
}

func (resolver *Resolver) wrapScope(value *storage.Scope, ok bool, err error) (*scopeResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &scopeResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapScopes(values []*storage.Scope, err error) ([]*scopeResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*scopeResolver, len(values))
	for i, v := range values {
		output[i] = &scopeResolver{resolver, v}
	}
	return output, nil
}

func (resolver *scopeResolver) Cluster() string {
	value := resolver.data.GetCluster()
	return value
}

func (resolver *scopeResolver) Label() (*scope_LabelResolver, error) {
	value := resolver.data.GetLabel()
	return resolver.root.wrapScope_Label(value, true, nil)
}

func (resolver *scopeResolver) Namespace() string {
	value := resolver.data.GetNamespace()
	return value
}

type scope_LabelResolver struct {
	root *Resolver
	data *storage.Scope_Label
}

func (resolver *Resolver) wrapScope_Label(value *storage.Scope_Label, ok bool, err error) (*scope_LabelResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &scope_LabelResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapScope_Labels(values []*storage.Scope_Label, err error) ([]*scope_LabelResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*scope_LabelResolver, len(values))
	for i, v := range values {
		output[i] = &scope_LabelResolver{resolver, v}
	}
	return output, nil
}

func (resolver *scope_LabelResolver) Key() string {
	value := resolver.data.GetKey()
	return value
}

func (resolver *scope_LabelResolver) Value() string {
	value := resolver.data.GetValue()
	return value
}

func toSearchCategory(value *string) v1.SearchCategory {
	if value != nil {
		return v1.SearchCategory(v1.SearchCategory_value[*value])
	}
	return v1.SearchCategory(0)
}

func toSearchCategories(values *[]string) []v1.SearchCategory {
	if values == nil {
		return nil
	}
	output := make([]v1.SearchCategory, len(*values))
	for i, v := range *values {
		output[i] = toSearchCategory(&v)
	}
	return output
}

type searchResultResolver struct {
	root *Resolver
	data *v1.SearchResult
}

func (resolver *Resolver) wrapSearchResult(value *v1.SearchResult, ok bool, err error) (*searchResultResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &searchResultResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapSearchResults(values []*v1.SearchResult, err error) ([]*searchResultResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*searchResultResolver, len(values))
	for i, v := range values {
		output[i] = &searchResultResolver{resolver, v}
	}
	return output, nil
}

func (resolver *searchResultResolver) Category() string {
	value := resolver.data.GetCategory()
	return value.String()
}

func (resolver *searchResultResolver) Id() graphql.ID {
	value := resolver.data.GetId()
	return graphql.ID(value)
}

func (resolver *searchResultResolver) Location() string {
	value := resolver.data.GetLocation()
	return value
}

func (resolver *searchResultResolver) Name() string {
	value := resolver.data.GetName()
	return value
}

func (resolver *searchResultResolver) Score() float64 {
	value := resolver.data.GetScore()
	return value
}

type secretResolver struct {
	root *Resolver
	data *storage.Secret
	list *storage.ListSecret
}

func (resolver *Resolver) wrapSecret(value *storage.Secret, ok bool, err error) (*secretResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &secretResolver{resolver, value, nil}, nil
}

func (resolver *Resolver) wrapSecrets(values []*storage.Secret, err error) ([]*secretResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*secretResolver, len(values))
	for i, v := range values {
		output[i] = &secretResolver{resolver, v, nil}
	}
	return output, nil
}

func (resolver *Resolver) wrapListSecrets(values []*storage.ListSecret, err error) ([]*secretResolver, error) {
	if err != nil || values == nil {
		return nil, err
	}
	output := make([]*secretResolver, len(values))
	for i, v := range values {
		output[i] = &secretResolver{resolver, nil, v}
	}
	return output, nil
}

func (resolver *secretResolver) ensureData() {
	if resolver.data == nil {
		resolver.data = resolver.root.getSecret(resolver.list.GetId())
	}
}

func (resolver *secretResolver) Annotations() labels {
	resolver.ensureData()
	value := resolver.data.GetAnnotations()
	return labelsResolver(value)
}

func (resolver *secretResolver) ClusterId() string {
	resolver.ensureData()
	value := resolver.data.GetClusterId()
	return value
}

func (resolver *secretResolver) ClusterName() string {
	value := resolver.data.GetClusterName()
	if resolver.data == nil {
		value = resolver.list.GetClusterName()
	}
	return value
}

func (resolver *secretResolver) CreatedAt() (*graphql.Time, error) {
	value := resolver.data.GetCreatedAt()
	if resolver.data == nil {
		value = resolver.list.GetCreatedAt()
	}
	return timestamp(value)
}

func (resolver *secretResolver) Files() ([]*secretDataFileResolver, error) {
	resolver.ensureData()
	value := resolver.data.GetFiles()
	return resolver.root.wrapSecretDataFiles(value, nil)
}

func (resolver *secretResolver) Id() graphql.ID {
	value := resolver.data.GetId()
	if resolver.data == nil {
		value = resolver.list.GetId()
	}
	return graphql.ID(value)
}

func (resolver *secretResolver) Labels() labels {
	resolver.ensureData()
	value := resolver.data.GetLabels()
	return labelsResolver(value)
}

func (resolver *secretResolver) Name() string {
	value := resolver.data.GetName()
	if resolver.data == nil {
		value = resolver.list.GetName()
	}
	return value
}

func (resolver *secretResolver) Namespace() string {
	value := resolver.data.GetNamespace()
	if resolver.data == nil {
		value = resolver.list.GetNamespace()
	}
	return value
}

func (resolver *secretResolver) Relationship() (*secretRelationshipResolver, error) {
	resolver.ensureData()
	value := resolver.data.GetRelationship()
	return resolver.root.wrapSecretRelationship(value, true, nil)
}

func (resolver *secretResolver) Type() string {
	resolver.ensureData()
	value := resolver.data.GetType()
	return value
}

type secretContainerRelationshipResolver struct {
	root *Resolver
	data *storage.SecretContainerRelationship
}

func (resolver *Resolver) wrapSecretContainerRelationship(value *storage.SecretContainerRelationship, ok bool, err error) (*secretContainerRelationshipResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &secretContainerRelationshipResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapSecretContainerRelationships(values []*storage.SecretContainerRelationship, err error) ([]*secretContainerRelationshipResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*secretContainerRelationshipResolver, len(values))
	for i, v := range values {
		output[i] = &secretContainerRelationshipResolver{resolver, v}
	}
	return output, nil
}

func (resolver *secretContainerRelationshipResolver) Id() graphql.ID {
	value := resolver.data.GetId()
	return graphql.ID(value)
}

func (resolver *secretContainerRelationshipResolver) Path() string {
	value := resolver.data.GetPath()
	return value
}

type secretDataFileResolver struct {
	root *Resolver
	data *storage.SecretDataFile
}

func (resolver *Resolver) wrapSecretDataFile(value *storage.SecretDataFile, ok bool, err error) (*secretDataFileResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &secretDataFileResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapSecretDataFiles(values []*storage.SecretDataFile, err error) ([]*secretDataFileResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*secretDataFileResolver, len(values))
	for i, v := range values {
		output[i] = &secretDataFileResolver{resolver, v}
	}
	return output, nil
}

func (resolver *secretDataFileResolver) Name() string {
	value := resolver.data.GetName()
	return value
}

func (resolver *secretDataFileResolver) Type() string {
	value := resolver.data.GetType()
	return value.String()
}

type secretDataFileMetadataResolver struct {
	resolver *secretDataFileResolver
}

func (resolver *secretDataFileResolver) Metadata() *secretDataFileMetadataResolver {
	return &secretDataFileMetadataResolver{resolver}
}

func (resolver *secretDataFileMetadataResolver) ToCert() (*certResolver, bool) {
	value := resolver.resolver.data.GetCert()
	if value != nil {
		return &certResolver{resolver.resolver.root, value}, true
	}
	return nil, false
}

type secretDeploymentRelationshipResolver struct {
	root *Resolver
	data *storage.SecretDeploymentRelationship
}

func (resolver *Resolver) wrapSecretDeploymentRelationship(value *storage.SecretDeploymentRelationship, ok bool, err error) (*secretDeploymentRelationshipResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &secretDeploymentRelationshipResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapSecretDeploymentRelationships(values []*storage.SecretDeploymentRelationship, err error) ([]*secretDeploymentRelationshipResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*secretDeploymentRelationshipResolver, len(values))
	for i, v := range values {
		output[i] = &secretDeploymentRelationshipResolver{resolver, v}
	}
	return output, nil
}

func (resolver *secretDeploymentRelationshipResolver) Id() graphql.ID {
	value := resolver.data.GetId()
	return graphql.ID(value)
}

func (resolver *secretDeploymentRelationshipResolver) Name() string {
	value := resolver.data.GetName()
	return value
}

type secretRelationshipResolver struct {
	root *Resolver
	data *storage.SecretRelationship
}

func (resolver *Resolver) wrapSecretRelationship(value *storage.SecretRelationship, ok bool, err error) (*secretRelationshipResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &secretRelationshipResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapSecretRelationships(values []*storage.SecretRelationship, err error) ([]*secretRelationshipResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*secretRelationshipResolver, len(values))
	for i, v := range values {
		output[i] = &secretRelationshipResolver{resolver, v}
	}
	return output, nil
}

func (resolver *secretRelationshipResolver) ContainerRelationships() ([]*secretContainerRelationshipResolver, error) {
	value := resolver.data.GetContainerRelationships()
	return resolver.root.wrapSecretContainerRelationships(value, nil)
}

func (resolver *secretRelationshipResolver) DeploymentRelationships() ([]*secretDeploymentRelationshipResolver, error) {
	value := resolver.data.GetDeploymentRelationships()
	return resolver.root.wrapSecretDeploymentRelationships(value, nil)
}

func (resolver *secretRelationshipResolver) Id() graphql.ID {
	value := resolver.data.GetId()
	return graphql.ID(value)
}

func toSecretType(value *string) storage.SecretType {
	if value != nil {
		return storage.SecretType(storage.SecretType_value[*value])
	}
	return storage.SecretType(0)
}

func toSecretTypes(values *[]string) []storage.SecretType {
	if values == nil {
		return nil
	}
	output := make([]storage.SecretType, len(*values))
	for i, v := range *values {
		output[i] = toSecretType(&v)
	}
	return output
}

type securityContextResolver struct {
	root *Resolver
	data *storage.SecurityContext
}

func (resolver *Resolver) wrapSecurityContext(value *storage.SecurityContext, ok bool, err error) (*securityContextResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &securityContextResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapSecurityContexts(values []*storage.SecurityContext, err error) ([]*securityContextResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*securityContextResolver, len(values))
	for i, v := range values {
		output[i] = &securityContextResolver{resolver, v}
	}
	return output, nil
}

func (resolver *securityContextResolver) AddCapabilities() []string {
	value := resolver.data.GetAddCapabilities()
	return value
}

func (resolver *securityContextResolver) DropCapabilities() []string {
	value := resolver.data.GetDropCapabilities()
	return value
}

func (resolver *securityContextResolver) Privileged() bool {
	value := resolver.data.GetPrivileged()
	return value
}

func (resolver *securityContextResolver) ReadOnlyRootFilesystem() bool {
	value := resolver.data.GetReadOnlyRootFilesystem()
	return value
}

func (resolver *securityContextResolver) Selinux() (*securityContext_SELinuxResolver, error) {
	value := resolver.data.GetSelinux()
	return resolver.root.wrapSecurityContext_SELinux(value, true, nil)
}

type securityContext_SELinuxResolver struct {
	root *Resolver
	data *storage.SecurityContext_SELinux
}

func (resolver *Resolver) wrapSecurityContext_SELinux(value *storage.SecurityContext_SELinux, ok bool, err error) (*securityContext_SELinuxResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &securityContext_SELinuxResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapSecurityContext_SELinuxs(values []*storage.SecurityContext_SELinux, err error) ([]*securityContext_SELinuxResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*securityContext_SELinuxResolver, len(values))
	for i, v := range values {
		output[i] = &securityContext_SELinuxResolver{resolver, v}
	}
	return output, nil
}

func (resolver *securityContext_SELinuxResolver) Level() string {
	value := resolver.data.GetLevel()
	return value
}

func (resolver *securityContext_SELinuxResolver) Role() string {
	value := resolver.data.GetRole()
	return value
}

func (resolver *securityContext_SELinuxResolver) Type() string {
	value := resolver.data.GetType()
	return value
}

func (resolver *securityContext_SELinuxResolver) User() string {
	value := resolver.data.GetUser()
	return value
}

func toSeverity(value *string) storage.Severity {
	if value != nil {
		return storage.Severity(storage.Severity_value[*value])
	}
	return storage.Severity(0)
}

func toSeverities(values *[]string) []storage.Severity {
	if values == nil {
		return nil
	}
	output := make([]storage.Severity, len(*values))
	for i, v := range *values {
		output[i] = toSeverity(&v)
	}
	return output
}

type splunkResolver struct {
	root *Resolver
	data *storage.Splunk
}

func (resolver *Resolver) wrapSplunk(value *storage.Splunk, ok bool, err error) (*splunkResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &splunkResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapSplunks(values []*storage.Splunk, err error) ([]*splunkResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*splunkResolver, len(values))
	for i, v := range values {
		output[i] = &splunkResolver{resolver, v}
	}
	return output, nil
}

func (resolver *splunkResolver) HttpEndpoint() string {
	value := resolver.data.GetHttpEndpoint()
	return value
}

func (resolver *splunkResolver) HttpToken() string {
	value := resolver.data.GetHttpToken()
	return value
}

func (resolver *splunkResolver) Insecure() bool {
	value := resolver.data.GetInsecure()
	return value
}

func (resolver *splunkResolver) Truncate() int32 {
	value := resolver.data.GetTruncate()
	return int32(value)
}

type taintResolver struct {
	root *Resolver
	data *storage.Taint
}

func (resolver *Resolver) wrapTaint(value *storage.Taint, ok bool, err error) (*taintResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &taintResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapTaints(values []*storage.Taint, err error) ([]*taintResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*taintResolver, len(values))
	for i, v := range values {
		output[i] = &taintResolver{resolver, v}
	}
	return output, nil
}

func (resolver *taintResolver) Key() string {
	value := resolver.data.GetKey()
	return value
}

func (resolver *taintResolver) TaintEffect() string {
	value := resolver.data.GetTaintEffect()
	return value.String()
}

func (resolver *taintResolver) Value() string {
	value := resolver.data.GetValue()
	return value
}

func toTaintEffect(value *string) storage.TaintEffect {
	if value != nil {
		return storage.TaintEffect(storage.TaintEffect_value[*value])
	}
	return storage.TaintEffect(0)
}

func toTaintEffects(values *[]string) []storage.TaintEffect {
	if values == nil {
		return nil
	}
	output := make([]storage.TaintEffect, len(*values))
	for i, v := range *values {
		output[i] = toTaintEffect(&v)
	}
	return output
}

type tokenMetadataResolver struct {
	root *Resolver
	data *storage.TokenMetadata
}

func (resolver *Resolver) wrapTokenMetadata(value *storage.TokenMetadata, ok bool, err error) (*tokenMetadataResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &tokenMetadataResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapTokenMetadatas(values []*storage.TokenMetadata, err error) ([]*tokenMetadataResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*tokenMetadataResolver, len(values))
	for i, v := range values {
		output[i] = &tokenMetadataResolver{resolver, v}
	}
	return output, nil
}

func (resolver *tokenMetadataResolver) Expiration() (*graphql.Time, error) {
	value := resolver.data.GetExpiration()
	return timestamp(value)
}

func (resolver *tokenMetadataResolver) Id() graphql.ID {
	value := resolver.data.GetId()
	return graphql.ID(value)
}

func (resolver *tokenMetadataResolver) IssuedAt() (*graphql.Time, error) {
	value := resolver.data.GetIssuedAt()
	return timestamp(value)
}

func (resolver *tokenMetadataResolver) Name() string {
	value := resolver.data.GetName()
	return value
}

func (resolver *tokenMetadataResolver) Revoked() bool {
	value := resolver.data.GetRevoked()
	return value
}

func (resolver *tokenMetadataResolver) Role() string {
	value := resolver.data.GetRole()
	return value
}

type tolerationResolver struct {
	root *Resolver
	data *storage.Toleration
}

func (resolver *Resolver) wrapToleration(value *storage.Toleration, ok bool, err error) (*tolerationResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &tolerationResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapTolerations(values []*storage.Toleration, err error) ([]*tolerationResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*tolerationResolver, len(values))
	for i, v := range values {
		output[i] = &tolerationResolver{resolver, v}
	}
	return output, nil
}

func (resolver *tolerationResolver) Key() string {
	value := resolver.data.GetKey()
	return value
}

func (resolver *tolerationResolver) Operator() string {
	value := resolver.data.GetOperator()
	return value.String()
}

func (resolver *tolerationResolver) TaintEffect() string {
	value := resolver.data.GetTaintEffect()
	return value.String()
}

func (resolver *tolerationResolver) Value() string {
	value := resolver.data.GetValue()
	return value
}

func toToleration_Operator(value *string) storage.Toleration_Operator {
	if value != nil {
		return storage.Toleration_Operator(storage.Toleration_Operator_value[*value])
	}
	return storage.Toleration_Operator(0)
}

func toToleration_Operators(values *[]string) []storage.Toleration_Operator {
	if values == nil {
		return nil
	}
	output := make([]storage.Toleration_Operator, len(*values))
	for i, v := range *values {
		output[i] = toToleration_Operator(&v)
	}
	return output
}

type v1MetadataResolver struct {
	root *Resolver
	data *storage.V1Metadata
}

func (resolver *Resolver) wrapV1Metadata(value *storage.V1Metadata, ok bool, err error) (*v1MetadataResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &v1MetadataResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapV1Metadatas(values []*storage.V1Metadata, err error) ([]*v1MetadataResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*v1MetadataResolver, len(values))
	for i, v := range values {
		output[i] = &v1MetadataResolver{resolver, v}
	}
	return output, nil
}

func (resolver *v1MetadataResolver) Author() string {
	value := resolver.data.GetAuthor()
	return value
}

func (resolver *v1MetadataResolver) Command() []string {
	value := resolver.data.GetCommand()
	return value
}

func (resolver *v1MetadataResolver) Created() (*graphql.Time, error) {
	value := resolver.data.GetCreated()
	return timestamp(value)
}

func (resolver *v1MetadataResolver) Digest() string {
	value := resolver.data.GetDigest()
	return value
}

func (resolver *v1MetadataResolver) Entrypoint() []string {
	value := resolver.data.GetEntrypoint()
	return value
}

func (resolver *v1MetadataResolver) Layers() ([]*imageLayerResolver, error) {
	value := resolver.data.GetLayers()
	return resolver.root.wrapImageLayers(value, nil)
}

func (resolver *v1MetadataResolver) User() string {
	value := resolver.data.GetUser()
	return value
}

func (resolver *v1MetadataResolver) Volumes() []string {
	value := resolver.data.GetVolumes()
	return value
}

type v2MetadataResolver struct {
	root *Resolver
	data *storage.V2Metadata
}

func (resolver *Resolver) wrapV2Metadata(value *storage.V2Metadata, ok bool, err error) (*v2MetadataResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &v2MetadataResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapV2Metadatas(values []*storage.V2Metadata, err error) ([]*v2MetadataResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*v2MetadataResolver, len(values))
	for i, v := range values {
		output[i] = &v2MetadataResolver{resolver, v}
	}
	return output, nil
}

func (resolver *v2MetadataResolver) Digest() string {
	value := resolver.data.GetDigest()
	return value
}

func toViolationState(value *string) storage.ViolationState {
	if value != nil {
		return storage.ViolationState(storage.ViolationState_value[*value])
	}
	return storage.ViolationState(0)
}

func toViolationStates(values *[]string) []storage.ViolationState {
	if values == nil {
		return nil
	}
	output := make([]storage.ViolationState, len(*values))
	for i, v := range *values {
		output[i] = toViolationState(&v)
	}
	return output
}

type volumeResolver struct {
	root *Resolver
	data *storage.Volume
}

func (resolver *Resolver) wrapVolume(value *storage.Volume, ok bool, err error) (*volumeResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &volumeResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapVolumes(values []*storage.Volume, err error) ([]*volumeResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*volumeResolver, len(values))
	for i, v := range values {
		output[i] = &volumeResolver{resolver, v}
	}
	return output, nil
}

func (resolver *volumeResolver) Destination() string {
	value := resolver.data.GetDestination()
	return value
}

func (resolver *volumeResolver) Name() string {
	value := resolver.data.GetName()
	return value
}

func (resolver *volumeResolver) ReadOnly() bool {
	value := resolver.data.GetReadOnly()
	return value
}

func (resolver *volumeResolver) Source() string {
	value := resolver.data.GetSource()
	return value
}

func (resolver *volumeResolver) Type() string {
	value := resolver.data.GetType()
	return value
}

type volumePolicyResolver struct {
	root *Resolver
	data *storage.VolumePolicy
}

func (resolver *Resolver) wrapVolumePolicy(value *storage.VolumePolicy, ok bool, err error) (*volumePolicyResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &volumePolicyResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapVolumePolicies(values []*storage.VolumePolicy, err error) ([]*volumePolicyResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*volumePolicyResolver, len(values))
	for i, v := range values {
		output[i] = &volumePolicyResolver{resolver, v}
	}
	return output, nil
}

func (resolver *volumePolicyResolver) Destination() string {
	value := resolver.data.GetDestination()
	return value
}

func (resolver *volumePolicyResolver) Name() string {
	value := resolver.data.GetName()
	return value
}

func (resolver *volumePolicyResolver) Source() string {
	value := resolver.data.GetSource()
	return value
}

func (resolver *volumePolicyResolver) Type() string {
	value := resolver.data.GetType()
	return value
}

type vulnerabilityResolver struct {
	root *Resolver
	data *storage.Vulnerability
}

func (resolver *Resolver) wrapVulnerability(value *storage.Vulnerability, ok bool, err error) (*vulnerabilityResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &vulnerabilityResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapVulnerabilities(values []*storage.Vulnerability, err error) ([]*vulnerabilityResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*vulnerabilityResolver, len(values))
	for i, v := range values {
		output[i] = &vulnerabilityResolver{resolver, v}
	}
	return output, nil
}

func (resolver *vulnerabilityResolver) Cve() string {
	value := resolver.data.GetCve()
	return value
}

func (resolver *vulnerabilityResolver) Cvss() float64 {
	value := resolver.data.GetCvss()
	return float64(value)
}

func (resolver *vulnerabilityResolver) CvssV2() (*cVSSV2Resolver, error) {
	value := resolver.data.GetCvssV2()
	return resolver.root.wrapCVSSV2(value, true, nil)
}

func (resolver *vulnerabilityResolver) Link() string {
	value := resolver.data.GetLink()
	return value
}

func (resolver *vulnerabilityResolver) Summary() string {
	value := resolver.data.GetSummary()
	return value
}

type whitelistResolver struct {
	root *Resolver
	data *storage.Whitelist
}

func (resolver *Resolver) wrapWhitelist(value *storage.Whitelist, ok bool, err error) (*whitelistResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &whitelistResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapWhitelists(values []*storage.Whitelist, err error) ([]*whitelistResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*whitelistResolver, len(values))
	for i, v := range values {
		output[i] = &whitelistResolver{resolver, v}
	}
	return output, nil
}

func (resolver *whitelistResolver) Container() (*whitelist_ContainerResolver, error) {
	value := resolver.data.GetContainer()
	return resolver.root.wrapWhitelist_Container(value, true, nil)
}

func (resolver *whitelistResolver) Deployment() (*whitelist_DeploymentResolver, error) {
	value := resolver.data.GetDeployment()
	return resolver.root.wrapWhitelist_Deployment(value, true, nil)
}

func (resolver *whitelistResolver) Expiration() (*graphql.Time, error) {
	value := resolver.data.GetExpiration()
	return timestamp(value)
}

func (resolver *whitelistResolver) Image() (*whitelist_ImageResolver, error) {
	value := resolver.data.GetImage()
	return resolver.root.wrapWhitelist_Image(value, true, nil)
}

func (resolver *whitelistResolver) Name() string {
	value := resolver.data.GetName()
	return value
}

type whitelist_ContainerResolver struct {
	root *Resolver
	data *storage.Whitelist_Container
}

func (resolver *Resolver) wrapWhitelist_Container(value *storage.Whitelist_Container, ok bool, err error) (*whitelist_ContainerResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &whitelist_ContainerResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapWhitelist_Containers(values []*storage.Whitelist_Container, err error) ([]*whitelist_ContainerResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*whitelist_ContainerResolver, len(values))
	for i, v := range values {
		output[i] = &whitelist_ContainerResolver{resolver, v}
	}
	return output, nil
}

func (resolver *whitelist_ContainerResolver) ImageName() (*imageNameResolver, error) {
	value := resolver.data.GetImageName()
	return resolver.root.wrapImageName(value, true, nil)
}

type whitelist_DeploymentResolver struct {
	root *Resolver
	data *storage.Whitelist_Deployment
}

func (resolver *Resolver) wrapWhitelist_Deployment(value *storage.Whitelist_Deployment, ok bool, err error) (*whitelist_DeploymentResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &whitelist_DeploymentResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapWhitelist_Deployments(values []*storage.Whitelist_Deployment, err error) ([]*whitelist_DeploymentResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*whitelist_DeploymentResolver, len(values))
	for i, v := range values {
		output[i] = &whitelist_DeploymentResolver{resolver, v}
	}
	return output, nil
}

func (resolver *whitelist_DeploymentResolver) Name() string {
	value := resolver.data.GetName()
	return value
}

func (resolver *whitelist_DeploymentResolver) Scope() (*scopeResolver, error) {
	value := resolver.data.GetScope()
	return resolver.root.wrapScope(value, true, nil)
}

type whitelist_ImageResolver struct {
	root *Resolver
	data *storage.Whitelist_Image
}

func (resolver *Resolver) wrapWhitelist_Image(value *storage.Whitelist_Image, ok bool, err error) (*whitelist_ImageResolver, error) {
	if !ok || err != nil || value == nil {
		return nil, err
	}
	return &whitelist_ImageResolver{resolver, value}, nil
}

func (resolver *Resolver) wrapWhitelist_Images(values []*storage.Whitelist_Image, err error) ([]*whitelist_ImageResolver, error) {
	if err != nil || len(values) == 0 {
		return nil, err
	}
	output := make([]*whitelist_ImageResolver, len(values))
	for i, v := range values {
		output[i] = &whitelist_ImageResolver{resolver, v}
	}
	return output, nil
}

func (resolver *whitelist_ImageResolver) Name() string {
	value := resolver.data.GetName()
	return value
}
