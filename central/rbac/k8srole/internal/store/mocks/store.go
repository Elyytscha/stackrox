// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackrox/rox/central/rbac/k8srole/internal/store (interfaces: Store)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	storage "github.com/stackrox/rox/generated/storage"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// GetRole mocks base method
func (m *MockStore) GetRole(arg0 string) (*storage.K8SRole, bool, error) {
	ret := m.ctrl.Call(m, "GetRole", arg0)
	ret0, _ := ret[0].(*storage.K8SRole)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRole indicates an expected call of GetRole
func (mr *MockStoreMockRecorder) GetRole(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockStore)(nil).GetRole), arg0)
}

// ListAllRoles mocks base method
func (m *MockStore) ListAllRoles() ([]*storage.K8SRole, error) {
	ret := m.ctrl.Call(m, "ListAllRoles")
	ret0, _ := ret[0].([]*storage.K8SRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllRoles indicates an expected call of ListAllRoles
func (mr *MockStoreMockRecorder) ListAllRoles() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllRoles", reflect.TypeOf((*MockStore)(nil).ListAllRoles))
}

// RemoveRole mocks base method
func (m *MockStore) RemoveRole(arg0 string) error {
	ret := m.ctrl.Call(m, "RemoveRole", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRole indicates an expected call of RemoveRole
func (mr *MockStoreMockRecorder) RemoveRole(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRole", reflect.TypeOf((*MockStore)(nil).RemoveRole), arg0)
}

// UpsertRole mocks base method
func (m *MockStore) UpsertRole(arg0 *storage.K8SRole) error {
	ret := m.ctrl.Call(m, "UpsertRole", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertRole indicates an expected call of UpsertRole
func (mr *MockStoreMockRecorder) UpsertRole(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRole", reflect.TypeOf((*MockStore)(nil).UpsertRole), arg0)
}
