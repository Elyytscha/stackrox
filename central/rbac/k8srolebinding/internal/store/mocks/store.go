// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackrox/rox/central/rbac/k8srolebinding/internal/store (interfaces: Store)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	storage "github.com/stackrox/rox/generated/storage"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CountRoleBindings mocks base method
func (m *MockStore) CountRoleBindings() (int, error) {
	ret := m.ctrl.Call(m, "CountRoleBindings")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountRoleBindings indicates an expected call of CountRoleBindings
func (mr *MockStoreMockRecorder) CountRoleBindings() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountRoleBindings", reflect.TypeOf((*MockStore)(nil).CountRoleBindings))
}

// GetRoleBinding mocks base method
func (m *MockStore) GetRoleBinding(arg0 string) (*storage.K8SRoleBinding, bool, error) {
	ret := m.ctrl.Call(m, "GetRoleBinding", arg0)
	ret0, _ := ret[0].(*storage.K8SRoleBinding)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRoleBinding indicates an expected call of GetRoleBinding
func (mr *MockStoreMockRecorder) GetRoleBinding(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleBinding", reflect.TypeOf((*MockStore)(nil).GetRoleBinding), arg0)
}

// ListAllRoleBindings mocks base method
func (m *MockStore) ListAllRoleBindings() ([]*storage.K8SRoleBinding, error) {
	ret := m.ctrl.Call(m, "ListAllRoleBindings")
	ret0, _ := ret[0].([]*storage.K8SRoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllRoleBindings indicates an expected call of ListAllRoleBindings
func (mr *MockStoreMockRecorder) ListAllRoleBindings() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllRoleBindings", reflect.TypeOf((*MockStore)(nil).ListAllRoleBindings))
}

// ListRoleBindings mocks base method
func (m *MockStore) ListRoleBindings(arg0 []string) ([]*storage.K8SRoleBinding, error) {
	ret := m.ctrl.Call(m, "ListRoleBindings", arg0)
	ret0, _ := ret[0].([]*storage.K8SRoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoleBindings indicates an expected call of ListRoleBindings
func (mr *MockStoreMockRecorder) ListRoleBindings(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoleBindings", reflect.TypeOf((*MockStore)(nil).ListRoleBindings), arg0)
}

// RemoveRoleBinding mocks base method
func (m *MockStore) RemoveRoleBinding(arg0 string) error {
	ret := m.ctrl.Call(m, "RemoveRoleBinding", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRoleBinding indicates an expected call of RemoveRoleBinding
func (mr *MockStoreMockRecorder) RemoveRoleBinding(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRoleBinding", reflect.TypeOf((*MockStore)(nil).RemoveRoleBinding), arg0)
}

// UpsertRoleBinding mocks base method
func (m *MockStore) UpsertRoleBinding(arg0 *storage.K8SRoleBinding) error {
	ret := m.ctrl.Call(m, "UpsertRoleBinding", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertRoleBinding indicates an expected call of UpsertRoleBinding
func (mr *MockStoreMockRecorder) UpsertRoleBinding(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRoleBinding", reflect.TypeOf((*MockStore)(nil).UpsertRoleBinding), arg0)
}
