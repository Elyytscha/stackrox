// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackrox/rox/central/rbac/k8srolebinding/index (interfaces: Indexer)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	storage "github.com/stackrox/rox/generated/storage"
	reflect "reflect"
)

// MockIndexer is a mock of Indexer interface
type MockIndexer struct {
	ctrl     *gomock.Controller
	recorder *MockIndexerMockRecorder
}

// MockIndexerMockRecorder is the mock recorder for MockIndexer
type MockIndexerMockRecorder struct {
	mock *MockIndexer
}

// NewMockIndexer creates a new mock instance
func NewMockIndexer(ctrl *gomock.Controller) *MockIndexer {
	mock := &MockIndexer{ctrl: ctrl}
	mock.recorder = &MockIndexerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIndexer) EXPECT() *MockIndexerMockRecorder {
	return m.recorder
}

// RemoveRoleBinding mocks base method
func (m *MockIndexer) RemoveRoleBinding(arg0 string) error {
	ret := m.ctrl.Call(m, "RemoveRoleBinding", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRoleBinding indicates an expected call of RemoveRoleBinding
func (mr *MockIndexerMockRecorder) RemoveRoleBinding(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRoleBinding", reflect.TypeOf((*MockIndexer)(nil).RemoveRoleBinding), arg0)
}

// UpsertRoleBinding mocks base method
func (m *MockIndexer) UpsertRoleBinding(arg0 *storage.K8SRoleBinding) error {
	ret := m.ctrl.Call(m, "UpsertRoleBinding", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertRoleBinding indicates an expected call of UpsertRoleBinding
func (mr *MockIndexerMockRecorder) UpsertRoleBinding(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRoleBinding", reflect.TypeOf((*MockIndexer)(nil).UpsertRoleBinding), arg0)
}

// UpsertRoleBindings mocks base method
func (m *MockIndexer) UpsertRoleBindings(arg0 ...*storage.K8SRoleBinding) error {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertRoleBindings", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertRoleBindings indicates an expected call of UpsertRoleBindings
func (mr *MockIndexerMockRecorder) UpsertRoleBindings(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRoleBindings", reflect.TypeOf((*MockIndexer)(nil).UpsertRoleBindings), arg0...)
}
