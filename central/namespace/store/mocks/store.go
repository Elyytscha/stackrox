// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	storage "github.com/stackrox/rox/generated/storage"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// GetNamespace mocks base method
func (m *MockStore) GetNamespace(id string) (*storage.NamespaceMetadata, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace", id)
	ret0, _ := ret[0].(*storage.NamespaceMetadata)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNamespace indicates an expected call of GetNamespace
func (mr *MockStoreMockRecorder) GetNamespace(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockStore)(nil).GetNamespace), id)
}

// GetNamespaces mocks base method
func (m *MockStore) GetNamespaces() ([]*storage.NamespaceMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespaces")
	ret0, _ := ret[0].([]*storage.NamespaceMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespaces indicates an expected call of GetNamespaces
func (mr *MockStoreMockRecorder) GetNamespaces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespaces", reflect.TypeOf((*MockStore)(nil).GetNamespaces))
}

// AddNamespace mocks base method
func (m *MockStore) AddNamespace(arg0 *storage.NamespaceMetadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNamespace", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNamespace indicates an expected call of AddNamespace
func (mr *MockStoreMockRecorder) AddNamespace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNamespace", reflect.TypeOf((*MockStore)(nil).AddNamespace), arg0)
}

// UpdateNamespace mocks base method
func (m *MockStore) UpdateNamespace(arg0 *storage.NamespaceMetadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNamespace", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNamespace indicates an expected call of UpdateNamespace
func (mr *MockStoreMockRecorder) UpdateNamespace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNamespace", reflect.TypeOf((*MockStore)(nil).UpdateNamespace), arg0)
}

// RemoveNamespace mocks base method
func (m *MockStore) RemoveNamespace(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveNamespace", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveNamespace indicates an expected call of RemoveNamespace
func (mr *MockStoreMockRecorder) RemoveNamespace(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNamespace", reflect.TypeOf((*MockStore)(nil).RemoveNamespace), id)
}
