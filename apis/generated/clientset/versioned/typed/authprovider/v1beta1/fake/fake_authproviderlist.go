// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1beta1 "github.com/stackrox/stackrox/apis/authprovider/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeAuthProviderLists implements AuthProviderListInterface
type FakeAuthProviderLists struct {
	Fake *FakeAuthproviderV1beta1
	ns   string
}

var authproviderlistsResource = schema.GroupVersionResource{Group: "authprovider.stackrox.io", Version: "v1beta1", Resource: "authproviderlists"}

var authproviderlistsKind = schema.GroupVersionKind{Group: "authprovider.stackrox.io", Version: "v1beta1", Kind: "AuthProviderList"}

// Get takes name of the authProviderList, and returns the corresponding authProviderList object, and an error if there is any.
func (c *FakeAuthProviderLists) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1beta1.AuthProviderList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(authproviderlistsResource, c.ns, name), &v1beta1.AuthProviderList{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.AuthProviderList), err
}

// List takes label and field selectors, and returns the list of AuthProviderLists that match those selectors.
func (c *FakeAuthProviderLists) List(ctx context.Context, opts v1.ListOptions) (result *v1beta1.AuthProviderListList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(authproviderlistsResource, authproviderlistsKind, c.ns, opts), &v1beta1.AuthProviderListList{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.AuthProviderListList), err
}

// Watch returns a watch.Interface that watches the requested authProviderLists.
func (c *FakeAuthProviderLists) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(authproviderlistsResource, c.ns, opts))

}

// Create takes the representation of a authProviderList and creates it.  Returns the server's representation of the authProviderList, and an error, if there is any.
func (c *FakeAuthProviderLists) Create(ctx context.Context, authProviderList *v1beta1.AuthProviderList, opts v1.CreateOptions) (result *v1beta1.AuthProviderList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(authproviderlistsResource, c.ns, authProviderList), &v1beta1.AuthProviderList{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.AuthProviderList), err
}

// Update takes the representation of a authProviderList and updates it. Returns the server's representation of the authProviderList, and an error, if there is any.
func (c *FakeAuthProviderLists) Update(ctx context.Context, authProviderList *v1beta1.AuthProviderList, opts v1.UpdateOptions) (result *v1beta1.AuthProviderList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(authproviderlistsResource, c.ns, authProviderList), &v1beta1.AuthProviderList{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.AuthProviderList), err
}

// Delete takes name of the authProviderList and deletes it. Returns an error if one occurs.
func (c *FakeAuthProviderLists) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(authproviderlistsResource, c.ns, name, opts), &v1beta1.AuthProviderList{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeAuthProviderLists) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(authproviderlistsResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1beta1.AuthProviderListList{})
	return err
}

// Patch applies the patch and returns the patched authProviderList.
func (c *FakeAuthProviderLists) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1beta1.AuthProviderList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(authproviderlistsResource, c.ns, name, pt, data, subresources...), &v1beta1.AuthProviderList{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.AuthProviderList), err
}
