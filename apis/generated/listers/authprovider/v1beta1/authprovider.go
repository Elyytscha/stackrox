// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/stackrox/stackrox/apis/authprovider/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AuthProviderLister helps list AuthProviders.
// All objects returned here must be treated as read-only.
type AuthProviderLister interface {
	// List lists all AuthProviders in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.AuthProvider, err error)
	// AuthProviders returns an object that can list and get AuthProviders.
	AuthProviders(namespace string) AuthProviderNamespaceLister
	AuthProviderListerExpansion
}

// authProviderLister implements the AuthProviderLister interface.
type authProviderLister struct {
	indexer cache.Indexer
}

// NewAuthProviderLister returns a new AuthProviderLister.
func NewAuthProviderLister(indexer cache.Indexer) AuthProviderLister {
	return &authProviderLister{indexer: indexer}
}

// List lists all AuthProviders in the indexer.
func (s *authProviderLister) List(selector labels.Selector) (ret []*v1beta1.AuthProvider, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.AuthProvider))
	})
	return ret, err
}

// AuthProviders returns an object that can list and get AuthProviders.
func (s *authProviderLister) AuthProviders(namespace string) AuthProviderNamespaceLister {
	return authProviderNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AuthProviderNamespaceLister helps list and get AuthProviders.
// All objects returned here must be treated as read-only.
type AuthProviderNamespaceLister interface {
	// List lists all AuthProviders in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.AuthProvider, err error)
	// Get retrieves the AuthProvider from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.AuthProvider, error)
	AuthProviderNamespaceListerExpansion
}

// authProviderNamespaceLister implements the AuthProviderNamespaceLister
// interface.
type authProviderNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AuthProviders in the indexer for a given namespace.
func (s authProviderNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.AuthProvider, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.AuthProvider))
	})
	return ret, err
}

// Get retrieves the AuthProvider from the indexer for a given namespace and name.
func (s authProviderNamespaceLister) Get(name string) (*v1beta1.AuthProvider, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("authprovider"), name)
	}
	return obj.(*v1beta1.AuthProvider), nil
}
