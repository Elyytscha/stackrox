import { severities } from 'constants/severities';

// system under test (SUT)
import { getSeverityByCvss, getSeverityChipType } from './vulnerabilityUtils';

describe('vulnerabilityUtils', () => {
    describe('getSeverityByCvss', () => {
        it('should return Low constant for a low-level vulnerability', () => {
            const vulnerability = {
                cvss: 2.0999999046325684
            };

            const severity = getSeverityByCvss(vulnerability.cvss);

            expect(severity).toEqual(severities.LOW_SEVERITY);
        });

        it('should return Low constant for the lower bound of a low-level vulnerability', () => {
            const vulnerability = {
                cvss: 0.1
            };
            const severity = getSeverityByCvss(vulnerability.cvss);

            expect(severity).toEqual(severities.LOW_SEVERITY);
        });

        it('should return Low constant for the upper bound of a low-level vulnerability', () => {
            const vulnerability = {
                cvss: 3.9
            };

            const severity = getSeverityByCvss(vulnerability.cvss);

            expect(severity).toEqual(severities.LOW_SEVERITY);
        });

        it('should return Medium constant for a medium-level vulnerability', () => {
            const vulnerability = {
                cvss: 4.0
            };

            const severity = getSeverityByCvss(vulnerability.cvss);

            expect(severity).toEqual(severities.MEDIUM_SEVERITY);
        });

        it('should return Medium constant for the lower bound of a medium-level vulnerability', () => {
            const vulnerability = {
                cvss: 5
            };

            const severity = getSeverityByCvss(vulnerability.cvss);

            expect(severity).toEqual(severities.MEDIUM_SEVERITY);
        });

        it('should return Medium constant for the upper bound of a medium-level vulnerability', () => {
            const vulnerability = {
                cvss: 6.9
            };

            const severity = getSeverityByCvss(vulnerability.cvss);

            expect(severity).toEqual(severities.MEDIUM_SEVERITY);
        });

        it('should return High constant for a high-level vulnerability', () => {
            const vulnerability = {
                cvss: 7.800000190734863
            };

            const severity = getSeverityByCvss(vulnerability.cvss);

            expect(severity).toEqual(severities.HIGH_SEVERITY);
        });

        it('should return High constant for the lower bound of a high-level vulnerability', () => {
            const vulnerability = {
                cvss: 7.0
            };

            const severity = getSeverityByCvss(vulnerability.cvss);

            expect(severity).toEqual(severities.HIGH_SEVERITY);
        });

        it('should return High constant for the upper bound of a high-level vulnerability', () => {
            const vulnerability = {
                cvss: 8.9
            };

            const severity = getSeverityByCvss(vulnerability.cvss);

            expect(severity).toEqual(severities.HIGH_SEVERITY);
        });

        it('should return Critical constant for a critical-level vulnerability', () => {
            const vulnerability = {
                cvss: 9.87654321
            };

            const severity = getSeverityByCvss(vulnerability.cvss);

            expect(severity).toEqual(severities.CRITICAL_SEVERITY);
        });

        it('should return Critical constant for the lower bound of a critical-level vulnerability', () => {
            const vulnerability = {
                cvss: 9.0
            };

            const severity = getSeverityByCvss(vulnerability.cvss);

            expect(severity).toEqual(severities.CRITICAL_SEVERITY);
        });

        it('should return Critical constant for the upper bound of a critical-level vulnerability', () => {
            const vulnerability = {
                cvss: 10.0
            };

            const severity = getSeverityByCvss(vulnerability.cvss);

            expect(severity).toEqual(severities.CRITICAL_SEVERITY);
        });
    });

    describe('getSeverityChipType', () => {
        it('should return "tertiary" for a low-level vulnerability', () => {
            const vulnerability = {
                cvss: 2.2999999
            };

            const chipType = getSeverityChipType(vulnerability.cvss);

            expect(chipType).toEqual('tertiary');
        });

        it('should return "warning" for a medium-level vulnerability', () => {
            const vulnerability = {
                cvss: 4.599999904632568
            };

            const chipType = getSeverityChipType(vulnerability.cvss);

            expect(chipType).toEqual('warning');
        });

        it('should return "caution" for a high-level vulnerability', () => {
            const vulnerability = {
                cvss: 7.199999809265137
            };

            const chipType = getSeverityChipType(vulnerability.cvss);

            expect(chipType).toEqual('caution');
        });

        it('should return "alert" for a critical-level vulnerability', () => {
            const vulnerability = {
                cvss: 9.5
            };

            const chipType = getSeverityChipType(vulnerability.cvss);

            expect(chipType).toEqual('alert');
        });
    });
});
