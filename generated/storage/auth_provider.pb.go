// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage/auth_provider.proto

package storage

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Next Tag: 9
type AuthProvider struct {
	Id         string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type       string            `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	UiEndpoint string            `protobuf:"bytes,4,opt,name=ui_endpoint,json=uiEndpoint,proto3" json:"ui_endpoint,omitempty"`
	Enabled    bool              `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Config     map[string]string `protobuf:"bytes,6,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The login URL will be provided by the backend, and may not be specified in a request.
	LoginUrl  string `protobuf:"bytes,7,opt,name=login_url,json=loginUrl,proto3" json:"login_url,omitempty"`
	Validated bool   `protobuf:"varint,8,opt,name=validated,proto3" json:"validated,omitempty"` // Deprecated: Do not use.
	// UI endpoints which to allow in addition to `ui_endpoint`. I.e., if a login request
	// is coming from any of these, the auth request will use these for the callback URL,
	// not ui_endpoint.
	ExtraUiEndpoints     []string `protobuf:"bytes,9,rep,name=extra_ui_endpoints,json=extraUiEndpoints,proto3" json:"extra_ui_endpoints,omitempty"`
	Active               bool     `protobuf:"varint,10,opt,name=active,proto3" json:"active,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthProvider) Reset()         { *m = AuthProvider{} }
func (m *AuthProvider) String() string { return proto.CompactTextString(m) }
func (*AuthProvider) ProtoMessage()    {}
func (*AuthProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ed6b69aa5a381c8, []int{0}
}
func (m *AuthProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthProvider.Merge(m, src)
}
func (m *AuthProvider) XXX_Size() int {
	return m.Size()
}
func (m *AuthProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthProvider.DiscardUnknown(m)
}

var xxx_messageInfo_AuthProvider proto.InternalMessageInfo

func (m *AuthProvider) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AuthProvider) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AuthProvider) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AuthProvider) GetUiEndpoint() string {
	if m != nil {
		return m.UiEndpoint
	}
	return ""
}

func (m *AuthProvider) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *AuthProvider) GetConfig() map[string]string {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *AuthProvider) GetLoginUrl() string {
	if m != nil {
		return m.LoginUrl
	}
	return ""
}

// Deprecated: Do not use.
func (m *AuthProvider) GetValidated() bool {
	if m != nil {
		return m.Validated
	}
	return false
}

func (m *AuthProvider) GetExtraUiEndpoints() []string {
	if m != nil {
		return m.ExtraUiEndpoints
	}
	return nil
}

func (m *AuthProvider) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *AuthProvider) MessageClone() proto.Message {
	return m.Clone()
}
func (m *AuthProvider) Clone() *AuthProvider {
	if m == nil {
		return nil
	}
	cloned := new(AuthProvider)
	*cloned = *m

	if m.Config != nil {
		cloned.Config = make(map[string]string, len(m.Config))
		for k, v := range m.Config {
			cloned.Config[k] = v
		}
	}
	if m.ExtraUiEndpoints != nil {
		cloned.ExtraUiEndpoints = make([]string, len(m.ExtraUiEndpoints))
		copy(cloned.ExtraUiEndpoints, m.ExtraUiEndpoints)
	}
	return cloned
}

func init() {
	proto.RegisterType((*AuthProvider)(nil), "storage.AuthProvider")
	proto.RegisterMapType((map[string]string)(nil), "storage.AuthProvider.ConfigEntry")
}

func init() { proto.RegisterFile("storage/auth_provider.proto", fileDescriptor_4ed6b69aa5a381c8) }

var fileDescriptor_4ed6b69aa5a381c8 = []byte{
	// 342 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0xc1, 0x4a, 0xeb, 0x40,
	0x14, 0x86, 0xef, 0x24, 0x6d, 0xda, 0x9c, 0x5e, 0x2e, 0xe5, 0x70, 0x91, 0xd1, 0x42, 0x8c, 0xae,
	0xb2, 0x90, 0x08, 0xea, 0xc2, 0xba, 0xb3, 0xd2, 0xbd, 0x04, 0xba, 0x71, 0x13, 0xa6, 0xcd, 0xd8,
	0x0e, 0x8d, 0x99, 0x30, 0x99, 0x84, 0xf6, 0x4d, 0x7c, 0x24, 0x97, 0x3e, 0x82, 0xd4, 0xd7, 0x70,
	0x21, 0x99, 0x26, 0xda, 0xdd, 0x39, 0xdf, 0x3f, 0xc3, 0xf9, 0xcf, 0x7f, 0x60, 0x54, 0x68, 0xa9,
	0xd8, 0x92, 0x5f, 0xb2, 0x52, 0xaf, 0xe2, 0x5c, 0xc9, 0x4a, 0x24, 0x5c, 0x85, 0xb9, 0x92, 0x5a,
	0x62, 0xaf, 0x11, 0xcf, 0xbf, 0x2c, 0xf8, 0x7b, 0x5f, 0xea, 0xd5, 0x63, 0xa3, 0xe3, 0x3f, 0xb0,
	0x44, 0x42, 0x89, 0x4f, 0x02, 0x37, 0xb2, 0x44, 0x82, 0x08, 0x9d, 0x8c, 0xbd, 0x70, 0x6a, 0x19,
	0x62, 0xea, 0x9a, 0xe9, 0x6d, 0xce, 0xa9, 0xbd, 0x67, 0x75, 0x8d, 0xa7, 0x30, 0x28, 0x45, 0xcc,
	0xb3, 0x24, 0x97, 0x22, 0xd3, 0xb4, 0x63, 0x24, 0x28, 0xc5, 0xb4, 0x21, 0x48, 0xa1, 0xc7, 0x33,
	0x36, 0x4f, 0x79, 0x42, 0xbb, 0x3e, 0x09, 0xfa, 0x51, 0xdb, 0xe2, 0x18, 0x9c, 0x85, 0xcc, 0x9e,
	0xc5, 0x92, 0x3a, 0xbe, 0x1d, 0x0c, 0xae, 0xce, 0xc2, 0xc6, 0x5d, 0x78, 0xe8, 0x2c, 0x7c, 0x30,
	0x6f, 0xa6, 0x99, 0x56, 0xdb, 0xa8, 0xf9, 0x80, 0x23, 0x70, 0x53, 0xb9, 0x14, 0x59, 0x5c, 0xaa,
	0x94, 0xf6, 0xcc, 0xcc, 0xbe, 0x01, 0x33, 0x95, 0xa2, 0x0f, 0x6e, 0xc5, 0x52, 0x91, 0x30, 0xcd,
	0x13, 0xda, 0xaf, 0x67, 0x4e, 0x2c, 0x4a, 0xa2, 0x5f, 0x88, 0x17, 0x80, 0x7c, 0xa3, 0x15, 0x8b,
	0x0f, 0xac, 0x17, 0xd4, 0xf5, 0xed, 0xc0, 0x8d, 0x86, 0x46, 0x99, 0xfd, 0x2c, 0x50, 0xe0, 0x11,
	0x38, 0x6c, 0xa1, 0x45, 0xc5, 0x29, 0x98, 0x05, 0x9a, 0xee, 0x64, 0x0c, 0x83, 0x03, 0x6f, 0x38,
	0x04, 0x7b, 0xcd, 0xb7, 0x4d, 0x84, 0x75, 0x89, 0xff, 0xa1, 0x5b, 0xb1, 0xb4, 0x6c, 0x43, 0xdc,
	0x37, 0x77, 0xd6, 0x2d, 0x99, 0xdc, 0xbc, 0xed, 0x3c, 0xf2, 0xbe, 0xf3, 0xc8, 0xc7, 0xce, 0x23,
	0xaf, 0x9f, 0xde, 0x1f, 0x38, 0x16, 0x32, 0x2c, 0x34, 0x5b, 0xac, 0x95, 0xdc, 0xec, 0x8f, 0xd5,
	0xa6, 0xf1, 0xd4, 0x1e, 0x6d, 0xee, 0x18, 0x7e, 0xfd, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xd4, 0x40,
	0x57, 0x98, 0xe3, 0x01, 0x00, 0x00,
}

func (m *AuthProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.ExtraUiEndpoints) > 0 {
		for iNdEx := len(m.ExtraUiEndpoints) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExtraUiEndpoints[iNdEx])
			copy(dAtA[i:], m.ExtraUiEndpoints[iNdEx])
			i = encodeVarintAuthProvider(dAtA, i, uint64(len(m.ExtraUiEndpoints[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.Validated {
		i--
		if m.Validated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.LoginUrl) > 0 {
		i -= len(m.LoginUrl)
		copy(dAtA[i:], m.LoginUrl)
		i = encodeVarintAuthProvider(dAtA, i, uint64(len(m.LoginUrl)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Config) > 0 {
		for k := range m.Config {
			v := m.Config[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintAuthProvider(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintAuthProvider(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAuthProvider(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.UiEndpoint) > 0 {
		i -= len(m.UiEndpoint)
		copy(dAtA[i:], m.UiEndpoint)
		i = encodeVarintAuthProvider(dAtA, i, uint64(len(m.UiEndpoint)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintAuthProvider(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAuthProvider(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintAuthProvider(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAuthProvider(dAtA []byte, offset int, v uint64) int {
	offset -= sovAuthProvider(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AuthProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovAuthProvider(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAuthProvider(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovAuthProvider(uint64(l))
	}
	l = len(m.UiEndpoint)
	if l > 0 {
		n += 1 + l + sovAuthProvider(uint64(l))
	}
	if m.Enabled {
		n += 2
	}
	if len(m.Config) > 0 {
		for k, v := range m.Config {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovAuthProvider(uint64(len(k))) + 1 + len(v) + sovAuthProvider(uint64(len(v)))
			n += mapEntrySize + 1 + sovAuthProvider(uint64(mapEntrySize))
		}
	}
	l = len(m.LoginUrl)
	if l > 0 {
		n += 1 + l + sovAuthProvider(uint64(l))
	}
	if m.Validated {
		n += 2
	}
	if len(m.ExtraUiEndpoints) > 0 {
		for _, s := range m.ExtraUiEndpoints {
			l = len(s)
			n += 1 + l + sovAuthProvider(uint64(l))
		}
	}
	if m.Active {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAuthProvider(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAuthProvider(x uint64) (n int) {
	return sovAuthProvider(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AuthProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthProvider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UiEndpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UiEndpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthProvider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAuthProvider
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAuthProvider
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAuthProvider
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAuthProvider
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAuthProvider
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthAuthProvider
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthAuthProvider
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAuthProvider(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthAuthProvider
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Config[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoginUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Validated = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraUiEndpoints", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraUiEndpoints = append(m.ExtraUiEndpoints, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAuthProvider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthProvider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuthProvider(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuthProvider
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthProvider
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthProvider
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAuthProvider
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAuthProvider
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAuthProvider
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAuthProvider        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuthProvider          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAuthProvider = fmt.Errorf("proto: unexpected end of group")
)
