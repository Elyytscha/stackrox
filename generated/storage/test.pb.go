// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.4
// source: storage/test.proto

package storage

import (
	_ "github.com/gogo/protobuf/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestSingleKeyStruct_Enum int32

const (
	TestSingleKeyStruct_ENUM0 TestSingleKeyStruct_Enum = 0
	TestSingleKeyStruct_ENUM1 TestSingleKeyStruct_Enum = 1
	TestSingleKeyStruct_ENUM2 TestSingleKeyStruct_Enum = 2
)

// Enum value maps for TestSingleKeyStruct_Enum.
var (
	TestSingleKeyStruct_Enum_name = map[int32]string{
		0: "ENUM0",
		1: "ENUM1",
		2: "ENUM2",
	}
	TestSingleKeyStruct_Enum_value = map[string]int32{
		"ENUM0": 0,
		"ENUM1": 1,
		"ENUM2": 2,
	}
)

func (x TestSingleKeyStruct_Enum) Enum() *TestSingleKeyStruct_Enum {
	p := new(TestSingleKeyStruct_Enum)
	*p = x
	return p
}

func (x TestSingleKeyStruct_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestSingleKeyStruct_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_test_proto_enumTypes[0].Descriptor()
}

func (TestSingleKeyStruct_Enum) Type() protoreflect.EnumType {
	return &file_storage_test_proto_enumTypes[0]
}

func (x TestSingleKeyStruct_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestSingleKeyStruct_Enum.Descriptor instead.
func (TestSingleKeyStruct_Enum) EnumDescriptor() ([]byte, []int) {
	return file_storage_test_proto_rawDescGZIP(), []int{0, 0}
}

type TestMultiKeyStruct_Enum int32

const (
	TestMultiKeyStruct_ENUM0 TestMultiKeyStruct_Enum = 0
	TestMultiKeyStruct_ENUM1 TestMultiKeyStruct_Enum = 1
	TestMultiKeyStruct_ENUM2 TestMultiKeyStruct_Enum = 2
)

// Enum value maps for TestMultiKeyStruct_Enum.
var (
	TestMultiKeyStruct_Enum_name = map[int32]string{
		0: "ENUM0",
		1: "ENUM1",
		2: "ENUM2",
	}
	TestMultiKeyStruct_Enum_value = map[string]int32{
		"ENUM0": 0,
		"ENUM1": 1,
		"ENUM2": 2,
	}
)

func (x TestMultiKeyStruct_Enum) Enum() *TestMultiKeyStruct_Enum {
	p := new(TestMultiKeyStruct_Enum)
	*p = x
	return p
}

func (x TestMultiKeyStruct_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestMultiKeyStruct_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_test_proto_enumTypes[1].Descriptor()
}

func (TestMultiKeyStruct_Enum) Type() protoreflect.EnumType {
	return &file_storage_test_proto_enumTypes[1]
}

func (x TestMultiKeyStruct_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestMultiKeyStruct_Enum.Descriptor instead.
func (TestMultiKeyStruct_Enum) EnumDescriptor() ([]byte, []int) {
	return file_storage_test_proto_rawDescGZIP(), []int{1, 0}
}

type TestSingleKeyStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Name        string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	StringSlice []string `protobuf:"bytes,3,rep,name=string_slice,json=stringSlice,proto3" json:"string_slice,omitempty"`
	Bool        bool     `protobuf:"varint,4,opt,name=bool,proto3" json:"bool,omitempty"` // repeated bool bool_slice: currently unsupported
	// When using this ensure your precision needs are met and accounted for.  This will use a
	// BigInt which may require you to convert from uint64 to int64 OR update
	// the handling to use numerics.
	Uint64    uint64                        `protobuf:"varint,5,opt,name=uint64,proto3" json:"uint64,omitempty"` // repeated uint64 uint64_slice: currently unsupported
	Int64     int64                         `protobuf:"varint,6,opt,name=int64,proto3" json:"int64,omitempty"`   // repeated int64 int64_slice: currently unsupported
	Float     float32                       `protobuf:"fixed32,7,opt,name=float,proto3" json:"float,omitempty"`  // repeated float float_slice: currently unsupported
	Labels    map[string]string             `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Timestamp *timestamppb.Timestamp        `protobuf:"bytes,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Enum      TestSingleKeyStruct_Enum      `protobuf:"varint,10,opt,name=enum,proto3,enum=storage.TestSingleKeyStruct_Enum" json:"enum,omitempty"`
	Enums     []TestSingleKeyStruct_Enum    `protobuf:"varint,11,rep,packed,name=enums,proto3,enum=storage.TestSingleKeyStruct_Enum" json:"enums,omitempty"`
	Embedded  *TestSingleKeyStruct_Embedded `protobuf:"bytes,12,opt,name=embedded,proto3" json:"embedded,omitempty"`
	Nested    []*TestSingleKeyStruct_Nested `protobuf:"bytes,13,rep,name=nested,proto3" json:"nested,omitempty"`
	// Types that are assignable to Oneof:
	//	*TestSingleKeyStruct_Oneofstring
	//	*TestSingleKeyStruct_Oneofnested
	Oneof  isTestSingleKeyStruct_Oneof `protobuf_oneof:"oneof"`
	Bytess []byte                      `protobuf:"bytes,16,opt,name=bytess,proto3" json:"bytess,omitempty"`
}

func (x *TestSingleKeyStruct) Reset() {
	*x = TestSingleKeyStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_test_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSingleKeyStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSingleKeyStruct) ProtoMessage() {}

func (x *TestSingleKeyStruct) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSingleKeyStruct.ProtoReflect.Descriptor instead.
func (*TestSingleKeyStruct) Descriptor() ([]byte, []int) {
	return file_storage_test_proto_rawDescGZIP(), []int{0}
}

func (x *TestSingleKeyStruct) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *TestSingleKeyStruct) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestSingleKeyStruct) GetStringSlice() []string {
	if x != nil {
		return x.StringSlice
	}
	return nil
}

func (x *TestSingleKeyStruct) GetBool() bool {
	if x != nil {
		return x.Bool
	}
	return false
}

func (x *TestSingleKeyStruct) GetUint64() uint64 {
	if x != nil {
		return x.Uint64
	}
	return 0
}

func (x *TestSingleKeyStruct) GetInt64() int64 {
	if x != nil {
		return x.Int64
	}
	return 0
}

func (x *TestSingleKeyStruct) GetFloat() float32 {
	if x != nil {
		return x.Float
	}
	return 0
}

func (x *TestSingleKeyStruct) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *TestSingleKeyStruct) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *TestSingleKeyStruct) GetEnum() TestSingleKeyStruct_Enum {
	if x != nil {
		return x.Enum
	}
	return TestSingleKeyStruct_ENUM0
}

func (x *TestSingleKeyStruct) GetEnums() []TestSingleKeyStruct_Enum {
	if x != nil {
		return x.Enums
	}
	return nil
}

func (x *TestSingleKeyStruct) GetEmbedded() *TestSingleKeyStruct_Embedded {
	if x != nil {
		return x.Embedded
	}
	return nil
}

func (x *TestSingleKeyStruct) GetNested() []*TestSingleKeyStruct_Nested {
	if x != nil {
		return x.Nested
	}
	return nil
}

func (m *TestSingleKeyStruct) GetOneof() isTestSingleKeyStruct_Oneof {
	if m != nil {
		return m.Oneof
	}
	return nil
}

func (x *TestSingleKeyStruct) GetOneofstring() string {
	if x, ok := x.GetOneof().(*TestSingleKeyStruct_Oneofstring); ok {
		return x.Oneofstring
	}
	return ""
}

func (x *TestSingleKeyStruct) GetOneofnested() *TestSingleKeyStruct_OneOfNested {
	if x, ok := x.GetOneof().(*TestSingleKeyStruct_Oneofnested); ok {
		return x.Oneofnested
	}
	return nil
}

func (x *TestSingleKeyStruct) GetBytess() []byte {
	if x != nil {
		return x.Bytess
	}
	return nil
}

type isTestSingleKeyStruct_Oneof interface {
	isTestSingleKeyStruct_Oneof()
}

type TestSingleKeyStruct_Oneofstring struct {
	Oneofstring string `protobuf:"bytes,14,opt,name=oneofstring,proto3,oneof"`
}

type TestSingleKeyStruct_Oneofnested struct {
	Oneofnested *TestSingleKeyStruct_OneOfNested `protobuf:"bytes,15,opt,name=oneofnested,proto3,oneof"`
}

func (*TestSingleKeyStruct_Oneofstring) isTestSingleKeyStruct_Oneof() {}

func (*TestSingleKeyStruct_Oneofnested) isTestSingleKeyStruct_Oneof() {}

type TestMultiKeyStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key1        string                    `protobuf:"bytes,1,opt,name=key1,proto3" json:"key1,omitempty"`
	Key2        string                    `protobuf:"bytes,2,opt,name=key2,proto3" json:"key2,omitempty"`
	StringSlice []string                  `protobuf:"bytes,3,rep,name=string_slice,json=stringSlice,proto3" json:"string_slice,omitempty"`
	Bool        bool                      `protobuf:"varint,4,opt,name=bool,proto3" json:"bool,omitempty"`     // repeated bool bool_slice: currently unsupported
	Uint64      uint64                    `protobuf:"varint,5,opt,name=uint64,proto3" json:"uint64,omitempty"` // repeated uint64 uint64_slice: currently unsupported
	Int64       int64                     `protobuf:"varint,6,opt,name=int64,proto3" json:"int64,omitempty"`   // repeated int64 int64_slice: currently unsupported
	Float       float32                   `protobuf:"fixed32,7,opt,name=float,proto3" json:"float,omitempty"`  // repeated float float_slice: currently unsupported
	Labels      map[string]string         `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Timestamp   *timestamppb.Timestamp    `protobuf:"bytes,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Enum        TestMultiKeyStruct_Enum   `protobuf:"varint,10,opt,name=enum,proto3,enum=storage.TestMultiKeyStruct_Enum" json:"enum,omitempty"`
	Enums       []TestMultiKeyStruct_Enum `protobuf:"varint,11,rep,packed,name=enums,proto3,enum=storage.TestMultiKeyStruct_Enum" json:"enums,omitempty"`
	String_     string                    `protobuf:"bytes,16,opt,name=string,proto3" json:"string,omitempty"`
	// repeated int64: currently unsupported
	//
	// Deprecated: Do not use.
	IntSliceDeprecated []int64                      `protobuf:"varint,17,rep,packed,name=int_slice_deprecated,json=intSliceDeprecated,proto3" json:"int_slice_deprecated,omitempty"`
	Int32Slice         []int32                      `protobuf:"varint,18,rep,packed,name=int32_slice,json=int32Slice,proto3" json:"int32_slice,omitempty"`
	Embedded           *TestMultiKeyStruct_Embedded `protobuf:"bytes,12,opt,name=embedded,proto3" json:"embedded,omitempty"`
	Nested             []*TestMultiKeyStruct_Nested `protobuf:"bytes,13,rep,name=nested,proto3" json:"nested,omitempty"`
	// Types that are assignable to Oneof:
	//	*TestMultiKeyStruct_Oneofstring
	//	*TestMultiKeyStruct_Oneofnested
	Oneof isTestMultiKeyStruct_Oneof `protobuf_oneof:"oneof"`
}

func (x *TestMultiKeyStruct) Reset() {
	*x = TestMultiKeyStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_test_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestMultiKeyStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMultiKeyStruct) ProtoMessage() {}

func (x *TestMultiKeyStruct) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMultiKeyStruct.ProtoReflect.Descriptor instead.
func (*TestMultiKeyStruct) Descriptor() ([]byte, []int) {
	return file_storage_test_proto_rawDescGZIP(), []int{1}
}

func (x *TestMultiKeyStruct) GetKey1() string {
	if x != nil {
		return x.Key1
	}
	return ""
}

func (x *TestMultiKeyStruct) GetKey2() string {
	if x != nil {
		return x.Key2
	}
	return ""
}

func (x *TestMultiKeyStruct) GetStringSlice() []string {
	if x != nil {
		return x.StringSlice
	}
	return nil
}

func (x *TestMultiKeyStruct) GetBool() bool {
	if x != nil {
		return x.Bool
	}
	return false
}

func (x *TestMultiKeyStruct) GetUint64() uint64 {
	if x != nil {
		return x.Uint64
	}
	return 0
}

func (x *TestMultiKeyStruct) GetInt64() int64 {
	if x != nil {
		return x.Int64
	}
	return 0
}

func (x *TestMultiKeyStruct) GetFloat() float32 {
	if x != nil {
		return x.Float
	}
	return 0
}

func (x *TestMultiKeyStruct) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *TestMultiKeyStruct) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *TestMultiKeyStruct) GetEnum() TestMultiKeyStruct_Enum {
	if x != nil {
		return x.Enum
	}
	return TestMultiKeyStruct_ENUM0
}

func (x *TestMultiKeyStruct) GetEnums() []TestMultiKeyStruct_Enum {
	if x != nil {
		return x.Enums
	}
	return nil
}

func (x *TestMultiKeyStruct) GetString_() string {
	if x != nil {
		return x.String_
	}
	return ""
}

// Deprecated: Do not use.
func (x *TestMultiKeyStruct) GetIntSliceDeprecated() []int64 {
	if x != nil {
		return x.IntSliceDeprecated
	}
	return nil
}

func (x *TestMultiKeyStruct) GetInt32Slice() []int32 {
	if x != nil {
		return x.Int32Slice
	}
	return nil
}

func (x *TestMultiKeyStruct) GetEmbedded() *TestMultiKeyStruct_Embedded {
	if x != nil {
		return x.Embedded
	}
	return nil
}

func (x *TestMultiKeyStruct) GetNested() []*TestMultiKeyStruct_Nested {
	if x != nil {
		return x.Nested
	}
	return nil
}

func (m *TestMultiKeyStruct) GetOneof() isTestMultiKeyStruct_Oneof {
	if m != nil {
		return m.Oneof
	}
	return nil
}

func (x *TestMultiKeyStruct) GetOneofstring() string {
	if x, ok := x.GetOneof().(*TestMultiKeyStruct_Oneofstring); ok {
		return x.Oneofstring
	}
	return ""
}

func (x *TestMultiKeyStruct) GetOneofnested() *TestMultiKeyStruct_OneOfNested {
	if x, ok := x.GetOneof().(*TestMultiKeyStruct_Oneofnested); ok {
		return x.Oneofnested
	}
	return nil
}

type isTestMultiKeyStruct_Oneof interface {
	isTestMultiKeyStruct_Oneof()
}

type TestMultiKeyStruct_Oneofstring struct {
	Oneofstring string `protobuf:"bytes,14,opt,name=oneofstring,proto3,oneof"`
}

type TestMultiKeyStruct_Oneofnested struct {
	Oneofnested *TestMultiKeyStruct_OneOfNested `protobuf:"bytes,15,opt,name=oneofnested,proto3,oneof"`
}

func (*TestMultiKeyStruct_Oneofstring) isTestMultiKeyStruct_Oneof() {}

func (*TestMultiKeyStruct_Oneofnested) isTestMultiKeyStruct_Oneof() {}

// The test graph is as below. The numbers next to the edges
// indicate the cardinality of the relationship, either n-1, 1-n or n-n.
// The first element is the child and second is the parent.
//             TestGrandparent
//        (n-1) /      (n-1) |   (n-1) \          \ (n-1) (namespaced search)
//       TestParent1  TestParent2   TestParent3   TestParent4
//       (n-n) |           | (n-1)                   \ (n-1)
//       TestChild1    TestChild2                TestChild1P4
//         (1-n)  |
//       TestGrandChild1
//         (n-1)  |
//       TestGGrandChild1
//         (1-n)   |
//       TestG2GrandChild1
//        (n-1)   |
//        TestG3GrandChild1
type TestGrandparent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Val       string                      `protobuf:"bytes,2,opt,name=val,proto3" json:"val,omitempty"`
	Embedded  []*TestGrandparent_Embedded `protobuf:"bytes,3,rep,name=embedded,proto3" json:"embedded,omitempty"`
	Priority  int64                       `protobuf:"varint,4,opt,name=priority,proto3" json:"priority,omitempty"`
	RiskScore float32                     `protobuf:"fixed32,5,opt,name=risk_score,json=riskScore,proto3" json:"risk_score,omitempty"`
}

func (x *TestGrandparent) Reset() {
	*x = TestGrandparent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_test_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestGrandparent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestGrandparent) ProtoMessage() {}

func (x *TestGrandparent) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestGrandparent.ProtoReflect.Descriptor instead.
func (*TestGrandparent) Descriptor() ([]byte, []int) {
	return file_storage_test_proto_rawDescGZIP(), []int{2}
}

func (x *TestGrandparent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestGrandparent) GetVal() string {
	if x != nil {
		return x.Val
	}
	return ""
}

func (x *TestGrandparent) GetEmbedded() []*TestGrandparent_Embedded {
	if x != nil {
		return x.Embedded
	}
	return nil
}

func (x *TestGrandparent) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *TestGrandparent) GetRiskScore() float32 {
	if x != nil {
		return x.RiskScore
	}
	return 0
}

type TestParent1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ParentId string                   `protobuf:"bytes,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Children []*TestParent1_Child1Ref `protobuf:"bytes,3,rep,name=children,proto3" json:"children,omitempty"`
	Val      string                   `protobuf:"bytes,4,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *TestParent1) Reset() {
	*x = TestParent1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_test_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestParent1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestParent1) ProtoMessage() {}

func (x *TestParent1) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestParent1.ProtoReflect.Descriptor instead.
func (*TestParent1) Descriptor() ([]byte, []int) {
	return file_storage_test_proto_rawDescGZIP(), []int{3}
}

func (x *TestParent1) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestParent1) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *TestParent1) GetChildren() []*TestParent1_Child1Ref {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *TestParent1) GetVal() string {
	if x != nil {
		return x.Val
	}
	return ""
}

type TestChild1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Val string `protobuf:"bytes,2,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *TestChild1) Reset() {
	*x = TestChild1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_test_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestChild1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestChild1) ProtoMessage() {}

func (x *TestChild1) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestChild1.ProtoReflect.Descriptor instead.
func (*TestChild1) Descriptor() ([]byte, []int) {
	return file_storage_test_proto_rawDescGZIP(), []int{4}
}

func (x *TestChild1) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestChild1) GetVal() string {
	if x != nil {
		return x.Val
	}
	return ""
}

type TestGrandChild1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ParentId string `protobuf:"bytes,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	ChildId  string `protobuf:"bytes,3,opt,name=child_id,json=childId,proto3" json:"child_id,omitempty"`
	Val      string `protobuf:"bytes,4,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *TestGrandChild1) Reset() {
	*x = TestGrandChild1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_test_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestGrandChild1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestGrandChild1) ProtoMessage() {}

func (x *TestGrandChild1) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestGrandChild1.ProtoReflect.Descriptor instead.
func (*TestGrandChild1) Descriptor() ([]byte, []int) {
	return file_storage_test_proto_rawDescGZIP(), []int{5}
}

func (x *TestGrandChild1) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestGrandChild1) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *TestGrandChild1) GetChildId() string {
	if x != nil {
		return x.ChildId
	}
	return ""
}

func (x *TestGrandChild1) GetVal() string {
	if x != nil {
		return x.Val
	}
	return ""
}

type TestGGrandChild1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Val string `protobuf:"bytes,2,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *TestGGrandChild1) Reset() {
	*x = TestGGrandChild1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_test_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestGGrandChild1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestGGrandChild1) ProtoMessage() {}

func (x *TestGGrandChild1) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestGGrandChild1.ProtoReflect.Descriptor instead.
func (*TestGGrandChild1) Descriptor() ([]byte, []int) {
	return file_storage_test_proto_rawDescGZIP(), []int{6}
}

func (x *TestGGrandChild1) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestGGrandChild1) GetVal() string {
	if x != nil {
		return x.Val
	}
	return ""
}

type TestG2GrandChild1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ParentId string `protobuf:"bytes,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	ChildId  string `protobuf:"bytes,3,opt,name=child_id,json=childId,proto3" json:"child_id,omitempty"`
	Val      string `protobuf:"bytes,4,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *TestG2GrandChild1) Reset() {
	*x = TestG2GrandChild1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_test_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestG2GrandChild1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestG2GrandChild1) ProtoMessage() {}

func (x *TestG2GrandChild1) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestG2GrandChild1.ProtoReflect.Descriptor instead.
func (*TestG2GrandChild1) Descriptor() ([]byte, []int) {
	return file_storage_test_proto_rawDescGZIP(), []int{7}
}

func (x *TestG2GrandChild1) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestG2GrandChild1) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *TestG2GrandChild1) GetChildId() string {
	if x != nil {
		return x.ChildId
	}
	return ""
}

func (x *TestG2GrandChild1) GetVal() string {
	if x != nil {
		return x.Val
	}
	return ""
}

type TestG3GrandChild1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Val string `protobuf:"bytes,2,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *TestG3GrandChild1) Reset() {
	*x = TestG3GrandChild1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_test_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestG3GrandChild1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestG3GrandChild1) ProtoMessage() {}

func (x *TestG3GrandChild1) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestG3GrandChild1.ProtoReflect.Descriptor instead.
func (*TestG3GrandChild1) Descriptor() ([]byte, []int) {
	return file_storage_test_proto_rawDescGZIP(), []int{8}
}

func (x *TestG3GrandChild1) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestG3GrandChild1) GetVal() string {
	if x != nil {
		return x.Val
	}
	return ""
}

type TestParent2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ParentId string `protobuf:"bytes,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Val      string `protobuf:"bytes,3,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *TestParent2) Reset() {
	*x = TestParent2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_test_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestParent2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestParent2) ProtoMessage() {}

func (x *TestParent2) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestParent2.ProtoReflect.Descriptor instead.
func (*TestParent2) Descriptor() ([]byte, []int) {
	return file_storage_test_proto_rawDescGZIP(), []int{9}
}

func (x *TestParent2) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestParent2) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *TestParent2) GetVal() string {
	if x != nil {
		return x.Val
	}
	return ""
}

type TestChild2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ParentId string `protobuf:"bytes,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	// For a potential optimization, insert a direct link from child to grandparent.
	GrandparentId string `protobuf:"bytes,3,opt,name=grandparent_id,json=grandparentId,proto3" json:"grandparent_id,omitempty"`
	Val           string `protobuf:"bytes,4,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *TestChild2) Reset() {
	*x = TestChild2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_test_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestChild2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestChild2) ProtoMessage() {}

func (x *TestChild2) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestChild2.ProtoReflect.Descriptor instead.
func (*TestChild2) Descriptor() ([]byte, []int) {
	return file_storage_test_proto_rawDescGZIP(), []int{10}
}

func (x *TestChild2) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestChild2) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *TestChild2) GetGrandparentId() string {
	if x != nil {
		return x.GrandparentId
	}
	return ""
}

func (x *TestChild2) GetVal() string {
	if x != nil {
		return x.Val
	}
	return ""
}

type TestParent3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ParentId string `protobuf:"bytes,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Val      string `protobuf:"bytes,3,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *TestParent3) Reset() {
	*x = TestParent3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_test_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestParent3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestParent3) ProtoMessage() {}

func (x *TestParent3) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestParent3.ProtoReflect.Descriptor instead.
func (*TestParent3) Descriptor() ([]byte, []int) {
	return file_storage_test_proto_rawDescGZIP(), []int{11}
}

func (x *TestParent3) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestParent3) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *TestParent3) GetVal() string {
	if x != nil {
		return x.Val
	}
	return ""
}

type TestParent4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ParentId string `protobuf:"bytes,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Val      string `protobuf:"bytes,3,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *TestParent4) Reset() {
	*x = TestParent4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_test_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestParent4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestParent4) ProtoMessage() {}

func (x *TestParent4) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestParent4.ProtoReflect.Descriptor instead.
func (*TestParent4) Descriptor() ([]byte, []int) {
	return file_storage_test_proto_rawDescGZIP(), []int{12}
}

func (x *TestParent4) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestParent4) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *TestParent4) GetVal() string {
	if x != nil {
		return x.Val
	}
	return ""
}

type TestChild1P4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ParentId string `protobuf:"bytes,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Val      string `protobuf:"bytes,3,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *TestChild1P4) Reset() {
	*x = TestChild1P4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_test_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestChild1P4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestChild1P4) ProtoMessage() {}

func (x *TestChild1P4) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestChild1P4.ProtoReflect.Descriptor instead.
func (*TestChild1P4) Descriptor() ([]byte, []int) {
	return file_storage_test_proto_rawDescGZIP(), []int{13}
}

func (x *TestChild1P4) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestChild1P4) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *TestChild1P4) GetVal() string {
	if x != nil {
		return x.Val
	}
	return ""
}

type TestShortCircuit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ChildId        string `protobuf:"bytes,2,opt,name=child_id,json=childId,proto3" json:"child_id,omitempty"`
	G2GrandchildId string `protobuf:"bytes,3,opt,name=g2_grandchild_id,json=g2GrandchildId,proto3" json:"g2_grandchild_id,omitempty"`
}

func (x *TestShortCircuit) Reset() {
	*x = TestShortCircuit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_test_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestShortCircuit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestShortCircuit) ProtoMessage() {}

func (x *TestShortCircuit) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestShortCircuit.ProtoReflect.Descriptor instead.
func (*TestShortCircuit) Descriptor() ([]byte, []int) {
	return file_storage_test_proto_rawDescGZIP(), []int{14}
}

func (x *TestShortCircuit) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestShortCircuit) GetChildId() string {
	if x != nil {
		return x.ChildId
	}
	return ""
}

func (x *TestShortCircuit) GetG2GrandchildId() string {
	if x != nil {
		return x.G2GrandchildId
	}
	return ""
}

type TestSingleKeyStruct_Embedded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Embedded string `protobuf:"bytes,1,opt,name=embedded,proto3" json:"embedded,omitempty"`
}

func (x *TestSingleKeyStruct_Embedded) Reset() {
	*x = TestSingleKeyStruct_Embedded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_test_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSingleKeyStruct_Embedded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSingleKeyStruct_Embedded) ProtoMessage() {}

func (x *TestSingleKeyStruct_Embedded) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSingleKeyStruct_Embedded.ProtoReflect.Descriptor instead.
func (*TestSingleKeyStruct_Embedded) Descriptor() ([]byte, []int) {
	return file_storage_test_proto_rawDescGZIP(), []int{0, 1}
}

func (x *TestSingleKeyStruct_Embedded) GetEmbedded() string {
	if x != nil {
		return x.Embedded
	}
	return ""
}

type TestSingleKeyStruct_Nested struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nested  string                              `protobuf:"bytes,1,opt,name=nested,proto3" json:"nested,omitempty"`
	Nested2 *TestSingleKeyStruct_Nested_Nested2 `protobuf:"bytes,2,opt,name=nested2,proto3" json:"nested2,omitempty"`
}

func (x *TestSingleKeyStruct_Nested) Reset() {
	*x = TestSingleKeyStruct_Nested{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_test_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSingleKeyStruct_Nested) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSingleKeyStruct_Nested) ProtoMessage() {}

func (x *TestSingleKeyStruct_Nested) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSingleKeyStruct_Nested.ProtoReflect.Descriptor instead.
func (*TestSingleKeyStruct_Nested) Descriptor() ([]byte, []int) {
	return file_storage_test_proto_rawDescGZIP(), []int{0, 2}
}

func (x *TestSingleKeyStruct_Nested) GetNested() string {
	if x != nil {
		return x.Nested
	}
	return ""
}

func (x *TestSingleKeyStruct_Nested) GetNested2() *TestSingleKeyStruct_Nested_Nested2 {
	if x != nil {
		return x.Nested2
	}
	return nil
}

type TestSingleKeyStruct_OneOfNested struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nested  string                                   `protobuf:"bytes,1,opt,name=nested,proto3" json:"nested,omitempty"`
	Nested2 *TestSingleKeyStruct_OneOfNested_Nested2 `protobuf:"bytes,2,opt,name=nested2,proto3" json:"nested2,omitempty"`
}

func (x *TestSingleKeyStruct_OneOfNested) Reset() {
	*x = TestSingleKeyStruct_OneOfNested{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_test_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSingleKeyStruct_OneOfNested) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSingleKeyStruct_OneOfNested) ProtoMessage() {}

func (x *TestSingleKeyStruct_OneOfNested) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSingleKeyStruct_OneOfNested.ProtoReflect.Descriptor instead.
func (*TestSingleKeyStruct_OneOfNested) Descriptor() ([]byte, []int) {
	return file_storage_test_proto_rawDescGZIP(), []int{0, 3}
}

func (x *TestSingleKeyStruct_OneOfNested) GetNested() string {
	if x != nil {
		return x.Nested
	}
	return ""
}

func (x *TestSingleKeyStruct_OneOfNested) GetNested2() *TestSingleKeyStruct_OneOfNested_Nested2 {
	if x != nil {
		return x.Nested2
	}
	return nil
}

type TestSingleKeyStruct_Embedded_Embedded2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Embedded string `protobuf:"bytes,2,opt,name=embedded,proto3" json:"embedded,omitempty"`
}

func (x *TestSingleKeyStruct_Embedded_Embedded2) Reset() {
	*x = TestSingleKeyStruct_Embedded_Embedded2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_test_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSingleKeyStruct_Embedded_Embedded2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSingleKeyStruct_Embedded_Embedded2) ProtoMessage() {}

func (x *TestSingleKeyStruct_Embedded_Embedded2) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSingleKeyStruct_Embedded_Embedded2.ProtoReflect.Descriptor instead.
func (*TestSingleKeyStruct_Embedded_Embedded2) Descriptor() ([]byte, []int) {
	return file_storage_test_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *TestSingleKeyStruct_Embedded_Embedded2) GetEmbedded() string {
	if x != nil {
		return x.Embedded
	}
	return ""
}

type TestSingleKeyStruct_Nested_Nested2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nested2 string `protobuf:"bytes,2,opt,name=nested2,proto3" json:"nested2,omitempty"`
}

func (x *TestSingleKeyStruct_Nested_Nested2) Reset() {
	*x = TestSingleKeyStruct_Nested_Nested2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_test_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSingleKeyStruct_Nested_Nested2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSingleKeyStruct_Nested_Nested2) ProtoMessage() {}

func (x *TestSingleKeyStruct_Nested_Nested2) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSingleKeyStruct_Nested_Nested2.ProtoReflect.Descriptor instead.
func (*TestSingleKeyStruct_Nested_Nested2) Descriptor() ([]byte, []int) {
	return file_storage_test_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *TestSingleKeyStruct_Nested_Nested2) GetNested2() string {
	if x != nil {
		return x.Nested2
	}
	return ""
}

type TestSingleKeyStruct_OneOfNested_Nested2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nested2 string `protobuf:"bytes,2,opt,name=nested2,proto3" json:"nested2,omitempty"`
}

func (x *TestSingleKeyStruct_OneOfNested_Nested2) Reset() {
	*x = TestSingleKeyStruct_OneOfNested_Nested2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_test_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSingleKeyStruct_OneOfNested_Nested2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSingleKeyStruct_OneOfNested_Nested2) ProtoMessage() {}

func (x *TestSingleKeyStruct_OneOfNested_Nested2) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSingleKeyStruct_OneOfNested_Nested2.ProtoReflect.Descriptor instead.
func (*TestSingleKeyStruct_OneOfNested_Nested2) Descriptor() ([]byte, []int) {
	return file_storage_test_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *TestSingleKeyStruct_OneOfNested_Nested2) GetNested2() string {
	if x != nil {
		return x.Nested2
	}
	return ""
}

type TestMultiKeyStruct_Embedded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Embedded string `protobuf:"bytes,1,opt,name=embedded,proto3" json:"embedded,omitempty"`
}

func (x *TestMultiKeyStruct_Embedded) Reset() {
	*x = TestMultiKeyStruct_Embedded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_test_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestMultiKeyStruct_Embedded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMultiKeyStruct_Embedded) ProtoMessage() {}

func (x *TestMultiKeyStruct_Embedded) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMultiKeyStruct_Embedded.ProtoReflect.Descriptor instead.
func (*TestMultiKeyStruct_Embedded) Descriptor() ([]byte, []int) {
	return file_storage_test_proto_rawDescGZIP(), []int{1, 1}
}

func (x *TestMultiKeyStruct_Embedded) GetEmbedded() string {
	if x != nil {
		return x.Embedded
	}
	return ""
}

type TestMultiKeyStruct_Nested struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nested   string                             `protobuf:"bytes,1,opt,name=nested,proto3" json:"nested,omitempty"`
	IsNested bool                               `protobuf:"varint,3,opt,name=is_nested,json=isNested,proto3" json:"is_nested,omitempty"`
	Int64    int64                              `protobuf:"varint,4,opt,name=int64,proto3" json:"int64,omitempty"`
	Nested2  *TestMultiKeyStruct_Nested_Nested2 `protobuf:"bytes,2,opt,name=nested2,proto3" json:"nested2,omitempty"`
}

func (x *TestMultiKeyStruct_Nested) Reset() {
	*x = TestMultiKeyStruct_Nested{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_test_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestMultiKeyStruct_Nested) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMultiKeyStruct_Nested) ProtoMessage() {}

func (x *TestMultiKeyStruct_Nested) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMultiKeyStruct_Nested.ProtoReflect.Descriptor instead.
func (*TestMultiKeyStruct_Nested) Descriptor() ([]byte, []int) {
	return file_storage_test_proto_rawDescGZIP(), []int{1, 2}
}

func (x *TestMultiKeyStruct_Nested) GetNested() string {
	if x != nil {
		return x.Nested
	}
	return ""
}

func (x *TestMultiKeyStruct_Nested) GetIsNested() bool {
	if x != nil {
		return x.IsNested
	}
	return false
}

func (x *TestMultiKeyStruct_Nested) GetInt64() int64 {
	if x != nil {
		return x.Int64
	}
	return 0
}

func (x *TestMultiKeyStruct_Nested) GetNested2() *TestMultiKeyStruct_Nested_Nested2 {
	if x != nil {
		return x.Nested2
	}
	return nil
}

type TestMultiKeyStruct_OneOfNested struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nested string `protobuf:"bytes,1,opt,name=nested,proto3" json:"nested,omitempty"`
}

func (x *TestMultiKeyStruct_OneOfNested) Reset() {
	*x = TestMultiKeyStruct_OneOfNested{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_test_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestMultiKeyStruct_OneOfNested) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMultiKeyStruct_OneOfNested) ProtoMessage() {}

func (x *TestMultiKeyStruct_OneOfNested) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMultiKeyStruct_OneOfNested.ProtoReflect.Descriptor instead.
func (*TestMultiKeyStruct_OneOfNested) Descriptor() ([]byte, []int) {
	return file_storage_test_proto_rawDescGZIP(), []int{1, 3}
}

func (x *TestMultiKeyStruct_OneOfNested) GetNested() string {
	if x != nil {
		return x.Nested
	}
	return ""
}

type TestMultiKeyStruct_Embedded_Embedded2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Embedded string `protobuf:"bytes,2,opt,name=embedded,proto3" json:"embedded,omitempty"`
}

func (x *TestMultiKeyStruct_Embedded_Embedded2) Reset() {
	*x = TestMultiKeyStruct_Embedded_Embedded2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_test_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestMultiKeyStruct_Embedded_Embedded2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMultiKeyStruct_Embedded_Embedded2) ProtoMessage() {}

func (x *TestMultiKeyStruct_Embedded_Embedded2) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMultiKeyStruct_Embedded_Embedded2.ProtoReflect.Descriptor instead.
func (*TestMultiKeyStruct_Embedded_Embedded2) Descriptor() ([]byte, []int) {
	return file_storage_test_proto_rawDescGZIP(), []int{1, 1, 0}
}

func (x *TestMultiKeyStruct_Embedded_Embedded2) GetEmbedded() string {
	if x != nil {
		return x.Embedded
	}
	return ""
}

type TestMultiKeyStruct_Nested_Nested2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nested2  string `protobuf:"bytes,2,opt,name=nested2,proto3" json:"nested2,omitempty"`
	IsNested bool   `protobuf:"varint,3,opt,name=is_nested,json=isNested,proto3" json:"is_nested,omitempty"`
	Int64    int64  `protobuf:"varint,4,opt,name=int64,proto3" json:"int64,omitempty"`
}

func (x *TestMultiKeyStruct_Nested_Nested2) Reset() {
	*x = TestMultiKeyStruct_Nested_Nested2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_test_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestMultiKeyStruct_Nested_Nested2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMultiKeyStruct_Nested_Nested2) ProtoMessage() {}

func (x *TestMultiKeyStruct_Nested_Nested2) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMultiKeyStruct_Nested_Nested2.ProtoReflect.Descriptor instead.
func (*TestMultiKeyStruct_Nested_Nested2) Descriptor() ([]byte, []int) {
	return file_storage_test_proto_rawDescGZIP(), []int{1, 2, 0}
}

func (x *TestMultiKeyStruct_Nested_Nested2) GetNested2() string {
	if x != nil {
		return x.Nested2
	}
	return ""
}

func (x *TestMultiKeyStruct_Nested_Nested2) GetIsNested() bool {
	if x != nil {
		return x.IsNested
	}
	return false
}

func (x *TestMultiKeyStruct_Nested_Nested2) GetInt64() int64 {
	if x != nil {
		return x.Int64
	}
	return 0
}

type TestMultiKeyStruct_OneOfNested_Nested2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nested2 string `protobuf:"bytes,2,opt,name=nested2,proto3" json:"nested2,omitempty"`
}

func (x *TestMultiKeyStruct_OneOfNested_Nested2) Reset() {
	*x = TestMultiKeyStruct_OneOfNested_Nested2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_test_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestMultiKeyStruct_OneOfNested_Nested2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMultiKeyStruct_OneOfNested_Nested2) ProtoMessage() {}

func (x *TestMultiKeyStruct_OneOfNested_Nested2) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMultiKeyStruct_OneOfNested_Nested2.ProtoReflect.Descriptor instead.
func (*TestMultiKeyStruct_OneOfNested_Nested2) Descriptor() ([]byte, []int) {
	return file_storage_test_proto_rawDescGZIP(), []int{1, 3, 0}
}

func (x *TestMultiKeyStruct_OneOfNested_Nested2) GetNested2() string {
	if x != nil {
		return x.Nested2
	}
	return ""
}

type TestGrandparent_Embedded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Val       string                                `protobuf:"bytes,1,opt,name=val,proto3" json:"val,omitempty"`
	Embedded2 []*TestGrandparent_Embedded_Embedded2 `protobuf:"bytes,2,rep,name=embedded2,proto3" json:"embedded2,omitempty"`
}

func (x *TestGrandparent_Embedded) Reset() {
	*x = TestGrandparent_Embedded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_test_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestGrandparent_Embedded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestGrandparent_Embedded) ProtoMessage() {}

func (x *TestGrandparent_Embedded) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestGrandparent_Embedded.ProtoReflect.Descriptor instead.
func (*TestGrandparent_Embedded) Descriptor() ([]byte, []int) {
	return file_storage_test_proto_rawDescGZIP(), []int{2, 0}
}

func (x *TestGrandparent_Embedded) GetVal() string {
	if x != nil {
		return x.Val
	}
	return ""
}

func (x *TestGrandparent_Embedded) GetEmbedded2() []*TestGrandparent_Embedded_Embedded2 {
	if x != nil {
		return x.Embedded2
	}
	return nil
}

type TestGrandparent_Embedded_Embedded2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Val string `protobuf:"bytes,1,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *TestGrandparent_Embedded_Embedded2) Reset() {
	*x = TestGrandparent_Embedded_Embedded2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_test_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestGrandparent_Embedded_Embedded2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestGrandparent_Embedded_Embedded2) ProtoMessage() {}

func (x *TestGrandparent_Embedded_Embedded2) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestGrandparent_Embedded_Embedded2.ProtoReflect.Descriptor instead.
func (*TestGrandparent_Embedded_Embedded2) Descriptor() ([]byte, []int) {
	return file_storage_test_proto_rawDescGZIP(), []int{2, 0, 0}
}

func (x *TestGrandparent_Embedded_Embedded2) GetVal() string {
	if x != nil {
		return x.Val
	}
	return ""
}

type TestParent1_Child1Ref struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChildId string `protobuf:"bytes,1,opt,name=child_id,json=childId,proto3" json:"child_id,omitempty"`
}

func (x *TestParent1_Child1Ref) Reset() {
	*x = TestParent1_Child1Ref{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_test_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestParent1_Child1Ref) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestParent1_Child1Ref) ProtoMessage() {}

func (x *TestParent1_Child1Ref) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestParent1_Child1Ref.ProtoReflect.Descriptor instead.
func (*TestParent1_Child1Ref) Descriptor() ([]byte, []int) {
	return file_storage_test_proto_rawDescGZIP(), []int{3, 0}
}

func (x *TestParent1_Child1Ref) GetChildId() string {
	if x != nil {
		return x.ChildId
	}
	return ""
}

var File_storage_test_proto protoreflect.FileDescriptor

var file_storage_test_proto_rawDesc = []byte{
	0x0a, 0x12, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14,
	0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd3, 0x0b, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x3b, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xf2, 0xde, 0x1f, 0x25, 0x73,
	0x71, 0x6c, 0x3a, 0x22, 0x70, 0x6b, 0x2c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x3d, 0x68, 0x61, 0x73,
	0x68, 0x22, 0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20,
	0x4b, 0x65, 0x79, 0x22, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xf2, 0xde, 0x1f, 0x1f, 0x73, 0x71, 0x6c,
	0x3a, 0x22, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x22, 0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x3a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6c, 0x69,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1e, 0xf2, 0xde, 0x1f, 0x1a, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x20, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x22, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x16, 0xf2, 0xde, 0x1f, 0x12, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a,
	0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x52, 0x04, 0x62, 0x6f, 0x6f,
	0x6c, 0x12, 0x30, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x18, 0xf2, 0xde, 0x1f, 0x14, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x54,
	0x65, 0x73, 0x74, 0x20, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x22, 0x52, 0x06, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x17, 0xf2, 0xde, 0x1f, 0x13, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22,
	0x54, 0x65, 0x73, 0x74, 0x20, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x22, 0x52, 0x05, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x2d, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x02, 0x42, 0x17, 0xf2, 0xde, 0x1f, 0x13, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x54,
	0x65, 0x73, 0x74, 0x20, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x22, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x12, 0x5a, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x18, 0xf2, 0xde, 0x1f,
	0x14, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x22, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x55, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1b, 0xf2, 0xde,
	0x1f, 0x17, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x4d, 0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x16, 0xf2, 0xde, 0x1f, 0x12, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x3a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x45, 0x6e, 0x75, 0x6d, 0x22, 0x52, 0x04, 0x65,
	0x6e, 0x75, 0x6d, 0x12, 0x55, 0x0a, 0x05, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x1c, 0xf2, 0xde, 0x1f, 0x18, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x3a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x45, 0x6e, 0x75, 0x6d, 0x20, 0x53, 0x6c, 0x69,
	0x63, 0x65, 0x22, 0x52, 0x05, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x12, 0x41, 0x0a, 0x08, 0x65, 0x6d,
	0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x64, 0x65, 0x64, 0x52, 0x08, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x12, 0x3b, 0x0a,
	0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x4e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x52, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0b, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4c,
	0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x2e, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52,
	0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x4f, 0x0a, 0x08, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x1a, 0x27, 0x0a, 0x09, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x64, 0x65, 0x64, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64,
	0x1a, 0x8c, 0x01, 0x0a, 0x06, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x07, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x32, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x32, 0x52, 0x07, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x32, 0x1a, 0x23, 0x0a, 0x07, 0x4e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x32,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x32, 0x1a,
	0x96, 0x01, 0x0a, 0x0b, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x07, 0x6e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4b, 0x65, 0x79,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x4e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x32, 0x52, 0x07, 0x6e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x32, 0x1a, 0x23, 0x0a, 0x07, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x32, 0x12, 0x18,
	0x0a, 0x07, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x32, 0x22, 0x27, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x09, 0x0a, 0x05, 0x45, 0x4e, 0x55, 0x4d, 0x30, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x4e, 0x55, 0x4d, 0x31, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4e, 0x55, 0x4d, 0x32, 0x10,
	0x02, 0x42, 0x07, 0x0a, 0x05, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x22, 0xf1, 0x0e, 0x0a, 0x12, 0x54,
	0x65, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x12, 0x35, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x21, 0xf2, 0xde, 0x1f, 0x1d, 0x73, 0x71, 0x6c, 0x3a, 0x22, 0x70, 0x6b, 0x2c, 0x69, 0x64, 0x22,
	0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x4b, 0x65,
	0x79, 0x22, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x31, 0x12, 0x41, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x32,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xf2, 0xde, 0x1f, 0x29, 0x73, 0x71, 0x6c, 0x3a,
	0x22, 0x70, 0x6b, 0x22, 0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x54, 0x65, 0x73,
	0x74, 0x20, 0x4b, 0x65, 0x79, 0x20, 0x32, 0x2c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2c, 0x68, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x22, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x32, 0x12, 0x41, 0x0a, 0x0c, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x1e, 0xf2, 0xde, 0x1f, 0x1a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x54,
	0x65, 0x73, 0x74, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x53, 0x6c, 0x69, 0x63, 0x65,
	0x22, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x2a,
	0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x16, 0xf2, 0xde,
	0x1f, 0x12, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x42,
	0x6f, 0x6f, 0x6c, 0x22, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x30, 0x0a, 0x06, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x18, 0xf2, 0xde, 0x1f, 0x14,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x55, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x22, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x2d, 0x0a, 0x05,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x17, 0xf2, 0xde, 0x1f,
	0x13, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x22, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x2d, 0x0a, 0x05, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x42, 0x17, 0xf2, 0xde, 0x1f, 0x13,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x22, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x59, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4b, 0x65,
	0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x18, 0xf2, 0xde, 0x1f, 0x14, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a,
	0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x55, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x1b, 0xf2, 0xde, 0x1f, 0x17, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x3a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x4c, 0x0a, 0x04,
	0x65, 0x6e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4b, 0x65,
	0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x16, 0xf2, 0xde,
	0x1f, 0x12, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x45,
	0x6e, 0x75, 0x6d, 0x22, 0x52, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x54, 0x0a, 0x05, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4b, 0x65, 0x79,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x1c, 0xf2, 0xde, 0x1f,
	0x18, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x45, 0x6e,
	0x75, 0x6d, 0x20, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x22, 0x52, 0x05, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x18, 0xf2, 0xde, 0x1f, 0x14, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x54, 0x65,
	0x73, 0x74, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x3f, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f,
	0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x03, 0x28, 0x03,
	0x42, 0x0d, 0x18, 0x01, 0xf2, 0xde, 0x1f, 0x07, 0x73, 0x71, 0x6c, 0x3a, 0x22, 0x2d, 0x22, 0x52,
	0x12, 0x69, 0x6e, 0x74, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x6c, 0x69,
	0x63, 0x65, 0x18, 0x12, 0x20, 0x03, 0x28, 0x05, 0x42, 0x1d, 0xf2, 0xde, 0x1f, 0x19, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x20, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x22, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x6c,
	0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x52, 0x08, 0x65, 0x6d, 0x62,
	0x65, 0x64, 0x64, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x12, 0x22, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4b, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x6e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4b, 0x65,
	0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x4e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x6e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4f, 0x0a,
	0x08, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6d, 0x62,
	0x65, 0x64, 0x64, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6d, 0x62,
	0x65, 0x64, 0x64, 0x65, 0x64, 0x1a, 0x27, 0x0a, 0x09, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65,
	0x64, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x1a, 0xb8,
	0x03, 0x0a, 0x06, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x06, 0x6e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xf2, 0xde, 0x1f, 0x1b, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x4e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x52, 0x06, 0x6e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1d, 0xf2, 0xde, 0x1f, 0x19, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x3a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x42,
	0x6f, 0x6f, 0x6c, 0x22, 0x52, 0x08, 0x69, 0x73, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x34,
	0x0a, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x1e, 0xf2,
	0xde, 0x1f, 0x1a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20,
	0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x22, 0x52, 0x05, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x12, 0x44, 0x0a, 0x07, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x32, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x32, 0x52, 0x07, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x32, 0x1a, 0xbc, 0x01, 0x0a, 0x07, 0x4e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x32, 0x12, 0x3b, 0x0a, 0x07, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xf2, 0xde, 0x1f, 0x1d, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x3a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x32, 0x22, 0x52, 0x07, 0x6e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x32, 0x12, 0x3c, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1f, 0xf2, 0xde, 0x1f, 0x1b, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x3a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20,
	0x42, 0x6f, 0x6f, 0x6c, 0x20, 0x32, 0x22, 0x52, 0x08, 0x69, 0x73, 0x4e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x12, 0x36, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x20, 0xf2, 0xde, 0x1f, 0x1c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x54, 0x65,
	0x73, 0x74, 0x20, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x20,
	0x32, 0x22, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0x71, 0x0a, 0x0b, 0x4f, 0x6e, 0x65,
	0x4f, 0x66, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x06, 0x6e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xf2, 0xde, 0x1f, 0x21, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x4f, 0x6e, 0x65, 0x6f, 0x66,
	0x20, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x52,
	0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x1a, 0x23, 0x0a, 0x07, 0x4e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x32, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x32, 0x22, 0x27, 0x0a, 0x04,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4e, 0x55, 0x4d, 0x30, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x45, 0x4e, 0x55, 0x4d, 0x31, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4e,
	0x55, 0x4d, 0x32, 0x10, 0x02, 0x42, 0x07, 0x0a, 0x05, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x22, 0xa7,
	0x04, 0x0a, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x39, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29,
	0xf2, 0xde, 0x1f, 0x25, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x54, 0x65, 0x73, 0x74,
	0x20, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x49, 0x44, 0x22,
	0x20, 0x73, 0x71, 0x6c, 0x3a, 0x22, 0x70, 0x6b, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a,
	0x03, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xf2, 0xde, 0x1f, 0x1d,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x47, 0x72, 0x61,
	0x6e, 0x64, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x56, 0x61, 0x6c, 0x22, 0x52, 0x03, 0x76,
	0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x08, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2e, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x52, 0x08, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65,
	0x64, 0x12, 0x42, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x26, 0xf2, 0xde, 0x1f, 0x22, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a,
	0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x20, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x52, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x47, 0x0a, 0x0a, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x42, 0x28, 0xf2, 0xde, 0x1f, 0x24, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x47, 0x72, 0x61, 0x6e,
	0x64, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x52, 0x69, 0x73, 0x6b, 0x20, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x22, 0x52, 0x09, 0x72, 0x69, 0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0xd7,
	0x01, 0x0a, 0x08, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x76,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xf2, 0xde, 0x1f, 0x22, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x47, 0x72, 0x61, 0x6e, 0x64,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x22,
	0x52, 0x03, 0x76, 0x61, 0x6c, 0x12, 0x49, 0x0a, 0x09, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65,
	0x64, 0x32, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x2e, 0x45, 0x6d, 0x62, 0x65,
	0x64, 0x64, 0x65, 0x64, 0x32, 0x52, 0x09, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x32,
	0x1a, 0x46, 0x0a, 0x09, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x32, 0x12, 0x39, 0x0a,
	0x03, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xf2, 0xde, 0x1f, 0x23,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x47, 0x72, 0x61,
	0x6e, 0x64, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65,
	0x64, 0x32, 0x22, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x22, 0xc6, 0x02, 0x0a, 0x0b, 0x54, 0x65, 0x73,
	0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x31, 0x12, 0x35, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xf2, 0xde, 0x1f, 0x21, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x3a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x31, 0x20, 0x49,
	0x44, 0x22, 0x20, 0x73, 0x71, 0x6c, 0x3a, 0x22, 0x70, 0x6b, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3d, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x20, 0xf2, 0xde, 0x1f, 0x1c, 0x73, 0x71, 0x6c, 0x3a, 0x22, 0x66, 0x6b, 0x28,
	0x54, 0x65, 0x73, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3a,
	0x69, 0x64, 0x29, 0x22, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3a,
	0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x31, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x31, 0x52, 0x65, 0x66,
	0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x2f, 0x0a, 0x03, 0x76, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xf2, 0xde, 0x1f, 0x19, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x3a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x31, 0x20, 0x56, 0x61, 0x6c, 0x22, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x1a, 0x54, 0x0a, 0x09, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x31, 0x52, 0x65, 0x66, 0x12, 0x47, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xf2, 0xde, 0x1f, 0x28,
	0x73, 0x71, 0x6c, 0x3a, 0x22, 0x66, 0x6b, 0x28, 0x54, 0x65, 0x73, 0x74, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x31, 0x3a, 0x69, 0x64, 0x29, 0x2c, 0x6e, 0x6f, 0x2d, 0x66, 0x6b, 0x2d, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x22, 0x52, 0x07, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x49,
	0x64, 0x22, 0x72, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x31, 0x12,
	0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xf2, 0xde, 0x1f,
	0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x31, 0x20, 0x49, 0x44, 0x22, 0x20, 0x73, 0x71, 0x6c, 0x3a, 0x22, 0x70, 0x6b,
	0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1c, 0xf2, 0xde, 0x1f, 0x18, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22,
	0x54, 0x65, 0x73, 0x74, 0x20, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x31, 0x20, 0x56, 0x61, 0x6c, 0x22,
	0x52, 0x03, 0x76, 0x61, 0x6c, 0x22, 0x8a, 0x02, 0x0a, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x47, 0x72,
	0x61, 0x6e, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x31, 0x12, 0x39, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xf2, 0xde, 0x1f, 0x25, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x3a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x31, 0x20, 0x49, 0x44, 0x22, 0x20, 0x73, 0x71, 0x6c, 0x3a, 0x22, 0x70, 0x6b, 0x22,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xf2, 0xde, 0x1f, 0x17, 0x73, 0x71, 0x6c,
	0x3a, 0x22, 0x66, 0x6b, 0x28, 0x54, 0x65, 0x73, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x31, 0x3a,
	0x69, 0x64, 0x29, 0x22, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4d,
	0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x32, 0xf2, 0xde, 0x1f, 0x2e, 0x73, 0x71, 0x6c, 0x3a, 0x22, 0x66, 0x6b, 0x28, 0x54, 0x65,
	0x73, 0x74, 0x47, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x31, 0x3a, 0x69,
	0x64, 0x29, 0x2c, 0x6e, 0x6f, 0x2d, 0x66, 0x6b, 0x2d, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x22, 0x52, 0x07, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x33, 0x0a,
	0x03, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xf2, 0xde, 0x1f, 0x1d,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x47, 0x72, 0x61,
	0x6e, 0x64, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x31, 0x20, 0x56, 0x61, 0x6c, 0x22, 0x52, 0x03, 0x76,
	0x61, 0x6c, 0x22, 0x84, 0x01, 0x0a, 0x10, 0x54, 0x65, 0x73, 0x74, 0x47, 0x47, 0x72, 0x61, 0x6e,
	0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x31, 0x12, 0x3a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2a, 0xf2, 0xde, 0x1f, 0x26, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a,
	0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x47, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x31, 0x20, 0x49, 0x44, 0x22, 0x20, 0x73, 0x71, 0x6c, 0x3a, 0x22, 0x70, 0x6b, 0x22, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x22, 0xf2, 0xde, 0x1f, 0x1e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x54, 0x65,
	0x73, 0x74, 0x20, 0x47, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x31, 0x20,
	0x56, 0x61, 0x6c, 0x22, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x22, 0x97, 0x02, 0x0a, 0x11, 0x54, 0x65,
	0x73, 0x74, 0x47, 0x32, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x31, 0x12,
	0x3b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xf2, 0xde, 0x1f,
	0x27, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x47, 0x32,
	0x47, 0x72, 0x61, 0x6e, 0x64, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x31, 0x20, 0x49, 0x44, 0x22, 0x20,
	0x73, 0x71, 0x6c, 0x3a, 0x22, 0x70, 0x6b, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x09,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x21, 0xf2, 0xde, 0x1f, 0x1d, 0x73, 0x71, 0x6c, 0x3a, 0x22, 0x66, 0x6b, 0x28, 0x54, 0x65, 0x73,
	0x74, 0x47, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x31, 0x3a, 0x69, 0x64,
	0x29, 0x22, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x08,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33,
	0xf2, 0xde, 0x1f, 0x2f, 0x73, 0x71, 0x6c, 0x3a, 0x22, 0x66, 0x6b, 0x28, 0x54, 0x65, 0x73, 0x74,
	0x47, 0x33, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x31, 0x3a, 0x69, 0x64,
	0x29, 0x2c, 0x6e, 0x6f, 0x2d, 0x66, 0x6b, 0x2d, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x22, 0x52, 0x07, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x03,
	0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xf2, 0xde, 0x1f, 0x1f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x47, 0x32, 0x47, 0x72,
	0x61, 0x6e, 0x64, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x31, 0x20, 0x56, 0x61, 0x6c, 0x22, 0x52, 0x03,
	0x76, 0x61, 0x6c, 0x22, 0x87, 0x01, 0x0a, 0x11, 0x54, 0x65, 0x73, 0x74, 0x47, 0x33, 0x47, 0x72,
	0x61, 0x6e, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x31, 0x12, 0x3b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xf2, 0xde, 0x1f, 0x27, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x3a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x47, 0x33, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x31, 0x20, 0x49, 0x44, 0x22, 0x20, 0x73, 0x71, 0x6c, 0x3a, 0x22, 0x70,
	0x6b, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x23, 0xf2, 0xde, 0x1f, 0x1f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a,
	0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x47, 0x33, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x31, 0x20, 0x56, 0x61, 0x6c, 0x22, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x22, 0xb4, 0x01,
	0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x32, 0x12, 0x35, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xf2, 0xde, 0x1f, 0x21, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x32, 0x20, 0x49, 0x44, 0x22, 0x20, 0x73, 0x71, 0x6c, 0x3a, 0x22, 0x70, 0x6b, 0x22,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xf2, 0xde, 0x1f, 0x1c, 0x73, 0x71, 0x6c,
	0x3a, 0x22, 0x66, 0x6b, 0x28, 0x54, 0x65, 0x73, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x3a, 0x69, 0x64, 0x29, 0x22, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1d, 0xf2, 0xde, 0x1f, 0x19, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x54, 0x65,
	0x73, 0x74, 0x20, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x32, 0x20, 0x56, 0x61, 0x6c, 0x22, 0x52,
	0x03, 0x76, 0x61, 0x6c, 0x22, 0x87, 0x02, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x32, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x24, 0xf2, 0xde, 0x1f, 0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x54, 0x65, 0x73,
	0x74, 0x20, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x32, 0x20, 0x49, 0x44, 0x22, 0x20, 0x73, 0x71, 0x6c,
	0x3a, 0x22, 0x70, 0x6b, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x09, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xf2, 0xde,
	0x1f, 0x18, 0x73, 0x71, 0x6c, 0x3a, 0x22, 0x66, 0x6b, 0x28, 0x54, 0x65, 0x73, 0x74, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x32, 0x3a, 0x69, 0x64, 0x29, 0x22, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x58, 0x0a, 0x0e, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xf2, 0xde,
	0x1f, 0x2d, 0x73, 0x71, 0x6c, 0x3a, 0x22, 0x66, 0x6b, 0x28, 0x54, 0x65, 0x73, 0x74, 0x47, 0x72,
	0x61, 0x6e, 0x64, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3a, 0x69, 0x64, 0x29, 0x2c, 0x6e, 0x6f,
	0x2d, 0x66, 0x6b, 0x2d, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x22, 0x52,
	0x0d, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xf2, 0xde, 0x1f,
	0x18, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x32, 0x20, 0x56, 0x61, 0x6c, 0x22, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x22, 0xb4,
	0x01, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x33, 0x12, 0x35,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xf2, 0xde, 0x1f, 0x21,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x33, 0x20, 0x49, 0x44, 0x22, 0x20, 0x73, 0x71, 0x6c, 0x3a, 0x22, 0x70, 0x6b,
	0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xf2, 0xde, 0x1f, 0x1c, 0x73, 0x71,
	0x6c, 0x3a, 0x22, 0x66, 0x6b, 0x28, 0x54, 0x65, 0x73, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x3a, 0x69, 0x64, 0x29, 0x22, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1d, 0xf2, 0xde, 0x1f, 0x19, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x54,
	0x65, 0x73, 0x74, 0x20, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x33, 0x20, 0x56, 0x61, 0x6c, 0x22,
	0x52, 0x03, 0x76, 0x61, 0x6c, 0x22, 0xb4, 0x01, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x34, 0x12, 0x35, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x25, 0xf2, 0xde, 0x1f, 0x21, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x54,
	0x65, 0x73, 0x74, 0x20, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x34, 0x20, 0x49, 0x44, 0x22, 0x20,
	0x73, 0x71, 0x6c, 0x3a, 0x22, 0x70, 0x6b, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x09,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x20, 0xf2, 0xde, 0x1f, 0x1c, 0x73, 0x71, 0x6c, 0x3a, 0x22, 0x66, 0x6b, 0x28, 0x54, 0x65, 0x73,
	0x74, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3a, 0x69, 0x64, 0x29,
	0x22, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x03, 0x76,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xf2, 0xde, 0x1f, 0x19, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x34, 0x20, 0x56, 0x61, 0x6c, 0x22, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x22, 0xb3, 0x01, 0x0a,
	0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x31, 0x50, 0x34, 0x12, 0x36, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xf2, 0xde, 0x1f, 0x22, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x31, 0x50, 0x34, 0x20, 0x49, 0x44, 0x22, 0x20, 0x73, 0x71, 0x6c, 0x3a, 0x22, 0x70, 0x6b,
	0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xf2, 0xde, 0x1f, 0x18, 0x73, 0x71,
	0x6c, 0x3a, 0x22, 0x66, 0x6b, 0x28, 0x54, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x34, 0x3a, 0x69, 0x64, 0x29, 0x22, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xf2,
	0xde, 0x1f, 0x1a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x31, 0x50, 0x34, 0x20, 0x56, 0x61, 0x6c, 0x22, 0x52, 0x03, 0x76,
	0x61, 0x6c, 0x22, 0xc6, 0x02, 0x0a, 0x10, 0x54, 0x65, 0x73, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x12, 0x3a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2a, 0xf2, 0xde, 0x1f, 0x26, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a,
	0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x69, 0x72, 0x63, 0x75,
	0x69, 0x74, 0x20, 0x49, 0x44, 0x22, 0x20, 0x73, 0x71, 0x6c, 0x3a, 0x22, 0x70, 0x6b, 0x22, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x6b, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x50, 0xf2, 0xde, 0x1f, 0x4c, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x3a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x31, 0x20, 0x49,
	0x44, 0x22, 0x20, 0x73, 0x71, 0x6c, 0x3a, 0x22, 0x66, 0x6b, 0x28, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x31, 0x3a, 0x69, 0x64, 0x29, 0x2c, 0x6e, 0x6f, 0x2d, 0x66, 0x6b, 0x2d,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2c, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x52, 0x07, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x49, 0x64,
	0x12, 0x88, 0x01, 0x0a, 0x10, 0x67, 0x32, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5e, 0xf2, 0xde, 0x1f,
	0x5a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x47, 0x32,
	0x47, 0x72, 0x61, 0x6e, 0x64, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x31, 0x20, 0x49, 0x44, 0x22, 0x20,
	0x73, 0x71, 0x6c, 0x3a, 0x22, 0x66, 0x6b, 0x28, 0x54, 0x65, 0x73, 0x74, 0x47, 0x32, 0x47, 0x72,
	0x61, 0x6e, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x31, 0x3a, 0x69, 0x64, 0x29, 0x2c, 0x6e, 0x6f,
	0x2d, 0x66, 0x6b, 0x2d, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2c, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x52, 0x0e, 0x67, 0x32, 0x47,
	0x72, 0x61, 0x6e, 0x64, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x42, 0x27, 0x0a, 0x19, 0x69,
	0x6f, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x72, 0x6f, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0xf8, 0x01, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_storage_test_proto_rawDescOnce sync.Once
	file_storage_test_proto_rawDescData = file_storage_test_proto_rawDesc
)

func file_storage_test_proto_rawDescGZIP() []byte {
	file_storage_test_proto_rawDescOnce.Do(func() {
		file_storage_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_storage_test_proto_rawDescData)
	})
	return file_storage_test_proto_rawDescData
}

var file_storage_test_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_storage_test_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_storage_test_proto_goTypes = []interface{}{
	(TestSingleKeyStruct_Enum)(0),                   // 0: storage.TestSingleKeyStruct.Enum
	(TestMultiKeyStruct_Enum)(0),                    // 1: storage.TestMultiKeyStruct.Enum
	(*TestSingleKeyStruct)(nil),                     // 2: storage.TestSingleKeyStruct
	(*TestMultiKeyStruct)(nil),                      // 3: storage.TestMultiKeyStruct
	(*TestGrandparent)(nil),                         // 4: storage.TestGrandparent
	(*TestParent1)(nil),                             // 5: storage.TestParent1
	(*TestChild1)(nil),                              // 6: storage.TestChild1
	(*TestGrandChild1)(nil),                         // 7: storage.TestGrandChild1
	(*TestGGrandChild1)(nil),                        // 8: storage.TestGGrandChild1
	(*TestG2GrandChild1)(nil),                       // 9: storage.TestG2GrandChild1
	(*TestG3GrandChild1)(nil),                       // 10: storage.TestG3GrandChild1
	(*TestParent2)(nil),                             // 11: storage.TestParent2
	(*TestChild2)(nil),                              // 12: storage.TestChild2
	(*TestParent3)(nil),                             // 13: storage.TestParent3
	(*TestParent4)(nil),                             // 14: storage.TestParent4
	(*TestChild1P4)(nil),                            // 15: storage.TestChild1P4
	(*TestShortCircuit)(nil),                        // 16: storage.TestShortCircuit
	nil,                                             // 17: storage.TestSingleKeyStruct.LabelsEntry
	(*TestSingleKeyStruct_Embedded)(nil),            // 18: storage.TestSingleKeyStruct.Embedded
	(*TestSingleKeyStruct_Nested)(nil),              // 19: storage.TestSingleKeyStruct.Nested
	(*TestSingleKeyStruct_OneOfNested)(nil),         // 20: storage.TestSingleKeyStruct.OneOfNested
	(*TestSingleKeyStruct_Embedded_Embedded2)(nil),  // 21: storage.TestSingleKeyStruct.Embedded.Embedded2
	(*TestSingleKeyStruct_Nested_Nested2)(nil),      // 22: storage.TestSingleKeyStruct.Nested.Nested2
	(*TestSingleKeyStruct_OneOfNested_Nested2)(nil), // 23: storage.TestSingleKeyStruct.OneOfNested.Nested2
	nil,                                            // 24: storage.TestMultiKeyStruct.LabelsEntry
	(*TestMultiKeyStruct_Embedded)(nil),            // 25: storage.TestMultiKeyStruct.Embedded
	(*TestMultiKeyStruct_Nested)(nil),              // 26: storage.TestMultiKeyStruct.Nested
	(*TestMultiKeyStruct_OneOfNested)(nil),         // 27: storage.TestMultiKeyStruct.OneOfNested
	(*TestMultiKeyStruct_Embedded_Embedded2)(nil),  // 28: storage.TestMultiKeyStruct.Embedded.Embedded2
	(*TestMultiKeyStruct_Nested_Nested2)(nil),      // 29: storage.TestMultiKeyStruct.Nested.Nested2
	(*TestMultiKeyStruct_OneOfNested_Nested2)(nil), // 30: storage.TestMultiKeyStruct.OneOfNested.Nested2
	(*TestGrandparent_Embedded)(nil),               // 31: storage.TestGrandparent.Embedded
	(*TestGrandparent_Embedded_Embedded2)(nil),     // 32: storage.TestGrandparent.Embedded.Embedded2
	(*TestParent1_Child1Ref)(nil),                  // 33: storage.TestParent1.Child1Ref
	(*timestamppb.Timestamp)(nil),                  // 34: google.protobuf.Timestamp
}
var file_storage_test_proto_depIdxs = []int32{
	17, // 0: storage.TestSingleKeyStruct.labels:type_name -> storage.TestSingleKeyStruct.LabelsEntry
	34, // 1: storage.TestSingleKeyStruct.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 2: storage.TestSingleKeyStruct.enum:type_name -> storage.TestSingleKeyStruct.Enum
	0,  // 3: storage.TestSingleKeyStruct.enums:type_name -> storage.TestSingleKeyStruct.Enum
	18, // 4: storage.TestSingleKeyStruct.embedded:type_name -> storage.TestSingleKeyStruct.Embedded
	19, // 5: storage.TestSingleKeyStruct.nested:type_name -> storage.TestSingleKeyStruct.Nested
	20, // 6: storage.TestSingleKeyStruct.oneofnested:type_name -> storage.TestSingleKeyStruct.OneOfNested
	24, // 7: storage.TestMultiKeyStruct.labels:type_name -> storage.TestMultiKeyStruct.LabelsEntry
	34, // 8: storage.TestMultiKeyStruct.timestamp:type_name -> google.protobuf.Timestamp
	1,  // 9: storage.TestMultiKeyStruct.enum:type_name -> storage.TestMultiKeyStruct.Enum
	1,  // 10: storage.TestMultiKeyStruct.enums:type_name -> storage.TestMultiKeyStruct.Enum
	25, // 11: storage.TestMultiKeyStruct.embedded:type_name -> storage.TestMultiKeyStruct.Embedded
	26, // 12: storage.TestMultiKeyStruct.nested:type_name -> storage.TestMultiKeyStruct.Nested
	27, // 13: storage.TestMultiKeyStruct.oneofnested:type_name -> storage.TestMultiKeyStruct.OneOfNested
	31, // 14: storage.TestGrandparent.embedded:type_name -> storage.TestGrandparent.Embedded
	33, // 15: storage.TestParent1.children:type_name -> storage.TestParent1.Child1Ref
	22, // 16: storage.TestSingleKeyStruct.Nested.nested2:type_name -> storage.TestSingleKeyStruct.Nested.Nested2
	23, // 17: storage.TestSingleKeyStruct.OneOfNested.nested2:type_name -> storage.TestSingleKeyStruct.OneOfNested.Nested2
	29, // 18: storage.TestMultiKeyStruct.Nested.nested2:type_name -> storage.TestMultiKeyStruct.Nested.Nested2
	32, // 19: storage.TestGrandparent.Embedded.embedded2:type_name -> storage.TestGrandparent.Embedded.Embedded2
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_storage_test_proto_init() }
func file_storage_test_proto_init() {
	if File_storage_test_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_storage_test_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSingleKeyStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_test_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestMultiKeyStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_test_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestGrandparent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_test_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestParent1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_test_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestChild1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_test_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestGrandChild1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_test_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestGGrandChild1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_test_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestG2GrandChild1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_test_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestG3GrandChild1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_test_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestParent2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_test_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestChild2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_test_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestParent3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_test_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestParent4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_test_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestChild1P4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_test_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestShortCircuit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_test_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSingleKeyStruct_Embedded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_test_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSingleKeyStruct_Nested); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_test_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSingleKeyStruct_OneOfNested); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_test_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSingleKeyStruct_Embedded_Embedded2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_test_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSingleKeyStruct_Nested_Nested2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_test_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSingleKeyStruct_OneOfNested_Nested2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_test_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestMultiKeyStruct_Embedded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_test_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestMultiKeyStruct_Nested); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_test_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestMultiKeyStruct_OneOfNested); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_test_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestMultiKeyStruct_Embedded_Embedded2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_test_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestMultiKeyStruct_Nested_Nested2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_test_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestMultiKeyStruct_OneOfNested_Nested2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_test_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestGrandparent_Embedded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_test_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestGrandparent_Embedded_Embedded2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_test_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestParent1_Child1Ref); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_storage_test_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*TestSingleKeyStruct_Oneofstring)(nil),
		(*TestSingleKeyStruct_Oneofnested)(nil),
	}
	file_storage_test_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*TestMultiKeyStruct_Oneofstring)(nil),
		(*TestMultiKeyStruct_Oneofnested)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_storage_test_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_storage_test_proto_goTypes,
		DependencyIndexes: file_storage_test_proto_depIdxs,
		EnumInfos:         file_storage_test_proto_enumTypes,
		MessageInfos:      file_storage_test_proto_msgTypes,
	}.Build()
	File_storage_test_proto = out.File
	file_storage_test_proto_rawDesc = nil
	file_storage_test_proto_goTypes = nil
	file_storage_test_proto_depIdxs = nil
}
