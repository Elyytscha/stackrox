// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage/active_component.proto

package storage

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Next available tag: 3
type ActiveComponent struct {
	// base 64 encoded Deployment:ActiveComponent ids.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Map from container name to the active context of an edge.
	ActiveContexts       map[string]*ActiveComponent_ActiveContext `protobuf:"bytes,2,rep,name=active_contexts,json=activeContexts,proto3" json:"active_contexts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *ActiveComponent) Reset()         { *m = ActiveComponent{} }
func (m *ActiveComponent) String() string { return proto.CompactTextString(m) }
func (*ActiveComponent) ProtoMessage()    {}
func (*ActiveComponent) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f1d8b746a926c5c, []int{0}
}
func (m *ActiveComponent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActiveComponent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActiveComponent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActiveComponent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActiveComponent.Merge(m, src)
}
func (m *ActiveComponent) XXX_Size() int {
	return m.Size()
}
func (m *ActiveComponent) XXX_DiscardUnknown() {
	xxx_messageInfo_ActiveComponent.DiscardUnknown(m)
}

var xxx_messageInfo_ActiveComponent proto.InternalMessageInfo

func (m *ActiveComponent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ActiveComponent) GetActiveContexts() map[string]*ActiveComponent_ActiveContext {
	if m != nil {
		return m.ActiveContexts
	}
	return nil
}

func (m *ActiveComponent) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ActiveComponent) Clone() *ActiveComponent {
	if m == nil {
		return nil
	}
	cloned := new(ActiveComponent)
	*cloned = *m

	if m.ActiveContexts != nil {
		cloned.ActiveContexts = make(map[string]*ActiveComponent_ActiveContext, len(m.ActiveContexts))
		for k, v := range m.ActiveContexts {
			cloned.ActiveContexts[k] = v.Clone()
		}
	}
	return cloned
}

// Represent a context of the active edge.
type ActiveComponent_ActiveContext struct {
	ContainerName        string   `protobuf:"bytes,1,opt,name=container_name,json=containerName,proto3" json:"container_name,omitempty"`
	ImageId              string   `protobuf:"bytes,2,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty" search:"Image Sha,hidden,store"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActiveComponent_ActiveContext) Reset()         { *m = ActiveComponent_ActiveContext{} }
func (m *ActiveComponent_ActiveContext) String() string { return proto.CompactTextString(m) }
func (*ActiveComponent_ActiveContext) ProtoMessage()    {}
func (*ActiveComponent_ActiveContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f1d8b746a926c5c, []int{0, 0}
}
func (m *ActiveComponent_ActiveContext) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActiveComponent_ActiveContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActiveComponent_ActiveContext.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActiveComponent_ActiveContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActiveComponent_ActiveContext.Merge(m, src)
}
func (m *ActiveComponent_ActiveContext) XXX_Size() int {
	return m.Size()
}
func (m *ActiveComponent_ActiveContext) XXX_DiscardUnknown() {
	xxx_messageInfo_ActiveComponent_ActiveContext.DiscardUnknown(m)
}

var xxx_messageInfo_ActiveComponent_ActiveContext proto.InternalMessageInfo

func (m *ActiveComponent_ActiveContext) GetContainerName() string {
	if m != nil {
		return m.ContainerName
	}
	return ""
}

func (m *ActiveComponent_ActiveContext) GetImageId() string {
	if m != nil {
		return m.ImageId
	}
	return ""
}

func (m *ActiveComponent_ActiveContext) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ActiveComponent_ActiveContext) Clone() *ActiveComponent_ActiveContext {
	if m == nil {
		return nil
	}
	cloned := new(ActiveComponent_ActiveContext)
	*cloned = *m

	return cloned
}

func init() {
	proto.RegisterType((*ActiveComponent)(nil), "storage.ActiveComponent")
	proto.RegisterMapType((map[string]*ActiveComponent_ActiveContext)(nil), "storage.ActiveComponent.ActiveContextsEntry")
	proto.RegisterType((*ActiveComponent_ActiveContext)(nil), "storage.ActiveComponent.ActiveContext")
}

func init() { proto.RegisterFile("storage/active_component.proto", fileDescriptor_6f1d8b746a926c5c) }

var fileDescriptor_6f1d8b746a926c5c = []byte{
	// 312 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2b, 0x2e, 0xc9, 0x2f,
	0x4a, 0x4c, 0x4f, 0xd5, 0x4f, 0x4c, 0x2e, 0xc9, 0x2c, 0x4b, 0x8d, 0x4f, 0xce, 0xcf, 0x2d, 0xc8,
	0xcf, 0x4b, 0xcd, 0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0xca, 0x4b, 0x89,
	0xa4, 0xe7, 0xa7, 0xe7, 0x83, 0xc5, 0xf4, 0x41, 0x2c, 0x88, 0xb4, 0xd2, 0x6d, 0x26, 0x2e, 0x7e,
	0x47, 0xb0, 0x4e, 0x67, 0x98, 0x46, 0x21, 0x3e, 0x2e, 0xa6, 0xcc, 0x14, 0x09, 0x46, 0x05, 0x46,
	0x0d, 0xce, 0x20, 0xa6, 0xcc, 0x14, 0xa1, 0x50, 0x2e, 0x7e, 0xb8, 0xe1, 0x79, 0x25, 0xa9, 0x15,
	0x25, 0xc5, 0x12, 0x4c, 0x0a, 0xcc, 0x1a, 0xdc, 0x46, 0x3a, 0x7a, 0x50, 0xc3, 0xf5, 0xd0, 0x8c,
	0x80, 0xf3, 0x21, 0xca, 0x5d, 0xf3, 0x4a, 0x8a, 0x2a, 0x83, 0xf8, 0x12, 0x51, 0x04, 0xa5, 0xca,
	0xb8, 0x78, 0x51, 0x94, 0x09, 0xa9, 0x72, 0xf1, 0x81, 0x2c, 0x48, 0xcc, 0xcc, 0x4b, 0x2d, 0x8a,
	0xcf, 0x4b, 0xcc, 0x4d, 0x85, 0xba, 0x81, 0x17, 0x2e, 0xea, 0x97, 0x98, 0x9b, 0x2a, 0x64, 0xc7,
	0xc5, 0x91, 0x99, 0x9b, 0x98, 0x9e, 0x1a, 0x9f, 0x99, 0x22, 0xc1, 0x04, 0x52, 0xe0, 0xa4, 0xfc,
	0xe9, 0x9e, 0xbc, 0x7c, 0x71, 0x6a, 0x62, 0x51, 0x72, 0x86, 0x95, 0x92, 0x27, 0x48, 0x4e, 0x21,
	0x38, 0x23, 0x51, 0x27, 0x23, 0x33, 0x25, 0x25, 0x35, 0x4f, 0x07, 0xe4, 0xc6, 0x54, 0xa5, 0x20,
	0x76, 0xb0, 0x26, 0xcf, 0x14, 0xa9, 0x4c, 0x2e, 0x61, 0x2c, 0xce, 0x13, 0x12, 0xe0, 0x62, 0xce,
	0x4e, 0xad, 0x84, 0x5a, 0x09, 0x62, 0x0a, 0xd9, 0x70, 0xb1, 0x96, 0x25, 0xe6, 0x94, 0xa6, 0x82,
	0x6d, 0xe1, 0x36, 0x52, 0x23, 0xce, 0xb7, 0x41, 0x10, 0x4d, 0x56, 0x4c, 0x16, 0x8c, 0x4e, 0x26,
	0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x8c, 0xc7, 0x72,
	0x0c, 0x5c, 0x92, 0x99, 0xf9, 0x7a, 0xc5, 0x25, 0x89, 0xc9, 0xd9, 0x45, 0xf9, 0x15, 0x90, 0x28,
	0x80, 0x99, 0x1a, 0x05, 0x8b, 0xa9, 0x24, 0x36, 0xb0, 0xb8, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff,
	0x07, 0x47, 0x9f, 0xb0, 0xdb, 0x01, 0x00, 0x00,
}

func (m *ActiveComponent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActiveComponent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActiveComponent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ActiveContexts) > 0 {
		for k := range m.ActiveContexts {
			v := m.ActiveContexts[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintActiveComponent(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintActiveComponent(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintActiveComponent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintActiveComponent(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActiveComponent_ActiveContext) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActiveComponent_ActiveContext) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActiveComponent_ActiveContext) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ImageId) > 0 {
		i -= len(m.ImageId)
		copy(dAtA[i:], m.ImageId)
		i = encodeVarintActiveComponent(dAtA, i, uint64(len(m.ImageId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContainerName) > 0 {
		i -= len(m.ContainerName)
		copy(dAtA[i:], m.ContainerName)
		i = encodeVarintActiveComponent(dAtA, i, uint64(len(m.ContainerName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintActiveComponent(dAtA []byte, offset int, v uint64) int {
	offset -= sovActiveComponent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ActiveComponent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovActiveComponent(uint64(l))
	}
	if len(m.ActiveContexts) > 0 {
		for k, v := range m.ActiveContexts {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovActiveComponent(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovActiveComponent(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovActiveComponent(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActiveComponent_ActiveContext) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContainerName)
	if l > 0 {
		n += 1 + l + sovActiveComponent(uint64(l))
	}
	l = len(m.ImageId)
	if l > 0 {
		n += 1 + l + sovActiveComponent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovActiveComponent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozActiveComponent(x uint64) (n int) {
	return sovActiveComponent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ActiveComponent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveComponent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActiveComponent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActiveComponent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActiveComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveContexts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActiveComponent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActiveComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActiveContexts == nil {
				m.ActiveContexts = make(map[string]*ActiveComponent_ActiveContext)
			}
			var mapkey string
			var mapvalue *ActiveComponent_ActiveContext
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActiveComponent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActiveComponent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthActiveComponent
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthActiveComponent
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActiveComponent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthActiveComponent
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthActiveComponent
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ActiveComponent_ActiveContext{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipActiveComponent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthActiveComponent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ActiveContexts[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActiveComponent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActiveComponent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActiveComponent_ActiveContext) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveComponent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActiveContext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActiveContext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActiveComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActiveComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActiveComponent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActiveComponent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipActiveComponent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowActiveComponent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActiveComponent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActiveComponent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthActiveComponent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupActiveComponent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthActiveComponent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthActiveComponent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowActiveComponent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupActiveComponent = fmt.Errorf("proto: unexpected end of group")
)
