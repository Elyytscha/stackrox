// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage/cluster_registry_mirror_set.proto

package storage

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ClusterRegistryMirrorSet_Type int32

const (
	ClusterRegistryMirrorSet_IMAGE_CONTENT_SOURCE_POLICY ClusterRegistryMirrorSet_Type = 0
	ClusterRegistryMirrorSet_IMAGE_DIGEST_MIRROR_SET     ClusterRegistryMirrorSet_Type = 1
	ClusterRegistryMirrorSet_IMAGE_TAG_MIRROR_SET        ClusterRegistryMirrorSet_Type = 2
)

var ClusterRegistryMirrorSet_Type_name = map[int32]string{
	0: "IMAGE_CONTENT_SOURCE_POLICY",
	1: "IMAGE_DIGEST_MIRROR_SET",
	2: "IMAGE_TAG_MIRROR_SET",
}

var ClusterRegistryMirrorSet_Type_value = map[string]int32{
	"IMAGE_CONTENT_SOURCE_POLICY": 0,
	"IMAGE_DIGEST_MIRROR_SET":     1,
	"IMAGE_TAG_MIRROR_SET":        2,
}

func (x ClusterRegistryMirrorSet_Type) String() string {
	return proto.EnumName(ClusterRegistryMirrorSet_Type_name, int32(x))
}

func (ClusterRegistryMirrorSet_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_04b4318eb8208037, []int{0, 0}
}

// ClusterRegistryMirrorSet represents an ImageContentSourcePolicy,
// ImageDigestMirrorSet, or ImageTagMirrorSet CR from Secured Clusters.
// These CRs are used to configure registry mirroring for the cluster.
//
// Refer to https://github.com/openshift/api for full CR details.
type ClusterRegistryMirrorSet struct {
	Id                   string                             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" sql:"pk,type(uuid)"`
	ClusterId            string                             `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty" sql:"fk(Cluster:id),type(uuid)"`
	Type                 ClusterRegistryMirrorSet_Type      `protobuf:"varint,3,opt,name=type,proto3,enum=storage.ClusterRegistryMirrorSet_Type" json:"type,omitempty"`
	Name                 string                             `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Mirrors              []*ClusterRegistryMirrorSet_Mirror `protobuf:"bytes,5,rep,name=mirrors,proto3" json:"mirrors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *ClusterRegistryMirrorSet) Reset()         { *m = ClusterRegistryMirrorSet{} }
func (m *ClusterRegistryMirrorSet) String() string { return proto.CompactTextString(m) }
func (*ClusterRegistryMirrorSet) ProtoMessage()    {}
func (*ClusterRegistryMirrorSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_04b4318eb8208037, []int{0}
}
func (m *ClusterRegistryMirrorSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterRegistryMirrorSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterRegistryMirrorSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClusterRegistryMirrorSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterRegistryMirrorSet.Merge(m, src)
}
func (m *ClusterRegistryMirrorSet) XXX_Size() int {
	return m.Size()
}
func (m *ClusterRegistryMirrorSet) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterRegistryMirrorSet.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterRegistryMirrorSet proto.InternalMessageInfo

func (m *ClusterRegistryMirrorSet) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ClusterRegistryMirrorSet) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *ClusterRegistryMirrorSet) GetType() ClusterRegistryMirrorSet_Type {
	if m != nil {
		return m.Type
	}
	return ClusterRegistryMirrorSet_IMAGE_CONTENT_SOURCE_POLICY
}

func (m *ClusterRegistryMirrorSet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClusterRegistryMirrorSet) GetMirrors() []*ClusterRegistryMirrorSet_Mirror {
	if m != nil {
		return m.Mirrors
	}
	return nil
}

func (m *ClusterRegistryMirrorSet) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ClusterRegistryMirrorSet) Clone() *ClusterRegistryMirrorSet {
	if m == nil {
		return nil
	}
	cloned := new(ClusterRegistryMirrorSet)
	*cloned = *m

	if m.Mirrors != nil {
		cloned.Mirrors = make([]*ClusterRegistryMirrorSet_Mirror, len(m.Mirrors))
		for idx, v := range m.Mirrors {
			cloned.Mirrors[idx] = v.Clone()
		}
	}
	return cloned
}

type ClusterRegistryMirrorSet_Mirror struct {
	Source               string   `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Mirrors              []string `protobuf:"bytes,2,rep,name=mirrors,proto3" json:"mirrors,omitempty"`
	MirrorSourcePolicy   string   `protobuf:"bytes,3,opt,name=mirror_source_policy,json=mirrorSourcePolicy,proto3" json:"mirror_source_policy,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClusterRegistryMirrorSet_Mirror) Reset()         { *m = ClusterRegistryMirrorSet_Mirror{} }
func (m *ClusterRegistryMirrorSet_Mirror) String() string { return proto.CompactTextString(m) }
func (*ClusterRegistryMirrorSet_Mirror) ProtoMessage()    {}
func (*ClusterRegistryMirrorSet_Mirror) Descriptor() ([]byte, []int) {
	return fileDescriptor_04b4318eb8208037, []int{0, 0}
}
func (m *ClusterRegistryMirrorSet_Mirror) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterRegistryMirrorSet_Mirror) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterRegistryMirrorSet_Mirror.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClusterRegistryMirrorSet_Mirror) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterRegistryMirrorSet_Mirror.Merge(m, src)
}
func (m *ClusterRegistryMirrorSet_Mirror) XXX_Size() int {
	return m.Size()
}
func (m *ClusterRegistryMirrorSet_Mirror) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterRegistryMirrorSet_Mirror.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterRegistryMirrorSet_Mirror proto.InternalMessageInfo

func (m *ClusterRegistryMirrorSet_Mirror) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *ClusterRegistryMirrorSet_Mirror) GetMirrors() []string {
	if m != nil {
		return m.Mirrors
	}
	return nil
}

func (m *ClusterRegistryMirrorSet_Mirror) GetMirrorSourcePolicy() string {
	if m != nil {
		return m.MirrorSourcePolicy
	}
	return ""
}

func (m *ClusterRegistryMirrorSet_Mirror) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ClusterRegistryMirrorSet_Mirror) Clone() *ClusterRegistryMirrorSet_Mirror {
	if m == nil {
		return nil
	}
	cloned := new(ClusterRegistryMirrorSet_Mirror)
	*cloned = *m

	if m.Mirrors != nil {
		cloned.Mirrors = make([]string, len(m.Mirrors))
		copy(cloned.Mirrors, m.Mirrors)
	}
	return cloned
}

func init() {
	proto.RegisterEnum("storage.ClusterRegistryMirrorSet_Type", ClusterRegistryMirrorSet_Type_name, ClusterRegistryMirrorSet_Type_value)
	proto.RegisterType((*ClusterRegistryMirrorSet)(nil), "storage.ClusterRegistryMirrorSet")
	proto.RegisterType((*ClusterRegistryMirrorSet_Mirror)(nil), "storage.ClusterRegistryMirrorSet.Mirror")
}

func init() {
	proto.RegisterFile("storage/cluster_registry_mirror_set.proto", fileDescriptor_04b4318eb8208037)
}

var fileDescriptor_04b4318eb8208037 = []byte{
	// 418 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x6b, 0x27, 0xa4, 0xca, 0x20, 0xa1, 0x6a, 0x89, 0xe8, 0xd2, 0x4a, 0x49, 0x14, 0x24,
	0x70, 0x24, 0xe4, 0xa2, 0xc2, 0x29, 0xb7, 0x26, 0x58, 0x91, 0x25, 0xd2, 0x54, 0x6b, 0x73, 0x80,
	0x03, 0xab, 0x60, 0x2f, 0xd6, 0x2a, 0x2e, 0x6b, 0x76, 0xd7, 0x12, 0x7e, 0x13, 0x1e, 0x89, 0x23,
	0x4f, 0x50, 0xa1, 0x70, 0xe2, 0x9a, 0x27, 0x40, 0xde, 0xb5, 0xf9, 0x73, 0x40, 0xbd, 0x8d, 0xe7,
	0x9b, 0xdf, 0x37, 0xb3, 0xe3, 0x81, 0xa9, 0xd2, 0x42, 0x6e, 0x32, 0x76, 0x96, 0xe4, 0xa5, 0xd2,
	0x4c, 0x52, 0xc9, 0x32, 0xae, 0xb4, 0xac, 0xe8, 0x35, 0x97, 0x52, 0x48, 0xaa, 0x98, 0xf6, 0x0b,
	0x29, 0xb4, 0x40, 0x87, 0x4d, 0xe9, 0xc9, 0x20, 0x13, 0x99, 0x30, 0xb9, 0xb3, 0x3a, 0xb2, 0xf2,
	0xe4, 0x67, 0x07, 0xf0, 0xc2, 0x9a, 0x90, 0xc6, 0x63, 0x65, 0x2c, 0x22, 0xa6, 0xd1, 0x13, 0x70,
	0x79, 0x8a, 0x9d, 0xb1, 0xe3, 0xf5, 0xe7, 0xc7, 0xfb, 0x9b, 0xd1, 0x7d, 0xf5, 0x29, 0x9f, 0x4d,
	0x8a, 0xed, 0x53, 0x5d, 0x15, 0xcc, 0x2b, 0x4b, 0x9e, 0x4e, 0x27, 0xc4, 0xe5, 0x29, 0x9a, 0x03,
	0xb4, 0x93, 0xf0, 0x14, 0xbb, 0x06, 0x78, 0xb4, 0xbf, 0x19, 0x8d, 0x0c, 0xf0, 0x61, 0xeb, 0x35,
	0x2d, 0x66, 0x3c, 0x9d, 0xfe, 0x03, 0xf7, 0x1b, 0x2c, 0x4c, 0xd1, 0x0c, 0xba, 0xb5, 0x82, 0x3b,
	0x63, 0xc7, 0xbb, 0x77, 0xfe, 0xd8, 0x6f, 0xe6, 0xf6, 0xff, 0x37, 0x9d, 0x1f, 0x57, 0x05, 0x23,
	0x86, 0x41, 0x08, 0xba, 0x1f, 0x37, 0xd7, 0x0c, 0x77, 0xeb, 0xce, 0xc4, 0xc4, 0x68, 0x0e, 0x87,
	0x76, 0x19, 0x0a, 0xdf, 0x19, 0x77, 0xbc, 0xbb, 0xe7, 0xde, 0xed, 0x96, 0x36, 0x22, 0x2d, 0x78,
	0x92, 0x43, 0xcf, 0xa6, 0xd0, 0x03, 0xe8, 0x29, 0x51, 0xca, 0x84, 0xd9, 0x75, 0x90, 0xe6, 0x0b,
	0xe1, 0x3f, 0x5d, 0xdc, 0x71, 0xc7, 0xeb, 0xff, 0x66, 0xd1, 0x33, 0x18, 0xb4, 0x3f, 0xc3, 0x94,
	0xd2, 0x42, 0xe4, 0x3c, 0xa9, 0xcc, 0xfb, 0xfa, 0x04, 0x59, 0x2d, 0x32, 0xd2, 0x95, 0x51, 0x26,
	0xef, 0xa0, 0x5b, 0xbf, 0x09, 0x8d, 0xe0, 0x34, 0x5c, 0x5d, 0x2c, 0x03, 0xba, 0x58, 0x5f, 0xc6,
	0xc1, 0x65, 0x4c, 0xa3, 0xf5, 0x6b, 0xb2, 0x08, 0xe8, 0xd5, 0xfa, 0x55, 0xb8, 0x78, 0x73, 0x74,
	0x80, 0x4e, 0xe1, 0xd8, 0x16, 0xbc, 0x0c, 0x97, 0x41, 0x14, 0xd3, 0x55, 0x48, 0xc8, 0x9a, 0xd0,
	0x28, 0x88, 0x8f, 0x1c, 0x84, 0x61, 0x60, 0xc5, 0xf8, 0x62, 0xf9, 0xb7, 0xe2, 0xce, 0x5f, 0x7c,
	0xdd, 0x0d, 0x9d, 0x6f, 0xbb, 0xa1, 0xf3, 0x7d, 0x37, 0x74, 0xbe, 0xfc, 0x18, 0x1e, 0xc0, 0x43,
	0x2e, 0x7c, 0xa5, 0x37, 0xc9, 0x56, 0x8a, 0xcf, 0xf6, 0x20, 0xda, 0x1d, 0xbd, 0x6d, 0xef, 0xe6,
	0x7d, 0xcf, 0xe4, 0x9f, 0xff, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xa3, 0x64, 0x29, 0xad, 0x74, 0x02,
	0x00, 0x00,
}

func (m *ClusterRegistryMirrorSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterRegistryMirrorSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterRegistryMirrorSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Mirrors) > 0 {
		for iNdEx := len(m.Mirrors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Mirrors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClusterRegistryMirrorSet(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintClusterRegistryMirrorSet(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if m.Type != 0 {
		i = encodeVarintClusterRegistryMirrorSet(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintClusterRegistryMirrorSet(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintClusterRegistryMirrorSet(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClusterRegistryMirrorSet_Mirror) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterRegistryMirrorSet_Mirror) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterRegistryMirrorSet_Mirror) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MirrorSourcePolicy) > 0 {
		i -= len(m.MirrorSourcePolicy)
		copy(dAtA[i:], m.MirrorSourcePolicy)
		i = encodeVarintClusterRegistryMirrorSet(dAtA, i, uint64(len(m.MirrorSourcePolicy)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Mirrors) > 0 {
		for iNdEx := len(m.Mirrors) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Mirrors[iNdEx])
			copy(dAtA[i:], m.Mirrors[iNdEx])
			i = encodeVarintClusterRegistryMirrorSet(dAtA, i, uint64(len(m.Mirrors[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintClusterRegistryMirrorSet(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintClusterRegistryMirrorSet(dAtA []byte, offset int, v uint64) int {
	offset -= sovClusterRegistryMirrorSet(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ClusterRegistryMirrorSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovClusterRegistryMirrorSet(uint64(l))
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovClusterRegistryMirrorSet(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovClusterRegistryMirrorSet(uint64(m.Type))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovClusterRegistryMirrorSet(uint64(l))
	}
	if len(m.Mirrors) > 0 {
		for _, e := range m.Mirrors {
			l = e.Size()
			n += 1 + l + sovClusterRegistryMirrorSet(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClusterRegistryMirrorSet_Mirror) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovClusterRegistryMirrorSet(uint64(l))
	}
	if len(m.Mirrors) > 0 {
		for _, s := range m.Mirrors {
			l = len(s)
			n += 1 + l + sovClusterRegistryMirrorSet(uint64(l))
		}
	}
	l = len(m.MirrorSourcePolicy)
	if l > 0 {
		n += 1 + l + sovClusterRegistryMirrorSet(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovClusterRegistryMirrorSet(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozClusterRegistryMirrorSet(x uint64) (n int) {
	return sovClusterRegistryMirrorSet(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClusterRegistryMirrorSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterRegistryMirrorSet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterRegistryMirrorSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterRegistryMirrorSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterRegistryMirrorSet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterRegistryMirrorSet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClusterRegistryMirrorSet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterRegistryMirrorSet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterRegistryMirrorSet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClusterRegistryMirrorSet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterRegistryMirrorSet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ClusterRegistryMirrorSet_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterRegistryMirrorSet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterRegistryMirrorSet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClusterRegistryMirrorSet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mirrors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterRegistryMirrorSet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterRegistryMirrorSet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClusterRegistryMirrorSet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mirrors = append(m.Mirrors, &ClusterRegistryMirrorSet_Mirror{})
			if err := m.Mirrors[len(m.Mirrors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterRegistryMirrorSet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClusterRegistryMirrorSet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterRegistryMirrorSet_Mirror) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterRegistryMirrorSet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Mirror: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Mirror: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterRegistryMirrorSet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterRegistryMirrorSet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClusterRegistryMirrorSet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mirrors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterRegistryMirrorSet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterRegistryMirrorSet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClusterRegistryMirrorSet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mirrors = append(m.Mirrors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MirrorSourcePolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterRegistryMirrorSet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterRegistryMirrorSet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClusterRegistryMirrorSet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MirrorSourcePolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterRegistryMirrorSet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClusterRegistryMirrorSet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClusterRegistryMirrorSet(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClusterRegistryMirrorSet
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClusterRegistryMirrorSet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClusterRegistryMirrorSet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthClusterRegistryMirrorSet
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupClusterRegistryMirrorSet
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthClusterRegistryMirrorSet
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthClusterRegistryMirrorSet        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClusterRegistryMirrorSet          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupClusterRegistryMirrorSet = fmt.Errorf("proto: unexpected end of group")
)
