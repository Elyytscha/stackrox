// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.3.1-0.20220817155510-0ae748fd2007
// source: api/v1/image_integration_service.proto

package v1

import (
	context "context"
	fmt "fmt"
	storage "github.com/stackrox/rox/generated/storage"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (m *GetImageIntegrationsRequest) CloneVT() *GetImageIntegrationsRequest {
	if m == nil {
		return (*GetImageIntegrationsRequest)(nil)
	}
	r := &GetImageIntegrationsRequest{
		Name:    m.Name,
		Cluster: m.Cluster,
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetImageIntegrationsRequest) CloneGenericVT() proto.Message {
	return m.CloneVT()
}

func (m *GetImageIntegrationsResponse) CloneVT() *GetImageIntegrationsResponse {
	if m == nil {
		return (*GetImageIntegrationsResponse)(nil)
	}
	r := &GetImageIntegrationsResponse{}
	if rhs := m.Integrations; rhs != nil {
		tmpContainer := make([]*storage.ImageIntegration, len(rhs))
		for k, v := range rhs {
			if vtpb, ok := interface{}(v).(interface {
				CloneVT() *storage.ImageIntegration
			}); ok {
				tmpContainer[k] = vtpb.CloneVT()
			} else {
				tmpContainer[k] = proto.Clone(v).(*storage.ImageIntegration)
			}
		}
		r.Integrations = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetImageIntegrationsResponse) CloneGenericVT() proto.Message {
	return m.CloneVT()
}

func (m *UpdateImageIntegrationRequest) CloneVT() *UpdateImageIntegrationRequest {
	if m == nil {
		return (*UpdateImageIntegrationRequest)(nil)
	}
	r := &UpdateImageIntegrationRequest{
		UpdatePassword: m.UpdatePassword,
	}
	if rhs := m.Config; rhs != nil {
		if vtpb, ok := interface{}(rhs).(interface {
			CloneVT() *storage.ImageIntegration
		}); ok {
			r.Config = vtpb.CloneVT()
		} else {
			r.Config = proto.Clone(rhs).(*storage.ImageIntegration)
		}
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *UpdateImageIntegrationRequest) CloneGenericVT() proto.Message {
	return m.CloneVT()
}

func (this *GetImageIntegrationsRequest) EqualVT(that *GetImageIntegrationsRequest) bool {
	if this == nil {
		return that == nil
	} else if that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.Cluster != that.Cluster {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetImageIntegrationsResponse) EqualVT(that *GetImageIntegrationsResponse) bool {
	if this == nil {
		return that == nil
	} else if that == nil {
		return false
	}
	if len(this.Integrations) != len(that.Integrations) {
		return false
	}
	for i, vx := range this.Integrations {
		vy := that.Integrations[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &storage.ImageIntegration{}
			}
			if q == nil {
				q = &storage.ImageIntegration{}
			}
			if equal, ok := interface{}(p).(interface {
				EqualVT(*storage.ImageIntegration) bool
			}); ok {
				if !equal.EqualVT(q) {
					return false
				}
			} else if !proto.Equal(p, q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *UpdateImageIntegrationRequest) EqualVT(that *UpdateImageIntegrationRequest) bool {
	if this == nil {
		return that == nil
	} else if that == nil {
		return false
	}
	if equal, ok := interface{}(this.Config).(interface {
		EqualVT(*storage.ImageIntegration) bool
	}); ok {
		if !equal.EqualVT(that.Config) {
			return false
		}
	} else if !proto.Equal(this.Config, that.Config) {
		return false
	}
	if this.UpdatePassword != that.UpdatePassword {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImageIntegrationServiceClient is the client API for ImageIntegrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageIntegrationServiceClient interface {
	// GetImageIntegration returns the image integration given its ID.
	GetImageIntegration(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*storage.ImageIntegration, error)
	// GetImageIntegrations returns all image integrations that match the request filters.
	GetImageIntegrations(ctx context.Context, in *GetImageIntegrationsRequest, opts ...grpc.CallOption) (*GetImageIntegrationsResponse, error)
	// PostImageIntegration creates a image integration.
	PostImageIntegration(ctx context.Context, in *storage.ImageIntegration, opts ...grpc.CallOption) (*storage.ImageIntegration, error)
	// PutImageIntegration modifies a given image integration, without using stored credential reconciliation.
	PutImageIntegration(ctx context.Context, in *storage.ImageIntegration, opts ...grpc.CallOption) (*Empty, error)
	// TestImageIntegration checks if the given image integration is correctly configured, without using stored credential reconciliation.
	TestImageIntegration(ctx context.Context, in *storage.ImageIntegration, opts ...grpc.CallOption) (*Empty, error)
	// DeleteImageIntegration removes a image integration given its ID.
	DeleteImageIntegration(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error)
	// UpdateImageIntegration modifies a given image integration, with optional stored credential reconciliation.
	UpdateImageIntegration(ctx context.Context, in *UpdateImageIntegrationRequest, opts ...grpc.CallOption) (*Empty, error)
	// TestUpdatedImageIntegration checks if the given image integration is correctly configured, with optional stored credential reconciliation.
	TestUpdatedImageIntegration(ctx context.Context, in *UpdateImageIntegrationRequest, opts ...grpc.CallOption) (*Empty, error)
}

type imageIntegrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImageIntegrationServiceClient(cc grpc.ClientConnInterface) ImageIntegrationServiceClient {
	return &imageIntegrationServiceClient{cc}
}

func (c *imageIntegrationServiceClient) GetImageIntegration(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*storage.ImageIntegration, error) {
	out := new(storage.ImageIntegration)
	err := c.cc.Invoke(ctx, "/v1.ImageIntegrationService/GetImageIntegration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageIntegrationServiceClient) GetImageIntegrations(ctx context.Context, in *GetImageIntegrationsRequest, opts ...grpc.CallOption) (*GetImageIntegrationsResponse, error) {
	out := new(GetImageIntegrationsResponse)
	err := c.cc.Invoke(ctx, "/v1.ImageIntegrationService/GetImageIntegrations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageIntegrationServiceClient) PostImageIntegration(ctx context.Context, in *storage.ImageIntegration, opts ...grpc.CallOption) (*storage.ImageIntegration, error) {
	out := new(storage.ImageIntegration)
	err := c.cc.Invoke(ctx, "/v1.ImageIntegrationService/PostImageIntegration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageIntegrationServiceClient) PutImageIntegration(ctx context.Context, in *storage.ImageIntegration, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v1.ImageIntegrationService/PutImageIntegration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageIntegrationServiceClient) TestImageIntegration(ctx context.Context, in *storage.ImageIntegration, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v1.ImageIntegrationService/TestImageIntegration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageIntegrationServiceClient) DeleteImageIntegration(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v1.ImageIntegrationService/DeleteImageIntegration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageIntegrationServiceClient) UpdateImageIntegration(ctx context.Context, in *UpdateImageIntegrationRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v1.ImageIntegrationService/UpdateImageIntegration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageIntegrationServiceClient) TestUpdatedImageIntegration(ctx context.Context, in *UpdateImageIntegrationRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v1.ImageIntegrationService/TestUpdatedImageIntegration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageIntegrationServiceServer is the server API for ImageIntegrationService service.
// All implementations must embed UnimplementedImageIntegrationServiceServer
// for forward compatibility
type ImageIntegrationServiceServer interface {
	// GetImageIntegration returns the image integration given its ID.
	GetImageIntegration(context.Context, *ResourceByID) (*storage.ImageIntegration, error)
	// GetImageIntegrations returns all image integrations that match the request filters.
	GetImageIntegrations(context.Context, *GetImageIntegrationsRequest) (*GetImageIntegrationsResponse, error)
	// PostImageIntegration creates a image integration.
	PostImageIntegration(context.Context, *storage.ImageIntegration) (*storage.ImageIntegration, error)
	// PutImageIntegration modifies a given image integration, without using stored credential reconciliation.
	PutImageIntegration(context.Context, *storage.ImageIntegration) (*Empty, error)
	// TestImageIntegration checks if the given image integration is correctly configured, without using stored credential reconciliation.
	TestImageIntegration(context.Context, *storage.ImageIntegration) (*Empty, error)
	// DeleteImageIntegration removes a image integration given its ID.
	DeleteImageIntegration(context.Context, *ResourceByID) (*Empty, error)
	// UpdateImageIntegration modifies a given image integration, with optional stored credential reconciliation.
	UpdateImageIntegration(context.Context, *UpdateImageIntegrationRequest) (*Empty, error)
	// TestUpdatedImageIntegration checks if the given image integration is correctly configured, with optional stored credential reconciliation.
	TestUpdatedImageIntegration(context.Context, *UpdateImageIntegrationRequest) (*Empty, error)
	mustEmbedUnimplementedImageIntegrationServiceServer()
}

// UnimplementedImageIntegrationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedImageIntegrationServiceServer struct {
}

func (UnimplementedImageIntegrationServiceServer) GetImageIntegration(context.Context, *ResourceByID) (*storage.ImageIntegration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageIntegration not implemented")
}
func (UnimplementedImageIntegrationServiceServer) GetImageIntegrations(context.Context, *GetImageIntegrationsRequest) (*GetImageIntegrationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageIntegrations not implemented")
}
func (UnimplementedImageIntegrationServiceServer) PostImageIntegration(context.Context, *storage.ImageIntegration) (*storage.ImageIntegration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostImageIntegration not implemented")
}
func (UnimplementedImageIntegrationServiceServer) PutImageIntegration(context.Context, *storage.ImageIntegration) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutImageIntegration not implemented")
}
func (UnimplementedImageIntegrationServiceServer) TestImageIntegration(context.Context, *storage.ImageIntegration) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestImageIntegration not implemented")
}
func (UnimplementedImageIntegrationServiceServer) DeleteImageIntegration(context.Context, *ResourceByID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteImageIntegration not implemented")
}
func (UnimplementedImageIntegrationServiceServer) UpdateImageIntegration(context.Context, *UpdateImageIntegrationRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateImageIntegration not implemented")
}
func (UnimplementedImageIntegrationServiceServer) TestUpdatedImageIntegration(context.Context, *UpdateImageIntegrationRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestUpdatedImageIntegration not implemented")
}
func (UnimplementedImageIntegrationServiceServer) mustEmbedUnimplementedImageIntegrationServiceServer() {
}

// UnsafeImageIntegrationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageIntegrationServiceServer will
// result in compilation errors.
type UnsafeImageIntegrationServiceServer interface {
	mustEmbedUnimplementedImageIntegrationServiceServer()
}

func RegisterImageIntegrationServiceServer(s grpc.ServiceRegistrar, srv ImageIntegrationServiceServer) {
	s.RegisterService(&ImageIntegrationService_ServiceDesc, srv)
}

func _ImageIntegrationService_GetImageIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageIntegrationServiceServer).GetImageIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ImageIntegrationService/GetImageIntegration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageIntegrationServiceServer).GetImageIntegration(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageIntegrationService_GetImageIntegrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageIntegrationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageIntegrationServiceServer).GetImageIntegrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ImageIntegrationService/GetImageIntegrations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageIntegrationServiceServer).GetImageIntegrations(ctx, req.(*GetImageIntegrationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageIntegrationService_PostImageIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storage.ImageIntegration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageIntegrationServiceServer).PostImageIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ImageIntegrationService/PostImageIntegration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageIntegrationServiceServer).PostImageIntegration(ctx, req.(*storage.ImageIntegration))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageIntegrationService_PutImageIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storage.ImageIntegration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageIntegrationServiceServer).PutImageIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ImageIntegrationService/PutImageIntegration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageIntegrationServiceServer).PutImageIntegration(ctx, req.(*storage.ImageIntegration))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageIntegrationService_TestImageIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storage.ImageIntegration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageIntegrationServiceServer).TestImageIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ImageIntegrationService/TestImageIntegration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageIntegrationServiceServer).TestImageIntegration(ctx, req.(*storage.ImageIntegration))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageIntegrationService_DeleteImageIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageIntegrationServiceServer).DeleteImageIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ImageIntegrationService/DeleteImageIntegration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageIntegrationServiceServer).DeleteImageIntegration(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageIntegrationService_UpdateImageIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateImageIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageIntegrationServiceServer).UpdateImageIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ImageIntegrationService/UpdateImageIntegration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageIntegrationServiceServer).UpdateImageIntegration(ctx, req.(*UpdateImageIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageIntegrationService_TestUpdatedImageIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateImageIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageIntegrationServiceServer).TestUpdatedImageIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ImageIntegrationService/TestUpdatedImageIntegration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageIntegrationServiceServer).TestUpdatedImageIntegration(ctx, req.(*UpdateImageIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImageIntegrationService_ServiceDesc is the grpc.ServiceDesc for ImageIntegrationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageIntegrationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ImageIntegrationService",
	HandlerType: (*ImageIntegrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetImageIntegration",
			Handler:    _ImageIntegrationService_GetImageIntegration_Handler,
		},
		{
			MethodName: "GetImageIntegrations",
			Handler:    _ImageIntegrationService_GetImageIntegrations_Handler,
		},
		{
			MethodName: "PostImageIntegration",
			Handler:    _ImageIntegrationService_PostImageIntegration_Handler,
		},
		{
			MethodName: "PutImageIntegration",
			Handler:    _ImageIntegrationService_PutImageIntegration_Handler,
		},
		{
			MethodName: "TestImageIntegration",
			Handler:    _ImageIntegrationService_TestImageIntegration_Handler,
		},
		{
			MethodName: "DeleteImageIntegration",
			Handler:    _ImageIntegrationService_DeleteImageIntegration_Handler,
		},
		{
			MethodName: "UpdateImageIntegration",
			Handler:    _ImageIntegrationService_UpdateImageIntegration_Handler,
		},
		{
			MethodName: "TestUpdatedImageIntegration",
			Handler:    _ImageIntegrationService_TestUpdatedImageIntegration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/image_integration_service.proto",
}

func (m *GetImageIntegrationsRequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetImageIntegrationsRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *GetImageIntegrationsRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Cluster) > 0 {
		i -= len(m.Cluster)
		copy(dAtA[i:], m.Cluster)
		i = encodeVarint(dAtA, i, uint64(len(m.Cluster)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarint(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetImageIntegrationsResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetImageIntegrationsResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *GetImageIntegrationsResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Integrations) > 0 {
		for iNdEx := len(m.Integrations) - 1; iNdEx >= 0; iNdEx-- {
			if vtmsg, ok := interface{}(m.Integrations[iNdEx]).(interface {
				MarshalToSizedBufferVT([]byte) (int, error)
			}); ok {
				size, err := vtmsg.MarshalToSizedBufferVT(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarint(dAtA, i, uint64(size))
			} else {
				encoded, err := proto.Marshal(m.Integrations[iNdEx])
				if err != nil {
					return 0, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = encodeVarint(dAtA, i, uint64(len(encoded)))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateImageIntegrationRequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateImageIntegrationRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *UpdateImageIntegrationRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.UpdatePassword {
		i--
		if m.UpdatePassword {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Config != nil {
		if vtmsg, ok := interface{}(m.Config).(interface {
			MarshalToSizedBufferVT([]byte) (int, error)
		}); ok {
			size, err := vtmsg.MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarint(dAtA, i, uint64(size))
		} else {
			encoded, err := proto.Marshal(m.Config)
			if err != nil {
				return 0, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = encodeVarint(dAtA, i, uint64(len(encoded)))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetImageIntegrationsRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	l = len(m.Cluster)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *GetImageIntegrationsResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Integrations) > 0 {
		for _, e := range m.Integrations {
			if size, ok := interface{}(e).(interface {
				SizeVT() int
			}); ok {
				l = size.SizeVT()
			} else {
				l = proto.Size(e)
			}
			n += 1 + l + sov(uint64(l))
		}
	}
	n += len(m.unknownFields)
	return n
}

func (m *UpdateImageIntegrationRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Config != nil {
		if size, ok := interface{}(m.Config).(interface {
			SizeVT() int
		}); ok {
			l = size.SizeVT()
		} else {
			l = proto.Size(m.Config)
		}
		n += 1 + l + sov(uint64(l))
	}
	if m.UpdatePassword {
		n += 2
	}
	n += len(m.unknownFields)
	return n
}

func (m *GetImageIntegrationsRequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetImageIntegrationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetImageIntegrationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetImageIntegrationsResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetImageIntegrationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetImageIntegrationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Integrations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Integrations = append(m.Integrations, &storage.ImageIntegration{})
			if unmarshal, ok := interface{}(m.Integrations[len(m.Integrations)-1]).(interface {
				UnmarshalVT([]byte) error
			}); ok {
				if err := unmarshal.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				if err := proto.Unmarshal(dAtA[iNdEx:postIndex], m.Integrations[len(m.Integrations)-1]); err != nil {
					return err
				}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateImageIntegrationRequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateImageIntegrationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateImageIntegrationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &storage.ImageIntegration{}
			}
			if unmarshal, ok := interface{}(m.Config).(interface {
				UnmarshalVT([]byte) error
			}); ok {
				if err := unmarshal.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				if err := proto.Unmarshal(dAtA[iNdEx:postIndex], m.Config); err != nil {
					return err
				}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatePassword", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdatePassword = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
