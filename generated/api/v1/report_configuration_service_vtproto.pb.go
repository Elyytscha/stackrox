// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.3.1-0.20220817155510-0ae748fd2007
// source: api/v1/report_configuration_service.proto

package v1

import (
	context "context"
	fmt "fmt"
	storage "github.com/stackrox/rox/generated/storage"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (m *GetReportConfigurationsResponse) CloneVT() *GetReportConfigurationsResponse {
	if m == nil {
		return (*GetReportConfigurationsResponse)(nil)
	}
	r := &GetReportConfigurationsResponse{}
	if rhs := m.ReportConfigs; rhs != nil {
		tmpContainer := make([]*storage.ReportConfiguration, len(rhs))
		for k, v := range rhs {
			if vtpb, ok := interface{}(v).(interface {
				CloneVT() *storage.ReportConfiguration
			}); ok {
				tmpContainer[k] = vtpb.CloneVT()
			} else {
				tmpContainer[k] = proto.Clone(v).(*storage.ReportConfiguration)
			}
		}
		r.ReportConfigs = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetReportConfigurationsResponse) CloneGenericVT() proto.Message {
	return m.CloneVT()
}

func (m *GetReportConfigurationResponse) CloneVT() *GetReportConfigurationResponse {
	if m == nil {
		return (*GetReportConfigurationResponse)(nil)
	}
	r := &GetReportConfigurationResponse{}
	if rhs := m.ReportConfig; rhs != nil {
		if vtpb, ok := interface{}(rhs).(interface {
			CloneVT() *storage.ReportConfiguration
		}); ok {
			r.ReportConfig = vtpb.CloneVT()
		} else {
			r.ReportConfig = proto.Clone(rhs).(*storage.ReportConfiguration)
		}
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetReportConfigurationResponse) CloneGenericVT() proto.Message {
	return m.CloneVT()
}

func (m *PostReportConfigurationResponse) CloneVT() *PostReportConfigurationResponse {
	if m == nil {
		return (*PostReportConfigurationResponse)(nil)
	}
	r := &PostReportConfigurationResponse{}
	if rhs := m.ReportConfig; rhs != nil {
		if vtpb, ok := interface{}(rhs).(interface {
			CloneVT() *storage.ReportConfiguration
		}); ok {
			r.ReportConfig = vtpb.CloneVT()
		} else {
			r.ReportConfig = proto.Clone(rhs).(*storage.ReportConfiguration)
		}
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *PostReportConfigurationResponse) CloneGenericVT() proto.Message {
	return m.CloneVT()
}

func (m *PostReportConfigurationRequest) CloneVT() *PostReportConfigurationRequest {
	if m == nil {
		return (*PostReportConfigurationRequest)(nil)
	}
	r := &PostReportConfigurationRequest{}
	if rhs := m.ReportConfig; rhs != nil {
		if vtpb, ok := interface{}(rhs).(interface {
			CloneVT() *storage.ReportConfiguration
		}); ok {
			r.ReportConfig = vtpb.CloneVT()
		} else {
			r.ReportConfig = proto.Clone(rhs).(*storage.ReportConfiguration)
		}
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *PostReportConfigurationRequest) CloneGenericVT() proto.Message {
	return m.CloneVT()
}

func (m *UpdateReportConfigurationRequest) CloneVT() *UpdateReportConfigurationRequest {
	if m == nil {
		return (*UpdateReportConfigurationRequest)(nil)
	}
	r := &UpdateReportConfigurationRequest{
		Id: m.Id,
	}
	if rhs := m.ReportConfig; rhs != nil {
		if vtpb, ok := interface{}(rhs).(interface {
			CloneVT() *storage.ReportConfiguration
		}); ok {
			r.ReportConfig = vtpb.CloneVT()
		} else {
			r.ReportConfig = proto.Clone(rhs).(*storage.ReportConfiguration)
		}
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *UpdateReportConfigurationRequest) CloneGenericVT() proto.Message {
	return m.CloneVT()
}

func (m *CountReportConfigurationsResponse) CloneVT() *CountReportConfigurationsResponse {
	if m == nil {
		return (*CountReportConfigurationsResponse)(nil)
	}
	r := &CountReportConfigurationsResponse{
		Count: m.Count,
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CountReportConfigurationsResponse) CloneGenericVT() proto.Message {
	return m.CloneVT()
}

func (this *GetReportConfigurationsResponse) EqualVT(that *GetReportConfigurationsResponse) bool {
	if this == nil {
		return that == nil
	} else if that == nil {
		return false
	}
	if len(this.ReportConfigs) != len(that.ReportConfigs) {
		return false
	}
	for i, vx := range this.ReportConfigs {
		vy := that.ReportConfigs[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &storage.ReportConfiguration{}
			}
			if q == nil {
				q = &storage.ReportConfiguration{}
			}
			if equal, ok := interface{}(p).(interface {
				EqualVT(*storage.ReportConfiguration) bool
			}); ok {
				if !equal.EqualVT(q) {
					return false
				}
			} else if !proto.Equal(p, q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetReportConfigurationResponse) EqualVT(that *GetReportConfigurationResponse) bool {
	if this == nil {
		return that == nil
	} else if that == nil {
		return false
	}
	if equal, ok := interface{}(this.ReportConfig).(interface {
		EqualVT(*storage.ReportConfiguration) bool
	}); ok {
		if !equal.EqualVT(that.ReportConfig) {
			return false
		}
	} else if !proto.Equal(this.ReportConfig, that.ReportConfig) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *PostReportConfigurationResponse) EqualVT(that *PostReportConfigurationResponse) bool {
	if this == nil {
		return that == nil
	} else if that == nil {
		return false
	}
	if equal, ok := interface{}(this.ReportConfig).(interface {
		EqualVT(*storage.ReportConfiguration) bool
	}); ok {
		if !equal.EqualVT(that.ReportConfig) {
			return false
		}
	} else if !proto.Equal(this.ReportConfig, that.ReportConfig) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *PostReportConfigurationRequest) EqualVT(that *PostReportConfigurationRequest) bool {
	if this == nil {
		return that == nil
	} else if that == nil {
		return false
	}
	if equal, ok := interface{}(this.ReportConfig).(interface {
		EqualVT(*storage.ReportConfiguration) bool
	}); ok {
		if !equal.EqualVT(that.ReportConfig) {
			return false
		}
	} else if !proto.Equal(this.ReportConfig, that.ReportConfig) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *UpdateReportConfigurationRequest) EqualVT(that *UpdateReportConfigurationRequest) bool {
	if this == nil {
		return that == nil
	} else if that == nil {
		return false
	}
	if this.Id != that.Id {
		return false
	}
	if equal, ok := interface{}(this.ReportConfig).(interface {
		EqualVT(*storage.ReportConfiguration) bool
	}); ok {
		if !equal.EqualVT(that.ReportConfig) {
			return false
		}
	} else if !proto.Equal(this.ReportConfig, that.ReportConfig) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CountReportConfigurationsResponse) EqualVT(that *CountReportConfigurationsResponse) bool {
	if this == nil {
		return that == nil
	} else if that == nil {
		return false
	}
	if this.Count != that.Count {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReportConfigurationServiceClient is the client API for ReportConfigurationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReportConfigurationServiceClient interface {
	GetReportConfigurations(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*GetReportConfigurationsResponse, error)
	GetReportConfiguration(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*GetReportConfigurationResponse, error)
	// PostReportConfiguration creates a report configuration
	PostReportConfiguration(ctx context.Context, in *PostReportConfigurationRequest, opts ...grpc.CallOption) (*PostReportConfigurationResponse, error)
	// UpdateReportConfiguration updates a report configuration
	UpdateReportConfiguration(ctx context.Context, in *UpdateReportConfigurationRequest, opts ...grpc.CallOption) (*Empty, error)
	// DeleteReportConfiguration removes a report configuration given its id
	DeleteReportConfiguration(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error)
	// CountReportConfigurations returns the number of report configurations.
	CountReportConfigurations(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*CountReportConfigurationsResponse, error)
}

type reportConfigurationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReportConfigurationServiceClient(cc grpc.ClientConnInterface) ReportConfigurationServiceClient {
	return &reportConfigurationServiceClient{cc}
}

func (c *reportConfigurationServiceClient) GetReportConfigurations(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*GetReportConfigurationsResponse, error) {
	out := new(GetReportConfigurationsResponse)
	err := c.cc.Invoke(ctx, "/v1.ReportConfigurationService/GetReportConfigurations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportConfigurationServiceClient) GetReportConfiguration(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*GetReportConfigurationResponse, error) {
	out := new(GetReportConfigurationResponse)
	err := c.cc.Invoke(ctx, "/v1.ReportConfigurationService/GetReportConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportConfigurationServiceClient) PostReportConfiguration(ctx context.Context, in *PostReportConfigurationRequest, opts ...grpc.CallOption) (*PostReportConfigurationResponse, error) {
	out := new(PostReportConfigurationResponse)
	err := c.cc.Invoke(ctx, "/v1.ReportConfigurationService/PostReportConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportConfigurationServiceClient) UpdateReportConfiguration(ctx context.Context, in *UpdateReportConfigurationRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v1.ReportConfigurationService/UpdateReportConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportConfigurationServiceClient) DeleteReportConfiguration(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v1.ReportConfigurationService/DeleteReportConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportConfigurationServiceClient) CountReportConfigurations(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*CountReportConfigurationsResponse, error) {
	out := new(CountReportConfigurationsResponse)
	err := c.cc.Invoke(ctx, "/v1.ReportConfigurationService/CountReportConfigurations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportConfigurationServiceServer is the server API for ReportConfigurationService service.
// All implementations must embed UnimplementedReportConfigurationServiceServer
// for forward compatibility
type ReportConfigurationServiceServer interface {
	GetReportConfigurations(context.Context, *RawQuery) (*GetReportConfigurationsResponse, error)
	GetReportConfiguration(context.Context, *ResourceByID) (*GetReportConfigurationResponse, error)
	// PostReportConfiguration creates a report configuration
	PostReportConfiguration(context.Context, *PostReportConfigurationRequest) (*PostReportConfigurationResponse, error)
	// UpdateReportConfiguration updates a report configuration
	UpdateReportConfiguration(context.Context, *UpdateReportConfigurationRequest) (*Empty, error)
	// DeleteReportConfiguration removes a report configuration given its id
	DeleteReportConfiguration(context.Context, *ResourceByID) (*Empty, error)
	// CountReportConfigurations returns the number of report configurations.
	CountReportConfigurations(context.Context, *RawQuery) (*CountReportConfigurationsResponse, error)
	mustEmbedUnimplementedReportConfigurationServiceServer()
}

// UnimplementedReportConfigurationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReportConfigurationServiceServer struct {
}

func (UnimplementedReportConfigurationServiceServer) GetReportConfigurations(context.Context, *RawQuery) (*GetReportConfigurationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportConfigurations not implemented")
}
func (UnimplementedReportConfigurationServiceServer) GetReportConfiguration(context.Context, *ResourceByID) (*GetReportConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportConfiguration not implemented")
}
func (UnimplementedReportConfigurationServiceServer) PostReportConfiguration(context.Context, *PostReportConfigurationRequest) (*PostReportConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostReportConfiguration not implemented")
}
func (UnimplementedReportConfigurationServiceServer) UpdateReportConfiguration(context.Context, *UpdateReportConfigurationRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReportConfiguration not implemented")
}
func (UnimplementedReportConfigurationServiceServer) DeleteReportConfiguration(context.Context, *ResourceByID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReportConfiguration not implemented")
}
func (UnimplementedReportConfigurationServiceServer) CountReportConfigurations(context.Context, *RawQuery) (*CountReportConfigurationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountReportConfigurations not implemented")
}
func (UnimplementedReportConfigurationServiceServer) mustEmbedUnimplementedReportConfigurationServiceServer() {
}

// UnsafeReportConfigurationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReportConfigurationServiceServer will
// result in compilation errors.
type UnsafeReportConfigurationServiceServer interface {
	mustEmbedUnimplementedReportConfigurationServiceServer()
}

func RegisterReportConfigurationServiceServer(s grpc.ServiceRegistrar, srv ReportConfigurationServiceServer) {
	s.RegisterService(&ReportConfigurationService_ServiceDesc, srv)
}

func _ReportConfigurationService_GetReportConfigurations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportConfigurationServiceServer).GetReportConfigurations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ReportConfigurationService/GetReportConfigurations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportConfigurationServiceServer).GetReportConfigurations(ctx, req.(*RawQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportConfigurationService_GetReportConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportConfigurationServiceServer).GetReportConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ReportConfigurationService/GetReportConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportConfigurationServiceServer).GetReportConfiguration(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportConfigurationService_PostReportConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostReportConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportConfigurationServiceServer).PostReportConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ReportConfigurationService/PostReportConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportConfigurationServiceServer).PostReportConfiguration(ctx, req.(*PostReportConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportConfigurationService_UpdateReportConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReportConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportConfigurationServiceServer).UpdateReportConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ReportConfigurationService/UpdateReportConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportConfigurationServiceServer).UpdateReportConfiguration(ctx, req.(*UpdateReportConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportConfigurationService_DeleteReportConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportConfigurationServiceServer).DeleteReportConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ReportConfigurationService/DeleteReportConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportConfigurationServiceServer).DeleteReportConfiguration(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportConfigurationService_CountReportConfigurations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportConfigurationServiceServer).CountReportConfigurations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ReportConfigurationService/CountReportConfigurations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportConfigurationServiceServer).CountReportConfigurations(ctx, req.(*RawQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// ReportConfigurationService_ServiceDesc is the grpc.ServiceDesc for ReportConfigurationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReportConfigurationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ReportConfigurationService",
	HandlerType: (*ReportConfigurationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReportConfigurations",
			Handler:    _ReportConfigurationService_GetReportConfigurations_Handler,
		},
		{
			MethodName: "GetReportConfiguration",
			Handler:    _ReportConfigurationService_GetReportConfiguration_Handler,
		},
		{
			MethodName: "PostReportConfiguration",
			Handler:    _ReportConfigurationService_PostReportConfiguration_Handler,
		},
		{
			MethodName: "UpdateReportConfiguration",
			Handler:    _ReportConfigurationService_UpdateReportConfiguration_Handler,
		},
		{
			MethodName: "DeleteReportConfiguration",
			Handler:    _ReportConfigurationService_DeleteReportConfiguration_Handler,
		},
		{
			MethodName: "CountReportConfigurations",
			Handler:    _ReportConfigurationService_CountReportConfigurations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/report_configuration_service.proto",
}

func (m *GetReportConfigurationsResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReportConfigurationsResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *GetReportConfigurationsResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.ReportConfigs) > 0 {
		for iNdEx := len(m.ReportConfigs) - 1; iNdEx >= 0; iNdEx-- {
			if vtmsg, ok := interface{}(m.ReportConfigs[iNdEx]).(interface {
				MarshalToSizedBufferVT([]byte) (int, error)
			}); ok {
				size, err := vtmsg.MarshalToSizedBufferVT(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarint(dAtA, i, uint64(size))
			} else {
				encoded, err := proto.Marshal(m.ReportConfigs[iNdEx])
				if err != nil {
					return 0, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = encodeVarint(dAtA, i, uint64(len(encoded)))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetReportConfigurationResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReportConfigurationResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *GetReportConfigurationResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.ReportConfig != nil {
		if vtmsg, ok := interface{}(m.ReportConfig).(interface {
			MarshalToSizedBufferVT([]byte) (int, error)
		}); ok {
			size, err := vtmsg.MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarint(dAtA, i, uint64(size))
		} else {
			encoded, err := proto.Marshal(m.ReportConfig)
			if err != nil {
				return 0, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = encodeVarint(dAtA, i, uint64(len(encoded)))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PostReportConfigurationResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostReportConfigurationResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *PostReportConfigurationResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.ReportConfig != nil {
		if vtmsg, ok := interface{}(m.ReportConfig).(interface {
			MarshalToSizedBufferVT([]byte) (int, error)
		}); ok {
			size, err := vtmsg.MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarint(dAtA, i, uint64(size))
		} else {
			encoded, err := proto.Marshal(m.ReportConfig)
			if err != nil {
				return 0, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = encodeVarint(dAtA, i, uint64(len(encoded)))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PostReportConfigurationRequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostReportConfigurationRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *PostReportConfigurationRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.ReportConfig != nil {
		if vtmsg, ok := interface{}(m.ReportConfig).(interface {
			MarshalToSizedBufferVT([]byte) (int, error)
		}); ok {
			size, err := vtmsg.MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarint(dAtA, i, uint64(size))
		} else {
			encoded, err := proto.Marshal(m.ReportConfig)
			if err != nil {
				return 0, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = encodeVarint(dAtA, i, uint64(len(encoded)))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateReportConfigurationRequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateReportConfigurationRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *UpdateReportConfigurationRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.ReportConfig != nil {
		if vtmsg, ok := interface{}(m.ReportConfig).(interface {
			MarshalToSizedBufferVT([]byte) (int, error)
		}); ok {
			size, err := vtmsg.MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarint(dAtA, i, uint64(size))
		} else {
			encoded, err := proto.Marshal(m.ReportConfig)
			if err != nil {
				return 0, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = encodeVarint(dAtA, i, uint64(len(encoded)))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarint(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CountReportConfigurationsResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountReportConfigurationsResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *CountReportConfigurationsResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Count != 0 {
		i = encodeVarint(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetReportConfigurationsResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ReportConfigs) > 0 {
		for _, e := range m.ReportConfigs {
			if size, ok := interface{}(e).(interface {
				SizeVT() int
			}); ok {
				l = size.SizeVT()
			} else {
				l = proto.Size(e)
			}
			n += 1 + l + sov(uint64(l))
		}
	}
	n += len(m.unknownFields)
	return n
}

func (m *GetReportConfigurationResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReportConfig != nil {
		if size, ok := interface{}(m.ReportConfig).(interface {
			SizeVT() int
		}); ok {
			l = size.SizeVT()
		} else {
			l = proto.Size(m.ReportConfig)
		}
		n += 1 + l + sov(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *PostReportConfigurationResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReportConfig != nil {
		if size, ok := interface{}(m.ReportConfig).(interface {
			SizeVT() int
		}); ok {
			l = size.SizeVT()
		} else {
			l = proto.Size(m.ReportConfig)
		}
		n += 1 + l + sov(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *PostReportConfigurationRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReportConfig != nil {
		if size, ok := interface{}(m.ReportConfig).(interface {
			SizeVT() int
		}); ok {
			l = size.SizeVT()
		} else {
			l = proto.Size(m.ReportConfig)
		}
		n += 1 + l + sov(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *UpdateReportConfigurationRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	if m.ReportConfig != nil {
		if size, ok := interface{}(m.ReportConfig).(interface {
			SizeVT() int
		}); ok {
			l = size.SizeVT()
		} else {
			l = proto.Size(m.ReportConfig)
		}
		n += 1 + l + sov(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *CountReportConfigurationsResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sov(uint64(m.Count))
	}
	n += len(m.unknownFields)
	return n
}

func (m *GetReportConfigurationsResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReportConfigurationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReportConfigurationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportConfigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReportConfigs = append(m.ReportConfigs, &storage.ReportConfiguration{})
			if unmarshal, ok := interface{}(m.ReportConfigs[len(m.ReportConfigs)-1]).(interface {
				UnmarshalVT([]byte) error
			}); ok {
				if err := unmarshal.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				if err := proto.Unmarshal(dAtA[iNdEx:postIndex], m.ReportConfigs[len(m.ReportConfigs)-1]); err != nil {
					return err
				}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReportConfigurationResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReportConfigurationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReportConfigurationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReportConfig == nil {
				m.ReportConfig = &storage.ReportConfiguration{}
			}
			if unmarshal, ok := interface{}(m.ReportConfig).(interface {
				UnmarshalVT([]byte) error
			}); ok {
				if err := unmarshal.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				if err := proto.Unmarshal(dAtA[iNdEx:postIndex], m.ReportConfig); err != nil {
					return err
				}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostReportConfigurationResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostReportConfigurationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostReportConfigurationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReportConfig == nil {
				m.ReportConfig = &storage.ReportConfiguration{}
			}
			if unmarshal, ok := interface{}(m.ReportConfig).(interface {
				UnmarshalVT([]byte) error
			}); ok {
				if err := unmarshal.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				if err := proto.Unmarshal(dAtA[iNdEx:postIndex], m.ReportConfig); err != nil {
					return err
				}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostReportConfigurationRequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostReportConfigurationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostReportConfigurationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReportConfig == nil {
				m.ReportConfig = &storage.ReportConfiguration{}
			}
			if unmarshal, ok := interface{}(m.ReportConfig).(interface {
				UnmarshalVT([]byte) error
			}); ok {
				if err := unmarshal.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				if err := proto.Unmarshal(dAtA[iNdEx:postIndex], m.ReportConfig); err != nil {
					return err
				}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateReportConfigurationRequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateReportConfigurationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateReportConfigurationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReportConfig == nil {
				m.ReportConfig = &storage.ReportConfiguration{}
			}
			if unmarshal, ok := interface{}(m.ReportConfig).(interface {
				UnmarshalVT([]byte) error
			}); ok {
				if err := unmarshal.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				if err := proto.Unmarshal(dAtA[iNdEx:postIndex], m.ReportConfig); err != nil {
					return err
				}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountReportConfigurationsResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountReportConfigurationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountReportConfigurationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
