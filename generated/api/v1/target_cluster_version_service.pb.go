// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1/target_cluster_version_service.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TargetClusterVersionResponse struct {
	Version              string   `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TargetClusterVersionResponse) Reset()         { *m = TargetClusterVersionResponse{} }
func (m *TargetClusterVersionResponse) String() string { return proto.CompactTextString(m) }
func (*TargetClusterVersionResponse) ProtoMessage()    {}
func (*TargetClusterVersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b890836a9b6f7bcb, []int{0}
}
func (m *TargetClusterVersionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TargetClusterVersionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TargetClusterVersionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TargetClusterVersionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TargetClusterVersionResponse.Merge(m, src)
}
func (m *TargetClusterVersionResponse) XXX_Size() int {
	return m.Size()
}
func (m *TargetClusterVersionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TargetClusterVersionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TargetClusterVersionResponse proto.InternalMessageInfo

func (m *TargetClusterVersionResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *TargetClusterVersionResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *TargetClusterVersionResponse) Clone() *TargetClusterVersionResponse {
	if m == nil {
		return nil
	}
	cloned := new(TargetClusterVersionResponse)
	*cloned = *m

	return cloned
}

func init() {
	proto.RegisterType((*TargetClusterVersionResponse)(nil), "v1.TargetClusterVersionResponse")
}

func init() {
	proto.RegisterFile("api/v1/target_cluster_version_service.proto", fileDescriptor_b890836a9b6f7bcb)
}

var fileDescriptor_b890836a9b6f7bcb = []byte{
	// 250 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x4e, 0x2c, 0xc8, 0xd4,
	0x2f, 0x33, 0xd4, 0x2f, 0x49, 0x2c, 0x4a, 0x4f, 0x2d, 0x89, 0x4f, 0xce, 0x29, 0x2d, 0x2e, 0x49,
	0x2d, 0x8a, 0x2f, 0x4b, 0x2d, 0x2a, 0xce, 0xcc, 0xcf, 0x8b, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c,
	0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x33, 0x94, 0x92, 0x49, 0xcf, 0xcf,
	0x4f, 0xcf, 0x49, 0xd5, 0x07, 0xe9, 0x4b, 0xcc, 0xcb, 0xcb, 0x2f, 0x49, 0x2c, 0xc9, 0xcc, 0xcf,
	0x2b, 0x86, 0xa8, 0x90, 0x12, 0x82, 0x1a, 0x97, 0x9a, 0x5b, 0x50, 0x52, 0x09, 0x11, 0x53, 0xb2,
	0xe0, 0x92, 0x09, 0x01, 0x9b, 0xee, 0x0c, 0x31, 0x3c, 0x0c, 0x62, 0x76, 0x50, 0x6a, 0x71, 0x41,
	0x7e, 0x5e, 0x71, 0xaa, 0x90, 0x04, 0x17, 0x3b, 0xd4, 0x3a, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce,
	0x20, 0x18, 0xd7, 0xa8, 0x83, 0x91, 0x4b, 0x1a, 0x9b, 0xd6, 0x60, 0x88, 0xab, 0x84, 0x32, 0xb9,
	0xc4, 0xdd, 0x53, 0x4b, 0xb0, 0xa9, 0x10, 0xe2, 0xd4, 0x2b, 0x33, 0xd4, 0x73, 0x05, 0xb9, 0x42,
	0x4a, 0x01, 0xc4, 0xc4, 0xe7, 0x02, 0x25, 0xc5, 0xa6, 0xcb, 0x4f, 0x26, 0x33, 0x49, 0x0b, 0x49,
	0x22, 0x42, 0x42, 0x1f, 0x1a, 0x12, 0x50, 0xa7, 0x38, 0xe9, 0x9d, 0x78, 0x24, 0xc7, 0x78, 0xe1,
	0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x33, 0x1e, 0xcb, 0x31, 0x70, 0x49, 0x64, 0xe6, 0xeb,
	0x15, 0x97, 0x24, 0x26, 0x67, 0x17, 0xe5, 0x57, 0x40, 0x7c, 0xaa, 0x97, 0x58, 0x90, 0xa9, 0x57,
	0x66, 0x18, 0xc5, 0x54, 0x66, 0x18, 0xc1, 0x90, 0xc4, 0x06, 0x16, 0x33, 0x06, 0x04, 0x00, 0x00,
	0xff, 0xff, 0x3c, 0x78, 0xd9, 0xae, 0x62, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TargetClusterVersionServiceClient is the client API for TargetClusterVersionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConnInterface.NewStream.
type TargetClusterVersionServiceClient interface {
	GetTargetClusterVersion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TargetClusterVersionResponse, error)
}

type targetClusterVersionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTargetClusterVersionServiceClient(cc grpc.ClientConnInterface) TargetClusterVersionServiceClient {
	return &targetClusterVersionServiceClient{cc}
}

func (c *targetClusterVersionServiceClient) GetTargetClusterVersion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TargetClusterVersionResponse, error) {
	out := new(TargetClusterVersionResponse)
	err := c.cc.Invoke(ctx, "/v1.TargetClusterVersionService/GetTargetClusterVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TargetClusterVersionServiceServer is the server API for TargetClusterVersionService service.
type TargetClusterVersionServiceServer interface {
	GetTargetClusterVersion(context.Context, *Empty) (*TargetClusterVersionResponse, error)
}

// UnimplementedTargetClusterVersionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTargetClusterVersionServiceServer struct {
}

func (*UnimplementedTargetClusterVersionServiceServer) GetTargetClusterVersion(ctx context.Context, req *Empty) (*TargetClusterVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTargetClusterVersion not implemented")
}

func RegisterTargetClusterVersionServiceServer(s *grpc.Server, srv TargetClusterVersionServiceServer) {
	s.RegisterService(&_TargetClusterVersionService_serviceDesc, srv)
}

func _TargetClusterVersionService_GetTargetClusterVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TargetClusterVersionServiceServer).GetTargetClusterVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.TargetClusterVersionService/GetTargetClusterVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TargetClusterVersionServiceServer).GetTargetClusterVersion(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _TargetClusterVersionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.TargetClusterVersionService",
	HandlerType: (*TargetClusterVersionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTargetClusterVersion",
			Handler:    _TargetClusterVersionService_GetTargetClusterVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/target_cluster_version_service.proto",
}

func (m *TargetClusterVersionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TargetClusterVersionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TargetClusterVersionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintTargetClusterVersionService(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTargetClusterVersionService(dAtA []byte, offset int, v uint64) int {
	offset -= sovTargetClusterVersionService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TargetClusterVersionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovTargetClusterVersionService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTargetClusterVersionService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTargetClusterVersionService(x uint64) (n int) {
	return sovTargetClusterVersionService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TargetClusterVersionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTargetClusterVersionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TargetClusterVersionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TargetClusterVersionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargetClusterVersionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTargetClusterVersionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTargetClusterVersionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTargetClusterVersionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTargetClusterVersionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTargetClusterVersionService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTargetClusterVersionService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTargetClusterVersionService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTargetClusterVersionService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTargetClusterVersionService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTargetClusterVersionService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTargetClusterVersionService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTargetClusterVersionService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTargetClusterVersionService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTargetClusterVersionService = fmt.Errorf("proto: unexpected end of group")
)
