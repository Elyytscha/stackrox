// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.3.1-0.20220817155510-0ae748fd2007
// source: api/v1/cve_service.proto

package v1

import (
	context "context"
	fmt "fmt"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	io "io"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (m *SuppressCVERequest) CloneVT() *SuppressCVERequest {
	if m == nil {
		return (*SuppressCVERequest)(nil)
	}
	r := &SuppressCVERequest{}
	if rhs := m.Cves; rhs != nil {
		tmpContainer := make([]string, len(rhs))
		copy(tmpContainer, rhs)
		r.Cves = tmpContainer
	}
	if rhs := m.Duration; rhs != nil {
		if vtpb, ok := interface{}(rhs).(interface{ CloneVT() *durationpb.Duration }); ok {
			r.Duration = vtpb.CloneVT()
		} else {
			r.Duration = proto.Clone(rhs).(*durationpb.Duration)
		}
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *SuppressCVERequest) CloneGenericVT() proto.Message {
	return m.CloneVT()
}

func (m *UnsuppressCVERequest) CloneVT() *UnsuppressCVERequest {
	if m == nil {
		return (*UnsuppressCVERequest)(nil)
	}
	r := &UnsuppressCVERequest{}
	if rhs := m.Cves; rhs != nil {
		tmpContainer := make([]string, len(rhs))
		copy(tmpContainer, rhs)
		r.Cves = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *UnsuppressCVERequest) CloneGenericVT() proto.Message {
	return m.CloneVT()
}

func (this *SuppressCVERequest) EqualVT(that *SuppressCVERequest) bool {
	if this == nil {
		return that == nil
	} else if that == nil {
		return false
	}
	if len(this.Cves) != len(that.Cves) {
		return false
	}
	for i, vx := range this.Cves {
		vy := that.Cves[i]
		if vx != vy {
			return false
		}
	}
	if equal, ok := interface{}(this.Duration).(interface {
		EqualVT(*durationpb.Duration) bool
	}); ok {
		if !equal.EqualVT(that.Duration) {
			return false
		}
	} else if !proto.Equal(this.Duration, that.Duration) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *UnsuppressCVERequest) EqualVT(that *UnsuppressCVERequest) bool {
	if this == nil {
		return that == nil
	} else if that == nil {
		return false
	}
	if len(this.Cves) != len(that.Cves) {
		return false
	}
	for i, vx := range this.Cves {
		vy := that.Cves[i]
		if vx != vy {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CVEServiceClient is the client API for CVEService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CVEServiceClient interface {
	// SuppressCVE suppresses cves.
	SuppressCVEs(ctx context.Context, in *SuppressCVERequest, opts ...grpc.CallOption) (*Empty, error)
	// UnsuppressCVE unsuppresses cves.
	UnsuppressCVEs(ctx context.Context, in *UnsuppressCVERequest, opts ...grpc.CallOption) (*Empty, error)
}

type cVEServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCVEServiceClient(cc grpc.ClientConnInterface) CVEServiceClient {
	return &cVEServiceClient{cc}
}

func (c *cVEServiceClient) SuppressCVEs(ctx context.Context, in *SuppressCVERequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v1.CVEService/SuppressCVEs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cVEServiceClient) UnsuppressCVEs(ctx context.Context, in *UnsuppressCVERequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v1.CVEService/UnsuppressCVEs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CVEServiceServer is the server API for CVEService service.
// All implementations must embed UnimplementedCVEServiceServer
// for forward compatibility
type CVEServiceServer interface {
	// SuppressCVE suppresses cves.
	SuppressCVEs(context.Context, *SuppressCVERequest) (*Empty, error)
	// UnsuppressCVE unsuppresses cves.
	UnsuppressCVEs(context.Context, *UnsuppressCVERequest) (*Empty, error)
	mustEmbedUnimplementedCVEServiceServer()
}

// UnimplementedCVEServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCVEServiceServer struct {
}

func (UnimplementedCVEServiceServer) SuppressCVEs(context.Context, *SuppressCVERequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuppressCVEs not implemented")
}
func (UnimplementedCVEServiceServer) UnsuppressCVEs(context.Context, *UnsuppressCVERequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsuppressCVEs not implemented")
}
func (UnimplementedCVEServiceServer) mustEmbedUnimplementedCVEServiceServer() {}

// UnsafeCVEServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CVEServiceServer will
// result in compilation errors.
type UnsafeCVEServiceServer interface {
	mustEmbedUnimplementedCVEServiceServer()
}

func RegisterCVEServiceServer(s grpc.ServiceRegistrar, srv CVEServiceServer) {
	s.RegisterService(&CVEService_ServiceDesc, srv)
}

func _CVEService_SuppressCVEs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuppressCVERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CVEServiceServer).SuppressCVEs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CVEService/SuppressCVEs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CVEServiceServer).SuppressCVEs(ctx, req.(*SuppressCVERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CVEService_UnsuppressCVEs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsuppressCVERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CVEServiceServer).UnsuppressCVEs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CVEService/UnsuppressCVEs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CVEServiceServer).UnsuppressCVEs(ctx, req.(*UnsuppressCVERequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CVEService_ServiceDesc is the grpc.ServiceDesc for CVEService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CVEService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.CVEService",
	HandlerType: (*CVEServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SuppressCVEs",
			Handler:    _CVEService_SuppressCVEs_Handler,
		},
		{
			MethodName: "UnsuppressCVEs",
			Handler:    _CVEService_UnsuppressCVEs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/cve_service.proto",
}

// ImageCVEServiceClient is the client API for ImageCVEService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageCVEServiceClient interface {
	// SuppressCVE suppresses image cves.
	SuppressCVEs(ctx context.Context, in *SuppressCVERequest, opts ...grpc.CallOption) (*Empty, error)
	// UnsuppressCVE unsuppresses image cves.
	UnsuppressCVEs(ctx context.Context, in *UnsuppressCVERequest, opts ...grpc.CallOption) (*Empty, error)
}

type imageCVEServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImageCVEServiceClient(cc grpc.ClientConnInterface) ImageCVEServiceClient {
	return &imageCVEServiceClient{cc}
}

func (c *imageCVEServiceClient) SuppressCVEs(ctx context.Context, in *SuppressCVERequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v1.ImageCVEService/SuppressCVEs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageCVEServiceClient) UnsuppressCVEs(ctx context.Context, in *UnsuppressCVERequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v1.ImageCVEService/UnsuppressCVEs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageCVEServiceServer is the server API for ImageCVEService service.
// All implementations must embed UnimplementedImageCVEServiceServer
// for forward compatibility
type ImageCVEServiceServer interface {
	// SuppressCVE suppresses image cves.
	SuppressCVEs(context.Context, *SuppressCVERequest) (*Empty, error)
	// UnsuppressCVE unsuppresses image cves.
	UnsuppressCVEs(context.Context, *UnsuppressCVERequest) (*Empty, error)
	mustEmbedUnimplementedImageCVEServiceServer()
}

// UnimplementedImageCVEServiceServer must be embedded to have forward compatible implementations.
type UnimplementedImageCVEServiceServer struct {
}

func (UnimplementedImageCVEServiceServer) SuppressCVEs(context.Context, *SuppressCVERequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuppressCVEs not implemented")
}
func (UnimplementedImageCVEServiceServer) UnsuppressCVEs(context.Context, *UnsuppressCVERequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsuppressCVEs not implemented")
}
func (UnimplementedImageCVEServiceServer) mustEmbedUnimplementedImageCVEServiceServer() {}

// UnsafeImageCVEServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageCVEServiceServer will
// result in compilation errors.
type UnsafeImageCVEServiceServer interface {
	mustEmbedUnimplementedImageCVEServiceServer()
}

func RegisterImageCVEServiceServer(s grpc.ServiceRegistrar, srv ImageCVEServiceServer) {
	s.RegisterService(&ImageCVEService_ServiceDesc, srv)
}

func _ImageCVEService_SuppressCVEs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuppressCVERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageCVEServiceServer).SuppressCVEs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ImageCVEService/SuppressCVEs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageCVEServiceServer).SuppressCVEs(ctx, req.(*SuppressCVERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageCVEService_UnsuppressCVEs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsuppressCVERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageCVEServiceServer).UnsuppressCVEs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ImageCVEService/UnsuppressCVEs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageCVEServiceServer).UnsuppressCVEs(ctx, req.(*UnsuppressCVERequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImageCVEService_ServiceDesc is the grpc.ServiceDesc for ImageCVEService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageCVEService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ImageCVEService",
	HandlerType: (*ImageCVEServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SuppressCVEs",
			Handler:    _ImageCVEService_SuppressCVEs_Handler,
		},
		{
			MethodName: "UnsuppressCVEs",
			Handler:    _ImageCVEService_UnsuppressCVEs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/cve_service.proto",
}

// NodeCVEServiceClient is the client API for NodeCVEService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeCVEServiceClient interface {
	// SuppressCVE suppresses node cves.
	SuppressCVEs(ctx context.Context, in *SuppressCVERequest, opts ...grpc.CallOption) (*Empty, error)
	// UnsuppressCVE unsuppresses node cves.
	UnsuppressCVEs(ctx context.Context, in *UnsuppressCVERequest, opts ...grpc.CallOption) (*Empty, error)
}

type nodeCVEServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeCVEServiceClient(cc grpc.ClientConnInterface) NodeCVEServiceClient {
	return &nodeCVEServiceClient{cc}
}

func (c *nodeCVEServiceClient) SuppressCVEs(ctx context.Context, in *SuppressCVERequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v1.NodeCVEService/SuppressCVEs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCVEServiceClient) UnsuppressCVEs(ctx context.Context, in *UnsuppressCVERequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v1.NodeCVEService/UnsuppressCVEs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeCVEServiceServer is the server API for NodeCVEService service.
// All implementations must embed UnimplementedNodeCVEServiceServer
// for forward compatibility
type NodeCVEServiceServer interface {
	// SuppressCVE suppresses node cves.
	SuppressCVEs(context.Context, *SuppressCVERequest) (*Empty, error)
	// UnsuppressCVE unsuppresses node cves.
	UnsuppressCVEs(context.Context, *UnsuppressCVERequest) (*Empty, error)
	mustEmbedUnimplementedNodeCVEServiceServer()
}

// UnimplementedNodeCVEServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNodeCVEServiceServer struct {
}

func (UnimplementedNodeCVEServiceServer) SuppressCVEs(context.Context, *SuppressCVERequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuppressCVEs not implemented")
}
func (UnimplementedNodeCVEServiceServer) UnsuppressCVEs(context.Context, *UnsuppressCVERequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsuppressCVEs not implemented")
}
func (UnimplementedNodeCVEServiceServer) mustEmbedUnimplementedNodeCVEServiceServer() {}

// UnsafeNodeCVEServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeCVEServiceServer will
// result in compilation errors.
type UnsafeNodeCVEServiceServer interface {
	mustEmbedUnimplementedNodeCVEServiceServer()
}

func RegisterNodeCVEServiceServer(s grpc.ServiceRegistrar, srv NodeCVEServiceServer) {
	s.RegisterService(&NodeCVEService_ServiceDesc, srv)
}

func _NodeCVEService_SuppressCVEs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuppressCVERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCVEServiceServer).SuppressCVEs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.NodeCVEService/SuppressCVEs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCVEServiceServer).SuppressCVEs(ctx, req.(*SuppressCVERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCVEService_UnsuppressCVEs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsuppressCVERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCVEServiceServer).UnsuppressCVEs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.NodeCVEService/UnsuppressCVEs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCVEServiceServer).UnsuppressCVEs(ctx, req.(*UnsuppressCVERequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeCVEService_ServiceDesc is the grpc.ServiceDesc for NodeCVEService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeCVEService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.NodeCVEService",
	HandlerType: (*NodeCVEServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SuppressCVEs",
			Handler:    _NodeCVEService_SuppressCVEs_Handler,
		},
		{
			MethodName: "UnsuppressCVEs",
			Handler:    _NodeCVEService_UnsuppressCVEs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/cve_service.proto",
}

// ClusterCVEServiceClient is the client API for ClusterCVEService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClusterCVEServiceClient interface {
	// SuppressCVE suppresses cluster cves.
	SuppressCVEs(ctx context.Context, in *SuppressCVERequest, opts ...grpc.CallOption) (*Empty, error)
	// UnsuppressCVE unsuppresses cluster cves.
	UnsuppressCVEs(ctx context.Context, in *UnsuppressCVERequest, opts ...grpc.CallOption) (*Empty, error)
}

type clusterCVEServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterCVEServiceClient(cc grpc.ClientConnInterface) ClusterCVEServiceClient {
	return &clusterCVEServiceClient{cc}
}

func (c *clusterCVEServiceClient) SuppressCVEs(ctx context.Context, in *SuppressCVERequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v1.ClusterCVEService/SuppressCVEs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterCVEServiceClient) UnsuppressCVEs(ctx context.Context, in *UnsuppressCVERequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v1.ClusterCVEService/UnsuppressCVEs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterCVEServiceServer is the server API for ClusterCVEService service.
// All implementations must embed UnimplementedClusterCVEServiceServer
// for forward compatibility
type ClusterCVEServiceServer interface {
	// SuppressCVE suppresses cluster cves.
	SuppressCVEs(context.Context, *SuppressCVERequest) (*Empty, error)
	// UnsuppressCVE unsuppresses cluster cves.
	UnsuppressCVEs(context.Context, *UnsuppressCVERequest) (*Empty, error)
	mustEmbedUnimplementedClusterCVEServiceServer()
}

// UnimplementedClusterCVEServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClusterCVEServiceServer struct {
}

func (UnimplementedClusterCVEServiceServer) SuppressCVEs(context.Context, *SuppressCVERequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuppressCVEs not implemented")
}
func (UnimplementedClusterCVEServiceServer) UnsuppressCVEs(context.Context, *UnsuppressCVERequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsuppressCVEs not implemented")
}
func (UnimplementedClusterCVEServiceServer) mustEmbedUnimplementedClusterCVEServiceServer() {}

// UnsafeClusterCVEServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClusterCVEServiceServer will
// result in compilation errors.
type UnsafeClusterCVEServiceServer interface {
	mustEmbedUnimplementedClusterCVEServiceServer()
}

func RegisterClusterCVEServiceServer(s grpc.ServiceRegistrar, srv ClusterCVEServiceServer) {
	s.RegisterService(&ClusterCVEService_ServiceDesc, srv)
}

func _ClusterCVEService_SuppressCVEs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuppressCVERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterCVEServiceServer).SuppressCVEs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ClusterCVEService/SuppressCVEs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterCVEServiceServer).SuppressCVEs(ctx, req.(*SuppressCVERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterCVEService_UnsuppressCVEs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsuppressCVERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterCVEServiceServer).UnsuppressCVEs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ClusterCVEService/UnsuppressCVEs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterCVEServiceServer).UnsuppressCVEs(ctx, req.(*UnsuppressCVERequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClusterCVEService_ServiceDesc is the grpc.ServiceDesc for ClusterCVEService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClusterCVEService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ClusterCVEService",
	HandlerType: (*ClusterCVEServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SuppressCVEs",
			Handler:    _ClusterCVEService_SuppressCVEs_Handler,
		},
		{
			MethodName: "UnsuppressCVEs",
			Handler:    _ClusterCVEService_UnsuppressCVEs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/cve_service.proto",
}

func (m *SuppressCVERequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuppressCVERequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *SuppressCVERequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Duration != nil {
		if vtmsg, ok := interface{}(m.Duration).(interface {
			MarshalToSizedBufferVT([]byte) (int, error)
		}); ok {
			size, err := vtmsg.MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarint(dAtA, i, uint64(size))
		} else {
			encoded, err := proto.Marshal(m.Duration)
			if err != nil {
				return 0, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = encodeVarint(dAtA, i, uint64(len(encoded)))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Cves) > 0 {
		for iNdEx := len(m.Cves) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Cves[iNdEx])
			copy(dAtA[i:], m.Cves[iNdEx])
			i = encodeVarint(dAtA, i, uint64(len(m.Cves[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UnsuppressCVERequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnsuppressCVERequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *UnsuppressCVERequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Cves) > 0 {
		for iNdEx := len(m.Cves) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Cves[iNdEx])
			copy(dAtA[i:], m.Cves[iNdEx])
			i = encodeVarint(dAtA, i, uint64(len(m.Cves[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SuppressCVERequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cves) > 0 {
		for _, s := range m.Cves {
			l = len(s)
			n += 1 + l + sov(uint64(l))
		}
	}
	if m.Duration != nil {
		if size, ok := interface{}(m.Duration).(interface {
			SizeVT() int
		}); ok {
			l = size.SizeVT()
		} else {
			l = proto.Size(m.Duration)
		}
		n += 1 + l + sov(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *UnsuppressCVERequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cves) > 0 {
		for _, s := range m.Cves {
			l = len(s)
			n += 1 + l + sov(uint64(l))
		}
	}
	n += len(m.unknownFields)
	return n
}

func (m *SuppressCVERequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuppressCVERequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuppressCVERequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cves", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cves = append(m.Cves, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Duration == nil {
				m.Duration = &durationpb.Duration{}
			}
			if unmarshal, ok := interface{}(m.Duration).(interface {
				UnmarshalVT([]byte) error
			}); ok {
				if err := unmarshal.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				if err := proto.Unmarshal(dAtA[iNdEx:postIndex], m.Duration); err != nil {
					return err
				}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnsuppressCVERequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnsuppressCVERequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnsuppressCVERequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cves", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cves = append(m.Cves, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
