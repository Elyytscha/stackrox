// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.4
// source: api/v1/license_service.proto

package v1

import (
	license "github.com/stackrox/rox/generated/shared/license"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LicenseInfo_Status int32

const (
	LicenseInfo_UNKNOWN       LicenseInfo_Status = 0
	LicenseInfo_VALID         LicenseInfo_Status = 1
	LicenseInfo_REVOKED       LicenseInfo_Status = 2
	LicenseInfo_NOT_YET_VALID LicenseInfo_Status = 3
	LicenseInfo_EXPIRED       LicenseInfo_Status = 4
	LicenseInfo_OTHER         LicenseInfo_Status = 5
)

// Enum value maps for LicenseInfo_Status.
var (
	LicenseInfo_Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "VALID",
		2: "REVOKED",
		3: "NOT_YET_VALID",
		4: "EXPIRED",
		5: "OTHER",
	}
	LicenseInfo_Status_value = map[string]int32{
		"UNKNOWN":       0,
		"VALID":         1,
		"REVOKED":       2,
		"NOT_YET_VALID": 3,
		"EXPIRED":       4,
		"OTHER":         5,
	}
)

func (x LicenseInfo_Status) Enum() *LicenseInfo_Status {
	p := new(LicenseInfo_Status)
	*p = x
	return p
}

func (x LicenseInfo_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LicenseInfo_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_license_service_proto_enumTypes[0].Descriptor()
}

func (LicenseInfo_Status) Type() protoreflect.EnumType {
	return &file_api_v1_license_service_proto_enumTypes[0]
}

func (x LicenseInfo_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LicenseInfo_Status.Descriptor instead.
func (LicenseInfo_Status) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_license_service_proto_rawDescGZIP(), []int{0, 0}
}

type LicenseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	License      *license.License   `protobuf:"bytes,1,opt,name=license,proto3" json:"license,omitempty"`
	Status       LicenseInfo_Status `protobuf:"varint,2,opt,name=status,proto3,enum=v1.LicenseInfo_Status" json:"status,omitempty"`
	StatusReason string             `protobuf:"bytes,3,opt,name=status_reason,json=statusReason,proto3" json:"status_reason,omitempty"`
	Active       bool               `protobuf:"varint,4,opt,name=active,proto3" json:"active,omitempty"`
}

func (x *LicenseInfo) Reset() {
	*x = LicenseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_license_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseInfo) ProtoMessage() {}

func (x *LicenseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_license_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseInfo.ProtoReflect.Descriptor instead.
func (*LicenseInfo) Descriptor() ([]byte, []int) {
	return file_api_v1_license_service_proto_rawDescGZIP(), []int{0}
}

func (x *LicenseInfo) GetLicense() *license.License {
	if x != nil {
		return x.License
	}
	return nil
}

func (x *LicenseInfo) GetStatus() LicenseInfo_Status {
	if x != nil {
		return x.Status
	}
	return LicenseInfo_UNKNOWN
}

func (x *LicenseInfo) GetStatusReason() string {
	if x != nil {
		return x.StatusReason
	}
	return ""
}

func (x *LicenseInfo) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

type AddLicenseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LicenseKey string `protobuf:"bytes,1,opt,name=license_key,json=licenseKey,proto3" json:"license_key,omitempty"`
	// Indicates whether the license represented by this key should be made the active license.
	Activate bool `protobuf:"varint,2,opt,name=activate,proto3" json:"activate,omitempty"`
}

func (x *AddLicenseRequest) Reset() {
	*x = AddLicenseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_license_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddLicenseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLicenseRequest) ProtoMessage() {}

func (x *AddLicenseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_license_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLicenseRequest.ProtoReflect.Descriptor instead.
func (*AddLicenseRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_license_service_proto_rawDescGZIP(), []int{1}
}

func (x *AddLicenseRequest) GetLicenseKey() string {
	if x != nil {
		return x.LicenseKey
	}
	return ""
}

func (x *AddLicenseRequest) GetActivate() bool {
	if x != nil {
		return x.Activate
	}
	return false
}

type AddLicenseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	License *LicenseInfo `protobuf:"bytes,1,opt,name=license,proto3" json:"license,omitempty"`
	// Indicates whether or not the license was accepted by the product. Only licenses which are either valid or
	// not yet valid will be accepted. Note that we prefer this over a GRPC error, as it might be helpful to show the,
	// e.g., contact information from the decoded blob.
	Accepted bool `protobuf:"varint,2,opt,name=accepted,proto3" json:"accepted,omitempty"`
}

func (x *AddLicenseResponse) Reset() {
	*x = AddLicenseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_license_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddLicenseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLicenseResponse) ProtoMessage() {}

func (x *AddLicenseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_license_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLicenseResponse.ProtoReflect.Descriptor instead.
func (*AddLicenseResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_license_service_proto_rawDescGZIP(), []int{2}
}

func (x *AddLicenseResponse) GetLicense() *LicenseInfo {
	if x != nil {
		return x.License
	}
	return nil
}

func (x *AddLicenseResponse) GetAccepted() bool {
	if x != nil {
		return x.Accepted
	}
	return false
}

type GetLicensesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ActiveOpt:
	//	*GetLicensesRequest_Active
	ActiveOpt isGetLicensesRequest_ActiveOpt `protobuf_oneof:"active_opt"`
	Statuses  []LicenseInfo_Status           `protobuf:"varint,2,rep,packed,name=statuses,proto3,enum=v1.LicenseInfo_Status" json:"statuses,omitempty"`
}

func (x *GetLicensesRequest) Reset() {
	*x = GetLicensesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_license_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLicensesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLicensesRequest) ProtoMessage() {}

func (x *GetLicensesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_license_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLicensesRequest.ProtoReflect.Descriptor instead.
func (*GetLicensesRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_license_service_proto_rawDescGZIP(), []int{3}
}

func (m *GetLicensesRequest) GetActiveOpt() isGetLicensesRequest_ActiveOpt {
	if m != nil {
		return m.ActiveOpt
	}
	return nil
}

func (x *GetLicensesRequest) GetActive() bool {
	if x, ok := x.GetActiveOpt().(*GetLicensesRequest_Active); ok {
		return x.Active
	}
	return false
}

func (x *GetLicensesRequest) GetStatuses() []LicenseInfo_Status {
	if x != nil {
		return x.Statuses
	}
	return nil
}

type isGetLicensesRequest_ActiveOpt interface {
	isGetLicensesRequest_ActiveOpt()
}

type GetLicensesRequest_Active struct {
	Active bool `protobuf:"varint,1,opt,name=active,proto3,oneof"`
}

func (*GetLicensesRequest_Active) isGetLicensesRequest_ActiveOpt() {}

type GetLicensesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Licenses []*LicenseInfo `protobuf:"bytes,1,rep,name=licenses,proto3" json:"licenses,omitempty"`
}

func (x *GetLicensesResponse) Reset() {
	*x = GetLicensesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_license_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLicensesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLicensesResponse) ProtoMessage() {}

func (x *GetLicensesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_license_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLicensesResponse.ProtoReflect.Descriptor instead.
func (*GetLicensesResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_license_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetLicensesResponse) GetLicenses() []*LicenseInfo {
	if x != nil {
		return x.Licenses
	}
	return nil
}

type GetActiveLicenseExpirationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpirationTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=expiration_time,json=expirationTime,proto3" json:"expiration_time,omitempty"`
}

func (x *GetActiveLicenseExpirationResponse) Reset() {
	*x = GetActiveLicenseExpirationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_license_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActiveLicenseExpirationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveLicenseExpirationResponse) ProtoMessage() {}

func (x *GetActiveLicenseExpirationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_license_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveLicenseExpirationResponse.ProtoReflect.Descriptor instead.
func (*GetActiveLicenseExpirationResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_license_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetActiveLicenseExpirationResponse) GetExpirationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationTime
	}
	return nil
}

type GetActiveLicenseKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LicenseKey string `protobuf:"bytes,1,opt,name=license_key,json=licenseKey,proto3" json:"license_key,omitempty"`
}

func (x *GetActiveLicenseKeyResponse) Reset() {
	*x = GetActiveLicenseKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_license_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActiveLicenseKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveLicenseKeyResponse) ProtoMessage() {}

func (x *GetActiveLicenseKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_license_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveLicenseKeyResponse.ProtoReflect.Descriptor instead.
func (*GetActiveLicenseKeyResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_license_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetActiveLicenseKeyResponse) GetLicenseKey() string {
	if x != nil {
		return x.LicenseKey
	}
	return ""
}

var File_api_v1_license_service_proto protoreflect.FileDescriptor

var file_api_v1_license_service_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02,
	0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x12, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x80, 0x02, 0x0a, 0x0b, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x58, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x44, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4e,
	0x4f, 0x54, 0x5f, 0x59, 0x45, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x03, 0x12, 0x0b,
	0x0a, 0x07, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x05, 0x22, 0x50, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x22, 0x5b, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29,
	0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x65, 0x64, 0x22, 0x70, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x22, 0x42, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b,
	0x0a, 0x08, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x69, 0x0a, 0x22, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x43, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x3e, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x32, 0x9a, 0x03, 0x0a, 0x0e, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x13, 0x12, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x2f,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x12, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x70,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x26, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x61, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x09, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x31,
	0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x6b, 0x65, 0x79, 0x42, 0x1e, 0x0a, 0x18, 0x69, 0x6f, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x72,
	0x6f, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x5a,
	0x02, 0x76, 0x31, 0x58, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_v1_license_service_proto_rawDescOnce sync.Once
	file_api_v1_license_service_proto_rawDescData = file_api_v1_license_service_proto_rawDesc
)

func file_api_v1_license_service_proto_rawDescGZIP() []byte {
	file_api_v1_license_service_proto_rawDescOnce.Do(func() {
		file_api_v1_license_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1_license_service_proto_rawDescData)
	})
	return file_api_v1_license_service_proto_rawDescData
}

var file_api_v1_license_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_v1_license_service_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_api_v1_license_service_proto_goTypes = []interface{}{
	(LicenseInfo_Status)(0),                    // 0: v1.LicenseInfo.Status
	(*LicenseInfo)(nil),                        // 1: v1.LicenseInfo
	(*AddLicenseRequest)(nil),                  // 2: v1.AddLicenseRequest
	(*AddLicenseResponse)(nil),                 // 3: v1.AddLicenseResponse
	(*GetLicensesRequest)(nil),                 // 4: v1.GetLicensesRequest
	(*GetLicensesResponse)(nil),                // 5: v1.GetLicensesResponse
	(*GetActiveLicenseExpirationResponse)(nil), // 6: v1.GetActiveLicenseExpirationResponse
	(*GetActiveLicenseKeyResponse)(nil),        // 7: v1.GetActiveLicenseKeyResponse
	(*license.License)(nil),                    // 8: license.License
	(*timestamppb.Timestamp)(nil),              // 9: google.protobuf.Timestamp
	(*Empty)(nil),                              // 10: v1.Empty
}
var file_api_v1_license_service_proto_depIdxs = []int32{
	8,  // 0: v1.LicenseInfo.license:type_name -> license.License
	0,  // 1: v1.LicenseInfo.status:type_name -> v1.LicenseInfo.Status
	1,  // 2: v1.AddLicenseResponse.license:type_name -> v1.LicenseInfo
	0,  // 3: v1.GetLicensesRequest.statuses:type_name -> v1.LicenseInfo.Status
	1,  // 4: v1.GetLicensesResponse.licenses:type_name -> v1.LicenseInfo
	9,  // 5: v1.GetActiveLicenseExpirationResponse.expiration_time:type_name -> google.protobuf.Timestamp
	4,  // 6: v1.LicenseService.GetLicenses:input_type -> v1.GetLicensesRequest
	2,  // 7: v1.LicenseService.AddLicense:input_type -> v1.AddLicenseRequest
	10, // 8: v1.LicenseService.GetActiveLicenseExpiration:input_type -> v1.Empty
	10, // 9: v1.LicenseService.GetActiveLicenseKey:input_type -> v1.Empty
	5,  // 10: v1.LicenseService.GetLicenses:output_type -> v1.GetLicensesResponse
	3,  // 11: v1.LicenseService.AddLicense:output_type -> v1.AddLicenseResponse
	6,  // 12: v1.LicenseService.GetActiveLicenseExpiration:output_type -> v1.GetActiveLicenseExpirationResponse
	7,  // 13: v1.LicenseService.GetActiveLicenseKey:output_type -> v1.GetActiveLicenseKeyResponse
	10, // [10:14] is the sub-list for method output_type
	6,  // [6:10] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_api_v1_license_service_proto_init() }
func file_api_v1_license_service_proto_init() {
	if File_api_v1_license_service_proto != nil {
		return
	}
	file_api_v1_empty_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_v1_license_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_license_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddLicenseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_license_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddLicenseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_license_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLicensesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_license_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLicensesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_license_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActiveLicenseExpirationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_license_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActiveLicenseKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_v1_license_service_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*GetLicensesRequest_Active)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1_license_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v1_license_service_proto_goTypes,
		DependencyIndexes: file_api_v1_license_service_proto_depIdxs,
		EnumInfos:         file_api_v1_license_service_proto_enumTypes,
		MessageInfos:      file_api_v1_license_service_proto_msgTypes,
	}.Build()
	File_api_v1_license_service_proto = out.File
	file_api_v1_license_service_proto_rawDesc = nil
	file_api_v1_license_service_proto_goTypes = nil
	file_api_v1_license_service_proto_depIdxs = nil
}
