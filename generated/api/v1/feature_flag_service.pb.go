// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1/feature_flag_service.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FeatureFlag struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	EnvVar               string   `protobuf:"bytes,2,opt,name=env_var,json=envVar,proto3" json:"env_var,omitempty"`
	Enabled              bool     `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FeatureFlag) Reset()         { *m = FeatureFlag{} }
func (m *FeatureFlag) String() string { return proto.CompactTextString(m) }
func (*FeatureFlag) ProtoMessage()    {}
func (*FeatureFlag) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e50adfbe4756afe, []int{0}
}
func (m *FeatureFlag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeatureFlag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeatureFlag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeatureFlag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureFlag.Merge(m, src)
}
func (m *FeatureFlag) XXX_Size() int {
	return m.Size()
}
func (m *FeatureFlag) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureFlag.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureFlag proto.InternalMessageInfo

func (m *FeatureFlag) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FeatureFlag) GetEnvVar() string {
	if m != nil {
		return m.EnvVar
	}
	return ""
}

func (m *FeatureFlag) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *FeatureFlag) MessageClone() proto.Message {
	return m.Clone()
}
func (m *FeatureFlag) Clone() *FeatureFlag {
	if m == nil {
		return nil
	}
	cloned := new(FeatureFlag)
	*cloned = *m

	return cloned
}

type GetFeatureFlagsResponse struct {
	FeatureFlags         []*FeatureFlag `protobuf:"bytes,1,rep,name=feature_flags,json=featureFlags,proto3" json:"feature_flags,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetFeatureFlagsResponse) Reset()         { *m = GetFeatureFlagsResponse{} }
func (m *GetFeatureFlagsResponse) String() string { return proto.CompactTextString(m) }
func (*GetFeatureFlagsResponse) ProtoMessage()    {}
func (*GetFeatureFlagsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e50adfbe4756afe, []int{1}
}
func (m *GetFeatureFlagsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFeatureFlagsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFeatureFlagsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFeatureFlagsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFeatureFlagsResponse.Merge(m, src)
}
func (m *GetFeatureFlagsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetFeatureFlagsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFeatureFlagsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetFeatureFlagsResponse proto.InternalMessageInfo

func (m *GetFeatureFlagsResponse) GetFeatureFlags() []*FeatureFlag {
	if m != nil {
		return m.FeatureFlags
	}
	return nil
}

func (m *GetFeatureFlagsResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetFeatureFlagsResponse) Clone() *GetFeatureFlagsResponse {
	if m == nil {
		return nil
	}
	cloned := new(GetFeatureFlagsResponse)
	*cloned = *m

	if m.FeatureFlags != nil {
		cloned.FeatureFlags = make([]*FeatureFlag, len(m.FeatureFlags))
		for idx, v := range m.FeatureFlags {
			cloned.FeatureFlags[idx] = v.Clone()
		}
	}
	return cloned
}

func init() {
	proto.RegisterType((*FeatureFlag)(nil), "v1.FeatureFlag")
	proto.RegisterType((*GetFeatureFlagsResponse)(nil), "v1.GetFeatureFlagsResponse")
}

func init() { proto.RegisterFile("api/v1/feature_flag_service.proto", fileDescriptor_2e50adfbe4756afe) }

var fileDescriptor_2e50adfbe4756afe = []byte{
	// 302 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0xbb, 0xa9, 0x54, 0xbb, 0x55, 0x2a, 0x73, 0xe9, 0x52, 0x25, 0xd4, 0x9e, 0x7a, 0xda,
	0x92, 0xea, 0x13, 0x08, 0xd6, 0xa3, 0x90, 0x8a, 0x88, 0x97, 0x32, 0xad, 0xd3, 0x10, 0x4c, 0x77,
	0x43, 0x76, 0x5d, 0xf4, 0xea, 0x2b, 0x78, 0xf1, 0x91, 0x3c, 0x0a, 0xbe, 0x80, 0x54, 0x1f, 0x44,
	0x92, 0x28, 0x2c, 0x82, 0xb7, 0xd9, 0x7f, 0x66, 0xbe, 0x9d, 0xff, 0xe7, 0x47, 0x98, 0xa7, 0x63,
	0x17, 0x8d, 0x57, 0x84, 0xf6, 0xbe, 0xa0, 0xf9, 0x2a, 0xc3, 0x64, 0x6e, 0xa8, 0x70, 0xe9, 0x92,
	0x64, 0x5e, 0x68, 0xab, 0x21, 0x70, 0x51, 0xff, 0x30, 0xd1, 0x3a, 0xc9, 0x68, 0x5c, 0x4e, 0xa3,
	0x52, 0xda, 0xa2, 0x4d, 0xb5, 0x32, 0xf5, 0x44, 0x1f, 0x7e, 0x20, 0xb4, 0xce, 0xed, 0x63, 0xad,
	0x0d, 0x2f, 0x79, 0x67, 0x5a, 0x33, 0xa7, 0x19, 0x26, 0x00, 0x7c, 0x4b, 0xe1, 0x9a, 0x04, 0x1b,
	0xb0, 0x51, 0x3b, 0xae, 0x6a, 0xe8, 0xf1, 0x6d, 0x52, 0x6e, 0xee, 0xb0, 0x10, 0x41, 0x25, 0xb7,
	0x48, 0xb9, 0x2b, 0x2c, 0x40, 0x94, 0x0d, 0x5c, 0x64, 0x74, 0x2b, 0x9a, 0x03, 0x36, 0xda, 0x89,
	0x7f, 0x9f, 0xc3, 0x0b, 0xde, 0x3b, 0x27, 0xeb, 0x81, 0x4d, 0x4c, 0x26, 0xd7, 0xca, 0x10, 0x9c,
	0xf0, 0x3d, 0xdf, 0x84, 0x11, 0x6c, 0xd0, 0x1c, 0x75, 0x26, 0x5d, 0xe9, 0x22, 0xe9, 0x2d, 0xc4,
	0xbb, 0x2b, 0x6f, 0x7b, 0x92, 0x72, 0xf0, 0x9a, 0xb3, 0xda, 0x38, 0xcc, 0x78, 0xf7, 0xcf, 0x37,
	0xd0, 0x2e, 0x39, 0x67, 0xa5, 0xc1, 0xfe, 0x41, 0x59, 0xfe, 0x73, 0xc6, 0x50, 0x3c, 0xbd, 0x7f,
	0x3d, 0x07, 0x00, 0xfb, 0x5e, 0xaa, 0xd5, 0x3d, 0xa7, 0xf2, 0x75, 0x13, 0xb2, 0xb7, 0x4d, 0xc8,
	0x3e, 0x36, 0x21, 0x7b, 0xf9, 0x0c, 0x1b, 0x5c, 0xa4, 0x5a, 0x1a, 0x8b, 0xcb, 0xbb, 0x42, 0x3f,
	0xd4, 0xb1, 0x49, 0xcc, 0x53, 0xe9, 0xa2, 0x9b, 0xc0, 0x45, 0xd7, 0x8d, 0x45, 0xab, 0xd2, 0x8e,
	0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x78, 0x0f, 0x41, 0x78, 0xa5, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FeatureFlagServiceClient is the client API for FeatureFlagService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConnInterface.NewStream.
type FeatureFlagServiceClient interface {
	GetFeatureFlags(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetFeatureFlagsResponse, error)
}

type featureFlagServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeatureFlagServiceClient(cc grpc.ClientConnInterface) FeatureFlagServiceClient {
	return &featureFlagServiceClient{cc}
}

func (c *featureFlagServiceClient) GetFeatureFlags(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetFeatureFlagsResponse, error) {
	out := new(GetFeatureFlagsResponse)
	err := c.cc.Invoke(ctx, "/v1.FeatureFlagService/GetFeatureFlags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeatureFlagServiceServer is the server API for FeatureFlagService service.
type FeatureFlagServiceServer interface {
	GetFeatureFlags(context.Context, *Empty) (*GetFeatureFlagsResponse, error)
}

// UnimplementedFeatureFlagServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFeatureFlagServiceServer struct {
}

func (*UnimplementedFeatureFlagServiceServer) GetFeatureFlags(ctx context.Context, req *Empty) (*GetFeatureFlagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeatureFlags not implemented")
}

func RegisterFeatureFlagServiceServer(s *grpc.Server, srv FeatureFlagServiceServer) {
	s.RegisterService(&_FeatureFlagService_serviceDesc, srv)
}

func _FeatureFlagService_GetFeatureFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureFlagServiceServer).GetFeatureFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.FeatureFlagService/GetFeatureFlags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureFlagServiceServer).GetFeatureFlags(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _FeatureFlagService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.FeatureFlagService",
	HandlerType: (*FeatureFlagServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFeatureFlags",
			Handler:    _FeatureFlagService_GetFeatureFlags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/feature_flag_service.proto",
}

func (m *FeatureFlag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeatureFlag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeatureFlag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.EnvVar) > 0 {
		i -= len(m.EnvVar)
		copy(dAtA[i:], m.EnvVar)
		i = encodeVarintFeatureFlagService(dAtA, i, uint64(len(m.EnvVar)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintFeatureFlagService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetFeatureFlagsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFeatureFlagsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFeatureFlagsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FeatureFlags) > 0 {
		for iNdEx := len(m.FeatureFlags) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeatureFlags[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFeatureFlagService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintFeatureFlagService(dAtA []byte, offset int, v uint64) int {
	offset -= sovFeatureFlagService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FeatureFlag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFeatureFlagService(uint64(l))
	}
	l = len(m.EnvVar)
	if l > 0 {
		n += 1 + l + sovFeatureFlagService(uint64(l))
	}
	if m.Enabled {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetFeatureFlagsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FeatureFlags) > 0 {
		for _, e := range m.FeatureFlags {
			l = e.Size()
			n += 1 + l + sovFeatureFlagService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovFeatureFlagService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFeatureFlagService(x uint64) (n int) {
	return sovFeatureFlagService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FeatureFlag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeatureFlagService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeatureFlag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeatureFlag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatureFlagService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeatureFlagService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeatureFlagService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvVar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatureFlagService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeatureFlagService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeatureFlagService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnvVar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatureFlagService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFeatureFlagService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFeatureFlagService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFeatureFlagsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeatureFlagService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFeatureFlagsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFeatureFlagsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureFlags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeatureFlagService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFeatureFlagService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFeatureFlagService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeatureFlags = append(m.FeatureFlags, &FeatureFlag{})
			if err := m.FeatureFlags[len(m.FeatureFlags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFeatureFlagService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFeatureFlagService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFeatureFlagService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFeatureFlagService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFeatureFlagService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFeatureFlagService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFeatureFlagService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFeatureFlagService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFeatureFlagService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFeatureFlagService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFeatureFlagService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFeatureFlagService = fmt.Errorf("proto: unexpected end of group")
)
