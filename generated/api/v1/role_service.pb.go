// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1/role_service.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	storage "github.com/stackrox/rox/generated/storage"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetRolesResponse struct {
	Roles                []*storage.Role `protobuf:"bytes,1,rep,name=roles,proto3" json:"roles,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetRolesResponse) Reset()         { *m = GetRolesResponse{} }
func (m *GetRolesResponse) String() string { return proto.CompactTextString(m) }
func (*GetRolesResponse) ProtoMessage()    {}
func (*GetRolesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2751be16bbd500c, []int{0}
}
func (m *GetRolesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRolesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRolesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRolesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRolesResponse.Merge(m, src)
}
func (m *GetRolesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetRolesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRolesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRolesResponse proto.InternalMessageInfo

func (m *GetRolesResponse) GetRoles() []*storage.Role {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *GetRolesResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetRolesResponse) Clone() *GetRolesResponse {
	if m == nil {
		return nil
	}
	cloned := new(GetRolesResponse)
	*cloned = *m

	if m.Roles != nil {
		cloned.Roles = make([]*storage.Role, len(m.Roles))
		for idx, v := range m.Roles {
			cloned.Roles[idx] = v.Clone()
		}
	}
	return cloned
}

// GetPermissionsResponse is wire-compatible with the old format of the Role
// message and represents a collection of aggregated permissions.
type GetPermissionsResponse struct {
	ResourceToAccess     map[string]storage.Access `protobuf:"bytes,3,rep,name=resource_to_access,json=resourceToAccess,proto3" json:"resource_to_access,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=storage.Access"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *GetPermissionsResponse) Reset()         { *m = GetPermissionsResponse{} }
func (m *GetPermissionsResponse) String() string { return proto.CompactTextString(m) }
func (*GetPermissionsResponse) ProtoMessage()    {}
func (*GetPermissionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2751be16bbd500c, []int{1}
}
func (m *GetPermissionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPermissionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPermissionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPermissionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPermissionsResponse.Merge(m, src)
}
func (m *GetPermissionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPermissionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPermissionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPermissionsResponse proto.InternalMessageInfo

func (m *GetPermissionsResponse) GetResourceToAccess() map[string]storage.Access {
	if m != nil {
		return m.ResourceToAccess
	}
	return nil
}

func (m *GetPermissionsResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetPermissionsResponse) Clone() *GetPermissionsResponse {
	if m == nil {
		return nil
	}
	cloned := new(GetPermissionsResponse)
	*cloned = *m

	if m.ResourceToAccess != nil {
		cloned.ResourceToAccess = make(map[string]storage.Access, len(m.ResourceToAccess))
		for k, v := range m.ResourceToAccess {
			cloned.ResourceToAccess[k] = v
		}
	}
	return cloned
}

type GetResourcesResponse struct {
	Resources            []string `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetResourcesResponse) Reset()         { *m = GetResourcesResponse{} }
func (m *GetResourcesResponse) String() string { return proto.CompactTextString(m) }
func (*GetResourcesResponse) ProtoMessage()    {}
func (*GetResourcesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2751be16bbd500c, []int{2}
}
func (m *GetResourcesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetResourcesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetResourcesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetResourcesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetResourcesResponse.Merge(m, src)
}
func (m *GetResourcesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetResourcesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetResourcesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetResourcesResponse proto.InternalMessageInfo

func (m *GetResourcesResponse) GetResources() []string {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *GetResourcesResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetResourcesResponse) Clone() *GetResourcesResponse {
	if m == nil {
		return nil
	}
	cloned := new(GetResourcesResponse)
	*cloned = *m

	if m.Resources != nil {
		cloned.Resources = make([]string, len(m.Resources))
		copy(cloned.Resources, m.Resources)
	}
	return cloned
}

type ListPermissionSetsResponse struct {
	PermissionSets       []*storage.PermissionSet `protobuf:"bytes,1,rep,name=permission_sets,json=permissionSets,proto3" json:"permission_sets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ListPermissionSetsResponse) Reset()         { *m = ListPermissionSetsResponse{} }
func (m *ListPermissionSetsResponse) String() string { return proto.CompactTextString(m) }
func (*ListPermissionSetsResponse) ProtoMessage()    {}
func (*ListPermissionSetsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2751be16bbd500c, []int{3}
}
func (m *ListPermissionSetsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListPermissionSetsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListPermissionSetsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListPermissionSetsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPermissionSetsResponse.Merge(m, src)
}
func (m *ListPermissionSetsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListPermissionSetsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPermissionSetsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListPermissionSetsResponse proto.InternalMessageInfo

func (m *ListPermissionSetsResponse) GetPermissionSets() []*storage.PermissionSet {
	if m != nil {
		return m.PermissionSets
	}
	return nil
}

func (m *ListPermissionSetsResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ListPermissionSetsResponse) Clone() *ListPermissionSetsResponse {
	if m == nil {
		return nil
	}
	cloned := new(ListPermissionSetsResponse)
	*cloned = *m

	if m.PermissionSets != nil {
		cloned.PermissionSets = make([]*storage.PermissionSet, len(m.PermissionSets))
		for idx, v := range m.PermissionSets {
			cloned.PermissionSets[idx] = v.Clone()
		}
	}
	return cloned
}

type ListSimpleAccessScopesResponse struct {
	AccessScopes         []*storage.SimpleAccessScope `protobuf:"bytes,1,rep,name=access_scopes,json=accessScopes,proto3" json:"access_scopes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *ListSimpleAccessScopesResponse) Reset()         { *m = ListSimpleAccessScopesResponse{} }
func (m *ListSimpleAccessScopesResponse) String() string { return proto.CompactTextString(m) }
func (*ListSimpleAccessScopesResponse) ProtoMessage()    {}
func (*ListSimpleAccessScopesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2751be16bbd500c, []int{4}
}
func (m *ListSimpleAccessScopesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListSimpleAccessScopesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListSimpleAccessScopesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListSimpleAccessScopesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSimpleAccessScopesResponse.Merge(m, src)
}
func (m *ListSimpleAccessScopesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListSimpleAccessScopesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSimpleAccessScopesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListSimpleAccessScopesResponse proto.InternalMessageInfo

func (m *ListSimpleAccessScopesResponse) GetAccessScopes() []*storage.SimpleAccessScope {
	if m != nil {
		return m.AccessScopes
	}
	return nil
}

func (m *ListSimpleAccessScopesResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ListSimpleAccessScopesResponse) Clone() *ListSimpleAccessScopesResponse {
	if m == nil {
		return nil
	}
	cloned := new(ListSimpleAccessScopesResponse)
	*cloned = *m

	if m.AccessScopes != nil {
		cloned.AccessScopes = make([]*storage.SimpleAccessScope, len(m.AccessScopes))
		for idx, v := range m.AccessScopes {
			cloned.AccessScopes[idx] = v.Clone()
		}
	}
	return cloned
}

type ComputeEffectiveAccessScopeRequest struct {
	Detail               storage.ComputeEffectiveAccessScopeRequest_Detail `protobuf:"varint,1,opt,name=detail,proto3,enum=storage.ComputeEffectiveAccessScopeRequest_Detail" json:"detail,omitempty"`
	AccessScope          *ComputeEffectiveAccessScopeRequest_Payload       `protobuf:"bytes,2,opt,name=access_scope,json=accessScope,proto3" json:"access_scope,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                          `json:"-"`
	XXX_unrecognized     []byte                                            `json:"-"`
	XXX_sizecache        int32                                             `json:"-"`
}

func (m *ComputeEffectiveAccessScopeRequest) Reset()         { *m = ComputeEffectiveAccessScopeRequest{} }
func (m *ComputeEffectiveAccessScopeRequest) String() string { return proto.CompactTextString(m) }
func (*ComputeEffectiveAccessScopeRequest) ProtoMessage()    {}
func (*ComputeEffectiveAccessScopeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2751be16bbd500c, []int{5}
}
func (m *ComputeEffectiveAccessScopeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComputeEffectiveAccessScopeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComputeEffectiveAccessScopeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComputeEffectiveAccessScopeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComputeEffectiveAccessScopeRequest.Merge(m, src)
}
func (m *ComputeEffectiveAccessScopeRequest) XXX_Size() int {
	return m.Size()
}
func (m *ComputeEffectiveAccessScopeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ComputeEffectiveAccessScopeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ComputeEffectiveAccessScopeRequest proto.InternalMessageInfo

func (m *ComputeEffectiveAccessScopeRequest) GetDetail() storage.ComputeEffectiveAccessScopeRequest_Detail {
	if m != nil {
		return m.Detail
	}
	return storage.ComputeEffectiveAccessScopeRequest_STANDARD
}

func (m *ComputeEffectiveAccessScopeRequest) GetAccessScope() *ComputeEffectiveAccessScopeRequest_Payload {
	if m != nil {
		return m.AccessScope
	}
	return nil
}

func (m *ComputeEffectiveAccessScopeRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComputeEffectiveAccessScopeRequest) Clone() *ComputeEffectiveAccessScopeRequest {
	if m == nil {
		return nil
	}
	cloned := new(ComputeEffectiveAccessScopeRequest)
	*cloned = *m

	cloned.AccessScope = m.AccessScope.Clone()
	return cloned
}

type ComputeEffectiveAccessScopeRequest_Payload struct {
	// Other definitions of access scope rules is science fiction for now;
	// however, prepare for that possible future.
	//
	// Types that are valid to be assigned to RulesOpt:
	//	*ComputeEffectiveAccessScopeRequest_Payload_SimpleRules
	RulesOpt             isComputeEffectiveAccessScopeRequest_Payload_RulesOpt `protobuf_oneof:"rules_opt"`
	XXX_NoUnkeyedLiteral struct{}                                              `json:"-"`
	XXX_unrecognized     []byte                                                `json:"-"`
	XXX_sizecache        int32                                                 `json:"-"`
}

func (m *ComputeEffectiveAccessScopeRequest_Payload) Reset() {
	*m = ComputeEffectiveAccessScopeRequest_Payload{}
}
func (m *ComputeEffectiveAccessScopeRequest_Payload) String() string {
	return proto.CompactTextString(m)
}
func (*ComputeEffectiveAccessScopeRequest_Payload) ProtoMessage() {}
func (*ComputeEffectiveAccessScopeRequest_Payload) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2751be16bbd500c, []int{5, 0}
}
func (m *ComputeEffectiveAccessScopeRequest_Payload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComputeEffectiveAccessScopeRequest_Payload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComputeEffectiveAccessScopeRequest_Payload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComputeEffectiveAccessScopeRequest_Payload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComputeEffectiveAccessScopeRequest_Payload.Merge(m, src)
}
func (m *ComputeEffectiveAccessScopeRequest_Payload) XXX_Size() int {
	return m.Size()
}
func (m *ComputeEffectiveAccessScopeRequest_Payload) XXX_DiscardUnknown() {
	xxx_messageInfo_ComputeEffectiveAccessScopeRequest_Payload.DiscardUnknown(m)
}

var xxx_messageInfo_ComputeEffectiveAccessScopeRequest_Payload proto.InternalMessageInfo

type isComputeEffectiveAccessScopeRequest_Payload_RulesOpt interface {
	isComputeEffectiveAccessScopeRequest_Payload_RulesOpt()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isComputeEffectiveAccessScopeRequest_Payload_RulesOpt
}

type ComputeEffectiveAccessScopeRequest_Payload_SimpleRules struct {
	SimpleRules *storage.SimpleAccessScope_Rules `protobuf:"bytes,1,opt,name=simple_rules,json=simpleRules,proto3,oneof" json:"simple_rules,omitempty"`
}

func (*ComputeEffectiveAccessScopeRequest_Payload_SimpleRules) isComputeEffectiveAccessScopeRequest_Payload_RulesOpt() {
}
func (m *ComputeEffectiveAccessScopeRequest_Payload_SimpleRules) Clone() isComputeEffectiveAccessScopeRequest_Payload_RulesOpt {
	if m == nil {
		return nil
	}
	cloned := new(ComputeEffectiveAccessScopeRequest_Payload_SimpleRules)
	*cloned = *m

	cloned.SimpleRules = m.SimpleRules.Clone()
	return cloned
}

func (m *ComputeEffectiveAccessScopeRequest_Payload) GetRulesOpt() isComputeEffectiveAccessScopeRequest_Payload_RulesOpt {
	if m != nil {
		return m.RulesOpt
	}
	return nil
}

func (m *ComputeEffectiveAccessScopeRequest_Payload) GetSimpleRules() *storage.SimpleAccessScope_Rules {
	if x, ok := m.GetRulesOpt().(*ComputeEffectiveAccessScopeRequest_Payload_SimpleRules); ok {
		return x.SimpleRules
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ComputeEffectiveAccessScopeRequest_Payload) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ComputeEffectiveAccessScopeRequest_Payload_SimpleRules)(nil),
	}
}

func (m *ComputeEffectiveAccessScopeRequest_Payload) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComputeEffectiveAccessScopeRequest_Payload) Clone() *ComputeEffectiveAccessScopeRequest_Payload {
	if m == nil {
		return nil
	}
	cloned := new(ComputeEffectiveAccessScopeRequest_Payload)
	*cloned = *m

	if m.RulesOpt != nil {
		cloned.RulesOpt = m.RulesOpt.Clone()
	}
	return cloned
}

// CreateRoleRequest unites name we take from the URL path and role body in the same structure.
// This way we can verify that name in the path and name in the body are identical.
type CreateRoleRequest struct {
	Name                 string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Role                 *storage.Role `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *CreateRoleRequest) Reset()         { *m = CreateRoleRequest{} }
func (m *CreateRoleRequest) String() string { return proto.CompactTextString(m) }
func (*CreateRoleRequest) ProtoMessage()    {}
func (*CreateRoleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2751be16bbd500c, []int{6}
}
func (m *CreateRoleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateRoleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateRoleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateRoleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRoleRequest.Merge(m, src)
}
func (m *CreateRoleRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateRoleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRoleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRoleRequest proto.InternalMessageInfo

func (m *CreateRoleRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateRoleRequest) GetRole() *storage.Role {
	if m != nil {
		return m.Role
	}
	return nil
}

func (m *CreateRoleRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *CreateRoleRequest) Clone() *CreateRoleRequest {
	if m == nil {
		return nil
	}
	cloned := new(CreateRoleRequest)
	*cloned = *m

	cloned.Role = m.Role.Clone()
	return cloned
}

func init() {
	proto.RegisterType((*GetRolesResponse)(nil), "v1.GetRolesResponse")
	proto.RegisterType((*GetPermissionsResponse)(nil), "v1.GetPermissionsResponse")
	proto.RegisterMapType((map[string]storage.Access)(nil), "v1.GetPermissionsResponse.ResourceToAccessEntry")
	proto.RegisterType((*GetResourcesResponse)(nil), "v1.GetResourcesResponse")
	proto.RegisterType((*ListPermissionSetsResponse)(nil), "v1.ListPermissionSetsResponse")
	proto.RegisterType((*ListSimpleAccessScopesResponse)(nil), "v1.ListSimpleAccessScopesResponse")
	proto.RegisterType((*ComputeEffectiveAccessScopeRequest)(nil), "v1.ComputeEffectiveAccessScopeRequest")
	proto.RegisterType((*ComputeEffectiveAccessScopeRequest_Payload)(nil), "v1.ComputeEffectiveAccessScopeRequest.Payload")
	proto.RegisterType((*CreateRoleRequest)(nil), "v1.CreateRoleRequest")
}

func init() { proto.RegisterFile("api/v1/role_service.proto", fileDescriptor_f2751be16bbd500c) }

var fileDescriptor_f2751be16bbd500c = []byte{
	// 1004 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xcb, 0x6e, 0x23, 0x45,
	0x14, 0x4d, 0x3b, 0x99, 0x99, 0xf8, 0x3a, 0x8f, 0x4e, 0x25, 0x76, 0x9c, 0x4e, 0xe2, 0xf1, 0xd4,
	0x88, 0x51, 0x94, 0x45, 0x1b, 0x1b, 0x10, 0x28, 0x0b, 0xd0, 0xe4, 0xa1, 0x01, 0x0b, 0x90, 0x69,
	0x07, 0x09, 0x18, 0x05, 0xab, 0xa7, 0x53, 0x13, 0xb5, 0xc6, 0x76, 0x35, 0x5d, 0x65, 0x0b, 0x0b,
	0xcd, 0x06, 0x89, 0x2f, 0x60, 0x83, 0xc4, 0x8e, 0xaf, 0x61, 0x89, 0xc4, 0x8e, 0x15, 0x0a, 0x7c,
	0x08, 0xaa, 0x47, 0xb7, 0xcb, 0x8f, 0xf6, 0x84, 0x5d, 0xbb, 0xaa, 0xce, 0x39, 0xf7, 0x9e, 0x5b,
	0xf7, 0x96, 0x61, 0xcf, 0x8f, 0xc2, 0xda, 0xb0, 0x5e, 0x8b, 0x69, 0x97, 0x74, 0x18, 0x89, 0x87,
	0x61, 0x40, 0xdc, 0x28, 0xa6, 0x9c, 0xa2, 0xdc, 0xb0, 0xee, 0x1c, 0xdc, 0x50, 0x7a, 0xd3, 0x25,
	0x35, 0x71, 0xca, 0xef, 0xf7, 0x29, 0xf7, 0x79, 0x48, 0xfb, 0x4c, 0x9d, 0x70, 0xb6, 0x35, 0x38,
	0xa0, 0xbd, 0x1e, 0xed, 0xeb, 0x45, 0xa4, 0x17, 0x49, 0x2f, 0xe2, 0xa3, 0x64, 0x8d, 0x71, 0x1a,
	0xfb, 0x37, 0x44, 0xca, 0xe8, 0xb5, 0xad, 0x64, 0x8d, 0xf9, 0x81, 0x5a, 0xc2, 0xef, 0x83, 0xfd,
	0x8c, 0x70, 0x8f, 0x76, 0x09, 0xf3, 0x08, 0x8b, 0x68, 0x9f, 0x11, 0xf4, 0x18, 0xee, 0x09, 0x10,
	0x2b, 0x5b, 0xd5, 0xe5, 0xa3, 0x42, 0x63, 0xdd, 0xd5, 0x30, 0x57, 0x1c, 0xf3, 0xd4, 0x1e, 0xfe,
	0xcb, 0x82, 0xd2, 0x33, 0xc2, 0x5b, 0x24, 0xee, 0x85, 0x8c, 0x89, 0x08, 0x53, 0xfc, 0xb7, 0x80,
	0x62, 0xc2, 0xe8, 0x20, 0x0e, 0x48, 0x87, 0xd3, 0x8e, 0x1f, 0x04, 0x84, 0xb1, 0xf2, 0xb2, 0x24,
	0x7b, 0xdb, 0x1d, 0xd6, 0xdd, 0xf9, 0x38, 0xd7, 0xd3, 0xa0, 0x4b, 0xfa, 0x54, 0x42, 0x2e, 0xfa,
	0x3c, 0x1e, 0x79, 0x76, 0x3c, 0xb5, 0xec, 0x5c, 0x42, 0x71, 0xee, 0x51, 0x64, 0xc3, 0xf2, 0x2b,
	0x32, 0x2a, 0x5b, 0x55, 0xeb, 0x28, 0xef, 0x89, 0x4f, 0xf4, 0x16, 0xdc, 0x1b, 0xfa, 0xdd, 0x01,
	0x29, 0xe7, 0xaa, 0xd6, 0xd1, 0x46, 0x63, 0x33, 0x4d, 0x45, 0xc1, 0x3c, 0xb5, 0x7b, 0x92, 0xfb,
	0xc0, 0x6a, 0xae, 0xac, 0x5a, 0x76, 0xae, 0xb9, 0xb2, 0x9a, 0xb3, 0x97, 0xf1, 0xbb, 0xb0, 0x23,
	0x5c, 0xd1, 0x22, 0xe3, 0xcc, 0x0e, 0x20, 0x9f, 0x44, 0xa3, 0xdc, 0xc9, 0x7b, 0xe3, 0x05, 0x7c,
	0x05, 0xce, 0xa7, 0x21, 0x33, 0x52, 0x6b, 0x13, 0x3e, 0xc6, 0x7e, 0x04, 0x9b, 0x51, 0xba, 0xd3,
	0x61, 0x84, 0x27, 0xfe, 0x96, 0xd2, 0xa0, 0x26, 0x90, 0xde, 0x46, 0x34, 0x41, 0x84, 0x7d, 0xa8,
	0x08, 0xfa, 0x76, 0xd8, 0x8b, 0xba, 0x44, 0xc5, 0xdf, 0x0e, 0x68, 0x44, 0x4c, 0x89, 0x75, 0x65,
	0x76, 0x87, 0xc9, 0x0d, 0x2d, 0xe0, 0xa4, 0x02, 0x33, 0x58, 0x6f, 0xcd, 0x37, 0x88, 0xf0, 0x6f,
	0x39, 0xc0, 0x67, 0xb4, 0x17, 0x0d, 0x38, 0xb9, 0x78, 0xf9, 0x92, 0x04, 0x3c, 0x1c, 0x4e, 0x9c,
	0x26, 0xdf, 0x0d, 0x08, 0xe3, 0xa8, 0x09, 0xf7, 0xaf, 0x09, 0xf7, 0xc3, 0xae, 0xb4, 0x7a, 0xa3,
	0xd1, 0x48, 0x05, 0xde, 0x0c, 0x76, 0xcf, 0x25, 0xd2, 0xd3, 0x0c, 0xe8, 0x0b, 0x58, 0x33, 0x63,
	0x96, 0x85, 0x2a, 0x34, 0x5c, 0x71, 0x4d, 0xee, 0x40, 0xd6, 0xf2, 0x47, 0x5d, 0xea, 0x5f, 0x7b,
	0x05, 0x23, 0x0d, 0xe7, 0x0a, 0x1e, 0xe8, 0x75, 0x74, 0x01, 0x6b, 0x4c, 0xe6, 0xdc, 0x89, 0x07,
	0xea, 0x46, 0x0b, 0xf6, 0x6a, 0xb6, 0x21, 0xae, 0x27, 0xce, 0x7d, 0xbc, 0xe4, 0x15, 0x14, 0x4e,
	0xfe, 0x3c, 0x2d, 0x40, 0x5e, 0xe2, 0x3b, 0x34, 0xe2, 0xb8, 0x09, 0x5b, 0x67, 0x31, 0xf1, 0x39,
	0x91, 0xed, 0xa0, 0x2d, 0x41, 0xb0, 0xd2, 0xf7, 0x7b, 0x44, 0xdf, 0x3d, 0xf9, 0x8d, 0x1e, 0xc1,
	0x8a, 0xe8, 0x15, 0x9d, 0xd2, 0x54, 0x1b, 0xc9, 0xad, 0xc6, 0x4f, 0xeb, 0x50, 0x10, 0x3f, 0xdb,
	0x6a, 0x0c, 0xa0, 0x0f, 0x61, 0x35, 0x69, 0x47, 0x94, 0x17, 0x1e, 0x5c, 0x88, 0x96, 0x76, 0x76,
	0x74, 0xd7, 0x4c, 0xf4, 0x29, 0xde, 0xfa, 0xf1, 0xcf, 0x7f, 0x7f, 0xce, 0x15, 0x50, 0x3e, 0x99,
	0x26, 0x0c, 0x9d, 0xc2, 0x03, 0x7d, 0x0c, 0xd9, 0x02, 0x93, 0x5c, 0xe1, 0xd3, 0xd1, 0x27, 0xe7,
	0xce, 0x64, 0x04, 0xb8, 0x24, 0xe1, 0x36, 0xda, 0x48, 0xe1, 0xb5, 0x1f, 0xc2, 0xeb, 0xd7, 0xe8,
	0x52, 0x8e, 0x84, 0xcf, 0x46, 0x46, 0x8b, 0x9a, 0xb1, 0x38, 0xd9, 0x1d, 0x8c, 0xf7, 0x24, 0xe5,
	0x36, 0xda, 0x12, 0x94, 0xbd, 0x51, 0x64, 0x30, 0x7c, 0x0e, 0x30, 0x76, 0x0d, 0x15, 0x65, 0x7d,
	0xa7, 0x5d, 0x74, 0xc6, 0x32, 0xb8, 0x22, 0xa9, 0xca, 0xd8, 0x36, 0xa2, 0x13, 0xae, 0xbe, 0x3e,
	0x91, 0xce, 0xa1, 0x33, 0x80, 0x2f, 0xa3, 0xeb, 0x84, 0x6f, 0x32, 0x35, 0x93, 0x67, 0x5f, 0xf2,
	0x14, 0x9d, 0x59, 0x1e, 0xeb, 0x18, 0x3d, 0x05, 0x38, 0x27, 0x5d, 0xa2, 0x49, 0x66, 0x1d, 0x33,
	0x78, 0xb4, 0x5b, 0xc7, 0xd3, 0x6e, 0x35, 0x61, 0xcd, 0x1c, 0x15, 0xa6, 0x53, 0xe5, 0xa4, 0x6a,
	0xd3, 0x73, 0x04, 0x17, 0x25, 0xd9, 0x26, 0x5a, 0x97, 0x64, 0x29, 0xf6, 0x4a, 0x3a, 0x3f, 0x31,
	0x05, 0xe6, 0x04, 0x95, 0x31, 0x2f, 0xf0, 0x43, 0x49, 0xba, 0x87, 0x76, 0x05, 0xa9, 0x61, 0x3d,
	0xe1, 0x3a, 0xd4, 0xe7, 0x80, 0x66, 0xe7, 0x93, 0x19, 0x70, 0x45, 0x7c, 0x66, 0x8f, 0x30, 0xec,
	0x48, 0x85, 0x1d, 0x84, 0x66, 0x15, 0xd0, 0x0b, 0xd8, 0x6a, 0xd1, 0x29, 0x24, 0xca, 0x08, 0x35,
	0x33, 0x85, 0x43, 0x29, 0xb0, 0x8b, 0xe7, 0x08, 0x88, 0x72, 0x7d, 0x0d, 0x76, 0x6b, 0x70, 0x47,
	0x09, 0xa3, 0x74, 0x58, 0xb2, 0x1e, 0x38, 0x59, 0xc6, 0x08, 0xea, 0x36, 0x6c, 0xab, 0x9b, 0xf0,
	0x26, 0xf7, 0x0d, 0x5e, 0x6d, 0xf8, 0x71, 0xa6, 0xe1, 0xa1, 0x7c, 0x46, 0x66, 0x66, 0xcc, 0x1c,
	0xd6, 0x05, 0x23, 0x1a, 0x3f, 0x96, 0x32, 0x87, 0x68, 0x5f, 0xc8, 0xa8, 0xa9, 0xa4, 0xa6, 0x9d,
	0x1a, 0xf2, 0x4a, 0xea, 0x06, 0x4a, 0xf3, 0x1f, 0x07, 0xb3, 0xbe, 0x38, 0xa9, 0x6f, 0xf6, 0x1b,
	0x92, 0xf4, 0x1d, 0x2a, 0xcd, 0x57, 0x43, 0x31, 0x14, 0x45, 0x9d, 0x67, 0x93, 0x5a, 0x90, 0xc2,
	0xc2, 0xf4, 0x1e, 0x49, 0xc1, 0x7d, 0x9c, 0x21, 0x28, 0x8a, 0x43, 0x60, 0xa7, 0x35, 0xf8, 0x9f,
	0x92, 0x46, 0x9d, 0x9e, 0x48, 0x85, 0xaa, 0xb3, 0xc8, 0x40, 0x21, 0xf3, 0x1c, 0x76, 0xd5, 0x1d,
	0xb8, 0x4b, 0xc5, 0x0c, 0x7e, 0x5d, 0xa0, 0xe3, 0x85, 0x05, 0xfa, 0xd5, 0x82, 0xfd, 0x05, 0x0f,
	0x1a, 0x7a, 0x72, 0xb7, 0x17, 0xcf, 0x39, 0x4c, 0x73, 0x9e, 0x77, 0x0a, 0xbf, 0x27, 0x63, 0xa9,
	0xe1, 0x87, 0xfa, 0x4f, 0xa2, 0xa0, 0x23, 0xc9, 0x41, 0x23, 0xaa, 0x93, 0x89, 0x57, 0xf7, 0xd4,
	0xfd, 0xfd, 0xb6, 0x62, 0xfd, 0x71, 0x5b, 0xb1, 0xfe, 0xbe, 0xad, 0x58, 0xbf, 0xfc, 0x53, 0x59,
	0x82, 0x72, 0x48, 0x5d, 0xc6, 0xfd, 0xe0, 0x55, 0x4c, 0xbf, 0x57, 0xff, 0x15, 0x5d, 0x3f, 0x0a,
	0xdd, 0x61, 0xfd, 0x9b, 0xdc, 0xb0, 0xfe, 0xd5, 0xd2, 0x8b, 0xfb, 0x72, 0xed, 0x9d, 0xff, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x57, 0x3d, 0xff, 0x79, 0xce, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RoleServiceClient is the client API for RoleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConnInterface.NewStream.
type RoleServiceClient interface {
	GetRoles(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetRolesResponse, error)
	GetRole(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*storage.Role, error)
	GetMyPermissions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetPermissionsResponse, error)
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*Empty, error)
	UpdateRole(ctx context.Context, in *storage.Role, opts ...grpc.CallOption) (*Empty, error)
	DeleteRole(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error)
	GetResources(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetResourcesResponse, error)
	GetPermissionSet(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*storage.PermissionSet, error)
	ListPermissionSets(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListPermissionSetsResponse, error)
	// PostPermissionSet
	//
	// PermissionSet.id is disallowed in request and set in response.
	PostPermissionSet(ctx context.Context, in *storage.PermissionSet, opts ...grpc.CallOption) (*storage.PermissionSet, error)
	PutPermissionSet(ctx context.Context, in *storage.PermissionSet, opts ...grpc.CallOption) (*Empty, error)
	DeletePermissionSet(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error)
	GetSimpleAccessScope(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*storage.SimpleAccessScope, error)
	ListSimpleAccessScopes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListSimpleAccessScopesResponse, error)
	// PostSimpleAccessScope
	//
	// SimpleAccessScope.id is disallowed in request and set in response.
	PostSimpleAccessScope(ctx context.Context, in *storage.SimpleAccessScope, opts ...grpc.CallOption) (*storage.SimpleAccessScope, error)
	PutSimpleAccessScope(ctx context.Context, in *storage.SimpleAccessScope, opts ...grpc.CallOption) (*Empty, error)
	DeleteSimpleAccessScope(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error)
	// ComputeEffectiveAccessScope
	//
	// Returns effective access scope based on the rules in the request. Does
	// not persist anything; not idempotent due to possible changes to clusters
	// and namespaces. POST is chosen due to potentially large payload.
	//
	// There are advantages in both keeping the response slim and detailed. If
	// only IDs of selected clusters and namespaces are included, response
	// latency and processing time are lower but the caller shall overlay the
	// response with its view of the world which is susceptible to consistency
	// issues. Listing all clusters and namespaces with related metadata is
	// convenient for the caller but bloat the message with secondary data.
	//
	// We let the caller decide what level of detail they would like to have:
	//
	//   * Minimal, when only roots of included subtrees are listed by their
	//     IDs. Clusters can be either INCLUDED (its namespaces are included but
	//     are not listed) or PARTIAL (at least one namespace is explicitly
	//     included). Namespaces can only be INCLUDED.
	//
	//   * Standard [default], when all known clusters and namespaces are listed
	//     with their IDs and names. Clusters can be INCLUDED (all its
	//     namespaces are explicitly listed as INCLUDED), PARTIAL (all its
	//     namespaces are explicitly listed, some as INCLUDED and some as
	//     EXCLUDED), and EXCLUDED (all its namespaces are explicitly listed as
	//     EXCLUDED). Namespaces can be either INCLUDED or EXCLUDED.
	//
	//   * High, when every cluster and namespace is augmented with metadata.
	ComputeEffectiveAccessScope(ctx context.Context, in *ComputeEffectiveAccessScopeRequest, opts ...grpc.CallOption) (*storage.EffectiveAccessScope, error)
}

type roleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleServiceClient(cc grpc.ClientConnInterface) RoleServiceClient {
	return &roleServiceClient{cc}
}

func (c *roleServiceClient) GetRoles(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetRolesResponse, error) {
	out := new(GetRolesResponse)
	err := c.cc.Invoke(ctx, "/v1.RoleService/GetRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) GetRole(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*storage.Role, error) {
	out := new(storage.Role)
	err := c.cc.Invoke(ctx, "/v1.RoleService/GetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) GetMyPermissions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetPermissionsResponse, error) {
	out := new(GetPermissionsResponse)
	err := c.cc.Invoke(ctx, "/v1.RoleService/GetMyPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v1.RoleService/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) UpdateRole(ctx context.Context, in *storage.Role, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v1.RoleService/UpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) DeleteRole(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v1.RoleService/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) GetResources(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetResourcesResponse, error) {
	out := new(GetResourcesResponse)
	err := c.cc.Invoke(ctx, "/v1.RoleService/GetResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) GetPermissionSet(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*storage.PermissionSet, error) {
	out := new(storage.PermissionSet)
	err := c.cc.Invoke(ctx, "/v1.RoleService/GetPermissionSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) ListPermissionSets(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListPermissionSetsResponse, error) {
	out := new(ListPermissionSetsResponse)
	err := c.cc.Invoke(ctx, "/v1.RoleService/ListPermissionSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) PostPermissionSet(ctx context.Context, in *storage.PermissionSet, opts ...grpc.CallOption) (*storage.PermissionSet, error) {
	out := new(storage.PermissionSet)
	err := c.cc.Invoke(ctx, "/v1.RoleService/PostPermissionSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) PutPermissionSet(ctx context.Context, in *storage.PermissionSet, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v1.RoleService/PutPermissionSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) DeletePermissionSet(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v1.RoleService/DeletePermissionSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) GetSimpleAccessScope(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*storage.SimpleAccessScope, error) {
	out := new(storage.SimpleAccessScope)
	err := c.cc.Invoke(ctx, "/v1.RoleService/GetSimpleAccessScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) ListSimpleAccessScopes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListSimpleAccessScopesResponse, error) {
	out := new(ListSimpleAccessScopesResponse)
	err := c.cc.Invoke(ctx, "/v1.RoleService/ListSimpleAccessScopes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) PostSimpleAccessScope(ctx context.Context, in *storage.SimpleAccessScope, opts ...grpc.CallOption) (*storage.SimpleAccessScope, error) {
	out := new(storage.SimpleAccessScope)
	err := c.cc.Invoke(ctx, "/v1.RoleService/PostSimpleAccessScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) PutSimpleAccessScope(ctx context.Context, in *storage.SimpleAccessScope, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v1.RoleService/PutSimpleAccessScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) DeleteSimpleAccessScope(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v1.RoleService/DeleteSimpleAccessScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) ComputeEffectiveAccessScope(ctx context.Context, in *ComputeEffectiveAccessScopeRequest, opts ...grpc.CallOption) (*storage.EffectiveAccessScope, error) {
	out := new(storage.EffectiveAccessScope)
	err := c.cc.Invoke(ctx, "/v1.RoleService/ComputeEffectiveAccessScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleServiceServer is the server API for RoleService service.
type RoleServiceServer interface {
	GetRoles(context.Context, *Empty) (*GetRolesResponse, error)
	GetRole(context.Context, *ResourceByID) (*storage.Role, error)
	GetMyPermissions(context.Context, *Empty) (*GetPermissionsResponse, error)
	CreateRole(context.Context, *CreateRoleRequest) (*Empty, error)
	UpdateRole(context.Context, *storage.Role) (*Empty, error)
	DeleteRole(context.Context, *ResourceByID) (*Empty, error)
	GetResources(context.Context, *Empty) (*GetResourcesResponse, error)
	GetPermissionSet(context.Context, *ResourceByID) (*storage.PermissionSet, error)
	ListPermissionSets(context.Context, *Empty) (*ListPermissionSetsResponse, error)
	// PostPermissionSet
	//
	// PermissionSet.id is disallowed in request and set in response.
	PostPermissionSet(context.Context, *storage.PermissionSet) (*storage.PermissionSet, error)
	PutPermissionSet(context.Context, *storage.PermissionSet) (*Empty, error)
	DeletePermissionSet(context.Context, *ResourceByID) (*Empty, error)
	GetSimpleAccessScope(context.Context, *ResourceByID) (*storage.SimpleAccessScope, error)
	ListSimpleAccessScopes(context.Context, *Empty) (*ListSimpleAccessScopesResponse, error)
	// PostSimpleAccessScope
	//
	// SimpleAccessScope.id is disallowed in request and set in response.
	PostSimpleAccessScope(context.Context, *storage.SimpleAccessScope) (*storage.SimpleAccessScope, error)
	PutSimpleAccessScope(context.Context, *storage.SimpleAccessScope) (*Empty, error)
	DeleteSimpleAccessScope(context.Context, *ResourceByID) (*Empty, error)
	// ComputeEffectiveAccessScope
	//
	// Returns effective access scope based on the rules in the request. Does
	// not persist anything; not idempotent due to possible changes to clusters
	// and namespaces. POST is chosen due to potentially large payload.
	//
	// There are advantages in both keeping the response slim and detailed. If
	// only IDs of selected clusters and namespaces are included, response
	// latency and processing time are lower but the caller shall overlay the
	// response with its view of the world which is susceptible to consistency
	// issues. Listing all clusters and namespaces with related metadata is
	// convenient for the caller but bloat the message with secondary data.
	//
	// We let the caller decide what level of detail they would like to have:
	//
	//   * Minimal, when only roots of included subtrees are listed by their
	//     IDs. Clusters can be either INCLUDED (its namespaces are included but
	//     are not listed) or PARTIAL (at least one namespace is explicitly
	//     included). Namespaces can only be INCLUDED.
	//
	//   * Standard [default], when all known clusters and namespaces are listed
	//     with their IDs and names. Clusters can be INCLUDED (all its
	//     namespaces are explicitly listed as INCLUDED), PARTIAL (all its
	//     namespaces are explicitly listed, some as INCLUDED and some as
	//     EXCLUDED), and EXCLUDED (all its namespaces are explicitly listed as
	//     EXCLUDED). Namespaces can be either INCLUDED or EXCLUDED.
	//
	//   * High, when every cluster and namespace is augmented with metadata.
	ComputeEffectiveAccessScope(context.Context, *ComputeEffectiveAccessScopeRequest) (*storage.EffectiveAccessScope, error)
}

// UnimplementedRoleServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRoleServiceServer struct {
}

func (*UnimplementedRoleServiceServer) GetRoles(ctx context.Context, req *Empty) (*GetRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoles not implemented")
}
func (*UnimplementedRoleServiceServer) GetRole(ctx context.Context, req *ResourceByID) (*storage.Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (*UnimplementedRoleServiceServer) GetMyPermissions(ctx context.Context, req *Empty) (*GetPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyPermissions not implemented")
}
func (*UnimplementedRoleServiceServer) CreateRole(ctx context.Context, req *CreateRoleRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (*UnimplementedRoleServiceServer) UpdateRole(ctx context.Context, req *storage.Role) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (*UnimplementedRoleServiceServer) DeleteRole(ctx context.Context, req *ResourceByID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (*UnimplementedRoleServiceServer) GetResources(ctx context.Context, req *Empty) (*GetResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResources not implemented")
}
func (*UnimplementedRoleServiceServer) GetPermissionSet(ctx context.Context, req *ResourceByID) (*storage.PermissionSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissionSet not implemented")
}
func (*UnimplementedRoleServiceServer) ListPermissionSets(ctx context.Context, req *Empty) (*ListPermissionSetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPermissionSets not implemented")
}
func (*UnimplementedRoleServiceServer) PostPermissionSet(ctx context.Context, req *storage.PermissionSet) (*storage.PermissionSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostPermissionSet not implemented")
}
func (*UnimplementedRoleServiceServer) PutPermissionSet(ctx context.Context, req *storage.PermissionSet) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutPermissionSet not implemented")
}
func (*UnimplementedRoleServiceServer) DeletePermissionSet(ctx context.Context, req *ResourceByID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermissionSet not implemented")
}
func (*UnimplementedRoleServiceServer) GetSimpleAccessScope(ctx context.Context, req *ResourceByID) (*storage.SimpleAccessScope, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSimpleAccessScope not implemented")
}
func (*UnimplementedRoleServiceServer) ListSimpleAccessScopes(ctx context.Context, req *Empty) (*ListSimpleAccessScopesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSimpleAccessScopes not implemented")
}
func (*UnimplementedRoleServiceServer) PostSimpleAccessScope(ctx context.Context, req *storage.SimpleAccessScope) (*storage.SimpleAccessScope, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostSimpleAccessScope not implemented")
}
func (*UnimplementedRoleServiceServer) PutSimpleAccessScope(ctx context.Context, req *storage.SimpleAccessScope) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutSimpleAccessScope not implemented")
}
func (*UnimplementedRoleServiceServer) DeleteSimpleAccessScope(ctx context.Context, req *ResourceByID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSimpleAccessScope not implemented")
}
func (*UnimplementedRoleServiceServer) ComputeEffectiveAccessScope(ctx context.Context, req *ComputeEffectiveAccessScopeRequest) (*storage.EffectiveAccessScope, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComputeEffectiveAccessScope not implemented")
}

func RegisterRoleServiceServer(s *grpc.Server, srv RoleServiceServer) {
	s.RegisterService(&_RoleService_serviceDesc, srv)
}

func _RoleService_GetRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).GetRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RoleService/GetRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).GetRoles(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RoleService/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).GetRole(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_GetMyPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).GetMyPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RoleService/GetMyPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).GetMyPermissions(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RoleService/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storage.Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RoleService/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).UpdateRole(ctx, req.(*storage.Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RoleService/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).DeleteRole(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_GetResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).GetResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RoleService/GetResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).GetResources(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_GetPermissionSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).GetPermissionSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RoleService/GetPermissionSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).GetPermissionSet(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_ListPermissionSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).ListPermissionSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RoleService/ListPermissionSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).ListPermissionSets(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_PostPermissionSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storage.PermissionSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).PostPermissionSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RoleService/PostPermissionSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).PostPermissionSet(ctx, req.(*storage.PermissionSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_PutPermissionSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storage.PermissionSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).PutPermissionSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RoleService/PutPermissionSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).PutPermissionSet(ctx, req.(*storage.PermissionSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_DeletePermissionSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).DeletePermissionSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RoleService/DeletePermissionSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).DeletePermissionSet(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_GetSimpleAccessScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).GetSimpleAccessScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RoleService/GetSimpleAccessScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).GetSimpleAccessScope(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_ListSimpleAccessScopes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).ListSimpleAccessScopes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RoleService/ListSimpleAccessScopes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).ListSimpleAccessScopes(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_PostSimpleAccessScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storage.SimpleAccessScope)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).PostSimpleAccessScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RoleService/PostSimpleAccessScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).PostSimpleAccessScope(ctx, req.(*storage.SimpleAccessScope))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_PutSimpleAccessScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storage.SimpleAccessScope)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).PutSimpleAccessScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RoleService/PutSimpleAccessScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).PutSimpleAccessScope(ctx, req.(*storage.SimpleAccessScope))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_DeleteSimpleAccessScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).DeleteSimpleAccessScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RoleService/DeleteSimpleAccessScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).DeleteSimpleAccessScope(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_ComputeEffectiveAccessScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeEffectiveAccessScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).ComputeEffectiveAccessScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RoleService/ComputeEffectiveAccessScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).ComputeEffectiveAccessScope(ctx, req.(*ComputeEffectiveAccessScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RoleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.RoleService",
	HandlerType: (*RoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRoles",
			Handler:    _RoleService_GetRoles_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _RoleService_GetRole_Handler,
		},
		{
			MethodName: "GetMyPermissions",
			Handler:    _RoleService_GetMyPermissions_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _RoleService_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _RoleService_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _RoleService_DeleteRole_Handler,
		},
		{
			MethodName: "GetResources",
			Handler:    _RoleService_GetResources_Handler,
		},
		{
			MethodName: "GetPermissionSet",
			Handler:    _RoleService_GetPermissionSet_Handler,
		},
		{
			MethodName: "ListPermissionSets",
			Handler:    _RoleService_ListPermissionSets_Handler,
		},
		{
			MethodName: "PostPermissionSet",
			Handler:    _RoleService_PostPermissionSet_Handler,
		},
		{
			MethodName: "PutPermissionSet",
			Handler:    _RoleService_PutPermissionSet_Handler,
		},
		{
			MethodName: "DeletePermissionSet",
			Handler:    _RoleService_DeletePermissionSet_Handler,
		},
		{
			MethodName: "GetSimpleAccessScope",
			Handler:    _RoleService_GetSimpleAccessScope_Handler,
		},
		{
			MethodName: "ListSimpleAccessScopes",
			Handler:    _RoleService_ListSimpleAccessScopes_Handler,
		},
		{
			MethodName: "PostSimpleAccessScope",
			Handler:    _RoleService_PostSimpleAccessScope_Handler,
		},
		{
			MethodName: "PutSimpleAccessScope",
			Handler:    _RoleService_PutSimpleAccessScope_Handler,
		},
		{
			MethodName: "DeleteSimpleAccessScope",
			Handler:    _RoleService_DeleteSimpleAccessScope_Handler,
		},
		{
			MethodName: "ComputeEffectiveAccessScope",
			Handler:    _RoleService_ComputeEffectiveAccessScope_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/role_service.proto",
}

func (m *GetRolesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRolesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRolesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Roles) > 0 {
		for iNdEx := len(m.Roles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Roles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRoleService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetPermissionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPermissionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPermissionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ResourceToAccess) > 0 {
		for k := range m.ResourceToAccess {
			v := m.ResourceToAccess[k]
			baseI := i
			i = encodeVarintRoleService(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintRoleService(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRoleService(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetResourcesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetResourcesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetResourcesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Resources) > 0 {
		for iNdEx := len(m.Resources) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Resources[iNdEx])
			copy(dAtA[i:], m.Resources[iNdEx])
			i = encodeVarintRoleService(dAtA, i, uint64(len(m.Resources[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListPermissionSetsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListPermissionSetsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListPermissionSetsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PermissionSets) > 0 {
		for iNdEx := len(m.PermissionSets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PermissionSets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRoleService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListSimpleAccessScopesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListSimpleAccessScopesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListSimpleAccessScopesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AccessScopes) > 0 {
		for iNdEx := len(m.AccessScopes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccessScopes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRoleService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ComputeEffectiveAccessScopeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComputeEffectiveAccessScopeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComputeEffectiveAccessScopeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AccessScope != nil {
		{
			size, err := m.AccessScope.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRoleService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Detail != 0 {
		i = encodeVarintRoleService(dAtA, i, uint64(m.Detail))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ComputeEffectiveAccessScopeRequest_Payload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComputeEffectiveAccessScopeRequest_Payload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComputeEffectiveAccessScopeRequest_Payload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RulesOpt != nil {
		{
			size := m.RulesOpt.Size()
			i -= size
			if _, err := m.RulesOpt.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ComputeEffectiveAccessScopeRequest_Payload_SimpleRules) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComputeEffectiveAccessScopeRequest_Payload_SimpleRules) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SimpleRules != nil {
		{
			size, err := m.SimpleRules.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRoleService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *CreateRoleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRoleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateRoleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Role != nil {
		{
			size, err := m.Role.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRoleService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRoleService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRoleService(dAtA []byte, offset int, v uint64) int {
	offset -= sovRoleService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetRolesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Roles) > 0 {
		for _, e := range m.Roles {
			l = e.Size()
			n += 1 + l + sovRoleService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPermissionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ResourceToAccess) > 0 {
		for k, v := range m.ResourceToAccess {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovRoleService(uint64(len(k))) + 1 + sovRoleService(uint64(v))
			n += mapEntrySize + 1 + sovRoleService(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetResourcesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Resources) > 0 {
		for _, s := range m.Resources {
			l = len(s)
			n += 1 + l + sovRoleService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListPermissionSetsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PermissionSets) > 0 {
		for _, e := range m.PermissionSets {
			l = e.Size()
			n += 1 + l + sovRoleService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListSimpleAccessScopesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AccessScopes) > 0 {
		for _, e := range m.AccessScopes {
			l = e.Size()
			n += 1 + l + sovRoleService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComputeEffectiveAccessScopeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Detail != 0 {
		n += 1 + sovRoleService(uint64(m.Detail))
	}
	if m.AccessScope != nil {
		l = m.AccessScope.Size()
		n += 1 + l + sovRoleService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComputeEffectiveAccessScopeRequest_Payload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RulesOpt != nil {
		n += m.RulesOpt.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComputeEffectiveAccessScopeRequest_Payload_SimpleRules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SimpleRules != nil {
		l = m.SimpleRules.Size()
		n += 1 + l + sovRoleService(uint64(l))
	}
	return n
}
func (m *CreateRoleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRoleService(uint64(l))
	}
	if m.Role != nil {
		l = m.Role.Size()
		n += 1 + l + sovRoleService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRoleService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRoleService(x uint64) (n int) {
	return sovRoleService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetRolesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoleService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRolesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRolesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoleService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoleService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoleService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roles = append(m.Roles, &storage.Role{})
			if err := m.Roles[len(m.Roles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoleService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoleService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPermissionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoleService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPermissionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPermissionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceToAccess", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoleService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoleService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoleService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResourceToAccess == nil {
				m.ResourceToAccess = make(map[string]storage.Access)
			}
			var mapkey string
			var mapvalue storage.Access
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRoleService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRoleService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRoleService
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRoleService
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRoleService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= storage.Access(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRoleService(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthRoleService
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ResourceToAccess[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoleService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoleService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetResourcesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoleService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetResourcesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetResourcesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoleService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoleService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoleService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resources = append(m.Resources, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoleService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoleService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListPermissionSetsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoleService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListPermissionSetsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListPermissionSetsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermissionSets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoleService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoleService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoleService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PermissionSets = append(m.PermissionSets, &storage.PermissionSet{})
			if err := m.PermissionSets[len(m.PermissionSets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoleService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoleService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListSimpleAccessScopesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoleService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListSimpleAccessScopesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListSimpleAccessScopesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessScopes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoleService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoleService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoleService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessScopes = append(m.AccessScopes, &storage.SimpleAccessScope{})
			if err := m.AccessScopes[len(m.AccessScopes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoleService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoleService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComputeEffectiveAccessScopeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoleService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComputeEffectiveAccessScopeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComputeEffectiveAccessScopeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			m.Detail = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoleService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Detail |= storage.ComputeEffectiveAccessScopeRequest_Detail(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessScope", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoleService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoleService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoleService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccessScope == nil {
				m.AccessScope = &ComputeEffectiveAccessScopeRequest_Payload{}
			}
			if err := m.AccessScope.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoleService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoleService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComputeEffectiveAccessScopeRequest_Payload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoleService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Payload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Payload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SimpleRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoleService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoleService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoleService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &storage.SimpleAccessScope_Rules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RulesOpt = &ComputeEffectiveAccessScopeRequest_Payload_SimpleRules{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoleService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoleService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateRoleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoleService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRoleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRoleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoleService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoleService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoleService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoleService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoleService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoleService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Role == nil {
				m.Role = &storage.Role{}
			}
			if err := m.Role.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoleService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoleService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRoleService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRoleService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoleService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoleService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRoleService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRoleService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRoleService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRoleService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRoleService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRoleService = fmt.Errorf("proto: unexpected end of group")
)
