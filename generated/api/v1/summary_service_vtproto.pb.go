// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.3.1-0.20220817155510-0ae748fd2007
// source: api/v1/summary_service.proto

package v1

import (
	context "context"
	fmt "fmt"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (m *SummaryCountsResponse) CloneVT() *SummaryCountsResponse {
	if m == nil {
		return (*SummaryCountsResponse)(nil)
	}
	r := &SummaryCountsResponse{
		NumAlerts:      m.NumAlerts,
		NumClusters:    m.NumClusters,
		NumDeployments: m.NumDeployments,
		NumImages:      m.NumImages,
		NumSecrets:     m.NumSecrets,
		NumNodes:       m.NumNodes,
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *SummaryCountsResponse) CloneGenericVT() proto.Message {
	return m.CloneVT()
}

func (this *SummaryCountsResponse) EqualVT(that *SummaryCountsResponse) bool {
	if this == nil {
		return that == nil
	} else if that == nil {
		return false
	}
	if this.NumAlerts != that.NumAlerts {
		return false
	}
	if this.NumClusters != that.NumClusters {
		return false
	}
	if this.NumDeployments != that.NumDeployments {
		return false
	}
	if this.NumImages != that.NumImages {
		return false
	}
	if this.NumSecrets != that.NumSecrets {
		return false
	}
	if this.NumNodes != that.NumNodes {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SummaryServiceClient is the client API for SummaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SummaryServiceClient interface {
	GetSummaryCounts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SummaryCountsResponse, error)
}

type summaryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSummaryServiceClient(cc grpc.ClientConnInterface) SummaryServiceClient {
	return &summaryServiceClient{cc}
}

func (c *summaryServiceClient) GetSummaryCounts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SummaryCountsResponse, error) {
	out := new(SummaryCountsResponse)
	err := c.cc.Invoke(ctx, "/v1.SummaryService/GetSummaryCounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SummaryServiceServer is the server API for SummaryService service.
// All implementations must embed UnimplementedSummaryServiceServer
// for forward compatibility
type SummaryServiceServer interface {
	GetSummaryCounts(context.Context, *Empty) (*SummaryCountsResponse, error)
	mustEmbedUnimplementedSummaryServiceServer()
}

// UnimplementedSummaryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSummaryServiceServer struct {
}

func (UnimplementedSummaryServiceServer) GetSummaryCounts(context.Context, *Empty) (*SummaryCountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSummaryCounts not implemented")
}
func (UnimplementedSummaryServiceServer) mustEmbedUnimplementedSummaryServiceServer() {}

// UnsafeSummaryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SummaryServiceServer will
// result in compilation errors.
type UnsafeSummaryServiceServer interface {
	mustEmbedUnimplementedSummaryServiceServer()
}

func RegisterSummaryServiceServer(s grpc.ServiceRegistrar, srv SummaryServiceServer) {
	s.RegisterService(&SummaryService_ServiceDesc, srv)
}

func _SummaryService_GetSummaryCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummaryServiceServer).GetSummaryCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SummaryService/GetSummaryCounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummaryServiceServer).GetSummaryCounts(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// SummaryService_ServiceDesc is the grpc.ServiceDesc for SummaryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SummaryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.SummaryService",
	HandlerType: (*SummaryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSummaryCounts",
			Handler:    _SummaryService_GetSummaryCounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/summary_service.proto",
}

func (m *SummaryCountsResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SummaryCountsResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *SummaryCountsResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.NumNodes != 0 {
		i = encodeVarint(dAtA, i, uint64(m.NumNodes))
		i--
		dAtA[i] = 0x30
	}
	if m.NumSecrets != 0 {
		i = encodeVarint(dAtA, i, uint64(m.NumSecrets))
		i--
		dAtA[i] = 0x28
	}
	if m.NumImages != 0 {
		i = encodeVarint(dAtA, i, uint64(m.NumImages))
		i--
		dAtA[i] = 0x20
	}
	if m.NumDeployments != 0 {
		i = encodeVarint(dAtA, i, uint64(m.NumDeployments))
		i--
		dAtA[i] = 0x18
	}
	if m.NumClusters != 0 {
		i = encodeVarint(dAtA, i, uint64(m.NumClusters))
		i--
		dAtA[i] = 0x10
	}
	if m.NumAlerts != 0 {
		i = encodeVarint(dAtA, i, uint64(m.NumAlerts))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SummaryCountsResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumAlerts != 0 {
		n += 1 + sov(uint64(m.NumAlerts))
	}
	if m.NumClusters != 0 {
		n += 1 + sov(uint64(m.NumClusters))
	}
	if m.NumDeployments != 0 {
		n += 1 + sov(uint64(m.NumDeployments))
	}
	if m.NumImages != 0 {
		n += 1 + sov(uint64(m.NumImages))
	}
	if m.NumSecrets != 0 {
		n += 1 + sov(uint64(m.NumSecrets))
	}
	if m.NumNodes != 0 {
		n += 1 + sov(uint64(m.NumNodes))
	}
	n += len(m.unknownFields)
	return n
}

func (m *SummaryCountsResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SummaryCountsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SummaryCountsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumAlerts", wireType)
			}
			m.NumAlerts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumAlerts |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumClusters", wireType)
			}
			m.NumClusters = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumClusters |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDeployments", wireType)
			}
			m.NumDeployments = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumDeployments |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumImages", wireType)
			}
			m.NumImages = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumImages |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumSecrets", wireType)
			}
			m.NumSecrets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumSecrets |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumNodes", wireType)
			}
			m.NumNodes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumNodes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
