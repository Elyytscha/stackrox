// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1/debug_service.proto

package v1

import (
	context "context"
	fmt "fmt"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetLogLevelRequest struct {
	Modules              []string `protobuf:"bytes,1,rep,name=modules,proto3" json:"modules,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetLogLevelRequest) Reset()         { *m = GetLogLevelRequest{} }
func (m *GetLogLevelRequest) String() string { return proto.CompactTextString(m) }
func (*GetLogLevelRequest) ProtoMessage()    {}
func (*GetLogLevelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3778505c13ee937, []int{0}
}
func (m *GetLogLevelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLogLevelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLogLevelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLogLevelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLogLevelRequest.Merge(m, src)
}
func (m *GetLogLevelRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetLogLevelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLogLevelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetLogLevelRequest proto.InternalMessageInfo

func (m *GetLogLevelRequest) GetModules() []string {
	if m != nil {
		return m.Modules
	}
	return nil
}

func (m *GetLogLevelRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetLogLevelRequest) Clone() *GetLogLevelRequest {
	if m == nil {
		return nil
	}
	cloned := new(GetLogLevelRequest)
	*cloned = *m

	if m.Modules != nil {
		cloned.Modules = make([]string, len(m.Modules))
		copy(cloned.Modules, m.Modules)
	}
	return cloned
}

type LogLevelRequest struct {
	Level                string   `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty"`
	Modules              []string `protobuf:"bytes,2,rep,name=modules,proto3" json:"modules,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogLevelRequest) Reset()         { *m = LogLevelRequest{} }
func (m *LogLevelRequest) String() string { return proto.CompactTextString(m) }
func (*LogLevelRequest) ProtoMessage()    {}
func (*LogLevelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3778505c13ee937, []int{1}
}
func (m *LogLevelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogLevelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogLevelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogLevelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogLevelRequest.Merge(m, src)
}
func (m *LogLevelRequest) XXX_Size() int {
	return m.Size()
}
func (m *LogLevelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LogLevelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LogLevelRequest proto.InternalMessageInfo

func (m *LogLevelRequest) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *LogLevelRequest) GetModules() []string {
	if m != nil {
		return m.Modules
	}
	return nil
}

func (m *LogLevelRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *LogLevelRequest) Clone() *LogLevelRequest {
	if m == nil {
		return nil
	}
	cloned := new(LogLevelRequest)
	*cloned = *m

	if m.Modules != nil {
		cloned.Modules = make([]string, len(m.Modules))
		copy(cloned.Modules, m.Modules)
	}
	return cloned
}

type ModuleLevel struct {
	Module               string   `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	Level                string   `protobuf:"bytes,2,opt,name=level,proto3" json:"level,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ModuleLevel) Reset()         { *m = ModuleLevel{} }
func (m *ModuleLevel) String() string { return proto.CompactTextString(m) }
func (*ModuleLevel) ProtoMessage()    {}
func (*ModuleLevel) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3778505c13ee937, []int{2}
}
func (m *ModuleLevel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleLevel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleLevel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleLevel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleLevel.Merge(m, src)
}
func (m *ModuleLevel) XXX_Size() int {
	return m.Size()
}
func (m *ModuleLevel) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleLevel.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleLevel proto.InternalMessageInfo

func (m *ModuleLevel) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (m *ModuleLevel) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *ModuleLevel) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ModuleLevel) Clone() *ModuleLevel {
	if m == nil {
		return nil
	}
	cloned := new(ModuleLevel)
	*cloned = *m

	return cloned
}

type LogLevelResponse struct {
	Level                string         `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty"`
	ModuleLevels         []*ModuleLevel `protobuf:"bytes,2,rep,name=module_levels,json=moduleLevels,proto3" json:"module_levels,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *LogLevelResponse) Reset()         { *m = LogLevelResponse{} }
func (m *LogLevelResponse) String() string { return proto.CompactTextString(m) }
func (*LogLevelResponse) ProtoMessage()    {}
func (*LogLevelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3778505c13ee937, []int{3}
}
func (m *LogLevelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogLevelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogLevelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogLevelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogLevelResponse.Merge(m, src)
}
func (m *LogLevelResponse) XXX_Size() int {
	return m.Size()
}
func (m *LogLevelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LogLevelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LogLevelResponse proto.InternalMessageInfo

func (m *LogLevelResponse) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *LogLevelResponse) GetModuleLevels() []*ModuleLevel {
	if m != nil {
		return m.ModuleLevels
	}
	return nil
}

func (m *LogLevelResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *LogLevelResponse) Clone() *LogLevelResponse {
	if m == nil {
		return nil
	}
	cloned := new(LogLevelResponse)
	*cloned = *m

	if m.ModuleLevels != nil {
		cloned.ModuleLevels = make([]*ModuleLevel, len(m.ModuleLevels))
		for idx, v := range m.ModuleLevels {
			cloned.ModuleLevels[idx] = v.Clone()
		}
	}
	return cloned
}

func init() {
	proto.RegisterType((*GetLogLevelRequest)(nil), "v1.GetLogLevelRequest")
	proto.RegisterType((*LogLevelRequest)(nil), "v1.LogLevelRequest")
	proto.RegisterType((*ModuleLevel)(nil), "v1.ModuleLevel")
	proto.RegisterType((*LogLevelResponse)(nil), "v1.LogLevelResponse")
}

func init() { proto.RegisterFile("api/v1/debug_service.proto", fileDescriptor_a3778505c13ee937) }

var fileDescriptor_a3778505c13ee937 = []byte{
	// 361 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xbf, 0x4e, 0xc3, 0x30,
	0x10, 0xc6, 0xeb, 0x20, 0x8a, 0xea, 0x14, 0x15, 0x99, 0xaa, 0x44, 0x01, 0xa2, 0x2a, 0x53, 0xc5,
	0xe0, 0x28, 0x85, 0x09, 0x26, 0x10, 0x88, 0xa5, 0x2c, 0xe9, 0xc0, 0x9f, 0x81, 0x2a, 0x6d, 0x4d,
	0x14, 0x91, 0xc6, 0xa1, 0x76, 0x2c, 0x58, 0x79, 0x05, 0x16, 0x9e, 0x87, 0x89, 0x11, 0x89, 0x17,
	0x40, 0x85, 0x07, 0x41, 0x8e, 0x5b, 0x92, 0x16, 0xd8, 0xfc, 0xf9, 0xee, 0x7e, 0x77, 0xfa, 0x3e,
	0x68, 0xfa, 0x49, 0xe8, 0x08, 0xd7, 0x19, 0x92, 0x7e, 0x1a, 0xf4, 0x18, 0x19, 0x8b, 0x70, 0x40,
	0x70, 0x32, 0xa6, 0x9c, 0x22, 0x4d, 0xb8, 0xe6, 0x56, 0x40, 0x69, 0x10, 0x11, 0x47, 0xb6, 0xf9,
	0x71, 0x4c, 0xb9, 0xcf, 0x43, 0x1a, 0x33, 0xd5, 0x61, 0x6e, 0x4e, 0xab, 0x99, 0xea, 0xa7, 0x37,
	0x0e, 0x19, 0x25, 0xfc, 0x41, 0x15, 0x6d, 0x0c, 0xd1, 0x29, 0xe1, 0x1d, 0x1a, 0x74, 0x88, 0x20,
	0x91, 0x47, 0xee, 0x52, 0xc2, 0x38, 0x32, 0xe0, 0xca, 0x88, 0x0e, 0xd3, 0x88, 0x30, 0x03, 0x34,
	0x97, 0x5a, 0x15, 0x6f, 0x26, 0xed, 0x43, 0x58, 0x5b, 0x6c, 0xae, 0xc3, 0xe5, 0x48, 0x6a, 0x03,
	0x34, 0x41, 0xab, 0xe2, 0x29, 0x51, 0x44, 0x68, 0xf3, 0x88, 0x03, 0xa8, 0x9f, 0x65, 0xcf, 0x8c,
	0x82, 0x1a, 0xb0, 0xac, 0x2a, 0xd3, 0xf9, 0xa9, 0xca, 0xb1, 0x5a, 0x01, 0x6b, 0x5f, 0xc3, 0xb5,
	0x7c, 0x3f, 0x4b, 0x68, 0xcc, 0xc8, 0x3f, 0x07, 0xec, 0xc1, 0x55, 0x45, 0xea, 0x65, 0x5a, 0x9d,
	0xa1, 0xb7, 0x6b, 0x58, 0xb8, 0xb8, 0xb0, 0xdf, 0xab, 0x8e, 0x72, 0xc1, 0xda, 0x2f, 0x00, 0x56,
	0x8f, 0xa5, 0xcd, 0x5d, 0xe5, 0x32, 0x3a, 0x87, 0x7a, 0xc1, 0x20, 0xd4, 0x90, 0xe3, 0xbf, 0x1d,
	0x33, 0xeb, 0xf2, 0x7f, 0xf1, 0x32, 0xdb, 0x7c, 0x7c, 0xff, 0x7a, 0xd2, 0xea, 0x08, 0xfd, 0xa4,
	0xe7, 0x44, 0x32, 0x0b, 0x49, 0xba, 0x84, 0x7a, 0xb7, 0x00, 0x5e, 0x9f, 0x07, 0x28, 0x6a, 0x03,
	0xab, 0xec, 0xf0, 0x2c, 0x3b, 0x7c, 0x22, 0xb3, 0xb3, 0xb7, 0x33, 0xee, 0x46, 0xfb, 0x0f, 0xee,
	0x3e, 0xd8, 0x39, 0xc2, 0xaf, 0x13, 0x0b, 0xbc, 0x4d, 0x2c, 0xf0, 0x31, 0xb1, 0xc0, 0xf3, 0xa7,
	0x55, 0x82, 0x46, 0x48, 0x31, 0xe3, 0xfe, 0xe0, 0x76, 0x4c, 0xef, 0x15, 0x0c, 0xfb, 0x49, 0x88,
	0x85, 0x7b, 0xa5, 0x09, 0xf7, 0xa2, 0xd4, 0x2f, 0x67, 0x7f, 0xbb, 0xdf, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x29, 0x81, 0xef, 0x9d, 0x6a, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DebugServiceClient is the client API for DebugService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConnInterface.NewStream.
type DebugServiceClient interface {
	// Get the current logging level for StackRox services.
	GetLogLevel(ctx context.Context, in *GetLogLevelRequest, opts ...grpc.CallOption) (*LogLevelResponse, error)
	// Set logging level for StackRox services.
	SetLogLevel(ctx context.Context, in *LogLevelRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type debugServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDebugServiceClient(cc grpc.ClientConnInterface) DebugServiceClient {
	return &debugServiceClient{cc}
}

func (c *debugServiceClient) GetLogLevel(ctx context.Context, in *GetLogLevelRequest, opts ...grpc.CallOption) (*LogLevelResponse, error) {
	out := new(LogLevelResponse)
	err := c.cc.Invoke(ctx, "/v1.DebugService/GetLogLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugServiceClient) SetLogLevel(ctx context.Context, in *LogLevelRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/v1.DebugService/SetLogLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DebugServiceServer is the server API for DebugService service.
type DebugServiceServer interface {
	// Get the current logging level for StackRox services.
	GetLogLevel(context.Context, *GetLogLevelRequest) (*LogLevelResponse, error)
	// Set logging level for StackRox services.
	SetLogLevel(context.Context, *LogLevelRequest) (*types.Empty, error)
}

// UnimplementedDebugServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDebugServiceServer struct {
}

func (*UnimplementedDebugServiceServer) GetLogLevel(ctx context.Context, req *GetLogLevelRequest) (*LogLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogLevel not implemented")
}
func (*UnimplementedDebugServiceServer) SetLogLevel(ctx context.Context, req *LogLevelRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLogLevel not implemented")
}

func RegisterDebugServiceServer(s *grpc.Server, srv DebugServiceServer) {
	s.RegisterService(&_DebugService_serviceDesc, srv)
}

func _DebugService_GetLogLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServiceServer).GetLogLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.DebugService/GetLogLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServiceServer).GetLogLevel(ctx, req.(*GetLogLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugService_SetLogLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServiceServer).SetLogLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.DebugService/SetLogLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServiceServer).SetLogLevel(ctx, req.(*LogLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DebugService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.DebugService",
	HandlerType: (*DebugServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLogLevel",
			Handler:    _DebugService_GetLogLevel_Handler,
		},
		{
			MethodName: "SetLogLevel",
			Handler:    _DebugService_SetLogLevel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/debug_service.proto",
}

func (m *GetLogLevelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLogLevelRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLogLevelRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Modules) > 0 {
		for iNdEx := len(m.Modules) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Modules[iNdEx])
			copy(dAtA[i:], m.Modules[iNdEx])
			i = encodeVarintDebugService(dAtA, i, uint64(len(m.Modules[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LogLevelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogLevelRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogLevelRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Modules) > 0 {
		for iNdEx := len(m.Modules) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Modules[iNdEx])
			copy(dAtA[i:], m.Modules[iNdEx])
			i = encodeVarintDebugService(dAtA, i, uint64(len(m.Modules[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Level) > 0 {
		i -= len(m.Level)
		copy(dAtA[i:], m.Level)
		i = encodeVarintDebugService(dAtA, i, uint64(len(m.Level)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ModuleLevel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleLevel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleLevel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Level) > 0 {
		i -= len(m.Level)
		copy(dAtA[i:], m.Level)
		i = encodeVarintDebugService(dAtA, i, uint64(len(m.Level)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Module) > 0 {
		i -= len(m.Module)
		copy(dAtA[i:], m.Module)
		i = encodeVarintDebugService(dAtA, i, uint64(len(m.Module)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LogLevelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogLevelResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogLevelResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ModuleLevels) > 0 {
		for iNdEx := len(m.ModuleLevels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ModuleLevels[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDebugService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Level) > 0 {
		i -= len(m.Level)
		copy(dAtA[i:], m.Level)
		i = encodeVarintDebugService(dAtA, i, uint64(len(m.Level)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDebugService(dAtA []byte, offset int, v uint64) int {
	offset -= sovDebugService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetLogLevelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Modules) > 0 {
		for _, s := range m.Modules {
			l = len(s)
			n += 1 + l + sovDebugService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LogLevelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Level)
	if l > 0 {
		n += 1 + l + sovDebugService(uint64(l))
	}
	if len(m.Modules) > 0 {
		for _, s := range m.Modules {
			l = len(s)
			n += 1 + l + sovDebugService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ModuleLevel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovDebugService(uint64(l))
	}
	l = len(m.Level)
	if l > 0 {
		n += 1 + l + sovDebugService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LogLevelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Level)
	if l > 0 {
		n += 1 + l + sovDebugService(uint64(l))
	}
	if len(m.ModuleLevels) > 0 {
		for _, e := range m.ModuleLevels {
			l = e.Size()
			n += 1 + l + sovDebugService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDebugService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDebugService(x uint64) (n int) {
	return sovDebugService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetLogLevelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebugService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLogLevelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLogLevelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modules", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebugService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDebugService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Modules = append(m.Modules, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebugService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDebugService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogLevelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebugService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogLevelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogLevelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebugService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDebugService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Level = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modules", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebugService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDebugService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Modules = append(m.Modules, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebugService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDebugService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleLevel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebugService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleLevel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleLevel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebugService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDebugService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebugService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDebugService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Level = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebugService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDebugService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogLevelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebugService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogLevelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogLevelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebugService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDebugService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Level = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleLevels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebugService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDebugService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleLevels = append(m.ModuleLevels, &ModuleLevel{})
			if err := m.ModuleLevels[len(m.ModuleLevels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebugService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDebugService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDebugService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDebugService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDebugService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDebugService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDebugService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDebugService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDebugService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDebugService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDebugService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDebugService = fmt.Errorf("proto: unexpected end of group")
)
