// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.3.1-0.20220817155510-0ae748fd2007
// source: api/v1/signature_integration_service.proto

package v1

import (
	context "context"
	fmt "fmt"
	storage "github.com/stackrox/rox/generated/storage"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (m *ListSignatureIntegrationsResponse) CloneVT() *ListSignatureIntegrationsResponse {
	if m == nil {
		return (*ListSignatureIntegrationsResponse)(nil)
	}
	r := &ListSignatureIntegrationsResponse{}
	if rhs := m.Integrations; rhs != nil {
		tmpContainer := make([]*storage.SignatureIntegration, len(rhs))
		for k, v := range rhs {
			if vtpb, ok := interface{}(v).(interface {
				CloneVT() *storage.SignatureIntegration
			}); ok {
				tmpContainer[k] = vtpb.CloneVT()
			} else {
				tmpContainer[k] = proto.Clone(v).(*storage.SignatureIntegration)
			}
		}
		r.Integrations = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ListSignatureIntegrationsResponse) CloneGenericVT() proto.Message {
	return m.CloneVT()
}

func (this *ListSignatureIntegrationsResponse) EqualVT(that *ListSignatureIntegrationsResponse) bool {
	if this == nil {
		return that == nil
	} else if that == nil {
		return false
	}
	if len(this.Integrations) != len(that.Integrations) {
		return false
	}
	for i, vx := range this.Integrations {
		vy := that.Integrations[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &storage.SignatureIntegration{}
			}
			if q == nil {
				q = &storage.SignatureIntegration{}
			}
			if equal, ok := interface{}(p).(interface {
				EqualVT(*storage.SignatureIntegration) bool
			}); ok {
				if !equal.EqualVT(q) {
					return false
				}
			} else if !proto.Equal(p, q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SignatureIntegrationServiceClient is the client API for SignatureIntegrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SignatureIntegrationServiceClient interface {
	ListSignatureIntegrations(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListSignatureIntegrationsResponse, error)
	GetSignatureIntegration(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*storage.SignatureIntegration, error)
	// Integration id should not be set.
	// Returns signature integration with id filled.
	PostSignatureIntegration(ctx context.Context, in *storage.SignatureIntegration, opts ...grpc.CallOption) (*storage.SignatureIntegration, error)
	PutSignatureIntegration(ctx context.Context, in *storage.SignatureIntegration, opts ...grpc.CallOption) (*Empty, error)
	DeleteSignatureIntegration(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error)
}

type signatureIntegrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSignatureIntegrationServiceClient(cc grpc.ClientConnInterface) SignatureIntegrationServiceClient {
	return &signatureIntegrationServiceClient{cc}
}

func (c *signatureIntegrationServiceClient) ListSignatureIntegrations(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListSignatureIntegrationsResponse, error) {
	out := new(ListSignatureIntegrationsResponse)
	err := c.cc.Invoke(ctx, "/v1.SignatureIntegrationService/ListSignatureIntegrations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signatureIntegrationServiceClient) GetSignatureIntegration(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*storage.SignatureIntegration, error) {
	out := new(storage.SignatureIntegration)
	err := c.cc.Invoke(ctx, "/v1.SignatureIntegrationService/GetSignatureIntegration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signatureIntegrationServiceClient) PostSignatureIntegration(ctx context.Context, in *storage.SignatureIntegration, opts ...grpc.CallOption) (*storage.SignatureIntegration, error) {
	out := new(storage.SignatureIntegration)
	err := c.cc.Invoke(ctx, "/v1.SignatureIntegrationService/PostSignatureIntegration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signatureIntegrationServiceClient) PutSignatureIntegration(ctx context.Context, in *storage.SignatureIntegration, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v1.SignatureIntegrationService/PutSignatureIntegration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signatureIntegrationServiceClient) DeleteSignatureIntegration(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v1.SignatureIntegrationService/DeleteSignatureIntegration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SignatureIntegrationServiceServer is the server API for SignatureIntegrationService service.
// All implementations must embed UnimplementedSignatureIntegrationServiceServer
// for forward compatibility
type SignatureIntegrationServiceServer interface {
	ListSignatureIntegrations(context.Context, *Empty) (*ListSignatureIntegrationsResponse, error)
	GetSignatureIntegration(context.Context, *ResourceByID) (*storage.SignatureIntegration, error)
	// Integration id should not be set.
	// Returns signature integration with id filled.
	PostSignatureIntegration(context.Context, *storage.SignatureIntegration) (*storage.SignatureIntegration, error)
	PutSignatureIntegration(context.Context, *storage.SignatureIntegration) (*Empty, error)
	DeleteSignatureIntegration(context.Context, *ResourceByID) (*Empty, error)
	mustEmbedUnimplementedSignatureIntegrationServiceServer()
}

// UnimplementedSignatureIntegrationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSignatureIntegrationServiceServer struct {
}

func (UnimplementedSignatureIntegrationServiceServer) ListSignatureIntegrations(context.Context, *Empty) (*ListSignatureIntegrationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSignatureIntegrations not implemented")
}
func (UnimplementedSignatureIntegrationServiceServer) GetSignatureIntegration(context.Context, *ResourceByID) (*storage.SignatureIntegration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSignatureIntegration not implemented")
}
func (UnimplementedSignatureIntegrationServiceServer) PostSignatureIntegration(context.Context, *storage.SignatureIntegration) (*storage.SignatureIntegration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostSignatureIntegration not implemented")
}
func (UnimplementedSignatureIntegrationServiceServer) PutSignatureIntegration(context.Context, *storage.SignatureIntegration) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutSignatureIntegration not implemented")
}
func (UnimplementedSignatureIntegrationServiceServer) DeleteSignatureIntegration(context.Context, *ResourceByID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSignatureIntegration not implemented")
}
func (UnimplementedSignatureIntegrationServiceServer) mustEmbedUnimplementedSignatureIntegrationServiceServer() {
}

// UnsafeSignatureIntegrationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SignatureIntegrationServiceServer will
// result in compilation errors.
type UnsafeSignatureIntegrationServiceServer interface {
	mustEmbedUnimplementedSignatureIntegrationServiceServer()
}

func RegisterSignatureIntegrationServiceServer(s grpc.ServiceRegistrar, srv SignatureIntegrationServiceServer) {
	s.RegisterService(&SignatureIntegrationService_ServiceDesc, srv)
}

func _SignatureIntegrationService_ListSignatureIntegrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignatureIntegrationServiceServer).ListSignatureIntegrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SignatureIntegrationService/ListSignatureIntegrations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignatureIntegrationServiceServer).ListSignatureIntegrations(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignatureIntegrationService_GetSignatureIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignatureIntegrationServiceServer).GetSignatureIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SignatureIntegrationService/GetSignatureIntegration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignatureIntegrationServiceServer).GetSignatureIntegration(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignatureIntegrationService_PostSignatureIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storage.SignatureIntegration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignatureIntegrationServiceServer).PostSignatureIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SignatureIntegrationService/PostSignatureIntegration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignatureIntegrationServiceServer).PostSignatureIntegration(ctx, req.(*storage.SignatureIntegration))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignatureIntegrationService_PutSignatureIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storage.SignatureIntegration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignatureIntegrationServiceServer).PutSignatureIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SignatureIntegrationService/PutSignatureIntegration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignatureIntegrationServiceServer).PutSignatureIntegration(ctx, req.(*storage.SignatureIntegration))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignatureIntegrationService_DeleteSignatureIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignatureIntegrationServiceServer).DeleteSignatureIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SignatureIntegrationService/DeleteSignatureIntegration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignatureIntegrationServiceServer).DeleteSignatureIntegration(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

// SignatureIntegrationService_ServiceDesc is the grpc.ServiceDesc for SignatureIntegrationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SignatureIntegrationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.SignatureIntegrationService",
	HandlerType: (*SignatureIntegrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSignatureIntegrations",
			Handler:    _SignatureIntegrationService_ListSignatureIntegrations_Handler,
		},
		{
			MethodName: "GetSignatureIntegration",
			Handler:    _SignatureIntegrationService_GetSignatureIntegration_Handler,
		},
		{
			MethodName: "PostSignatureIntegration",
			Handler:    _SignatureIntegrationService_PostSignatureIntegration_Handler,
		},
		{
			MethodName: "PutSignatureIntegration",
			Handler:    _SignatureIntegrationService_PutSignatureIntegration_Handler,
		},
		{
			MethodName: "DeleteSignatureIntegration",
			Handler:    _SignatureIntegrationService_DeleteSignatureIntegration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/signature_integration_service.proto",
}

func (m *ListSignatureIntegrationsResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListSignatureIntegrationsResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *ListSignatureIntegrationsResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Integrations) > 0 {
		for iNdEx := len(m.Integrations) - 1; iNdEx >= 0; iNdEx-- {
			if vtmsg, ok := interface{}(m.Integrations[iNdEx]).(interface {
				MarshalToSizedBufferVT([]byte) (int, error)
			}); ok {
				size, err := vtmsg.MarshalToSizedBufferVT(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarint(dAtA, i, uint64(size))
			} else {
				encoded, err := proto.Marshal(m.Integrations[iNdEx])
				if err != nil {
					return 0, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = encodeVarint(dAtA, i, uint64(len(encoded)))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListSignatureIntegrationsResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Integrations) > 0 {
		for _, e := range m.Integrations {
			if size, ok := interface{}(e).(interface {
				SizeVT() int
			}); ok {
				l = size.SizeVT()
			} else {
				l = proto.Size(e)
			}
			n += 1 + l + sov(uint64(l))
		}
	}
	n += len(m.unknownFields)
	return n
}

func (m *ListSignatureIntegrationsResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListSignatureIntegrationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListSignatureIntegrationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Integrations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Integrations = append(m.Integrations, &storage.SignatureIntegration{})
			if unmarshal, ok := interface{}(m.Integrations[len(m.Integrations)-1]).(interface {
				UnmarshalVT([]byte) error
			}); ok {
				if err := unmarshal.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				if err := proto.Unmarshal(dAtA[iNdEx:postIndex], m.Integrations[len(m.Integrations)-1]); err != nil {
					return err
				}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
