// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1/billing_metrics_service.proto

package v1

import (
	context "context"
	fmt "fmt"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BillingMetricsRequest struct {
	From                 *types.Timestamp `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To                   *types.Timestamp `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *BillingMetricsRequest) Reset()         { *m = BillingMetricsRequest{} }
func (m *BillingMetricsRequest) String() string { return proto.CompactTextString(m) }
func (*BillingMetricsRequest) ProtoMessage()    {}
func (*BillingMetricsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e05fef5ba2476126, []int{0}
}
func (m *BillingMetricsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BillingMetricsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BillingMetricsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BillingMetricsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BillingMetricsRequest.Merge(m, src)
}
func (m *BillingMetricsRequest) XXX_Size() int {
	return m.Size()
}
func (m *BillingMetricsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BillingMetricsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BillingMetricsRequest proto.InternalMessageInfo

func (m *BillingMetricsRequest) GetFrom() *types.Timestamp {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *BillingMetricsRequest) GetTo() *types.Timestamp {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *BillingMetricsRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *BillingMetricsRequest) Clone() *BillingMetricsRequest {
	if m == nil {
		return nil
	}
	cloned := new(BillingMetricsRequest)
	*cloned = *m

	cloned.From = m.From.Clone()
	cloned.To = m.To.Clone()
	return cloned
}

type SecuredResourcesMetrics struct {
	Nodes                int32    `protobuf:"varint,1,opt,name=nodes,proto3" json:"nodes,omitempty"`
	Millicores           int32    `protobuf:"varint,2,opt,name=millicores,proto3" json:"millicores,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SecuredResourcesMetrics) Reset()         { *m = SecuredResourcesMetrics{} }
func (m *SecuredResourcesMetrics) String() string { return proto.CompactTextString(m) }
func (*SecuredResourcesMetrics) ProtoMessage()    {}
func (*SecuredResourcesMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_e05fef5ba2476126, []int{1}
}
func (m *SecuredResourcesMetrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecuredResourcesMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecuredResourcesMetrics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecuredResourcesMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecuredResourcesMetrics.Merge(m, src)
}
func (m *SecuredResourcesMetrics) XXX_Size() int {
	return m.Size()
}
func (m *SecuredResourcesMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_SecuredResourcesMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_SecuredResourcesMetrics proto.InternalMessageInfo

func (m *SecuredResourcesMetrics) GetNodes() int32 {
	if m != nil {
		return m.Nodes
	}
	return 0
}

func (m *SecuredResourcesMetrics) GetMillicores() int32 {
	if m != nil {
		return m.Millicores
	}
	return 0
}

func (m *SecuredResourcesMetrics) MessageClone() proto.Message {
	return m.Clone()
}
func (m *SecuredResourcesMetrics) Clone() *SecuredResourcesMetrics {
	if m == nil {
		return nil
	}
	cloned := new(SecuredResourcesMetrics)
	*cloned = *m

	return cloned
}

type BillingMetricsResponse struct {
	Record               []*BillingMetricsResponse_BillingMetricsRecord `protobuf:"bytes,1,rep,name=record,proto3" json:"record,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                       `json:"-"`
	XXX_unrecognized     []byte                                         `json:"-"`
	XXX_sizecache        int32                                          `json:"-"`
}

func (m *BillingMetricsResponse) Reset()         { *m = BillingMetricsResponse{} }
func (m *BillingMetricsResponse) String() string { return proto.CompactTextString(m) }
func (*BillingMetricsResponse) ProtoMessage()    {}
func (*BillingMetricsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e05fef5ba2476126, []int{2}
}
func (m *BillingMetricsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BillingMetricsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BillingMetricsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BillingMetricsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BillingMetricsResponse.Merge(m, src)
}
func (m *BillingMetricsResponse) XXX_Size() int {
	return m.Size()
}
func (m *BillingMetricsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BillingMetricsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BillingMetricsResponse proto.InternalMessageInfo

func (m *BillingMetricsResponse) GetRecord() []*BillingMetricsResponse_BillingMetricsRecord {
	if m != nil {
		return m.Record
	}
	return nil
}

func (m *BillingMetricsResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *BillingMetricsResponse) Clone() *BillingMetricsResponse {
	if m == nil {
		return nil
	}
	cloned := new(BillingMetricsResponse)
	*cloned = *m

	if m.Record != nil {
		cloned.Record = make([]*BillingMetricsResponse_BillingMetricsRecord, len(m.Record))
		for idx, v := range m.Record {
			cloned.Record[idx] = v.Clone()
		}
	}
	return cloned
}

type BillingMetricsResponse_BillingMetricsRecord struct {
	Ts                   *types.Timestamp         `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	Metrics              *SecuredResourcesMetrics `protobuf:"bytes,2,opt,name=metrics,proto3" json:"metrics,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *BillingMetricsResponse_BillingMetricsRecord) Reset() {
	*m = BillingMetricsResponse_BillingMetricsRecord{}
}
func (m *BillingMetricsResponse_BillingMetricsRecord) String() string {
	return proto.CompactTextString(m)
}
func (*BillingMetricsResponse_BillingMetricsRecord) ProtoMessage() {}
func (*BillingMetricsResponse_BillingMetricsRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_e05fef5ba2476126, []int{2, 0}
}
func (m *BillingMetricsResponse_BillingMetricsRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BillingMetricsResponse_BillingMetricsRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BillingMetricsResponse_BillingMetricsRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BillingMetricsResponse_BillingMetricsRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BillingMetricsResponse_BillingMetricsRecord.Merge(m, src)
}
func (m *BillingMetricsResponse_BillingMetricsRecord) XXX_Size() int {
	return m.Size()
}
func (m *BillingMetricsResponse_BillingMetricsRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_BillingMetricsResponse_BillingMetricsRecord.DiscardUnknown(m)
}

var xxx_messageInfo_BillingMetricsResponse_BillingMetricsRecord proto.InternalMessageInfo

func (m *BillingMetricsResponse_BillingMetricsRecord) GetTs() *types.Timestamp {
	if m != nil {
		return m.Ts
	}
	return nil
}

func (m *BillingMetricsResponse_BillingMetricsRecord) GetMetrics() *SecuredResourcesMetrics {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *BillingMetricsResponse_BillingMetricsRecord) MessageClone() proto.Message {
	return m.Clone()
}
func (m *BillingMetricsResponse_BillingMetricsRecord) Clone() *BillingMetricsResponse_BillingMetricsRecord {
	if m == nil {
		return nil
	}
	cloned := new(BillingMetricsResponse_BillingMetricsRecord)
	*cloned = *m

	cloned.Ts = m.Ts.Clone()
	cloned.Metrics = m.Metrics.Clone()
	return cloned
}

type BillingMetricsCSVResponse struct {
	Chunk                []byte   `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BillingMetricsCSVResponse) Reset()         { *m = BillingMetricsCSVResponse{} }
func (m *BillingMetricsCSVResponse) String() string { return proto.CompactTextString(m) }
func (*BillingMetricsCSVResponse) ProtoMessage()    {}
func (*BillingMetricsCSVResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e05fef5ba2476126, []int{3}
}
func (m *BillingMetricsCSVResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BillingMetricsCSVResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BillingMetricsCSVResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BillingMetricsCSVResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BillingMetricsCSVResponse.Merge(m, src)
}
func (m *BillingMetricsCSVResponse) XXX_Size() int {
	return m.Size()
}
func (m *BillingMetricsCSVResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BillingMetricsCSVResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BillingMetricsCSVResponse proto.InternalMessageInfo

func (m *BillingMetricsCSVResponse) GetChunk() []byte {
	if m != nil {
		return m.Chunk
	}
	return nil
}

func (m *BillingMetricsCSVResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *BillingMetricsCSVResponse) Clone() *BillingMetricsCSVResponse {
	if m == nil {
		return nil
	}
	cloned := new(BillingMetricsCSVResponse)
	*cloned = *m

	if m.Chunk != nil {
		cloned.Chunk = make([]byte, len(m.Chunk))
		copy(cloned.Chunk, m.Chunk)
	}
	return cloned
}

type BillingMetricsMaxResponse struct {
	NodesTs              *types.Timestamp `protobuf:"bytes,1,opt,name=nodes_ts,json=nodesTs,proto3" json:"nodes_ts,omitempty"`
	Nodes                int32            `protobuf:"varint,2,opt,name=nodes,proto3" json:"nodes,omitempty"`
	MillicoresTs         *types.Timestamp `protobuf:"bytes,3,opt,name=millicores_ts,json=millicoresTs,proto3" json:"millicores_ts,omitempty"`
	Millicores           int32            `protobuf:"varint,4,opt,name=millicores,proto3" json:"millicores,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *BillingMetricsMaxResponse) Reset()         { *m = BillingMetricsMaxResponse{} }
func (m *BillingMetricsMaxResponse) String() string { return proto.CompactTextString(m) }
func (*BillingMetricsMaxResponse) ProtoMessage()    {}
func (*BillingMetricsMaxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e05fef5ba2476126, []int{4}
}
func (m *BillingMetricsMaxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BillingMetricsMaxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BillingMetricsMaxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BillingMetricsMaxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BillingMetricsMaxResponse.Merge(m, src)
}
func (m *BillingMetricsMaxResponse) XXX_Size() int {
	return m.Size()
}
func (m *BillingMetricsMaxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BillingMetricsMaxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BillingMetricsMaxResponse proto.InternalMessageInfo

func (m *BillingMetricsMaxResponse) GetNodesTs() *types.Timestamp {
	if m != nil {
		return m.NodesTs
	}
	return nil
}

func (m *BillingMetricsMaxResponse) GetNodes() int32 {
	if m != nil {
		return m.Nodes
	}
	return 0
}

func (m *BillingMetricsMaxResponse) GetMillicoresTs() *types.Timestamp {
	if m != nil {
		return m.MillicoresTs
	}
	return nil
}

func (m *BillingMetricsMaxResponse) GetMillicores() int32 {
	if m != nil {
		return m.Millicores
	}
	return 0
}

func (m *BillingMetricsMaxResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *BillingMetricsMaxResponse) Clone() *BillingMetricsMaxResponse {
	if m == nil {
		return nil
	}
	cloned := new(BillingMetricsMaxResponse)
	*cloned = *m

	cloned.NodesTs = m.NodesTs.Clone()
	cloned.MillicoresTs = m.MillicoresTs.Clone()
	return cloned
}

func init() {
	proto.RegisterType((*BillingMetricsRequest)(nil), "v1.BillingMetricsRequest")
	proto.RegisterType((*SecuredResourcesMetrics)(nil), "v1.SecuredResourcesMetrics")
	proto.RegisterType((*BillingMetricsResponse)(nil), "v1.BillingMetricsResponse")
	proto.RegisterType((*BillingMetricsResponse_BillingMetricsRecord)(nil), "v1.BillingMetricsResponse.BillingMetricsRecord")
	proto.RegisterType((*BillingMetricsCSVResponse)(nil), "v1.BillingMetricsCSVResponse")
	proto.RegisterType((*BillingMetricsMaxResponse)(nil), "v1.BillingMetricsMaxResponse")
}

func init() {
	proto.RegisterFile("api/v1/billing_metrics_service.proto", fileDescriptor_e05fef5ba2476126)
}

var fileDescriptor_e05fef5ba2476126 = []byte{
	// 487 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xee, 0x6e, 0x9b, 0x14, 0x4d, 0x5a, 0x21, 0x96, 0x40, 0x53, 0x03, 0xa6, 0xb2, 0x38, 0x54,
	0x1c, 0x6c, 0x1c, 0xd4, 0x33, 0x52, 0x7b, 0xc8, 0x29, 0x42, 0x72, 0xa2, 0xaa, 0x02, 0xa1, 0xc8,
	0x71, 0xa6, 0xc1, 0x22, 0xf6, 0x86, 0xdd, 0xb5, 0x15, 0xae, 0xbc, 0x02, 0x17, 0x5e, 0x82, 0xf7,
	0x80, 0x1b, 0x12, 0x57, 0x0e, 0x28, 0xf0, 0x20, 0xc8, 0x6b, 0xa7, 0x35, 0xae, 0x4b, 0xdb, 0xe3,
	0xee, 0x7e, 0x3f, 0x33, 0xf3, 0xcd, 0xc2, 0x13, 0x7f, 0x1e, 0x3a, 0xa9, 0xeb, 0x8c, 0xc3, 0xd9,
	0x2c, 0x8c, 0xa7, 0xa3, 0x08, 0x95, 0x08, 0x03, 0x39, 0x92, 0x28, 0xd2, 0x30, 0x40, 0x7b, 0x2e,
	0xb8, 0xe2, 0x8c, 0xa6, 0xae, 0xf1, 0x70, 0xca, 0xf9, 0x74, 0x86, 0x4e, 0x46, 0xf0, 0xe3, 0x98,
	0x2b, 0x5f, 0x85, 0x3c, 0x96, 0x39, 0xc2, 0x78, 0x5c, 0xbc, 0xea, 0xd3, 0x38, 0x39, 0x75, 0x54,
	0x18, 0xa1, 0x54, 0x7e, 0x34, 0xcf, 0x01, 0x96, 0x84, 0x7b, 0x87, 0xb9, 0x47, 0x3f, 0xb7, 0xf0,
	0xf0, 0x7d, 0x82, 0x52, 0x31, 0x1b, 0x36, 0x4e, 0x05, 0x8f, 0x3a, 0x64, 0x8f, 0xec, 0xb7, 0xba,
	0x86, 0x9d, 0x0b, 0xd9, 0x2b, 0x21, 0x7b, 0xb8, 0x12, 0xf2, 0x34, 0x8e, 0x3d, 0x05, 0xaa, 0x78,
	0x87, 0x5e, 0x89, 0xa6, 0x8a, 0x5b, 0x2f, 0x61, 0x67, 0x80, 0x41, 0x22, 0x70, 0xe2, 0xa1, 0xe4,
	0x89, 0x08, 0x50, 0x16, 0xee, 0xac, 0x0d, 0x8d, 0x98, 0x4f, 0x50, 0x6a, 0xdf, 0x86, 0x97, 0x1f,
	0x98, 0x09, 0x10, 0x65, 0x55, 0x06, 0x5c, 0xa0, 0xd4, 0x26, 0x0d, 0xaf, 0x74, 0x63, 0xfd, 0x24,
	0x70, 0xbf, 0xda, 0x86, 0x9c, 0xf3, 0x58, 0x22, 0xeb, 0x41, 0x53, 0x60, 0xc0, 0xc5, 0xa4, 0x43,
	0xf6, 0xd6, 0xf7, 0x5b, 0x5d, 0xc7, 0x4e, 0x5d, 0xbb, 0x1e, 0x7b, 0xe1, 0x3a, 0xa3, 0x79, 0x05,
	0xdd, 0xf8, 0x00, 0xed, 0xba, 0x77, 0xdd, 0xb8, 0xbc, 0xc6, 0x98, 0xa8, 0x92, 0xec, 0x00, 0x36,
	0x8b, 0x24, 0x8b, 0x49, 0x3d, 0xc8, 0xaa, 0xb9, 0x64, 0x16, 0xde, 0x0a, 0x6b, 0xb9, 0xb0, 0xfb,
	0xaf, 0xf5, 0xd1, 0xe0, 0xf8, 0xac, 0xc1, 0x36, 0x34, 0x82, 0xb7, 0x49, 0xfc, 0x4e, 0x97, 0xb0,
	0xe5, 0xe5, 0x07, 0xeb, 0x1b, 0xa9, 0x72, 0xfa, 0xfe, 0xe2, 0x8c, 0x73, 0x00, 0xb7, 0xf4, 0x60,
	0x47, 0xd7, 0xaa, 0x7c, 0x53, 0x63, 0x87, 0xa5, 0x70, 0x68, 0x39, 0x9c, 0x17, 0xb0, 0x7d, 0x1e,
	0x45, 0xa6, 0xb8, 0x7e, 0xa5, 0xe2, 0xd6, 0x39, 0x61, 0x58, 0x4d, 0x77, 0xa3, 0x9a, 0x6e, 0xf7,
	0x0b, 0xad, 0x2e, 0xe9, 0x20, 0xff, 0x06, 0xec, 0x04, 0xa0, 0x87, 0x6a, 0xb5, 0x3b, 0xbb, 0x75,
	0xd1, 0xea, 0x6d, 0x36, 0x8c, 0xcb, 0x53, 0xb7, 0xee, 0x7e, 0xfc, 0xf1, 0xe7, 0x13, 0xdd, 0x66,
	0xad, 0xd2, 0x87, 0x63, 0x6f, 0xa0, 0xd9, 0x43, 0x75, 0x34, 0x38, 0xfe, 0x9f, 0xea, 0xa3, 0x8b,
	0x4f, 0xa5, 0x64, 0xac, 0x1d, 0x2d, 0x7c, 0x87, 0xdd, 0x2e, 0x09, 0x3b, 0x81, 0x4c, 0x9f, 0x11,
	0xf6, 0x5a, 0xcb, 0xf7, 0xfd, 0xc5, 0x0d, 0xe5, 0x4b, 0x21, 0xd6, 0xcb, 0x47, 0xfe, 0xe2, 0xb0,
	0xfd, 0x75, 0x69, 0x92, 0xef, 0x4b, 0x93, 0xfc, 0x5a, 0x9a, 0xe4, 0xf3, 0x6f, 0x73, 0xed, 0x15,
	0x4d, 0xdd, 0x93, 0xb5, 0x71, 0x53, 0x27, 0xf1, 0xfc, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x57,
	0x8a, 0x55, 0x0d, 0x5d, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BillingMetricsServiceClient is the client API for BillingMetricsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConnInterface.NewStream.
type BillingMetricsServiceClient interface {
	GetMetrics(ctx context.Context, in *BillingMetricsRequest, opts ...grpc.CallOption) (*BillingMetricsResponse, error)
	GetCSV(ctx context.Context, in *BillingMetricsRequest, opts ...grpc.CallOption) (BillingMetricsService_GetCSVClient, error)
	GetMax(ctx context.Context, in *BillingMetricsRequest, opts ...grpc.CallOption) (*BillingMetricsMaxResponse, error)
}

type billingMetricsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBillingMetricsServiceClient(cc grpc.ClientConnInterface) BillingMetricsServiceClient {
	return &billingMetricsServiceClient{cc}
}

func (c *billingMetricsServiceClient) GetMetrics(ctx context.Context, in *BillingMetricsRequest, opts ...grpc.CallOption) (*BillingMetricsResponse, error) {
	out := new(BillingMetricsResponse)
	err := c.cc.Invoke(ctx, "/v1.BillingMetricsService/GetMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingMetricsServiceClient) GetCSV(ctx context.Context, in *BillingMetricsRequest, opts ...grpc.CallOption) (BillingMetricsService_GetCSVClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BillingMetricsService_serviceDesc.Streams[0], "/v1.BillingMetricsService/GetCSV", opts...)
	if err != nil {
		return nil, err
	}
	x := &billingMetricsServiceGetCSVClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BillingMetricsService_GetCSVClient interface {
	Recv() (*BillingMetricsCSVResponse, error)
	grpc.ClientStream
}

type billingMetricsServiceGetCSVClient struct {
	grpc.ClientStream
}

func (x *billingMetricsServiceGetCSVClient) Recv() (*BillingMetricsCSVResponse, error) {
	m := new(BillingMetricsCSVResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *billingMetricsServiceClient) GetMax(ctx context.Context, in *BillingMetricsRequest, opts ...grpc.CallOption) (*BillingMetricsMaxResponse, error) {
	out := new(BillingMetricsMaxResponse)
	err := c.cc.Invoke(ctx, "/v1.BillingMetricsService/GetMax", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillingMetricsServiceServer is the server API for BillingMetricsService service.
type BillingMetricsServiceServer interface {
	GetMetrics(context.Context, *BillingMetricsRequest) (*BillingMetricsResponse, error)
	GetCSV(*BillingMetricsRequest, BillingMetricsService_GetCSVServer) error
	GetMax(context.Context, *BillingMetricsRequest) (*BillingMetricsMaxResponse, error)
}

// UnimplementedBillingMetricsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBillingMetricsServiceServer struct {
}

func (*UnimplementedBillingMetricsServiceServer) GetMetrics(ctx context.Context, req *BillingMetricsRequest) (*BillingMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (*UnimplementedBillingMetricsServiceServer) GetCSV(req *BillingMetricsRequest, srv BillingMetricsService_GetCSVServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCSV not implemented")
}
func (*UnimplementedBillingMetricsServiceServer) GetMax(ctx context.Context, req *BillingMetricsRequest) (*BillingMetricsMaxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMax not implemented")
}

func RegisterBillingMetricsServiceServer(s *grpc.Server, srv BillingMetricsServiceServer) {
	s.RegisterService(&_BillingMetricsService_serviceDesc, srv)
}

func _BillingMetricsService_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BillingMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingMetricsServiceServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BillingMetricsService/GetMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingMetricsServiceServer).GetMetrics(ctx, req.(*BillingMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingMetricsService_GetCSV_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BillingMetricsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BillingMetricsServiceServer).GetCSV(m, &billingMetricsServiceGetCSVServer{stream})
}

type BillingMetricsService_GetCSVServer interface {
	Send(*BillingMetricsCSVResponse) error
	grpc.ServerStream
}

type billingMetricsServiceGetCSVServer struct {
	grpc.ServerStream
}

func (x *billingMetricsServiceGetCSVServer) Send(m *BillingMetricsCSVResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BillingMetricsService_GetMax_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BillingMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingMetricsServiceServer).GetMax(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BillingMetricsService/GetMax",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingMetricsServiceServer).GetMax(ctx, req.(*BillingMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BillingMetricsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.BillingMetricsService",
	HandlerType: (*BillingMetricsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMetrics",
			Handler:    _BillingMetricsService_GetMetrics_Handler,
		},
		{
			MethodName: "GetMax",
			Handler:    _BillingMetricsService_GetMax_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCSV",
			Handler:       _BillingMetricsService_GetCSV_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/billing_metrics_service.proto",
}

func (m *BillingMetricsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BillingMetricsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BillingMetricsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.To != nil {
		{
			size, err := m.To.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBillingMetricsService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.From != nil {
		{
			size, err := m.From.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBillingMetricsService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SecuredResourcesMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecuredResourcesMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecuredResourcesMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Millicores != 0 {
		i = encodeVarintBillingMetricsService(dAtA, i, uint64(m.Millicores))
		i--
		dAtA[i] = 0x10
	}
	if m.Nodes != 0 {
		i = encodeVarintBillingMetricsService(dAtA, i, uint64(m.Nodes))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BillingMetricsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BillingMetricsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BillingMetricsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Record) > 0 {
		for iNdEx := len(m.Record) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Record[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBillingMetricsService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BillingMetricsResponse_BillingMetricsRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BillingMetricsResponse_BillingMetricsRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BillingMetricsResponse_BillingMetricsRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Metrics != nil {
		{
			size, err := m.Metrics.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBillingMetricsService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Ts != nil {
		{
			size, err := m.Ts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBillingMetricsService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BillingMetricsCSVResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BillingMetricsCSVResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BillingMetricsCSVResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Chunk) > 0 {
		i -= len(m.Chunk)
		copy(dAtA[i:], m.Chunk)
		i = encodeVarintBillingMetricsService(dAtA, i, uint64(len(m.Chunk)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BillingMetricsMaxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BillingMetricsMaxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BillingMetricsMaxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Millicores != 0 {
		i = encodeVarintBillingMetricsService(dAtA, i, uint64(m.Millicores))
		i--
		dAtA[i] = 0x20
	}
	if m.MillicoresTs != nil {
		{
			size, err := m.MillicoresTs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBillingMetricsService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Nodes != 0 {
		i = encodeVarintBillingMetricsService(dAtA, i, uint64(m.Nodes))
		i--
		dAtA[i] = 0x10
	}
	if m.NodesTs != nil {
		{
			size, err := m.NodesTs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBillingMetricsService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBillingMetricsService(dAtA []byte, offset int, v uint64) int {
	offset -= sovBillingMetricsService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BillingMetricsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovBillingMetricsService(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovBillingMetricsService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SecuredResourcesMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nodes != 0 {
		n += 1 + sovBillingMetricsService(uint64(m.Nodes))
	}
	if m.Millicores != 0 {
		n += 1 + sovBillingMetricsService(uint64(m.Millicores))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BillingMetricsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Record) > 0 {
		for _, e := range m.Record {
			l = e.Size()
			n += 1 + l + sovBillingMetricsService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BillingMetricsResponse_BillingMetricsRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ts != nil {
		l = m.Ts.Size()
		n += 1 + l + sovBillingMetricsService(uint64(l))
	}
	if m.Metrics != nil {
		l = m.Metrics.Size()
		n += 1 + l + sovBillingMetricsService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BillingMetricsCSVResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chunk)
	if l > 0 {
		n += 1 + l + sovBillingMetricsService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BillingMetricsMaxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodesTs != nil {
		l = m.NodesTs.Size()
		n += 1 + l + sovBillingMetricsService(uint64(l))
	}
	if m.Nodes != 0 {
		n += 1 + sovBillingMetricsService(uint64(m.Nodes))
	}
	if m.MillicoresTs != nil {
		l = m.MillicoresTs.Size()
		n += 1 + l + sovBillingMetricsService(uint64(l))
	}
	if m.Millicores != 0 {
		n += 1 + sovBillingMetricsService(uint64(m.Millicores))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBillingMetricsService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBillingMetricsService(x uint64) (n int) {
	return sovBillingMetricsService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BillingMetricsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBillingMetricsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BillingMetricsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BillingMetricsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBillingMetricsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBillingMetricsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBillingMetricsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &types.Timestamp{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBillingMetricsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBillingMetricsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBillingMetricsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &types.Timestamp{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBillingMetricsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBillingMetricsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecuredResourcesMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBillingMetricsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecuredResourcesMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecuredResourcesMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			m.Nodes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBillingMetricsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nodes |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Millicores", wireType)
			}
			m.Millicores = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBillingMetricsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Millicores |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBillingMetricsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBillingMetricsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BillingMetricsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBillingMetricsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BillingMetricsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BillingMetricsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBillingMetricsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBillingMetricsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBillingMetricsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Record = append(m.Record, &BillingMetricsResponse_BillingMetricsRecord{})
			if err := m.Record[len(m.Record)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBillingMetricsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBillingMetricsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BillingMetricsResponse_BillingMetricsRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBillingMetricsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BillingMetricsRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BillingMetricsRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBillingMetricsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBillingMetricsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBillingMetricsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ts == nil {
				m.Ts = &types.Timestamp{}
			}
			if err := m.Ts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBillingMetricsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBillingMetricsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBillingMetricsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metrics == nil {
				m.Metrics = &SecuredResourcesMetrics{}
			}
			if err := m.Metrics.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBillingMetricsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBillingMetricsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BillingMetricsCSVResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBillingMetricsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BillingMetricsCSVResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BillingMetricsCSVResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chunk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBillingMetricsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBillingMetricsService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBillingMetricsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chunk = append(m.Chunk[:0], dAtA[iNdEx:postIndex]...)
			if m.Chunk == nil {
				m.Chunk = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBillingMetricsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBillingMetricsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BillingMetricsMaxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBillingMetricsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BillingMetricsMaxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BillingMetricsMaxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodesTs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBillingMetricsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBillingMetricsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBillingMetricsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodesTs == nil {
				m.NodesTs = &types.Timestamp{}
			}
			if err := m.NodesTs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			m.Nodes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBillingMetricsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nodes |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MillicoresTs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBillingMetricsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBillingMetricsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBillingMetricsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MillicoresTs == nil {
				m.MillicoresTs = &types.Timestamp{}
			}
			if err := m.MillicoresTs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Millicores", wireType)
			}
			m.Millicores = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBillingMetricsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Millicores |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBillingMetricsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBillingMetricsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBillingMetricsService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBillingMetricsService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBillingMetricsService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBillingMetricsService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBillingMetricsService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBillingMetricsService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBillingMetricsService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBillingMetricsService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBillingMetricsService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBillingMetricsService = fmt.Errorf("proto: unexpected end of group")
)
