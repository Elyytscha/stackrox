// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1/policy_sync_service.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PolicySync struct {
	Name                 string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Registries           []*PolicySync_Registry `protobuf:"bytes,2,rep,name=registries,proto3" json:"registries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *PolicySync) Reset()         { *m = PolicySync{} }
func (m *PolicySync) String() string { return proto.CompactTextString(m) }
func (*PolicySync) ProtoMessage()    {}
func (*PolicySync) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fd93352eb058c6c, []int{0}
}
func (m *PolicySync) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PolicySync) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PolicySync.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PolicySync) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicySync.Merge(m, src)
}
func (m *PolicySync) XXX_Size() int {
	return m.Size()
}
func (m *PolicySync) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicySync.DiscardUnknown(m)
}

var xxx_messageInfo_PolicySync proto.InternalMessageInfo

func (m *PolicySync) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PolicySync) GetRegistries() []*PolicySync_Registry {
	if m != nil {
		return m.Registries
	}
	return nil
}

func (m *PolicySync) MessageClone() proto.Message {
	return m.Clone()
}
func (m *PolicySync) Clone() *PolicySync {
	if m == nil {
		return nil
	}
	cloned := new(PolicySync)
	*cloned = *m

	if m.Registries != nil {
		cloned.Registries = make([]*PolicySync_Registry, len(m.Registries))
		for idx, v := range m.Registries {
			cloned.Registries[idx] = v.Clone()
		}
	}
	return cloned
}

type PolicySync_Registry struct {
	Hostname             string   `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Repository           string   `protobuf:"bytes,2,opt,name=repository,proto3" json:"repository,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PolicySync_Registry) Reset()         { *m = PolicySync_Registry{} }
func (m *PolicySync_Registry) String() string { return proto.CompactTextString(m) }
func (*PolicySync_Registry) ProtoMessage()    {}
func (*PolicySync_Registry) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fd93352eb058c6c, []int{0, 0}
}
func (m *PolicySync_Registry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PolicySync_Registry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PolicySync_Registry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PolicySync_Registry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicySync_Registry.Merge(m, src)
}
func (m *PolicySync_Registry) XXX_Size() int {
	return m.Size()
}
func (m *PolicySync_Registry) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicySync_Registry.DiscardUnknown(m)
}

var xxx_messageInfo_PolicySync_Registry proto.InternalMessageInfo

func (m *PolicySync_Registry) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *PolicySync_Registry) GetRepository() string {
	if m != nil {
		return m.Repository
	}
	return ""
}

func (m *PolicySync_Registry) MessageClone() proto.Message {
	return m.Clone()
}
func (m *PolicySync_Registry) Clone() *PolicySync_Registry {
	if m == nil {
		return nil
	}
	cloned := new(PolicySync_Registry)
	*cloned = *m

	return cloned
}

type PostPolicySyncRequest struct {
	PolicySync           *PolicySync `protobuf:"bytes,1,opt,name=policy_sync,json=policySync,proto3" json:"policy_sync,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *PostPolicySyncRequest) Reset()         { *m = PostPolicySyncRequest{} }
func (m *PostPolicySyncRequest) String() string { return proto.CompactTextString(m) }
func (*PostPolicySyncRequest) ProtoMessage()    {}
func (*PostPolicySyncRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fd93352eb058c6c, []int{1}
}
func (m *PostPolicySyncRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostPolicySyncRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PostPolicySyncRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PostPolicySyncRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostPolicySyncRequest.Merge(m, src)
}
func (m *PostPolicySyncRequest) XXX_Size() int {
	return m.Size()
}
func (m *PostPolicySyncRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PostPolicySyncRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PostPolicySyncRequest proto.InternalMessageInfo

func (m *PostPolicySyncRequest) GetPolicySync() *PolicySync {
	if m != nil {
		return m.PolicySync
	}
	return nil
}

func (m *PostPolicySyncRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *PostPolicySyncRequest) Clone() *PostPolicySyncRequest {
	if m == nil {
		return nil
	}
	cloned := new(PostPolicySyncRequest)
	*cloned = *m

	cloned.PolicySync = m.PolicySync.Clone()
	return cloned
}

type GetPolicySyncResponse struct {
	Sync                 *PolicySync `protobuf:"bytes,1,opt,name=sync,proto3" json:"sync,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetPolicySyncResponse) Reset()         { *m = GetPolicySyncResponse{} }
func (m *GetPolicySyncResponse) String() string { return proto.CompactTextString(m) }
func (*GetPolicySyncResponse) ProtoMessage()    {}
func (*GetPolicySyncResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fd93352eb058c6c, []int{2}
}
func (m *GetPolicySyncResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPolicySyncResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPolicySyncResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPolicySyncResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPolicySyncResponse.Merge(m, src)
}
func (m *GetPolicySyncResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPolicySyncResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPolicySyncResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPolicySyncResponse proto.InternalMessageInfo

func (m *GetPolicySyncResponse) GetSync() *PolicySync {
	if m != nil {
		return m.Sync
	}
	return nil
}

func (m *GetPolicySyncResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetPolicySyncResponse) Clone() *GetPolicySyncResponse {
	if m == nil {
		return nil
	}
	cloned := new(GetPolicySyncResponse)
	*cloned = *m

	cloned.Sync = m.Sync.Clone()
	return cloned
}

type GetPolicySyncsResponse struct {
	Syncs                []*PolicySync `protobuf:"bytes,1,rep,name=syncs,proto3" json:"syncs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetPolicySyncsResponse) Reset()         { *m = GetPolicySyncsResponse{} }
func (m *GetPolicySyncsResponse) String() string { return proto.CompactTextString(m) }
func (*GetPolicySyncsResponse) ProtoMessage()    {}
func (*GetPolicySyncsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fd93352eb058c6c, []int{3}
}
func (m *GetPolicySyncsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPolicySyncsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPolicySyncsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPolicySyncsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPolicySyncsResponse.Merge(m, src)
}
func (m *GetPolicySyncsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPolicySyncsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPolicySyncsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPolicySyncsResponse proto.InternalMessageInfo

func (m *GetPolicySyncsResponse) GetSyncs() []*PolicySync {
	if m != nil {
		return m.Syncs
	}
	return nil
}

func (m *GetPolicySyncsResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetPolicySyncsResponse) Clone() *GetPolicySyncsResponse {
	if m == nil {
		return nil
	}
	cloned := new(GetPolicySyncsResponse)
	*cloned = *m

	if m.Syncs != nil {
		cloned.Syncs = make([]*PolicySync, len(m.Syncs))
		for idx, v := range m.Syncs {
			cloned.Syncs[idx] = v.Clone()
		}
	}
	return cloned
}

func init() {
	proto.RegisterType((*PolicySync)(nil), "v1.PolicySync")
	proto.RegisterType((*PolicySync_Registry)(nil), "v1.PolicySync.Registry")
	proto.RegisterType((*PostPolicySyncRequest)(nil), "v1.PostPolicySyncRequest")
	proto.RegisterType((*GetPolicySyncResponse)(nil), "v1.GetPolicySyncResponse")
	proto.RegisterType((*GetPolicySyncsResponse)(nil), "v1.GetPolicySyncsResponse")
}

func init() { proto.RegisterFile("api/v1/policy_sync_service.proto", fileDescriptor_2fd93352eb058c6c) }

var fileDescriptor_2fd93352eb058c6c = []byte{
	// 408 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xcf, 0x8a, 0xd4, 0x40,
	0x10, 0xc6, 0xb7, 0xe3, 0x2a, 0xbb, 0x35, 0xa0, 0x6e, 0xeb, 0xba, 0xd9, 0x20, 0x61, 0x68, 0x3c,
	0x2c, 0x1e, 0x3a, 0x64, 0x3c, 0x08, 0x0a, 0x1e, 0x04, 0xff, 0x1c, 0xc7, 0x0c, 0x82, 0x78, 0x19,
	0x62, 0x68, 0xc6, 0xc6, 0x49, 0x57, 0x9b, 0x6e, 0x83, 0xb9, 0xfa, 0x0a, 0x5e, 0xbc, 0xfa, 0x20,
	0xde, 0x3d, 0x0a, 0xbe, 0x80, 0x8c, 0x3e, 0x88, 0x74, 0x67, 0x26, 0xc9, 0x0c, 0xc3, 0xde, 0x3a,
	0x5f, 0x7d, 0xf5, 0xfb, 0x2a, 0xd5, 0x0d, 0xe3, 0x5c, 0xcb, 0xa4, 0x4e, 0x13, 0x8d, 0x4b, 0x59,
	0x34, 0x73, 0xd3, 0xa8, 0x62, 0x6e, 0x44, 0x55, 0xcb, 0x42, 0x70, 0x5d, 0xa1, 0x45, 0x1a, 0xd4,
	0x69, 0x74, 0x77, 0x81, 0xb8, 0x58, 0x8a, 0xc4, 0x99, 0x73, 0xa5, 0xd0, 0xe6, 0x56, 0xa2, 0x32,
	0xad, 0x23, 0xa2, 0x6b, 0x86, 0x28, 0xb5, 0x6d, 0xd6, 0xda, 0xad, 0xb5, 0x56, 0x60, 0x59, 0xa2,
	0x6a, 0x45, 0xf6, 0x9d, 0x00, 0x4c, 0x7d, 0xd0, 0xac, 0x51, 0x05, 0xa5, 0x70, 0xa8, 0xf2, 0x52,
	0x84, 0x64, 0x4c, 0x2e, 0x8e, 0x33, 0x7f, 0xa6, 0x0f, 0x01, 0x2a, 0xb1, 0x90, 0xc6, 0x56, 0x52,
	0x98, 0x30, 0x18, 0x5f, 0xb9, 0x18, 0x4d, 0xce, 0x78, 0x9d, 0xf2, 0xbe, 0x8f, 0x67, 0xad, 0xa1,
	0xc9, 0x06, 0xd6, 0xe8, 0x39, 0x1c, 0x6d, 0x74, 0x1a, 0xc1, 0xd1, 0x7b, 0x34, 0x76, 0x00, 0xef,
	0xbe, 0x69, 0xec, 0x02, 0x34, 0x1a, 0x69, 0xb1, 0x6a, 0xc2, 0xc0, 0x57, 0x07, 0x0a, 0x7b, 0x09,
	0xa7, 0x53, 0x34, 0xb6, 0x8f, 0xcb, 0xc4, 0xc7, 0x4f, 0xc2, 0x58, 0x9a, 0xc0, 0x68, 0xb0, 0x24,
	0xcf, 0x1d, 0x4d, 0xae, 0x6f, 0x8f, 0x96, 0x81, 0xee, 0xce, 0xec, 0x31, 0x9c, 0xbe, 0x10, 0x5b,
	0x20, 0xa3, 0x51, 0x19, 0x41, 0x19, 0x1c, 0x5e, 0x82, 0xf0, 0x35, 0xf6, 0x04, 0xee, 0x6c, 0x35,
	0x9b, 0xae, 0xfb, 0x1e, 0x5c, 0x75, 0x0e, 0x13, 0x12, 0xbf, 0x9c, 0xdd, 0xf6, 0xb6, 0x38, 0xf9,
	0x41, 0xe0, 0xa4, 0x57, 0x67, 0xed, 0x8d, 0xd2, 0x57, 0x70, 0xb3, 0xa3, 0x6e, 0xfe, 0xeb, 0xd8,
	0x01, 0x9e, 0xb9, 0xab, 0x8b, 0xce, 0xdd, 0x71, 0xef, 0xcc, 0xec, 0xec, 0xcb, 0xef, 0x7f, 0x5f,
	0x83, 0x13, 0x7a, 0xa3, 0x7f, 0x2c, 0x89, 0x4b, 0xa2, 0xaf, 0x5d, 0x8e, 0xd9, 0x61, 0x9e, 0xb7,
	0x43, 0xed, 0x59, 0x63, 0xd4, 0xc7, 0xb1, 0xc8, 0x33, 0x6f, 0xb3, 0x5d, 0xe6, 0x23, 0x72, 0xff,
	0x29, 0xff, 0xb9, 0x8a, 0xc9, 0xaf, 0x55, 0x4c, 0xfe, 0xac, 0x62, 0xf2, 0xed, 0x6f, 0x7c, 0x00,
	0xa1, 0x44, 0x6e, 0x6c, 0x5e, 0x7c, 0xa8, 0xf0, 0x73, 0xfb, 0x9e, 0x78, 0xae, 0x25, 0xaf, 0xd3,
	0xb7, 0x41, 0x9d, 0xbe, 0x39, 0x78, 0x77, 0xcd, 0x6b, 0x0f, 0xfe, 0x07, 0x00, 0x00, 0xff, 0xff,
	0x71, 0x66, 0xb1, 0xab, 0xd2, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PolicySyncServiceClient is the client API for PolicySyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConnInterface.NewStream.
type PolicySyncServiceClient interface {
	GetPolicyRequest(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetPolicySyncResponse, error)
	PostPolicyRequest(ctx context.Context, in *PostPolicySyncRequest, opts ...grpc.CallOption) (*Empty, error)
}

type policySyncServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPolicySyncServiceClient(cc grpc.ClientConnInterface) PolicySyncServiceClient {
	return &policySyncServiceClient{cc}
}

func (c *policySyncServiceClient) GetPolicyRequest(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetPolicySyncResponse, error) {
	out := new(GetPolicySyncResponse)
	err := c.cc.Invoke(ctx, "/v1.PolicySyncService/GetPolicyRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policySyncServiceClient) PostPolicyRequest(ctx context.Context, in *PostPolicySyncRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v1.PolicySyncService/PostPolicyRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolicySyncServiceServer is the server API for PolicySyncService service.
type PolicySyncServiceServer interface {
	GetPolicyRequest(context.Context, *Empty) (*GetPolicySyncResponse, error)
	PostPolicyRequest(context.Context, *PostPolicySyncRequest) (*Empty, error)
}

// UnimplementedPolicySyncServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPolicySyncServiceServer struct {
}

func (*UnimplementedPolicySyncServiceServer) GetPolicyRequest(ctx context.Context, req *Empty) (*GetPolicySyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicyRequest not implemented")
}
func (*UnimplementedPolicySyncServiceServer) PostPolicyRequest(ctx context.Context, req *PostPolicySyncRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostPolicyRequest not implemented")
}

func RegisterPolicySyncServiceServer(s *grpc.Server, srv PolicySyncServiceServer) {
	s.RegisterService(&_PolicySyncService_serviceDesc, srv)
}

func _PolicySyncService_GetPolicyRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicySyncServiceServer).GetPolicyRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PolicySyncService/GetPolicyRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicySyncServiceServer).GetPolicyRequest(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicySyncService_PostPolicyRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostPolicySyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicySyncServiceServer).PostPolicyRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PolicySyncService/PostPolicyRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicySyncServiceServer).PostPolicyRequest(ctx, req.(*PostPolicySyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PolicySyncService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.PolicySyncService",
	HandlerType: (*PolicySyncServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPolicyRequest",
			Handler:    _PolicySyncService_GetPolicyRequest_Handler,
		},
		{
			MethodName: "PostPolicyRequest",
			Handler:    _PolicySyncService_PostPolicyRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/policy_sync_service.proto",
}

func (m *PolicySync) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicySync) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicySync) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Registries) > 0 {
		for iNdEx := len(m.Registries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Registries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPolicySyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPolicySyncService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PolicySync_Registry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicySync_Registry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicySync_Registry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Repository) > 0 {
		i -= len(m.Repository)
		copy(dAtA[i:], m.Repository)
		i = encodeVarintPolicySyncService(dAtA, i, uint64(len(m.Repository)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Hostname) > 0 {
		i -= len(m.Hostname)
		copy(dAtA[i:], m.Hostname)
		i = encodeVarintPolicySyncService(dAtA, i, uint64(len(m.Hostname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PostPolicySyncRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostPolicySyncRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostPolicySyncRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PolicySync != nil {
		{
			size, err := m.PolicySync.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicySyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPolicySyncResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPolicySyncResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPolicySyncResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Sync != nil {
		{
			size, err := m.Sync.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicySyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPolicySyncsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPolicySyncsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPolicySyncsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Syncs) > 0 {
		for iNdEx := len(m.Syncs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Syncs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPolicySyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPolicySyncService(dAtA []byte, offset int, v uint64) int {
	offset -= sovPolicySyncService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PolicySync) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPolicySyncService(uint64(l))
	}
	if len(m.Registries) > 0 {
		for _, e := range m.Registries {
			l = e.Size()
			n += 1 + l + sovPolicySyncService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PolicySync_Registry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovPolicySyncService(uint64(l))
	}
	l = len(m.Repository)
	if l > 0 {
		n += 1 + l + sovPolicySyncService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PostPolicySyncRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PolicySync != nil {
		l = m.PolicySync.Size()
		n += 1 + l + sovPolicySyncService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPolicySyncResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sync != nil {
		l = m.Sync.Size()
		n += 1 + l + sovPolicySyncService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPolicySyncsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Syncs) > 0 {
		for _, e := range m.Syncs {
			l = e.Size()
			n += 1 + l + sovPolicySyncService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPolicySyncService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPolicySyncService(x uint64) (n int) {
	return sovPolicySyncService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PolicySync) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicySyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicySync: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicySync: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicySyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicySyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicySyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Registries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicySyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicySyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicySyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Registries = append(m.Registries, &PolicySync_Registry{})
			if err := m.Registries[len(m.Registries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicySyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicySyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PolicySync_Registry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicySyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Registry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Registry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicySyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicySyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicySyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repository", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicySyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicySyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicySyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Repository = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicySyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicySyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostPolicySyncRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicySyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostPolicySyncRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostPolicySyncRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicySync", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicySyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicySyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicySyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PolicySync == nil {
				m.PolicySync = &PolicySync{}
			}
			if err := m.PolicySync.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicySyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicySyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPolicySyncResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicySyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPolicySyncResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPolicySyncResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sync", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicySyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicySyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicySyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sync == nil {
				m.Sync = &PolicySync{}
			}
			if err := m.Sync.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicySyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicySyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPolicySyncsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicySyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPolicySyncsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPolicySyncsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Syncs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicySyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicySyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicySyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Syncs = append(m.Syncs, &PolicySync{})
			if err := m.Syncs[len(m.Syncs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicySyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicySyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPolicySyncService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPolicySyncService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPolicySyncService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPolicySyncService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPolicySyncService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPolicySyncService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPolicySyncService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPolicySyncService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPolicySyncService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPolicySyncService = fmt.Errorf("proto: unexpected end of group")
)
