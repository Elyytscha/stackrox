// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1/log_integration_service.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	storage "github.com/stackrox/rox/generated/storage"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetLogIntegrationsResponse struct {
	Integrations         []*storage.LogIntegration `protobuf:"bytes,1,rep,name=integrations,proto3" json:"integrations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *GetLogIntegrationsResponse) Reset()         { *m = GetLogIntegrationsResponse{} }
func (m *GetLogIntegrationsResponse) String() string { return proto.CompactTextString(m) }
func (*GetLogIntegrationsResponse) ProtoMessage()    {}
func (*GetLogIntegrationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2594847901d380c, []int{0}
}
func (m *GetLogIntegrationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLogIntegrationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLogIntegrationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLogIntegrationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLogIntegrationsResponse.Merge(m, src)
}
func (m *GetLogIntegrationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetLogIntegrationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLogIntegrationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetLogIntegrationsResponse proto.InternalMessageInfo

func (m *GetLogIntegrationsResponse) GetIntegrations() []*storage.LogIntegration {
	if m != nil {
		return m.Integrations
	}
	return nil
}

func (m *GetLogIntegrationsResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetLogIntegrationsResponse) Clone() *GetLogIntegrationsResponse {
	if m == nil {
		return nil
	}
	cloned := new(GetLogIntegrationsResponse)
	*cloned = *m

	if m.Integrations != nil {
		cloned.Integrations = make([]*storage.LogIntegration, len(m.Integrations))
		for idx, v := range m.Integrations {
			cloned.Integrations[idx] = v.Clone()
		}
	}
	return cloned
}

type UpdateLogIntegrationRequest struct {
	Config *storage.LogIntegration `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// When false, use the stored credentials of an existing log integration given its ID.
	UpdatePassword       bool     `protobuf:"varint,2,opt,name=update_password,json=updatePassword,proto3" json:"update_password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateLogIntegrationRequest) Reset()         { *m = UpdateLogIntegrationRequest{} }
func (m *UpdateLogIntegrationRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateLogIntegrationRequest) ProtoMessage()    {}
func (*UpdateLogIntegrationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2594847901d380c, []int{1}
}
func (m *UpdateLogIntegrationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateLogIntegrationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateLogIntegrationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateLogIntegrationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateLogIntegrationRequest.Merge(m, src)
}
func (m *UpdateLogIntegrationRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateLogIntegrationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateLogIntegrationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateLogIntegrationRequest proto.InternalMessageInfo

func (m *UpdateLogIntegrationRequest) GetConfig() *storage.LogIntegration {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *UpdateLogIntegrationRequest) GetUpdatePassword() bool {
	if m != nil {
		return m.UpdatePassword
	}
	return false
}

func (m *UpdateLogIntegrationRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *UpdateLogIntegrationRequest) Clone() *UpdateLogIntegrationRequest {
	if m == nil {
		return nil
	}
	cloned := new(UpdateLogIntegrationRequest)
	*cloned = *m

	cloned.Config = m.Config.Clone()
	return cloned
}

type GetLogIntegrationResponse struct {
	LogIntegration       *storage.LogIntegration `protobuf:"bytes,1,opt,name=log_integration,json=logIntegration,proto3" json:"log_integration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *GetLogIntegrationResponse) Reset()         { *m = GetLogIntegrationResponse{} }
func (m *GetLogIntegrationResponse) String() string { return proto.CompactTextString(m) }
func (*GetLogIntegrationResponse) ProtoMessage()    {}
func (*GetLogIntegrationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2594847901d380c, []int{2}
}
func (m *GetLogIntegrationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLogIntegrationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLogIntegrationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLogIntegrationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLogIntegrationResponse.Merge(m, src)
}
func (m *GetLogIntegrationResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetLogIntegrationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLogIntegrationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetLogIntegrationResponse proto.InternalMessageInfo

func (m *GetLogIntegrationResponse) GetLogIntegration() *storage.LogIntegration {
	if m != nil {
		return m.LogIntegration
	}
	return nil
}

func (m *GetLogIntegrationResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetLogIntegrationResponse) Clone() *GetLogIntegrationResponse {
	if m == nil {
		return nil
	}
	cloned := new(GetLogIntegrationResponse)
	*cloned = *m

	cloned.LogIntegration = m.LogIntegration.Clone()
	return cloned
}

type CreateLogIntegrationRequest struct {
	LogIntegration       *storage.LogIntegration `protobuf:"bytes,1,opt,name=log_integration,json=logIntegration,proto3" json:"log_integration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *CreateLogIntegrationRequest) Reset()         { *m = CreateLogIntegrationRequest{} }
func (m *CreateLogIntegrationRequest) String() string { return proto.CompactTextString(m) }
func (*CreateLogIntegrationRequest) ProtoMessage()    {}
func (*CreateLogIntegrationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2594847901d380c, []int{3}
}
func (m *CreateLogIntegrationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateLogIntegrationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateLogIntegrationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateLogIntegrationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateLogIntegrationRequest.Merge(m, src)
}
func (m *CreateLogIntegrationRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateLogIntegrationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateLogIntegrationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateLogIntegrationRequest proto.InternalMessageInfo

func (m *CreateLogIntegrationRequest) GetLogIntegration() *storage.LogIntegration {
	if m != nil {
		return m.LogIntegration
	}
	return nil
}

func (m *CreateLogIntegrationRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *CreateLogIntegrationRequest) Clone() *CreateLogIntegrationRequest {
	if m == nil {
		return nil
	}
	cloned := new(CreateLogIntegrationRequest)
	*cloned = *m

	cloned.LogIntegration = m.LogIntegration.Clone()
	return cloned
}

type CreateLogIntegrationResponse struct {
	LogIntegration       *storage.LogIntegration `protobuf:"bytes,1,opt,name=log_integration,json=logIntegration,proto3" json:"log_integration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *CreateLogIntegrationResponse) Reset()         { *m = CreateLogIntegrationResponse{} }
func (m *CreateLogIntegrationResponse) String() string { return proto.CompactTextString(m) }
func (*CreateLogIntegrationResponse) ProtoMessage()    {}
func (*CreateLogIntegrationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2594847901d380c, []int{4}
}
func (m *CreateLogIntegrationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateLogIntegrationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateLogIntegrationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateLogIntegrationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateLogIntegrationResponse.Merge(m, src)
}
func (m *CreateLogIntegrationResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateLogIntegrationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateLogIntegrationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateLogIntegrationResponse proto.InternalMessageInfo

func (m *CreateLogIntegrationResponse) GetLogIntegration() *storage.LogIntegration {
	if m != nil {
		return m.LogIntegration
	}
	return nil
}

func (m *CreateLogIntegrationResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *CreateLogIntegrationResponse) Clone() *CreateLogIntegrationResponse {
	if m == nil {
		return nil
	}
	cloned := new(CreateLogIntegrationResponse)
	*cloned = *m

	cloned.LogIntegration = m.LogIntegration.Clone()
	return cloned
}

type TestLogIntegrationRequest struct {
	LogIntegration       *storage.LogIntegration `protobuf:"bytes,1,opt,name=log_integration,json=logIntegration,proto3" json:"log_integration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *TestLogIntegrationRequest) Reset()         { *m = TestLogIntegrationRequest{} }
func (m *TestLogIntegrationRequest) String() string { return proto.CompactTextString(m) }
func (*TestLogIntegrationRequest) ProtoMessage()    {}
func (*TestLogIntegrationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2594847901d380c, []int{5}
}
func (m *TestLogIntegrationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestLogIntegrationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestLogIntegrationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestLogIntegrationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestLogIntegrationRequest.Merge(m, src)
}
func (m *TestLogIntegrationRequest) XXX_Size() int {
	return m.Size()
}
func (m *TestLogIntegrationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TestLogIntegrationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TestLogIntegrationRequest proto.InternalMessageInfo

func (m *TestLogIntegrationRequest) GetLogIntegration() *storage.LogIntegration {
	if m != nil {
		return m.LogIntegration
	}
	return nil
}

func (m *TestLogIntegrationRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *TestLogIntegrationRequest) Clone() *TestLogIntegrationRequest {
	if m == nil {
		return nil
	}
	cloned := new(TestLogIntegrationRequest)
	*cloned = *m

	cloned.LogIntegration = m.LogIntegration.Clone()
	return cloned
}

func init() {
	proto.RegisterType((*GetLogIntegrationsResponse)(nil), "v1.GetLogIntegrationsResponse")
	proto.RegisterType((*UpdateLogIntegrationRequest)(nil), "v1.UpdateLogIntegrationRequest")
	proto.RegisterType((*GetLogIntegrationResponse)(nil), "v1.GetLogIntegrationResponse")
	proto.RegisterType((*CreateLogIntegrationRequest)(nil), "v1.CreateLogIntegrationRequest")
	proto.RegisterType((*CreateLogIntegrationResponse)(nil), "v1.CreateLogIntegrationResponse")
	proto.RegisterType((*TestLogIntegrationRequest)(nil), "v1.TestLogIntegrationRequest")
}

func init() {
	proto.RegisterFile("api/v1/log_integration_service.proto", fileDescriptor_f2594847901d380c)
}

var fileDescriptor_f2594847901d380c = []byte{
	// 546 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0xc1, 0x6e, 0xd3, 0x4e,
	0x10, 0xc6, 0xeb, 0xfc, 0xf5, 0xaf, 0x60, 0x40, 0x2d, 0x6c, 0x53, 0xe1, 0x3a, 0x8d, 0x6b, 0x99,
	0x22, 0xaa, 0x20, 0xad, 0xe5, 0x70, 0x2b, 0x17, 0x54, 0x8a, 0x50, 0x25, 0x0e, 0x28, 0x50, 0x09,
	0x10, 0x55, 0x30, 0xf6, 0xd4, 0xb2, 0x48, 0xbc, 0xc6, 0xbb, 0x71, 0x89, 0x50, 0x2f, 0xbc, 0x02,
	0x17, 0x1e, 0x89, 0x23, 0x12, 0x2f, 0x80, 0x02, 0x4f, 0xc1, 0x09, 0xd9, 0xbb, 0x6a, 0x93, 0xd8,
	0x0e, 0x87, 0xc2, 0x31, 0x93, 0xd9, 0xef, 0xa7, 0x6f, 0xbe, 0xf1, 0xc0, 0xb6, 0x97, 0x44, 0x4e,
	0xe6, 0x3a, 0x03, 0x16, 0xf6, 0xa3, 0x58, 0x60, 0x98, 0x7a, 0x22, 0x62, 0x71, 0x9f, 0x63, 0x9a,
	0x45, 0x3e, 0xd2, 0x24, 0x65, 0x82, 0x91, 0x46, 0xe6, 0x1a, 0x9b, 0x21, 0x63, 0xe1, 0x00, 0x9d,
	0xfc, 0x81, 0x17, 0xc7, 0x4c, 0x14, 0x8d, 0x5c, 0x76, 0x18, 0x6b, 0x4a, 0xc7, 0x67, 0xc3, 0x21,
	0x8b, 0x55, 0x91, 0xa8, 0x22, 0x0e, 0x13, 0x31, 0x56, 0xb5, 0x36, 0x17, 0x2c, 0xf5, 0x42, 0x9c,
	0x27, 0xca, 0xbf, 0xed, 0x17, 0x60, 0x3c, 0x42, 0xf1, 0x98, 0x85, 0x07, 0xe7, 0x7f, 0xf1, 0x1e,
	0xf2, 0x84, 0xc5, 0x1c, 0xc9, 0x3d, 0xb8, 0x3a, 0xf5, 0x84, 0xeb, 0x9a, 0xf5, 0xdf, 0xce, 0x95,
	0xee, 0x0d, 0xaa, 0x34, 0xe9, 0xec, 0xbb, 0xde, 0x4c, 0xb3, 0x7d, 0x02, 0xad, 0xc3, 0x24, 0xf0,
	0x04, 0xce, 0x75, 0xe1, 0xbb, 0x11, 0x72, 0x41, 0x1c, 0x58, 0xf6, 0x59, 0x7c, 0x1c, 0x85, 0xba,
	0x66, 0x69, 0x8b, 0x54, 0x55, 0x1b, 0xb9, 0x0d, 0xab, 0xa3, 0x42, 0xaf, 0x9f, 0x78, 0x9c, 0x9f,
	0xb0, 0x34, 0xd0, 0x1b, 0x96, 0xb6, 0x73, 0xa9, 0xb7, 0x22, 0xcb, 0x4f, 0x54, 0xd5, 0x3e, 0x82,
	0x8d, 0x92, 0xa7, 0x33, 0x4b, 0xf7, 0x61, 0x75, 0x6e, 0x12, 0x7f, 0xe2, 0xaf, 0x0c, 0x66, 0x7e,
	0xdb, 0x7d, 0x68, 0x3d, 0x48, 0xb1, 0xd6, 0xd7, 0xc5, 0x01, 0xaf, 0x61, 0xb3, 0x1a, 0xf0, 0xd7,
	0x2c, 0x1c, 0xc1, 0xc6, 0x33, 0xe4, 0xe2, 0x1f, 0x19, 0xe8, 0xfe, 0xfa, 0x1f, 0xd6, 0x67, 0x5b,
	0x9e, 0xca, 0xf5, 0x26, 0xc7, 0x70, 0xbd, 0x14, 0x0d, 0xb9, 0x46, 0x33, 0x97, 0xf6, 0x90, 0xb3,
	0x51, 0xea, 0xe3, 0xde, 0xf8, 0x60, 0xdf, 0x68, 0xe7, 0x95, 0xda, 0x0c, 0x6d, 0xeb, 0xe3, 0xb7,
	0x9f, 0x9f, 0x1a, 0x06, 0xd1, 0xd5, 0x97, 0x34, 0xbd, 0x76, 0xce, 0x87, 0x28, 0x38, 0x25, 0xaf,
	0x80, 0x94, 0xd7, 0x9a, 0x5c, 0xce, 0x65, 0x1f, 0xe6, 0x1f, 0x87, 0x61, 0x56, 0x12, 0xce, 0x36,
	0xdf, 0x6e, 0x15, 0x88, 0x75, 0xb2, 0x56, 0x81, 0x20, 0x63, 0x68, 0x56, 0x05, 0x44, 0xb6, 0x72,
	0xd1, 0x05, 0xbb, 0x61, 0x58, 0xf5, 0x0d, 0x8a, 0x6b, 0x16, 0x5c, 0xdd, 0xae, 0xe2, 0xee, 0x6a,
	0x1d, 0xe2, 0x03, 0x29, 0x27, 0x47, 0x8a, 0x79, 0xd5, 0x26, 0x6a, 0x9c, 0xfb, 0xb6, 0x6f, 0x16,
	0xfa, 0x6d, 0xbb, 0x72, 0x74, 0x02, 0xb9, 0xc8, 0x21, 0x87, 0xd0, 0xdc, 0xc7, 0x01, 0x96, 0xfc,
	0x95, 0x83, 0x9a, 0x52, 0x56, 0xa1, 0x74, 0xea, 0x43, 0x89, 0xa1, 0x59, 0x75, 0x10, 0xe4, 0xd8,
	0x16, 0x9c, 0x8a, 0x69, 0x4a, 0xa7, 0xa0, 0x6c, 0x77, 0xb7, 0x2a, 0x29, 0xf2, 0x52, 0xd0, 0x28,
	0x38, 0xcd, 0x6d, 0x08, 0xb9, 0xe5, 0x52, 0x39, 0xb8, 0x00, 0xf4, 0x4e, 0x01, 0xbd, 0x65, 0x5b,
	0x75, 0x43, 0x73, 0xe4, 0x05, 0x0a, 0x76, 0xb5, 0xce, 0x1e, 0xfd, 0x32, 0x31, 0xb5, 0xaf, 0x13,
	0x53, 0xfb, 0x3e, 0x31, 0xb5, 0xcf, 0x3f, 0xcc, 0x25, 0xd0, 0x23, 0x46, 0xb9, 0xf0, 0xfc, 0xb7,
	0x29, 0x7b, 0x2f, 0xcf, 0x2e, 0xf5, 0x92, 0x88, 0x66, 0xee, 0xcb, 0x46, 0xe6, 0x3e, 0x5f, 0x7a,
	0xb3, 0x5c, 0xd4, 0xee, 0xfe, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x8f, 0xf9, 0x9a, 0xd3, 0x1c, 0x06,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LogIntegrationServiceClient is the client API for LogIntegrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConnInterface.NewStream.
type LogIntegrationServiceClient interface {
	// GetLogIntegration returns the log integration given its ID.
	GetLogIntegration(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*GetLogIntegrationResponse, error)
	// GetLogintegrations returns all log integrations.
	GetLogIntegrations(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetLogIntegrationsResponse, error)
	// CreateLogIntegration creates a log integration.
	CreateLogIntegration(ctx context.Context, in *CreateLogIntegrationRequest, opts ...grpc.CallOption) (*CreateLogIntegrationResponse, error)
	// TestLogIntegration checks if the given log integration is correctly configured,
	// without using stored credential reconciliation.
	TestLogIntegration(ctx context.Context, in *TestLogIntegrationRequest, opts ...grpc.CallOption) (*Empty, error)
	// DeleteLogIntegration removes a log integration given its ID.
	DeleteLogIntegration(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error)
	// UpdateLogIntegration modifies a given image integration, with optional stored credential reconciliation.
	UpdateLogIntegration(ctx context.Context, in *UpdateLogIntegrationRequest, opts ...grpc.CallOption) (*Empty, error)
	// TestUpdatedLogIntegration checks if the given log integration is correctly configured,
	// with optional stored credential reconciliation.
	TestUpdatedLogIntegration(ctx context.Context, in *UpdateLogIntegrationRequest, opts ...grpc.CallOption) (*Empty, error)
}

type logIntegrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogIntegrationServiceClient(cc grpc.ClientConnInterface) LogIntegrationServiceClient {
	return &logIntegrationServiceClient{cc}
}

func (c *logIntegrationServiceClient) GetLogIntegration(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*GetLogIntegrationResponse, error) {
	out := new(GetLogIntegrationResponse)
	err := c.cc.Invoke(ctx, "/v1.LogIntegrationService/GetLogIntegration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logIntegrationServiceClient) GetLogIntegrations(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetLogIntegrationsResponse, error) {
	out := new(GetLogIntegrationsResponse)
	err := c.cc.Invoke(ctx, "/v1.LogIntegrationService/GetLogIntegrations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logIntegrationServiceClient) CreateLogIntegration(ctx context.Context, in *CreateLogIntegrationRequest, opts ...grpc.CallOption) (*CreateLogIntegrationResponse, error) {
	out := new(CreateLogIntegrationResponse)
	err := c.cc.Invoke(ctx, "/v1.LogIntegrationService/CreateLogIntegration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logIntegrationServiceClient) TestLogIntegration(ctx context.Context, in *TestLogIntegrationRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v1.LogIntegrationService/TestLogIntegration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logIntegrationServiceClient) DeleteLogIntegration(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v1.LogIntegrationService/DeleteLogIntegration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logIntegrationServiceClient) UpdateLogIntegration(ctx context.Context, in *UpdateLogIntegrationRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v1.LogIntegrationService/UpdateLogIntegration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logIntegrationServiceClient) TestUpdatedLogIntegration(ctx context.Context, in *UpdateLogIntegrationRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v1.LogIntegrationService/TestUpdatedLogIntegration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogIntegrationServiceServer is the server API for LogIntegrationService service.
type LogIntegrationServiceServer interface {
	// GetLogIntegration returns the log integration given its ID.
	GetLogIntegration(context.Context, *ResourceByID) (*GetLogIntegrationResponse, error)
	// GetLogintegrations returns all log integrations.
	GetLogIntegrations(context.Context, *Empty) (*GetLogIntegrationsResponse, error)
	// CreateLogIntegration creates a log integration.
	CreateLogIntegration(context.Context, *CreateLogIntegrationRequest) (*CreateLogIntegrationResponse, error)
	// TestLogIntegration checks if the given log integration is correctly configured,
	// without using stored credential reconciliation.
	TestLogIntegration(context.Context, *TestLogIntegrationRequest) (*Empty, error)
	// DeleteLogIntegration removes a log integration given its ID.
	DeleteLogIntegration(context.Context, *ResourceByID) (*Empty, error)
	// UpdateLogIntegration modifies a given image integration, with optional stored credential reconciliation.
	UpdateLogIntegration(context.Context, *UpdateLogIntegrationRequest) (*Empty, error)
	// TestUpdatedLogIntegration checks if the given log integration is correctly configured,
	// with optional stored credential reconciliation.
	TestUpdatedLogIntegration(context.Context, *UpdateLogIntegrationRequest) (*Empty, error)
}

// UnimplementedLogIntegrationServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLogIntegrationServiceServer struct {
}

func (*UnimplementedLogIntegrationServiceServer) GetLogIntegration(ctx context.Context, req *ResourceByID) (*GetLogIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogIntegration not implemented")
}
func (*UnimplementedLogIntegrationServiceServer) GetLogIntegrations(ctx context.Context, req *Empty) (*GetLogIntegrationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogIntegrations not implemented")
}
func (*UnimplementedLogIntegrationServiceServer) CreateLogIntegration(ctx context.Context, req *CreateLogIntegrationRequest) (*CreateLogIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLogIntegration not implemented")
}
func (*UnimplementedLogIntegrationServiceServer) TestLogIntegration(ctx context.Context, req *TestLogIntegrationRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestLogIntegration not implemented")
}
func (*UnimplementedLogIntegrationServiceServer) DeleteLogIntegration(ctx context.Context, req *ResourceByID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLogIntegration not implemented")
}
func (*UnimplementedLogIntegrationServiceServer) UpdateLogIntegration(ctx context.Context, req *UpdateLogIntegrationRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLogIntegration not implemented")
}
func (*UnimplementedLogIntegrationServiceServer) TestUpdatedLogIntegration(ctx context.Context, req *UpdateLogIntegrationRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestUpdatedLogIntegration not implemented")
}

func RegisterLogIntegrationServiceServer(s *grpc.Server, srv LogIntegrationServiceServer) {
	s.RegisterService(&_LogIntegrationService_serviceDesc, srv)
}

func _LogIntegrationService_GetLogIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogIntegrationServiceServer).GetLogIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.LogIntegrationService/GetLogIntegration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogIntegrationServiceServer).GetLogIntegration(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogIntegrationService_GetLogIntegrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogIntegrationServiceServer).GetLogIntegrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.LogIntegrationService/GetLogIntegrations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogIntegrationServiceServer).GetLogIntegrations(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogIntegrationService_CreateLogIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLogIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogIntegrationServiceServer).CreateLogIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.LogIntegrationService/CreateLogIntegration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogIntegrationServiceServer).CreateLogIntegration(ctx, req.(*CreateLogIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogIntegrationService_TestLogIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestLogIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogIntegrationServiceServer).TestLogIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.LogIntegrationService/TestLogIntegration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogIntegrationServiceServer).TestLogIntegration(ctx, req.(*TestLogIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogIntegrationService_DeleteLogIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogIntegrationServiceServer).DeleteLogIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.LogIntegrationService/DeleteLogIntegration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogIntegrationServiceServer).DeleteLogIntegration(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogIntegrationService_UpdateLogIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLogIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogIntegrationServiceServer).UpdateLogIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.LogIntegrationService/UpdateLogIntegration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogIntegrationServiceServer).UpdateLogIntegration(ctx, req.(*UpdateLogIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogIntegrationService_TestUpdatedLogIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLogIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogIntegrationServiceServer).TestUpdatedLogIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.LogIntegrationService/TestUpdatedLogIntegration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogIntegrationServiceServer).TestUpdatedLogIntegration(ctx, req.(*UpdateLogIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogIntegrationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.LogIntegrationService",
	HandlerType: (*LogIntegrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLogIntegration",
			Handler:    _LogIntegrationService_GetLogIntegration_Handler,
		},
		{
			MethodName: "GetLogIntegrations",
			Handler:    _LogIntegrationService_GetLogIntegrations_Handler,
		},
		{
			MethodName: "CreateLogIntegration",
			Handler:    _LogIntegrationService_CreateLogIntegration_Handler,
		},
		{
			MethodName: "TestLogIntegration",
			Handler:    _LogIntegrationService_TestLogIntegration_Handler,
		},
		{
			MethodName: "DeleteLogIntegration",
			Handler:    _LogIntegrationService_DeleteLogIntegration_Handler,
		},
		{
			MethodName: "UpdateLogIntegration",
			Handler:    _LogIntegrationService_UpdateLogIntegration_Handler,
		},
		{
			MethodName: "TestUpdatedLogIntegration",
			Handler:    _LogIntegrationService_TestUpdatedLogIntegration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/log_integration_service.proto",
}

func (m *GetLogIntegrationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLogIntegrationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLogIntegrationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Integrations) > 0 {
		for iNdEx := len(m.Integrations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Integrations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLogIntegrationService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateLogIntegrationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateLogIntegrationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateLogIntegrationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdatePassword {
		i--
		if m.UpdatePassword {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLogIntegrationService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetLogIntegrationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLogIntegrationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLogIntegrationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LogIntegration != nil {
		{
			size, err := m.LogIntegration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLogIntegrationService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateLogIntegrationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateLogIntegrationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateLogIntegrationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LogIntegration != nil {
		{
			size, err := m.LogIntegration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLogIntegrationService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateLogIntegrationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateLogIntegrationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateLogIntegrationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LogIntegration != nil {
		{
			size, err := m.LogIntegration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLogIntegrationService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TestLogIntegrationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestLogIntegrationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestLogIntegrationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LogIntegration != nil {
		{
			size, err := m.LogIntegration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLogIntegrationService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLogIntegrationService(dAtA []byte, offset int, v uint64) int {
	offset -= sovLogIntegrationService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetLogIntegrationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Integrations) > 0 {
		for _, e := range m.Integrations {
			l = e.Size()
			n += 1 + l + sovLogIntegrationService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateLogIntegrationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovLogIntegrationService(uint64(l))
	}
	if m.UpdatePassword {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetLogIntegrationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogIntegration != nil {
		l = m.LogIntegration.Size()
		n += 1 + l + sovLogIntegrationService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateLogIntegrationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogIntegration != nil {
		l = m.LogIntegration.Size()
		n += 1 + l + sovLogIntegrationService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateLogIntegrationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogIntegration != nil {
		l = m.LogIntegration.Size()
		n += 1 + l + sovLogIntegrationService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestLogIntegrationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogIntegration != nil {
		l = m.LogIntegration.Size()
		n += 1 + l + sovLogIntegrationService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovLogIntegrationService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLogIntegrationService(x uint64) (n int) {
	return sovLogIntegrationService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetLogIntegrationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogIntegrationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLogIntegrationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLogIntegrationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Integrations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIntegrationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogIntegrationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogIntegrationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Integrations = append(m.Integrations, &storage.LogIntegration{})
			if err := m.Integrations[len(m.Integrations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogIntegrationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogIntegrationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateLogIntegrationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogIntegrationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateLogIntegrationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateLogIntegrationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIntegrationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogIntegrationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogIntegrationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &storage.LogIntegration{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatePassword", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIntegrationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdatePassword = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLogIntegrationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogIntegrationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLogIntegrationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogIntegrationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLogIntegrationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLogIntegrationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogIntegration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIntegrationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogIntegrationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogIntegrationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LogIntegration == nil {
				m.LogIntegration = &storage.LogIntegration{}
			}
			if err := m.LogIntegration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogIntegrationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogIntegrationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateLogIntegrationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogIntegrationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateLogIntegrationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateLogIntegrationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogIntegration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIntegrationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogIntegrationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogIntegrationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LogIntegration == nil {
				m.LogIntegration = &storage.LogIntegration{}
			}
			if err := m.LogIntegration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogIntegrationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogIntegrationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateLogIntegrationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogIntegrationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateLogIntegrationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateLogIntegrationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogIntegration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIntegrationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogIntegrationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogIntegrationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LogIntegration == nil {
				m.LogIntegration = &storage.LogIntegration{}
			}
			if err := m.LogIntegration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogIntegrationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogIntegrationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestLogIntegrationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogIntegrationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestLogIntegrationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestLogIntegrationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogIntegration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIntegrationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogIntegrationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogIntegrationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LogIntegration == nil {
				m.LogIntegration = &storage.LogIntegration{}
			}
			if err := m.LogIntegration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogIntegrationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogIntegrationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLogIntegrationService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLogIntegrationService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogIntegrationService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogIntegrationService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLogIntegrationService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLogIntegrationService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLogIntegrationService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLogIntegrationService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLogIntegrationService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLogIntegrationService = fmt.Errorf("proto: unexpected end of group")
)
