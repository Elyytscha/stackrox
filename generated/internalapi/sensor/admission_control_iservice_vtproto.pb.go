// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.3.1-0.20220817155510-0ae748fd2007
// source: internalapi/sensor/admission_control_iservice.proto

package sensor

import (
	context "context"
	fmt "fmt"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (m *MsgFromAdmissionControl) CloneVT() *MsgFromAdmissionControl {
	if m == nil {
		return (*MsgFromAdmissionControl)(nil)
	}
	r := &MsgFromAdmissionControl{}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *MsgFromAdmissionControl) CloneGenericVT() proto.Message {
	return m.CloneVT()
}

func (m *MsgToAdmissionControl) CloneVT() *MsgToAdmissionControl {
	if m == nil {
		return (*MsgToAdmissionControl)(nil)
	}
	r := &MsgToAdmissionControl{}
	if m.Msg != nil {
		r.Msg = m.Msg.(interface {
			CloneVT() isMsgToAdmissionControl_Msg
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *MsgToAdmissionControl) CloneGenericVT() proto.Message {
	return m.CloneVT()
}

func (m *MsgToAdmissionControl_SettingsPush) CloneVT() isMsgToAdmissionControl_Msg {
	if m == nil {
		return (*MsgToAdmissionControl_SettingsPush)(nil)
	}
	r := &MsgToAdmissionControl_SettingsPush{
		SettingsPush: m.SettingsPush.CloneVT(),
	}
	return r
}

func (m *MsgToAdmissionControl_UpdateResourceRequest) CloneVT() isMsgToAdmissionControl_Msg {
	if m == nil {
		return (*MsgToAdmissionControl_UpdateResourceRequest)(nil)
	}
	r := &MsgToAdmissionControl_UpdateResourceRequest{
		UpdateResourceRequest: m.UpdateResourceRequest.CloneVT(),
	}
	return r
}

func (this *MsgFromAdmissionControl) EqualVT(that *MsgFromAdmissionControl) bool {
	if this == nil {
		return that == nil
	} else if that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *MsgToAdmissionControl) EqualVT(that *MsgToAdmissionControl) bool {
	if this == nil {
		return that == nil
	} else if that == nil {
		return false
	}
	if this.Msg == nil && that.Msg != nil {
		return false
	} else if this.Msg != nil {
		if that.Msg == nil {
			return false
		}
		if !this.Msg.(interface {
			EqualVT(isMsgToAdmissionControl_Msg) bool
		}).EqualVT(that.Msg) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *MsgToAdmissionControl_SettingsPush) EqualVT(thatIface isMsgToAdmissionControl_Msg) bool {
	that, ok := thatIface.(*MsgToAdmissionControl_SettingsPush)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.SettingsPush, that.SettingsPush; p != q {
		if p == nil {
			p = &AdmissionControlSettings{}
		}
		if q == nil {
			q = &AdmissionControlSettings{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MsgToAdmissionControl_UpdateResourceRequest) EqualVT(thatIface isMsgToAdmissionControl_Msg) bool {
	that, ok := thatIface.(*MsgToAdmissionControl_UpdateResourceRequest)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.UpdateResourceRequest, that.UpdateResourceRequest; p != q {
		if p == nil {
			p = &AdmCtrlUpdateResourceRequest{}
		}
		if q == nil {
			q = &AdmCtrlUpdateResourceRequest{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdmissionControlManagementServiceClient is the client API for AdmissionControlManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdmissionControlManagementServiceClient interface {
	Communicate(ctx context.Context, opts ...grpc.CallOption) (AdmissionControlManagementService_CommunicateClient, error)
	PolicyAlerts(ctx context.Context, in *AdmissionControlAlerts, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type admissionControlManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdmissionControlManagementServiceClient(cc grpc.ClientConnInterface) AdmissionControlManagementServiceClient {
	return &admissionControlManagementServiceClient{cc}
}

func (c *admissionControlManagementServiceClient) Communicate(ctx context.Context, opts ...grpc.CallOption) (AdmissionControlManagementService_CommunicateClient, error) {
	stream, err := c.cc.NewStream(ctx, &AdmissionControlManagementService_ServiceDesc.Streams[0], "/sensor.AdmissionControlManagementService/Communicate", opts...)
	if err != nil {
		return nil, err
	}
	x := &admissionControlManagementServiceCommunicateClient{stream}
	return x, nil
}

type AdmissionControlManagementService_CommunicateClient interface {
	Send(*MsgFromAdmissionControl) error
	Recv() (*MsgToAdmissionControl, error)
	grpc.ClientStream
}

type admissionControlManagementServiceCommunicateClient struct {
	grpc.ClientStream
}

func (x *admissionControlManagementServiceCommunicateClient) Send(m *MsgFromAdmissionControl) error {
	return x.ClientStream.SendMsg(m)
}

func (x *admissionControlManagementServiceCommunicateClient) Recv() (*MsgToAdmissionControl, error) {
	m := new(MsgToAdmissionControl)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *admissionControlManagementServiceClient) PolicyAlerts(ctx context.Context, in *AdmissionControlAlerts, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/sensor.AdmissionControlManagementService/PolicyAlerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdmissionControlManagementServiceServer is the server API for AdmissionControlManagementService service.
// All implementations must embed UnimplementedAdmissionControlManagementServiceServer
// for forward compatibility
type AdmissionControlManagementServiceServer interface {
	Communicate(AdmissionControlManagementService_CommunicateServer) error
	PolicyAlerts(context.Context, *AdmissionControlAlerts) (*emptypb.Empty, error)
	mustEmbedUnimplementedAdmissionControlManagementServiceServer()
}

// UnimplementedAdmissionControlManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdmissionControlManagementServiceServer struct {
}

func (UnimplementedAdmissionControlManagementServiceServer) Communicate(AdmissionControlManagementService_CommunicateServer) error {
	return status.Errorf(codes.Unimplemented, "method Communicate not implemented")
}
func (UnimplementedAdmissionControlManagementServiceServer) PolicyAlerts(context.Context, *AdmissionControlAlerts) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PolicyAlerts not implemented")
}
func (UnimplementedAdmissionControlManagementServiceServer) mustEmbedUnimplementedAdmissionControlManagementServiceServer() {
}

// UnsafeAdmissionControlManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdmissionControlManagementServiceServer will
// result in compilation errors.
type UnsafeAdmissionControlManagementServiceServer interface {
	mustEmbedUnimplementedAdmissionControlManagementServiceServer()
}

func RegisterAdmissionControlManagementServiceServer(s grpc.ServiceRegistrar, srv AdmissionControlManagementServiceServer) {
	s.RegisterService(&AdmissionControlManagementService_ServiceDesc, srv)
}

func _AdmissionControlManagementService_Communicate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AdmissionControlManagementServiceServer).Communicate(&admissionControlManagementServiceCommunicateServer{stream})
}

type AdmissionControlManagementService_CommunicateServer interface {
	Send(*MsgToAdmissionControl) error
	Recv() (*MsgFromAdmissionControl, error)
	grpc.ServerStream
}

type admissionControlManagementServiceCommunicateServer struct {
	grpc.ServerStream
}

func (x *admissionControlManagementServiceCommunicateServer) Send(m *MsgToAdmissionControl) error {
	return x.ServerStream.SendMsg(m)
}

func (x *admissionControlManagementServiceCommunicateServer) Recv() (*MsgFromAdmissionControl, error) {
	m := new(MsgFromAdmissionControl)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AdmissionControlManagementService_PolicyAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdmissionControlAlerts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdmissionControlManagementServiceServer).PolicyAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensor.AdmissionControlManagementService/PolicyAlerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdmissionControlManagementServiceServer).PolicyAlerts(ctx, req.(*AdmissionControlAlerts))
	}
	return interceptor(ctx, in, info, handler)
}

// AdmissionControlManagementService_ServiceDesc is the grpc.ServiceDesc for AdmissionControlManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdmissionControlManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sensor.AdmissionControlManagementService",
	HandlerType: (*AdmissionControlManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PolicyAlerts",
			Handler:    _AdmissionControlManagementService_PolicyAlerts_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Communicate",
			Handler:       _AdmissionControlManagementService_Communicate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internalapi/sensor/admission_control_iservice.proto",
}

func (m *MsgFromAdmissionControl) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFromAdmissionControl) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MsgFromAdmissionControl) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	return len(dAtA) - i, nil
}

func (m *MsgToAdmissionControl) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgToAdmissionControl) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MsgToAdmissionControl) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if vtmsg, ok := m.Msg.(interface {
		MarshalToSizedBufferVT([]byte) (int, error)
	}); ok {
		size, err := vtmsg.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	return len(dAtA) - i, nil
}

func (m *MsgToAdmissionControl_SettingsPush) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MsgToAdmissionControl_SettingsPush) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SettingsPush != nil {
		size, err := m.SettingsPush.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *MsgToAdmissionControl_UpdateResourceRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MsgToAdmissionControl_UpdateResourceRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateResourceRequest != nil {
		size, err := m.UpdateResourceRequest.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *MsgFromAdmissionControl) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += len(m.unknownFields)
	return n
}

func (m *MsgToAdmissionControl) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if vtmsg, ok := m.Msg.(interface{ SizeVT() int }); ok {
		n += vtmsg.SizeVT()
	}
	n += len(m.unknownFields)
	return n
}

func (m *MsgToAdmissionControl_SettingsPush) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SettingsPush != nil {
		l = m.SettingsPush.SizeVT()
		n += 1 + l + sov(uint64(l))
	}
	return n
}
func (m *MsgToAdmissionControl_UpdateResourceRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateResourceRequest != nil {
		l = m.UpdateResourceRequest.SizeVT()
		n += 1 + l + sov(uint64(l))
	}
	return n
}
func (m *MsgFromAdmissionControl) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFromAdmissionControl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFromAdmissionControl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgToAdmissionControl) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgToAdmissionControl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgToAdmissionControl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettingsPush", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Msg.(*MsgToAdmissionControl_SettingsPush); ok {
				if err := oneof.SettingsPush.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &AdmissionControlSettings{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Msg = &MsgToAdmissionControl_SettingsPush{SettingsPush: v}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateResourceRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Msg.(*MsgToAdmissionControl_UpdateResourceRequest); ok {
				if err := oneof.UpdateResourceRequest.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &AdmCtrlUpdateResourceRequest{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Msg = &MsgToAdmissionControl_UpdateResourceRequest{UpdateResourceRequest: v}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
