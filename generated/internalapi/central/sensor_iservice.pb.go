// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: internalapi/central/sensor_iservice.proto

package central

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	storage "github.com/stackrox/rox/generated/storage"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NodeInventoryACK_Action int32

const (
	NodeInventoryACK_ACK  NodeInventoryACK_Action = 0
	NodeInventoryACK_NACK NodeInventoryACK_Action = 1
)

var NodeInventoryACK_Action_name = map[int32]string{
	0: "ACK",
	1: "NACK",
}

var NodeInventoryACK_Action_value = map[string]int32{
	"ACK":  0,
	"NACK": 1,
}

func (x NodeInventoryACK_Action) String() string {
	return proto.EnumName(NodeInventoryACK_Action_name, int32(x))
}

func (NodeInventoryACK_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9d0a66b7b73dbb5d, []int{8, 0}
}

// next available tag: 18
type MsgFromSensor struct {
	HashKey           string `protobuf:"bytes,7,opt,name=hash_key,json=hashKey,proto3" json:"hash_key,omitempty"`
	DedupeKey         string `protobuf:"bytes,8,opt,name=dedupe_key,json=dedupeKey,proto3" json:"dedupe_key,omitempty"`
	ProcessingAttempt int32  `protobuf:"varint,15,opt,name=processing_attempt,json=processingAttempt,proto3" json:"processing_attempt,omitempty"`
	// Types that are valid to be assigned to Msg:
	//	*MsgFromSensor_Event
	//	*MsgFromSensor_NetworkFlowUpdate
	//	*MsgFromSensor_ScrapeUpdate
	//	*MsgFromSensor_NetworkPoliciesResponse
	//	*MsgFromSensor_ClusterStatusUpdate
	//	*MsgFromSensor_TelemetryDataResponse
	//	*MsgFromSensor_ClusterHealthInfo
	//	*MsgFromSensor_Hello
	//	*MsgFromSensor_AuditLogStatusInfo
	//	*MsgFromSensor_IssueLocalScannerCertsRequest
	//	*MsgFromSensor_ClusterMetrics
	//	*MsgFromSensor_ProcessListeningOnPortUpdate
	//	*MsgFromSensor_ComplianceOperatorInfo
	//	*MsgFromSensor_ComplianceResponse
	Msg                  isMsgFromSensor_Msg `protobuf_oneof:"msg"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *MsgFromSensor) Reset()         { *m = MsgFromSensor{} }
func (m *MsgFromSensor) String() string { return proto.CompactTextString(m) }
func (*MsgFromSensor) ProtoMessage()    {}
func (*MsgFromSensor) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d0a66b7b73dbb5d, []int{0}
}
func (m *MsgFromSensor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFromSensor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFromSensor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFromSensor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFromSensor.Merge(m, src)
}
func (m *MsgFromSensor) XXX_Size() int {
	return m.Size()
}
func (m *MsgFromSensor) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFromSensor.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFromSensor proto.InternalMessageInfo

type isMsgFromSensor_Msg interface {
	isMsgFromSensor_Msg()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isMsgFromSensor_Msg
}

type MsgFromSensor_Event struct {
	Event *SensorEvent `protobuf:"bytes,1,opt,name=event,proto3,oneof" json:"event,omitempty"`
}
type MsgFromSensor_NetworkFlowUpdate struct {
	NetworkFlowUpdate *NetworkFlowUpdate `protobuf:"bytes,2,opt,name=network_flow_update,json=networkFlowUpdate,proto3,oneof" json:"network_flow_update,omitempty"`
}
type MsgFromSensor_ScrapeUpdate struct {
	ScrapeUpdate *ScrapeUpdate `protobuf:"bytes,3,opt,name=scrape_update,json=scrapeUpdate,proto3,oneof" json:"scrape_update,omitempty"`
}
type MsgFromSensor_NetworkPoliciesResponse struct {
	NetworkPoliciesResponse *NetworkPoliciesResponse `protobuf:"bytes,4,opt,name=network_policies_response,json=networkPoliciesResponse,proto3,oneof" json:"network_policies_response,omitempty"`
}
type MsgFromSensor_ClusterStatusUpdate struct {
	ClusterStatusUpdate *ClusterStatusUpdate `protobuf:"bytes,5,opt,name=cluster_status_update,json=clusterStatusUpdate,proto3,oneof" json:"cluster_status_update,omitempty"`
}
type MsgFromSensor_TelemetryDataResponse struct {
	TelemetryDataResponse *PullTelemetryDataResponse `protobuf:"bytes,6,opt,name=telemetry_data_response,json=telemetryDataResponse,proto3,oneof" json:"telemetry_data_response,omitempty"`
}
type MsgFromSensor_ClusterHealthInfo struct {
	ClusterHealthInfo *RawClusterHealthInfo `protobuf:"bytes,9,opt,name=cluster_health_info,json=clusterHealthInfo,proto3,oneof" json:"cluster_health_info,omitempty"`
}
type MsgFromSensor_Hello struct {
	Hello *SensorHello `protobuf:"bytes,10,opt,name=hello,proto3,oneof" json:"hello,omitempty"`
}
type MsgFromSensor_AuditLogStatusInfo struct {
	AuditLogStatusInfo *AuditLogStatusInfo `protobuf:"bytes,11,opt,name=audit_log_status_info,json=auditLogStatusInfo,proto3,oneof" json:"audit_log_status_info,omitempty"`
}
type MsgFromSensor_IssueLocalScannerCertsRequest struct {
	IssueLocalScannerCertsRequest *IssueLocalScannerCertsRequest `protobuf:"bytes,12,opt,name=issue_local_scanner_certs_request,json=issueLocalScannerCertsRequest,proto3,oneof" json:"issue_local_scanner_certs_request,omitempty"`
}
type MsgFromSensor_ClusterMetrics struct {
	ClusterMetrics *ClusterMetrics `protobuf:"bytes,13,opt,name=cluster_metrics,json=clusterMetrics,proto3,oneof" json:"cluster_metrics,omitempty"`
}
type MsgFromSensor_ProcessListeningOnPortUpdate struct {
	ProcessListeningOnPortUpdate *ProcessListeningOnPortsUpdate `protobuf:"bytes,14,opt,name=process_listening_on_port_update,json=processListeningOnPortUpdate,proto3,oneof" json:"process_listening_on_port_update,omitempty"`
}
type MsgFromSensor_ComplianceOperatorInfo struct {
	ComplianceOperatorInfo *ComplianceOperatorInfo `protobuf:"bytes,16,opt,name=compliance_operator_info,json=complianceOperatorInfo,proto3,oneof" json:"compliance_operator_info,omitempty"`
}
type MsgFromSensor_ComplianceResponse struct {
	ComplianceResponse *ComplianceResponse `protobuf:"bytes,17,opt,name=compliance_response,json=complianceResponse,proto3,oneof" json:"compliance_response,omitempty"`
}

func (*MsgFromSensor_Event) isMsgFromSensor_Msg() {}
func (m *MsgFromSensor_Event) Clone() isMsgFromSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgFromSensor_Event)
	*cloned = *m

	cloned.Event = m.Event.Clone()
	return cloned
}
func (*MsgFromSensor_NetworkFlowUpdate) isMsgFromSensor_Msg() {}
func (m *MsgFromSensor_NetworkFlowUpdate) Clone() isMsgFromSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgFromSensor_NetworkFlowUpdate)
	*cloned = *m

	cloned.NetworkFlowUpdate = m.NetworkFlowUpdate.Clone()
	return cloned
}
func (*MsgFromSensor_ScrapeUpdate) isMsgFromSensor_Msg() {}
func (m *MsgFromSensor_ScrapeUpdate) Clone() isMsgFromSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgFromSensor_ScrapeUpdate)
	*cloned = *m

	cloned.ScrapeUpdate = m.ScrapeUpdate.Clone()
	return cloned
}
func (*MsgFromSensor_NetworkPoliciesResponse) isMsgFromSensor_Msg() {}
func (m *MsgFromSensor_NetworkPoliciesResponse) Clone() isMsgFromSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgFromSensor_NetworkPoliciesResponse)
	*cloned = *m

	cloned.NetworkPoliciesResponse = m.NetworkPoliciesResponse.Clone()
	return cloned
}
func (*MsgFromSensor_ClusterStatusUpdate) isMsgFromSensor_Msg() {}
func (m *MsgFromSensor_ClusterStatusUpdate) Clone() isMsgFromSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgFromSensor_ClusterStatusUpdate)
	*cloned = *m

	cloned.ClusterStatusUpdate = m.ClusterStatusUpdate.Clone()
	return cloned
}
func (*MsgFromSensor_TelemetryDataResponse) isMsgFromSensor_Msg() {}
func (m *MsgFromSensor_TelemetryDataResponse) Clone() isMsgFromSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgFromSensor_TelemetryDataResponse)
	*cloned = *m

	cloned.TelemetryDataResponse = m.TelemetryDataResponse.Clone()
	return cloned
}
func (*MsgFromSensor_ClusterHealthInfo) isMsgFromSensor_Msg() {}
func (m *MsgFromSensor_ClusterHealthInfo) Clone() isMsgFromSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgFromSensor_ClusterHealthInfo)
	*cloned = *m

	cloned.ClusterHealthInfo = m.ClusterHealthInfo.Clone()
	return cloned
}
func (*MsgFromSensor_Hello) isMsgFromSensor_Msg() {}
func (m *MsgFromSensor_Hello) Clone() isMsgFromSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgFromSensor_Hello)
	*cloned = *m

	cloned.Hello = m.Hello.Clone()
	return cloned
}
func (*MsgFromSensor_AuditLogStatusInfo) isMsgFromSensor_Msg() {}
func (m *MsgFromSensor_AuditLogStatusInfo) Clone() isMsgFromSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgFromSensor_AuditLogStatusInfo)
	*cloned = *m

	cloned.AuditLogStatusInfo = m.AuditLogStatusInfo.Clone()
	return cloned
}
func (*MsgFromSensor_IssueLocalScannerCertsRequest) isMsgFromSensor_Msg() {}
func (m *MsgFromSensor_IssueLocalScannerCertsRequest) Clone() isMsgFromSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgFromSensor_IssueLocalScannerCertsRequest)
	*cloned = *m

	cloned.IssueLocalScannerCertsRequest = m.IssueLocalScannerCertsRequest.Clone()
	return cloned
}
func (*MsgFromSensor_ClusterMetrics) isMsgFromSensor_Msg() {}
func (m *MsgFromSensor_ClusterMetrics) Clone() isMsgFromSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgFromSensor_ClusterMetrics)
	*cloned = *m

	cloned.ClusterMetrics = m.ClusterMetrics.Clone()
	return cloned
}
func (*MsgFromSensor_ProcessListeningOnPortUpdate) isMsgFromSensor_Msg() {}
func (m *MsgFromSensor_ProcessListeningOnPortUpdate) Clone() isMsgFromSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgFromSensor_ProcessListeningOnPortUpdate)
	*cloned = *m

	cloned.ProcessListeningOnPortUpdate = m.ProcessListeningOnPortUpdate.Clone()
	return cloned
}
func (*MsgFromSensor_ComplianceOperatorInfo) isMsgFromSensor_Msg() {}
func (m *MsgFromSensor_ComplianceOperatorInfo) Clone() isMsgFromSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgFromSensor_ComplianceOperatorInfo)
	*cloned = *m

	cloned.ComplianceOperatorInfo = m.ComplianceOperatorInfo.Clone()
	return cloned
}
func (*MsgFromSensor_ComplianceResponse) isMsgFromSensor_Msg() {}
func (m *MsgFromSensor_ComplianceResponse) Clone() isMsgFromSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgFromSensor_ComplianceResponse)
	*cloned = *m

	cloned.ComplianceResponse = m.ComplianceResponse.Clone()
	return cloned
}

func (m *MsgFromSensor) GetMsg() isMsgFromSensor_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *MsgFromSensor) GetHashKey() string {
	if m != nil {
		return m.HashKey
	}
	return ""
}

func (m *MsgFromSensor) GetDedupeKey() string {
	if m != nil {
		return m.DedupeKey
	}
	return ""
}

func (m *MsgFromSensor) GetProcessingAttempt() int32 {
	if m != nil {
		return m.ProcessingAttempt
	}
	return 0
}

func (m *MsgFromSensor) GetEvent() *SensorEvent {
	if x, ok := m.GetMsg().(*MsgFromSensor_Event); ok {
		return x.Event
	}
	return nil
}

func (m *MsgFromSensor) GetNetworkFlowUpdate() *NetworkFlowUpdate {
	if x, ok := m.GetMsg().(*MsgFromSensor_NetworkFlowUpdate); ok {
		return x.NetworkFlowUpdate
	}
	return nil
}

func (m *MsgFromSensor) GetScrapeUpdate() *ScrapeUpdate {
	if x, ok := m.GetMsg().(*MsgFromSensor_ScrapeUpdate); ok {
		return x.ScrapeUpdate
	}
	return nil
}

func (m *MsgFromSensor) GetNetworkPoliciesResponse() *NetworkPoliciesResponse {
	if x, ok := m.GetMsg().(*MsgFromSensor_NetworkPoliciesResponse); ok {
		return x.NetworkPoliciesResponse
	}
	return nil
}

func (m *MsgFromSensor) GetClusterStatusUpdate() *ClusterStatusUpdate {
	if x, ok := m.GetMsg().(*MsgFromSensor_ClusterStatusUpdate); ok {
		return x.ClusterStatusUpdate
	}
	return nil
}

func (m *MsgFromSensor) GetTelemetryDataResponse() *PullTelemetryDataResponse {
	if x, ok := m.GetMsg().(*MsgFromSensor_TelemetryDataResponse); ok {
		return x.TelemetryDataResponse
	}
	return nil
}

func (m *MsgFromSensor) GetClusterHealthInfo() *RawClusterHealthInfo {
	if x, ok := m.GetMsg().(*MsgFromSensor_ClusterHealthInfo); ok {
		return x.ClusterHealthInfo
	}
	return nil
}

func (m *MsgFromSensor) GetHello() *SensorHello {
	if x, ok := m.GetMsg().(*MsgFromSensor_Hello); ok {
		return x.Hello
	}
	return nil
}

func (m *MsgFromSensor) GetAuditLogStatusInfo() *AuditLogStatusInfo {
	if x, ok := m.GetMsg().(*MsgFromSensor_AuditLogStatusInfo); ok {
		return x.AuditLogStatusInfo
	}
	return nil
}

func (m *MsgFromSensor) GetIssueLocalScannerCertsRequest() *IssueLocalScannerCertsRequest {
	if x, ok := m.GetMsg().(*MsgFromSensor_IssueLocalScannerCertsRequest); ok {
		return x.IssueLocalScannerCertsRequest
	}
	return nil
}

func (m *MsgFromSensor) GetClusterMetrics() *ClusterMetrics {
	if x, ok := m.GetMsg().(*MsgFromSensor_ClusterMetrics); ok {
		return x.ClusterMetrics
	}
	return nil
}

func (m *MsgFromSensor) GetProcessListeningOnPortUpdate() *ProcessListeningOnPortsUpdate {
	if x, ok := m.GetMsg().(*MsgFromSensor_ProcessListeningOnPortUpdate); ok {
		return x.ProcessListeningOnPortUpdate
	}
	return nil
}

func (m *MsgFromSensor) GetComplianceOperatorInfo() *ComplianceOperatorInfo {
	if x, ok := m.GetMsg().(*MsgFromSensor_ComplianceOperatorInfo); ok {
		return x.ComplianceOperatorInfo
	}
	return nil
}

func (m *MsgFromSensor) GetComplianceResponse() *ComplianceResponse {
	if x, ok := m.GetMsg().(*MsgFromSensor_ComplianceResponse); ok {
		return x.ComplianceResponse
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MsgFromSensor) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MsgFromSensor_Event)(nil),
		(*MsgFromSensor_NetworkFlowUpdate)(nil),
		(*MsgFromSensor_ScrapeUpdate)(nil),
		(*MsgFromSensor_NetworkPoliciesResponse)(nil),
		(*MsgFromSensor_ClusterStatusUpdate)(nil),
		(*MsgFromSensor_TelemetryDataResponse)(nil),
		(*MsgFromSensor_ClusterHealthInfo)(nil),
		(*MsgFromSensor_Hello)(nil),
		(*MsgFromSensor_AuditLogStatusInfo)(nil),
		(*MsgFromSensor_IssueLocalScannerCertsRequest)(nil),
		(*MsgFromSensor_ClusterMetrics)(nil),
		(*MsgFromSensor_ProcessListeningOnPortUpdate)(nil),
		(*MsgFromSensor_ComplianceOperatorInfo)(nil),
		(*MsgFromSensor_ComplianceResponse)(nil),
	}
}

func (m *MsgFromSensor) MessageClone() proto.Message {
	return m.Clone()
}
func (m *MsgFromSensor) Clone() *MsgFromSensor {
	if m == nil {
		return nil
	}
	cloned := new(MsgFromSensor)
	*cloned = *m

	if m.Msg != nil {
		cloned.Msg = m.Msg.Clone()
	}
	return cloned
}

type ReassessPolicies struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReassessPolicies) Reset()         { *m = ReassessPolicies{} }
func (m *ReassessPolicies) String() string { return proto.CompactTextString(m) }
func (*ReassessPolicies) ProtoMessage()    {}
func (*ReassessPolicies) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d0a66b7b73dbb5d, []int{1}
}
func (m *ReassessPolicies) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReassessPolicies) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReassessPolicies.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReassessPolicies) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReassessPolicies.Merge(m, src)
}
func (m *ReassessPolicies) XXX_Size() int {
	return m.Size()
}
func (m *ReassessPolicies) XXX_DiscardUnknown() {
	xxx_messageInfo_ReassessPolicies.DiscardUnknown(m)
}

var xxx_messageInfo_ReassessPolicies proto.InternalMessageInfo

func (m *ReassessPolicies) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ReassessPolicies) Clone() *ReassessPolicies {
	if m == nil {
		return nil
	}
	cloned := new(ReassessPolicies)
	*cloned = *m

	return cloned
}

type ReprocessDeployments struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReprocessDeployments) Reset()         { *m = ReprocessDeployments{} }
func (m *ReprocessDeployments) String() string { return proto.CompactTextString(m) }
func (*ReprocessDeployments) ProtoMessage()    {}
func (*ReprocessDeployments) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d0a66b7b73dbb5d, []int{2}
}
func (m *ReprocessDeployments) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReprocessDeployments) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReprocessDeployments.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReprocessDeployments) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReprocessDeployments.Merge(m, src)
}
func (m *ReprocessDeployments) XXX_Size() int {
	return m.Size()
}
func (m *ReprocessDeployments) XXX_DiscardUnknown() {
	xxx_messageInfo_ReprocessDeployments.DiscardUnknown(m)
}

var xxx_messageInfo_ReprocessDeployments proto.InternalMessageInfo

func (m *ReprocessDeployments) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ReprocessDeployments) Clone() *ReprocessDeployments {
	if m == nil {
		return nil
	}
	cloned := new(ReprocessDeployments)
	*cloned = *m

	return cloned
}

// next available tag: 27
type MsgToSensor struct {
	// Types that are valid to be assigned to Msg:
	//	*MsgToSensor_Enforcement
	//	*MsgToSensor_ScrapeCommand
	//	*MsgToSensor_NetworkPoliciesCommand
	//	*MsgToSensor_ClusterConfig
	//	*MsgToSensor_SensorUpgradeTrigger
	//	*MsgToSensor_TelemetryDataRequest
	//	*MsgToSensor_PolicySync
	//	*MsgToSensor_ReassessPolicies
	//	*MsgToSensor_BaselineSync
	//	*MsgToSensor_CancelPullTelemetryDataRequest
	//	*MsgToSensor_PushNetworkEntitiesRequest
	//	*MsgToSensor_Hello
	//	*MsgToSensor_NetworkBaselineSync
	//	*MsgToSensor_AuditLogSync
	//	*MsgToSensor_ReprocessDeployment
	//	*MsgToSensor_InvalidateImageCache
	//	*MsgToSensor_IssueLocalScannerCertsResponse
	//	*MsgToSensor_UpdatedImage
	//	*MsgToSensor_ReprocessDeployments
	//	*MsgToSensor_NodeInventoryAck
	//	*MsgToSensor_DelegatedRegistryConfig
	//	*MsgToSensor_ScanImage
	//	*MsgToSensor_ImageIntegrations
	//	*MsgToSensor_ComplianceRequest
	//	*MsgToSensor_ClusterHealthResponse
	//	*MsgToSensor_DeduperState
	//	*MsgToSensor_Event
	Msg                  isMsgToSensor_Msg `protobuf_oneof:"msg"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MsgToSensor) Reset()         { *m = MsgToSensor{} }
func (m *MsgToSensor) String() string { return proto.CompactTextString(m) }
func (*MsgToSensor) ProtoMessage()    {}
func (*MsgToSensor) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d0a66b7b73dbb5d, []int{3}
}
func (m *MsgToSensor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgToSensor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgToSensor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgToSensor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgToSensor.Merge(m, src)
}
func (m *MsgToSensor) XXX_Size() int {
	return m.Size()
}
func (m *MsgToSensor) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgToSensor.DiscardUnknown(m)
}

var xxx_messageInfo_MsgToSensor proto.InternalMessageInfo

type isMsgToSensor_Msg interface {
	isMsgToSensor_Msg()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isMsgToSensor_Msg
}

type MsgToSensor_Enforcement struct {
	Enforcement *SensorEnforcement `protobuf:"bytes,1,opt,name=enforcement,proto3,oneof" json:"enforcement,omitempty"`
}
type MsgToSensor_ScrapeCommand struct {
	ScrapeCommand *ScrapeCommand `protobuf:"bytes,2,opt,name=scrape_command,json=scrapeCommand,proto3,oneof" json:"scrape_command,omitempty"`
}
type MsgToSensor_NetworkPoliciesCommand struct {
	NetworkPoliciesCommand *NetworkPoliciesCommand `protobuf:"bytes,3,opt,name=network_policies_command,json=networkPoliciesCommand,proto3,oneof" json:"network_policies_command,omitempty"`
}
type MsgToSensor_ClusterConfig struct {
	ClusterConfig *ClusterConfig `protobuf:"bytes,4,opt,name=cluster_config,json=clusterConfig,proto3,oneof" json:"cluster_config,omitempty"`
}
type MsgToSensor_SensorUpgradeTrigger struct {
	SensorUpgradeTrigger *SensorUpgradeTrigger `protobuf:"bytes,5,opt,name=sensor_upgrade_trigger,json=sensorUpgradeTrigger,proto3,oneof" json:"sensor_upgrade_trigger,omitempty"`
}
type MsgToSensor_TelemetryDataRequest struct {
	TelemetryDataRequest *PullTelemetryDataRequest `protobuf:"bytes,6,opt,name=telemetry_data_request,json=telemetryDataRequest,proto3,oneof" json:"telemetry_data_request,omitempty"`
}
type MsgToSensor_PolicySync struct {
	PolicySync *PolicySync `protobuf:"bytes,7,opt,name=policy_sync,json=policySync,proto3,oneof" json:"policy_sync,omitempty"`
}
type MsgToSensor_ReassessPolicies struct {
	ReassessPolicies *ReassessPolicies `protobuf:"bytes,8,opt,name=reassess_policies,json=reassessPolicies,proto3,oneof" json:"reassess_policies,omitempty"`
}
type MsgToSensor_BaselineSync struct {
	BaselineSync *BaselineSync `protobuf:"bytes,9,opt,name=baseline_sync,json=baselineSync,proto3,oneof" json:"baseline_sync,omitempty"`
}
type MsgToSensor_CancelPullTelemetryDataRequest struct {
	CancelPullTelemetryDataRequest *CancelPullTelemetryDataRequest `protobuf:"bytes,10,opt,name=cancel_pull_telemetry_data_request,json=cancelPullTelemetryDataRequest,proto3,oneof" json:"cancel_pull_telemetry_data_request,omitempty"`
}
type MsgToSensor_PushNetworkEntitiesRequest struct {
	PushNetworkEntitiesRequest *PushNetworkEntitiesRequest `protobuf:"bytes,11,opt,name=push_network_entities_request,json=pushNetworkEntitiesRequest,proto3,oneof" json:"push_network_entities_request,omitempty"`
}
type MsgToSensor_Hello struct {
	Hello *CentralHello `protobuf:"bytes,12,opt,name=hello,proto3,oneof" json:"hello,omitempty"`
}
type MsgToSensor_NetworkBaselineSync struct {
	NetworkBaselineSync *NetworkBaselineSync `protobuf:"bytes,13,opt,name=network_baseline_sync,json=networkBaselineSync,proto3,oneof" json:"network_baseline_sync,omitempty"`
}
type MsgToSensor_AuditLogSync struct {
	AuditLogSync *AuditLogSync `protobuf:"bytes,14,opt,name=audit_log_sync,json=auditLogSync,proto3,oneof" json:"audit_log_sync,omitempty"`
}
type MsgToSensor_ReprocessDeployment struct {
	ReprocessDeployment *ReprocessDeployment `protobuf:"bytes,15,opt,name=reprocess_deployment,json=reprocessDeployment,proto3,oneof" json:"reprocess_deployment,omitempty"`
}
type MsgToSensor_InvalidateImageCache struct {
	InvalidateImageCache *InvalidateImageCache `protobuf:"bytes,16,opt,name=invalidate_image_cache,json=invalidateImageCache,proto3,oneof" json:"invalidate_image_cache,omitempty"`
}
type MsgToSensor_IssueLocalScannerCertsResponse struct {
	IssueLocalScannerCertsResponse *IssueLocalScannerCertsResponse `protobuf:"bytes,17,opt,name=issue_local_scanner_certs_response,json=issueLocalScannerCertsResponse,proto3,oneof" json:"issue_local_scanner_certs_response,omitempty"`
}
type MsgToSensor_UpdatedImage struct {
	UpdatedImage *storage.Image `protobuf:"bytes,18,opt,name=updated_image,json=updatedImage,proto3,oneof" json:"updated_image,omitempty"`
}
type MsgToSensor_ReprocessDeployments struct {
	ReprocessDeployments *ReprocessDeployments `protobuf:"bytes,19,opt,name=reprocess_deployments,json=reprocessDeployments,proto3,oneof" json:"reprocess_deployments,omitempty"`
}
type MsgToSensor_NodeInventoryAck struct {
	NodeInventoryAck *NodeInventoryACK `protobuf:"bytes,20,opt,name=node_inventory_ack,json=nodeInventoryAck,proto3,oneof" json:"node_inventory_ack,omitempty"`
}
type MsgToSensor_DelegatedRegistryConfig struct {
	DelegatedRegistryConfig *DelegatedRegistryConfig `protobuf:"bytes,21,opt,name=delegated_registry_config,json=delegatedRegistryConfig,proto3,oneof" json:"delegated_registry_config,omitempty"`
}
type MsgToSensor_ScanImage struct {
	ScanImage *ScanImage `protobuf:"bytes,22,opt,name=scan_image,json=scanImage,proto3,oneof" json:"scan_image,omitempty"`
}
type MsgToSensor_ImageIntegrations struct {
	ImageIntegrations *ImageIntegrations `protobuf:"bytes,23,opt,name=image_integrations,json=imageIntegrations,proto3,oneof" json:"image_integrations,omitempty"`
}
type MsgToSensor_ComplianceRequest struct {
	ComplianceRequest *ComplianceRequest `protobuf:"bytes,24,opt,name=compliance_request,json=complianceRequest,proto3,oneof" json:"compliance_request,omitempty"`
}
type MsgToSensor_ClusterHealthResponse struct {
	ClusterHealthResponse *ClusterHealthResponse `protobuf:"bytes,25,opt,name=cluster_health_response,json=clusterHealthResponse,proto3,oneof" json:"cluster_health_response,omitempty"`
}
type MsgToSensor_DeduperState struct {
	DeduperState *DeduperState `protobuf:"bytes,26,opt,name=deduper_state,json=deduperState,proto3,oneof" json:"deduper_state,omitempty"`
}
type MsgToSensor_Event struct {
	Event *ResourceEvent `protobuf:"bytes,27,opt,name=event,proto3,oneof" json:"event,omitempty"`
}

func (*MsgToSensor_Enforcement) isMsgToSensor_Msg() {}
func (m *MsgToSensor_Enforcement) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_Enforcement)
	*cloned = *m

	cloned.Enforcement = m.Enforcement.Clone()
	return cloned
}
func (*MsgToSensor_ScrapeCommand) isMsgToSensor_Msg() {}
func (m *MsgToSensor_ScrapeCommand) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_ScrapeCommand)
	*cloned = *m

	cloned.ScrapeCommand = m.ScrapeCommand.Clone()
	return cloned
}
func (*MsgToSensor_NetworkPoliciesCommand) isMsgToSensor_Msg() {}
func (m *MsgToSensor_NetworkPoliciesCommand) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_NetworkPoliciesCommand)
	*cloned = *m

	cloned.NetworkPoliciesCommand = m.NetworkPoliciesCommand.Clone()
	return cloned
}
func (*MsgToSensor_ClusterConfig) isMsgToSensor_Msg() {}
func (m *MsgToSensor_ClusterConfig) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_ClusterConfig)
	*cloned = *m

	cloned.ClusterConfig = m.ClusterConfig.Clone()
	return cloned
}
func (*MsgToSensor_SensorUpgradeTrigger) isMsgToSensor_Msg() {}
func (m *MsgToSensor_SensorUpgradeTrigger) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_SensorUpgradeTrigger)
	*cloned = *m

	cloned.SensorUpgradeTrigger = m.SensorUpgradeTrigger.Clone()
	return cloned
}
func (*MsgToSensor_TelemetryDataRequest) isMsgToSensor_Msg() {}
func (m *MsgToSensor_TelemetryDataRequest) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_TelemetryDataRequest)
	*cloned = *m

	cloned.TelemetryDataRequest = m.TelemetryDataRequest.Clone()
	return cloned
}
func (*MsgToSensor_PolicySync) isMsgToSensor_Msg() {}
func (m *MsgToSensor_PolicySync) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_PolicySync)
	*cloned = *m

	cloned.PolicySync = m.PolicySync.Clone()
	return cloned
}
func (*MsgToSensor_ReassessPolicies) isMsgToSensor_Msg() {}
func (m *MsgToSensor_ReassessPolicies) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_ReassessPolicies)
	*cloned = *m

	cloned.ReassessPolicies = m.ReassessPolicies.Clone()
	return cloned
}
func (*MsgToSensor_BaselineSync) isMsgToSensor_Msg() {}
func (m *MsgToSensor_BaselineSync) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_BaselineSync)
	*cloned = *m

	cloned.BaselineSync = m.BaselineSync.Clone()
	return cloned
}
func (*MsgToSensor_CancelPullTelemetryDataRequest) isMsgToSensor_Msg() {}
func (m *MsgToSensor_CancelPullTelemetryDataRequest) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_CancelPullTelemetryDataRequest)
	*cloned = *m

	cloned.CancelPullTelemetryDataRequest = m.CancelPullTelemetryDataRequest.Clone()
	return cloned
}
func (*MsgToSensor_PushNetworkEntitiesRequest) isMsgToSensor_Msg() {}
func (m *MsgToSensor_PushNetworkEntitiesRequest) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_PushNetworkEntitiesRequest)
	*cloned = *m

	cloned.PushNetworkEntitiesRequest = m.PushNetworkEntitiesRequest.Clone()
	return cloned
}
func (*MsgToSensor_Hello) isMsgToSensor_Msg() {}
func (m *MsgToSensor_Hello) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_Hello)
	*cloned = *m

	cloned.Hello = m.Hello.Clone()
	return cloned
}
func (*MsgToSensor_NetworkBaselineSync) isMsgToSensor_Msg() {}
func (m *MsgToSensor_NetworkBaselineSync) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_NetworkBaselineSync)
	*cloned = *m

	cloned.NetworkBaselineSync = m.NetworkBaselineSync.Clone()
	return cloned
}
func (*MsgToSensor_AuditLogSync) isMsgToSensor_Msg() {}
func (m *MsgToSensor_AuditLogSync) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_AuditLogSync)
	*cloned = *m

	cloned.AuditLogSync = m.AuditLogSync.Clone()
	return cloned
}
func (*MsgToSensor_ReprocessDeployment) isMsgToSensor_Msg() {}
func (m *MsgToSensor_ReprocessDeployment) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_ReprocessDeployment)
	*cloned = *m

	cloned.ReprocessDeployment = m.ReprocessDeployment.Clone()
	return cloned
}
func (*MsgToSensor_InvalidateImageCache) isMsgToSensor_Msg() {}
func (m *MsgToSensor_InvalidateImageCache) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_InvalidateImageCache)
	*cloned = *m

	cloned.InvalidateImageCache = m.InvalidateImageCache.Clone()
	return cloned
}
func (*MsgToSensor_IssueLocalScannerCertsResponse) isMsgToSensor_Msg() {}
func (m *MsgToSensor_IssueLocalScannerCertsResponse) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_IssueLocalScannerCertsResponse)
	*cloned = *m

	cloned.IssueLocalScannerCertsResponse = m.IssueLocalScannerCertsResponse.Clone()
	return cloned
}
func (*MsgToSensor_UpdatedImage) isMsgToSensor_Msg() {}
func (m *MsgToSensor_UpdatedImage) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_UpdatedImage)
	*cloned = *m

	cloned.UpdatedImage = m.UpdatedImage.Clone()
	return cloned
}
func (*MsgToSensor_ReprocessDeployments) isMsgToSensor_Msg() {}
func (m *MsgToSensor_ReprocessDeployments) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_ReprocessDeployments)
	*cloned = *m

	cloned.ReprocessDeployments = m.ReprocessDeployments.Clone()
	return cloned
}
func (*MsgToSensor_NodeInventoryAck) isMsgToSensor_Msg() {}
func (m *MsgToSensor_NodeInventoryAck) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_NodeInventoryAck)
	*cloned = *m

	cloned.NodeInventoryAck = m.NodeInventoryAck.Clone()
	return cloned
}
func (*MsgToSensor_DelegatedRegistryConfig) isMsgToSensor_Msg() {}
func (m *MsgToSensor_DelegatedRegistryConfig) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_DelegatedRegistryConfig)
	*cloned = *m

	cloned.DelegatedRegistryConfig = m.DelegatedRegistryConfig.Clone()
	return cloned
}
func (*MsgToSensor_ScanImage) isMsgToSensor_Msg() {}
func (m *MsgToSensor_ScanImage) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_ScanImage)
	*cloned = *m

	cloned.ScanImage = m.ScanImage.Clone()
	return cloned
}
func (*MsgToSensor_ImageIntegrations) isMsgToSensor_Msg() {}
func (m *MsgToSensor_ImageIntegrations) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_ImageIntegrations)
	*cloned = *m

	cloned.ImageIntegrations = m.ImageIntegrations.Clone()
	return cloned
}
func (*MsgToSensor_ComplianceRequest) isMsgToSensor_Msg() {}
func (m *MsgToSensor_ComplianceRequest) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_ComplianceRequest)
	*cloned = *m

	cloned.ComplianceRequest = m.ComplianceRequest.Clone()
	return cloned
}
func (*MsgToSensor_ClusterHealthResponse) isMsgToSensor_Msg() {}
func (m *MsgToSensor_ClusterHealthResponse) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_ClusterHealthResponse)
	*cloned = *m

	cloned.ClusterHealthResponse = m.ClusterHealthResponse.Clone()
	return cloned
}
func (*MsgToSensor_DeduperState) isMsgToSensor_Msg() {}
func (m *MsgToSensor_DeduperState) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_DeduperState)
	*cloned = *m

	cloned.DeduperState = m.DeduperState.Clone()
	return cloned
}
func (*MsgToSensor_Event) isMsgToSensor_Msg() {}
func (m *MsgToSensor_Event) Clone() isMsgToSensor_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor_Event)
	*cloned = *m

	cloned.Event = m.Event.Clone()
	return cloned
}

func (m *MsgToSensor) GetMsg() isMsgToSensor_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *MsgToSensor) GetEnforcement() *SensorEnforcement {
	if x, ok := m.GetMsg().(*MsgToSensor_Enforcement); ok {
		return x.Enforcement
	}
	return nil
}

func (m *MsgToSensor) GetScrapeCommand() *ScrapeCommand {
	if x, ok := m.GetMsg().(*MsgToSensor_ScrapeCommand); ok {
		return x.ScrapeCommand
	}
	return nil
}

func (m *MsgToSensor) GetNetworkPoliciesCommand() *NetworkPoliciesCommand {
	if x, ok := m.GetMsg().(*MsgToSensor_NetworkPoliciesCommand); ok {
		return x.NetworkPoliciesCommand
	}
	return nil
}

func (m *MsgToSensor) GetClusterConfig() *ClusterConfig {
	if x, ok := m.GetMsg().(*MsgToSensor_ClusterConfig); ok {
		return x.ClusterConfig
	}
	return nil
}

func (m *MsgToSensor) GetSensorUpgradeTrigger() *SensorUpgradeTrigger {
	if x, ok := m.GetMsg().(*MsgToSensor_SensorUpgradeTrigger); ok {
		return x.SensorUpgradeTrigger
	}
	return nil
}

func (m *MsgToSensor) GetTelemetryDataRequest() *PullTelemetryDataRequest {
	if x, ok := m.GetMsg().(*MsgToSensor_TelemetryDataRequest); ok {
		return x.TelemetryDataRequest
	}
	return nil
}

func (m *MsgToSensor) GetPolicySync() *PolicySync {
	if x, ok := m.GetMsg().(*MsgToSensor_PolicySync); ok {
		return x.PolicySync
	}
	return nil
}

func (m *MsgToSensor) GetReassessPolicies() *ReassessPolicies {
	if x, ok := m.GetMsg().(*MsgToSensor_ReassessPolicies); ok {
		return x.ReassessPolicies
	}
	return nil
}

func (m *MsgToSensor) GetBaselineSync() *BaselineSync {
	if x, ok := m.GetMsg().(*MsgToSensor_BaselineSync); ok {
		return x.BaselineSync
	}
	return nil
}

func (m *MsgToSensor) GetCancelPullTelemetryDataRequest() *CancelPullTelemetryDataRequest {
	if x, ok := m.GetMsg().(*MsgToSensor_CancelPullTelemetryDataRequest); ok {
		return x.CancelPullTelemetryDataRequest
	}
	return nil
}

func (m *MsgToSensor) GetPushNetworkEntitiesRequest() *PushNetworkEntitiesRequest {
	if x, ok := m.GetMsg().(*MsgToSensor_PushNetworkEntitiesRequest); ok {
		return x.PushNetworkEntitiesRequest
	}
	return nil
}

func (m *MsgToSensor) GetHello() *CentralHello {
	if x, ok := m.GetMsg().(*MsgToSensor_Hello); ok {
		return x.Hello
	}
	return nil
}

func (m *MsgToSensor) GetNetworkBaselineSync() *NetworkBaselineSync {
	if x, ok := m.GetMsg().(*MsgToSensor_NetworkBaselineSync); ok {
		return x.NetworkBaselineSync
	}
	return nil
}

func (m *MsgToSensor) GetAuditLogSync() *AuditLogSync {
	if x, ok := m.GetMsg().(*MsgToSensor_AuditLogSync); ok {
		return x.AuditLogSync
	}
	return nil
}

func (m *MsgToSensor) GetReprocessDeployment() *ReprocessDeployment {
	if x, ok := m.GetMsg().(*MsgToSensor_ReprocessDeployment); ok {
		return x.ReprocessDeployment
	}
	return nil
}

func (m *MsgToSensor) GetInvalidateImageCache() *InvalidateImageCache {
	if x, ok := m.GetMsg().(*MsgToSensor_InvalidateImageCache); ok {
		return x.InvalidateImageCache
	}
	return nil
}

func (m *MsgToSensor) GetIssueLocalScannerCertsResponse() *IssueLocalScannerCertsResponse {
	if x, ok := m.GetMsg().(*MsgToSensor_IssueLocalScannerCertsResponse); ok {
		return x.IssueLocalScannerCertsResponse
	}
	return nil
}

func (m *MsgToSensor) GetUpdatedImage() *storage.Image {
	if x, ok := m.GetMsg().(*MsgToSensor_UpdatedImage); ok {
		return x.UpdatedImage
	}
	return nil
}

func (m *MsgToSensor) GetReprocessDeployments() *ReprocessDeployments {
	if x, ok := m.GetMsg().(*MsgToSensor_ReprocessDeployments); ok {
		return x.ReprocessDeployments
	}
	return nil
}

func (m *MsgToSensor) GetNodeInventoryAck() *NodeInventoryACK {
	if x, ok := m.GetMsg().(*MsgToSensor_NodeInventoryAck); ok {
		return x.NodeInventoryAck
	}
	return nil
}

func (m *MsgToSensor) GetDelegatedRegistryConfig() *DelegatedRegistryConfig {
	if x, ok := m.GetMsg().(*MsgToSensor_DelegatedRegistryConfig); ok {
		return x.DelegatedRegistryConfig
	}
	return nil
}

func (m *MsgToSensor) GetScanImage() *ScanImage {
	if x, ok := m.GetMsg().(*MsgToSensor_ScanImage); ok {
		return x.ScanImage
	}
	return nil
}

func (m *MsgToSensor) GetImageIntegrations() *ImageIntegrations {
	if x, ok := m.GetMsg().(*MsgToSensor_ImageIntegrations); ok {
		return x.ImageIntegrations
	}
	return nil
}

func (m *MsgToSensor) GetComplianceRequest() *ComplianceRequest {
	if x, ok := m.GetMsg().(*MsgToSensor_ComplianceRequest); ok {
		return x.ComplianceRequest
	}
	return nil
}

func (m *MsgToSensor) GetClusterHealthResponse() *ClusterHealthResponse {
	if x, ok := m.GetMsg().(*MsgToSensor_ClusterHealthResponse); ok {
		return x.ClusterHealthResponse
	}
	return nil
}

func (m *MsgToSensor) GetDeduperState() *DeduperState {
	if x, ok := m.GetMsg().(*MsgToSensor_DeduperState); ok {
		return x.DeduperState
	}
	return nil
}

func (m *MsgToSensor) GetEvent() *ResourceEvent {
	if x, ok := m.GetMsg().(*MsgToSensor_Event); ok {
		return x.Event
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MsgToSensor) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MsgToSensor_Enforcement)(nil),
		(*MsgToSensor_ScrapeCommand)(nil),
		(*MsgToSensor_NetworkPoliciesCommand)(nil),
		(*MsgToSensor_ClusterConfig)(nil),
		(*MsgToSensor_SensorUpgradeTrigger)(nil),
		(*MsgToSensor_TelemetryDataRequest)(nil),
		(*MsgToSensor_PolicySync)(nil),
		(*MsgToSensor_ReassessPolicies)(nil),
		(*MsgToSensor_BaselineSync)(nil),
		(*MsgToSensor_CancelPullTelemetryDataRequest)(nil),
		(*MsgToSensor_PushNetworkEntitiesRequest)(nil),
		(*MsgToSensor_Hello)(nil),
		(*MsgToSensor_NetworkBaselineSync)(nil),
		(*MsgToSensor_AuditLogSync)(nil),
		(*MsgToSensor_ReprocessDeployment)(nil),
		(*MsgToSensor_InvalidateImageCache)(nil),
		(*MsgToSensor_IssueLocalScannerCertsResponse)(nil),
		(*MsgToSensor_UpdatedImage)(nil),
		(*MsgToSensor_ReprocessDeployments)(nil),
		(*MsgToSensor_NodeInventoryAck)(nil),
		(*MsgToSensor_DelegatedRegistryConfig)(nil),
		(*MsgToSensor_ScanImage)(nil),
		(*MsgToSensor_ImageIntegrations)(nil),
		(*MsgToSensor_ComplianceRequest)(nil),
		(*MsgToSensor_ClusterHealthResponse)(nil),
		(*MsgToSensor_DeduperState)(nil),
		(*MsgToSensor_Event)(nil),
	}
}

func (m *MsgToSensor) MessageClone() proto.Message {
	return m.Clone()
}
func (m *MsgToSensor) Clone() *MsgToSensor {
	if m == nil {
		return nil
	}
	cloned := new(MsgToSensor)
	*cloned = *m

	if m.Msg != nil {
		cloned.Msg = m.Msg.Clone()
	}
	return cloned
}

type DeduperState struct {
	ResourceHashes       map[string]uint64 `protobuf:"bytes,1,rep,name=resource_hashes,json=resourceHashes,proto3" json:"resource_hashes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DeduperState) Reset()         { *m = DeduperState{} }
func (m *DeduperState) String() string { return proto.CompactTextString(m) }
func (*DeduperState) ProtoMessage()    {}
func (*DeduperState) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d0a66b7b73dbb5d, []int{4}
}
func (m *DeduperState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeduperState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeduperState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeduperState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeduperState.Merge(m, src)
}
func (m *DeduperState) XXX_Size() int {
	return m.Size()
}
func (m *DeduperState) XXX_DiscardUnknown() {
	xxx_messageInfo_DeduperState.DiscardUnknown(m)
}

var xxx_messageInfo_DeduperState proto.InternalMessageInfo

func (m *DeduperState) GetResourceHashes() map[string]uint64 {
	if m != nil {
		return m.ResourceHashes
	}
	return nil
}

func (m *DeduperState) MessageClone() proto.Message {
	return m.Clone()
}
func (m *DeduperState) Clone() *DeduperState {
	if m == nil {
		return nil
	}
	cloned := new(DeduperState)
	*cloned = *m

	if m.ResourceHashes != nil {
		cloned.ResourceHashes = make(map[string]uint64, len(m.ResourceHashes))
		for k, v := range m.ResourceHashes {
			cloned.ResourceHashes[k] = v
		}
	}
	return cloned
}

type Pod struct {
	Namespace            string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Uuid                 string   `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	DeploymentId         string   `protobuf:"bytes,3,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pod) Reset()         { *m = Pod{} }
func (m *Pod) String() string { return proto.CompactTextString(m) }
func (*Pod) ProtoMessage()    {}
func (*Pod) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d0a66b7b73dbb5d, []int{5}
}
func (m *Pod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pod.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pod.Merge(m, src)
}
func (m *Pod) XXX_Size() int {
	return m.Size()
}
func (m *Pod) XXX_DiscardUnknown() {
	xxx_messageInfo_Pod.DiscardUnknown(m)
}

var xxx_messageInfo_Pod proto.InternalMessageInfo

func (m *Pod) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Pod) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Pod) GetDeploymentId() string {
	if m != nil {
		return m.DeploymentId
	}
	return ""
}

func (m *Pod) MessageClone() proto.Message {
	return m.Clone()
}
func (m *Pod) Clone() *Pod {
	if m == nil {
		return nil
	}
	cloned := new(Pod)
	*cloned = *m

	return cloned
}

type Resource struct {
	// Types that are valid to be assigned to Resource:
	//	*Resource_Pod
	Resource             isResource_Resource `protobuf_oneof:"resource"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Resource) Reset()         { *m = Resource{} }
func (m *Resource) String() string { return proto.CompactTextString(m) }
func (*Resource) ProtoMessage()    {}
func (*Resource) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d0a66b7b73dbb5d, []int{6}
}
func (m *Resource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Resource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Resource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Resource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resource.Merge(m, src)
}
func (m *Resource) XXX_Size() int {
	return m.Size()
}
func (m *Resource) XXX_DiscardUnknown() {
	xxx_messageInfo_Resource.DiscardUnknown(m)
}

var xxx_messageInfo_Resource proto.InternalMessageInfo

type isResource_Resource interface {
	isResource_Resource()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isResource_Resource
}

type Resource_Pod struct {
	Pod *Pod `protobuf:"bytes,1,opt,name=pod,proto3,oneof" json:"pod,omitempty"`
}

func (*Resource_Pod) isResource_Resource() {}
func (m *Resource_Pod) Clone() isResource_Resource {
	if m == nil {
		return nil
	}
	cloned := new(Resource_Pod)
	*cloned = *m

	cloned.Pod = m.Pod.Clone()
	return cloned
}

func (m *Resource) GetResource() isResource_Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *Resource) GetPod() *Pod {
	if x, ok := m.GetResource().(*Resource_Pod); ok {
		return x.Pod
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Resource) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Resource_Pod)(nil),
	}
}

func (m *Resource) MessageClone() proto.Message {
	return m.Clone()
}
func (m *Resource) Clone() *Resource {
	if m == nil {
		return nil
	}
	cloned := new(Resource)
	*cloned = *m

	if m.Resource != nil {
		cloned.Resource = m.Resource.Clone()
	}
	return cloned
}

type ResourceEvent struct {
	Current      int32       `protobuf:"varint,9,opt,name=current,proto3" json:"current,omitempty"`
	Total        int32       `protobuf:"varint,10,opt,name=total,proto3" json:"total,omitempty"`
	ResourceList []*Resource `protobuf:"bytes,11,rep,name=resource_list,json=resourceList,proto3" json:"resource_list,omitempty"`
	// Types that are valid to be assigned to Resource:
	//	*ResourceEvent_NetworkPolicy
	//	*ResourceEvent_Deployment
	//	*ResourceEvent_Pod
	//	*ResourceEvent_Secret
	//	*ResourceEvent_Node
	//	*ResourceEvent_ServiceAccount
	//	*ResourceEvent_Role
	//	*ResourceEvent_Binding
	Resource             isResourceEvent_Resource `protobuf_oneof:"resource"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ResourceEvent) Reset()         { *m = ResourceEvent{} }
func (m *ResourceEvent) String() string { return proto.CompactTextString(m) }
func (*ResourceEvent) ProtoMessage()    {}
func (*ResourceEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d0a66b7b73dbb5d, []int{7}
}
func (m *ResourceEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceEvent.Merge(m, src)
}
func (m *ResourceEvent) XXX_Size() int {
	return m.Size()
}
func (m *ResourceEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceEvent proto.InternalMessageInfo

type isResourceEvent_Resource interface {
	isResourceEvent_Resource()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isResourceEvent_Resource
}

type ResourceEvent_NetworkPolicy struct {
	NetworkPolicy *storage.NetworkPolicy `protobuf:"bytes,1,opt,name=network_policy,json=networkPolicy,proto3,oneof" json:"network_policy,omitempty"`
}
type ResourceEvent_Deployment struct {
	Deployment *storage.Deployment `protobuf:"bytes,2,opt,name=deployment,proto3,oneof" json:"deployment,omitempty"`
}
type ResourceEvent_Pod struct {
	Pod *storage.Pod `protobuf:"bytes,3,opt,name=pod,proto3,oneof" json:"pod,omitempty"`
}
type ResourceEvent_Secret struct {
	Secret *storage.Secret `protobuf:"bytes,4,opt,name=secret,proto3,oneof" json:"secret,omitempty"`
}
type ResourceEvent_Node struct {
	Node *storage.Node `protobuf:"bytes,5,opt,name=node,proto3,oneof" json:"node,omitempty"`
}
type ResourceEvent_ServiceAccount struct {
	ServiceAccount *storage.ServiceAccount `protobuf:"bytes,6,opt,name=service_account,json=serviceAccount,proto3,oneof" json:"service_account,omitempty"`
}
type ResourceEvent_Role struct {
	Role *storage.K8SRole `protobuf:"bytes,7,opt,name=role,proto3,oneof" json:"role,omitempty"`
}
type ResourceEvent_Binding struct {
	Binding *storage.K8SRoleBinding `protobuf:"bytes,8,opt,name=binding,proto3,oneof" json:"binding,omitempty"`
}

func (*ResourceEvent_NetworkPolicy) isResourceEvent_Resource() {}
func (m *ResourceEvent_NetworkPolicy) Clone() isResourceEvent_Resource {
	if m == nil {
		return nil
	}
	cloned := new(ResourceEvent_NetworkPolicy)
	*cloned = *m

	cloned.NetworkPolicy = m.NetworkPolicy.Clone()
	return cloned
}
func (*ResourceEvent_Deployment) isResourceEvent_Resource() {}
func (m *ResourceEvent_Deployment) Clone() isResourceEvent_Resource {
	if m == nil {
		return nil
	}
	cloned := new(ResourceEvent_Deployment)
	*cloned = *m

	cloned.Deployment = m.Deployment.Clone()
	return cloned
}
func (*ResourceEvent_Pod) isResourceEvent_Resource() {}
func (m *ResourceEvent_Pod) Clone() isResourceEvent_Resource {
	if m == nil {
		return nil
	}
	cloned := new(ResourceEvent_Pod)
	*cloned = *m

	cloned.Pod = m.Pod.Clone()
	return cloned
}
func (*ResourceEvent_Secret) isResourceEvent_Resource() {}
func (m *ResourceEvent_Secret) Clone() isResourceEvent_Resource {
	if m == nil {
		return nil
	}
	cloned := new(ResourceEvent_Secret)
	*cloned = *m

	cloned.Secret = m.Secret.Clone()
	return cloned
}
func (*ResourceEvent_Node) isResourceEvent_Resource() {}
func (m *ResourceEvent_Node) Clone() isResourceEvent_Resource {
	if m == nil {
		return nil
	}
	cloned := new(ResourceEvent_Node)
	*cloned = *m

	cloned.Node = m.Node.Clone()
	return cloned
}
func (*ResourceEvent_ServiceAccount) isResourceEvent_Resource() {}
func (m *ResourceEvent_ServiceAccount) Clone() isResourceEvent_Resource {
	if m == nil {
		return nil
	}
	cloned := new(ResourceEvent_ServiceAccount)
	*cloned = *m

	cloned.ServiceAccount = m.ServiceAccount.Clone()
	return cloned
}
func (*ResourceEvent_Role) isResourceEvent_Resource() {}
func (m *ResourceEvent_Role) Clone() isResourceEvent_Resource {
	if m == nil {
		return nil
	}
	cloned := new(ResourceEvent_Role)
	*cloned = *m

	cloned.Role = m.Role.Clone()
	return cloned
}
func (*ResourceEvent_Binding) isResourceEvent_Resource() {}
func (m *ResourceEvent_Binding) Clone() isResourceEvent_Resource {
	if m == nil {
		return nil
	}
	cloned := new(ResourceEvent_Binding)
	*cloned = *m

	cloned.Binding = m.Binding.Clone()
	return cloned
}

func (m *ResourceEvent) GetResource() isResourceEvent_Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *ResourceEvent) GetCurrent() int32 {
	if m != nil {
		return m.Current
	}
	return 0
}

func (m *ResourceEvent) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *ResourceEvent) GetResourceList() []*Resource {
	if m != nil {
		return m.ResourceList
	}
	return nil
}

func (m *ResourceEvent) GetNetworkPolicy() *storage.NetworkPolicy {
	if x, ok := m.GetResource().(*ResourceEvent_NetworkPolicy); ok {
		return x.NetworkPolicy
	}
	return nil
}

func (m *ResourceEvent) GetDeployment() *storage.Deployment {
	if x, ok := m.GetResource().(*ResourceEvent_Deployment); ok {
		return x.Deployment
	}
	return nil
}

func (m *ResourceEvent) GetPod() *storage.Pod {
	if x, ok := m.GetResource().(*ResourceEvent_Pod); ok {
		return x.Pod
	}
	return nil
}

func (m *ResourceEvent) GetSecret() *storage.Secret {
	if x, ok := m.GetResource().(*ResourceEvent_Secret); ok {
		return x.Secret
	}
	return nil
}

func (m *ResourceEvent) GetNode() *storage.Node {
	if x, ok := m.GetResource().(*ResourceEvent_Node); ok {
		return x.Node
	}
	return nil
}

func (m *ResourceEvent) GetServiceAccount() *storage.ServiceAccount {
	if x, ok := m.GetResource().(*ResourceEvent_ServiceAccount); ok {
		return x.ServiceAccount
	}
	return nil
}

func (m *ResourceEvent) GetRole() *storage.K8SRole {
	if x, ok := m.GetResource().(*ResourceEvent_Role); ok {
		return x.Role
	}
	return nil
}

func (m *ResourceEvent) GetBinding() *storage.K8SRoleBinding {
	if x, ok := m.GetResource().(*ResourceEvent_Binding); ok {
		return x.Binding
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ResourceEvent) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ResourceEvent_NetworkPolicy)(nil),
		(*ResourceEvent_Deployment)(nil),
		(*ResourceEvent_Pod)(nil),
		(*ResourceEvent_Secret)(nil),
		(*ResourceEvent_Node)(nil),
		(*ResourceEvent_ServiceAccount)(nil),
		(*ResourceEvent_Role)(nil),
		(*ResourceEvent_Binding)(nil),
	}
}

func (m *ResourceEvent) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ResourceEvent) Clone() *ResourceEvent {
	if m == nil {
		return nil
	}
	cloned := new(ResourceEvent)
	*cloned = *m

	if m.ResourceList != nil {
		cloned.ResourceList = make([]*Resource, len(m.ResourceList))
		for idx, v := range m.ResourceList {
			cloned.ResourceList[idx] = v.Clone()
		}
	}
	if m.Resource != nil {
		cloned.Resource = m.Resource.Clone()
	}
	return cloned
}

type NodeInventoryACK struct {
	ClusterId            string                  `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	NodeName             string                  `protobuf:"bytes,2,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	Action               NodeInventoryACK_Action `protobuf:"varint,3,opt,name=action,proto3,enum=central.NodeInventoryACK_Action" json:"action,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *NodeInventoryACK) Reset()         { *m = NodeInventoryACK{} }
func (m *NodeInventoryACK) String() string { return proto.CompactTextString(m) }
func (*NodeInventoryACK) ProtoMessage()    {}
func (*NodeInventoryACK) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d0a66b7b73dbb5d, []int{8}
}
func (m *NodeInventoryACK) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeInventoryACK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeInventoryACK.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeInventoryACK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeInventoryACK.Merge(m, src)
}
func (m *NodeInventoryACK) XXX_Size() int {
	return m.Size()
}
func (m *NodeInventoryACK) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeInventoryACK.DiscardUnknown(m)
}

var xxx_messageInfo_NodeInventoryACK proto.InternalMessageInfo

func (m *NodeInventoryACK) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *NodeInventoryACK) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *NodeInventoryACK) GetAction() NodeInventoryACK_Action {
	if m != nil {
		return m.Action
	}
	return NodeInventoryACK_ACK
}

func (m *NodeInventoryACK) MessageClone() proto.Message {
	return m.Clone()
}
func (m *NodeInventoryACK) Clone() *NodeInventoryACK {
	if m == nil {
		return nil
	}
	cloned := new(NodeInventoryACK)
	*cloned = *m

	return cloned
}

type AuditLogSync struct {
	NodeAuditLogFileStates map[string]*storage.AuditLogFileState `protobuf:"bytes,1,rep,name=node_audit_log_file_states,json=nodeAuditLogFileStates,proto3" json:"node_audit_log_file_states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral   struct{}                              `json:"-"`
	XXX_unrecognized       []byte                                `json:"-"`
	XXX_sizecache          int32                                 `json:"-"`
}

func (m *AuditLogSync) Reset()         { *m = AuditLogSync{} }
func (m *AuditLogSync) String() string { return proto.CompactTextString(m) }
func (*AuditLogSync) ProtoMessage()    {}
func (*AuditLogSync) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d0a66b7b73dbb5d, []int{9}
}
func (m *AuditLogSync) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuditLogSync) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuditLogSync.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuditLogSync) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuditLogSync.Merge(m, src)
}
func (m *AuditLogSync) XXX_Size() int {
	return m.Size()
}
func (m *AuditLogSync) XXX_DiscardUnknown() {
	xxx_messageInfo_AuditLogSync.DiscardUnknown(m)
}

var xxx_messageInfo_AuditLogSync proto.InternalMessageInfo

func (m *AuditLogSync) GetNodeAuditLogFileStates() map[string]*storage.AuditLogFileState {
	if m != nil {
		return m.NodeAuditLogFileStates
	}
	return nil
}

func (m *AuditLogSync) MessageClone() proto.Message {
	return m.Clone()
}
func (m *AuditLogSync) Clone() *AuditLogSync {
	if m == nil {
		return nil
	}
	cloned := new(AuditLogSync)
	*cloned = *m

	if m.NodeAuditLogFileStates != nil {
		cloned.NodeAuditLogFileStates = make(map[string]*storage.AuditLogFileState, len(m.NodeAuditLogFileStates))
		for k, v := range m.NodeAuditLogFileStates {
			cloned.NodeAuditLogFileStates[k] = v.Clone()
		}
	}
	return cloned
}

type AuditLogStatusInfo struct {
	NodeAuditLogFileStates map[string]*storage.AuditLogFileState `protobuf:"bytes,1,rep,name=node_audit_log_file_states,json=nodeAuditLogFileStates,proto3" json:"node_audit_log_file_states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral   struct{}                              `json:"-"`
	XXX_unrecognized       []byte                                `json:"-"`
	XXX_sizecache          int32                                 `json:"-"`
}

func (m *AuditLogStatusInfo) Reset()         { *m = AuditLogStatusInfo{} }
func (m *AuditLogStatusInfo) String() string { return proto.CompactTextString(m) }
func (*AuditLogStatusInfo) ProtoMessage()    {}
func (*AuditLogStatusInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d0a66b7b73dbb5d, []int{10}
}
func (m *AuditLogStatusInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuditLogStatusInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuditLogStatusInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuditLogStatusInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuditLogStatusInfo.Merge(m, src)
}
func (m *AuditLogStatusInfo) XXX_Size() int {
	return m.Size()
}
func (m *AuditLogStatusInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AuditLogStatusInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AuditLogStatusInfo proto.InternalMessageInfo

func (m *AuditLogStatusInfo) GetNodeAuditLogFileStates() map[string]*storage.AuditLogFileState {
	if m != nil {
		return m.NodeAuditLogFileStates
	}
	return nil
}

func (m *AuditLogStatusInfo) MessageClone() proto.Message {
	return m.Clone()
}
func (m *AuditLogStatusInfo) Clone() *AuditLogStatusInfo {
	if m == nil {
		return nil
	}
	cloned := new(AuditLogStatusInfo)
	*cloned = *m

	if m.NodeAuditLogFileStates != nil {
		cloned.NodeAuditLogFileStates = make(map[string]*storage.AuditLogFileState, len(m.NodeAuditLogFileStates))
		for k, v := range m.NodeAuditLogFileStates {
			cloned.NodeAuditLogFileStates[k] = v.Clone()
		}
	}
	return cloned
}

type ReprocessDeployment struct {
	DeploymentIds        []string `protobuf:"bytes,1,rep,name=deployment_ids,json=deploymentIds,proto3" json:"deployment_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReprocessDeployment) Reset()         { *m = ReprocessDeployment{} }
func (m *ReprocessDeployment) String() string { return proto.CompactTextString(m) }
func (*ReprocessDeployment) ProtoMessage()    {}
func (*ReprocessDeployment) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d0a66b7b73dbb5d, []int{11}
}
func (m *ReprocessDeployment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReprocessDeployment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReprocessDeployment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReprocessDeployment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReprocessDeployment.Merge(m, src)
}
func (m *ReprocessDeployment) XXX_Size() int {
	return m.Size()
}
func (m *ReprocessDeployment) XXX_DiscardUnknown() {
	xxx_messageInfo_ReprocessDeployment.DiscardUnknown(m)
}

var xxx_messageInfo_ReprocessDeployment proto.InternalMessageInfo

func (m *ReprocessDeployment) GetDeploymentIds() []string {
	if m != nil {
		return m.DeploymentIds
	}
	return nil
}

func (m *ReprocessDeployment) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ReprocessDeployment) Clone() *ReprocessDeployment {
	if m == nil {
		return nil
	}
	cloned := new(ReprocessDeployment)
	*cloned = *m

	if m.DeploymentIds != nil {
		cloned.DeploymentIds = make([]string, len(m.DeploymentIds))
		copy(cloned.DeploymentIds, m.DeploymentIds)
	}
	return cloned
}

type InvalidateImageCache struct {
	ImageKeys            []*InvalidateImageCache_ImageKey `protobuf:"bytes,1,rep,name=image_keys,json=imageKeys,proto3" json:"image_keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *InvalidateImageCache) Reset()         { *m = InvalidateImageCache{} }
func (m *InvalidateImageCache) String() string { return proto.CompactTextString(m) }
func (*InvalidateImageCache) ProtoMessage()    {}
func (*InvalidateImageCache) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d0a66b7b73dbb5d, []int{12}
}
func (m *InvalidateImageCache) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InvalidateImageCache) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InvalidateImageCache.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InvalidateImageCache) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvalidateImageCache.Merge(m, src)
}
func (m *InvalidateImageCache) XXX_Size() int {
	return m.Size()
}
func (m *InvalidateImageCache) XXX_DiscardUnknown() {
	xxx_messageInfo_InvalidateImageCache.DiscardUnknown(m)
}

var xxx_messageInfo_InvalidateImageCache proto.InternalMessageInfo

func (m *InvalidateImageCache) GetImageKeys() []*InvalidateImageCache_ImageKey {
	if m != nil {
		return m.ImageKeys
	}
	return nil
}

func (m *InvalidateImageCache) MessageClone() proto.Message {
	return m.Clone()
}
func (m *InvalidateImageCache) Clone() *InvalidateImageCache {
	if m == nil {
		return nil
	}
	cloned := new(InvalidateImageCache)
	*cloned = *m

	if m.ImageKeys != nil {
		cloned.ImageKeys = make([]*InvalidateImageCache_ImageKey, len(m.ImageKeys))
		for idx, v := range m.ImageKeys {
			cloned.ImageKeys[idx] = v.Clone()
		}
	}
	return cloned
}

type InvalidateImageCache_ImageKey struct {
	ImageId              string   `protobuf:"bytes,1,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	ImageFullName        string   `protobuf:"bytes,2,opt,name=image_full_name,json=imageFullName,proto3" json:"image_full_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InvalidateImageCache_ImageKey) Reset()         { *m = InvalidateImageCache_ImageKey{} }
func (m *InvalidateImageCache_ImageKey) String() string { return proto.CompactTextString(m) }
func (*InvalidateImageCache_ImageKey) ProtoMessage()    {}
func (*InvalidateImageCache_ImageKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d0a66b7b73dbb5d, []int{12, 0}
}
func (m *InvalidateImageCache_ImageKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InvalidateImageCache_ImageKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InvalidateImageCache_ImageKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InvalidateImageCache_ImageKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvalidateImageCache_ImageKey.Merge(m, src)
}
func (m *InvalidateImageCache_ImageKey) XXX_Size() int {
	return m.Size()
}
func (m *InvalidateImageCache_ImageKey) XXX_DiscardUnknown() {
	xxx_messageInfo_InvalidateImageCache_ImageKey.DiscardUnknown(m)
}

var xxx_messageInfo_InvalidateImageCache_ImageKey proto.InternalMessageInfo

func (m *InvalidateImageCache_ImageKey) GetImageId() string {
	if m != nil {
		return m.ImageId
	}
	return ""
}

func (m *InvalidateImageCache_ImageKey) GetImageFullName() string {
	if m != nil {
		return m.ImageFullName
	}
	return ""
}

func (m *InvalidateImageCache_ImageKey) MessageClone() proto.Message {
	return m.Clone()
}
func (m *InvalidateImageCache_ImageKey) Clone() *InvalidateImageCache_ImageKey {
	if m == nil {
		return nil
	}
	cloned := new(InvalidateImageCache_ImageKey)
	*cloned = *m

	return cloned
}

func init() {
	proto.RegisterEnum("central.NodeInventoryACK_Action", NodeInventoryACK_Action_name, NodeInventoryACK_Action_value)
	proto.RegisterType((*MsgFromSensor)(nil), "central.MsgFromSensor")
	proto.RegisterType((*ReassessPolicies)(nil), "central.ReassessPolicies")
	proto.RegisterType((*ReprocessDeployments)(nil), "central.ReprocessDeployments")
	proto.RegisterType((*MsgToSensor)(nil), "central.MsgToSensor")
	proto.RegisterType((*DeduperState)(nil), "central.DeduperState")
	proto.RegisterMapType((map[string]uint64)(nil), "central.DeduperState.ResourceHashesEntry")
	proto.RegisterType((*Pod)(nil), "central.Pod")
	proto.RegisterType((*Resource)(nil), "central.Resource")
	proto.RegisterType((*ResourceEvent)(nil), "central.ResourceEvent")
	proto.RegisterType((*NodeInventoryACK)(nil), "central.NodeInventoryACK")
	proto.RegisterType((*AuditLogSync)(nil), "central.AuditLogSync")
	proto.RegisterMapType((map[string]*storage.AuditLogFileState)(nil), "central.AuditLogSync.NodeAuditLogFileStatesEntry")
	proto.RegisterType((*AuditLogStatusInfo)(nil), "central.AuditLogStatusInfo")
	proto.RegisterMapType((map[string]*storage.AuditLogFileState)(nil), "central.AuditLogStatusInfo.NodeAuditLogFileStatesEntry")
	proto.RegisterType((*ReprocessDeployment)(nil), "central.ReprocessDeployment")
	proto.RegisterType((*InvalidateImageCache)(nil), "central.InvalidateImageCache")
	proto.RegisterType((*InvalidateImageCache_ImageKey)(nil), "central.InvalidateImageCache.ImageKey")
}

func init() {
	proto.RegisterFile("internalapi/central/sensor_iservice.proto", fileDescriptor_9d0a66b7b73dbb5d)
}

var fileDescriptor_9d0a66b7b73dbb5d = []byte{
	// 2123 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xdd, 0x4e, 0x1c, 0xc9,
	0xf5, 0x9f, 0x31, 0x60, 0x98, 0x33, 0x0c, 0x86, 0x62, 0x18, 0x9a, 0xb1, 0x61, 0xd9, 0xb1, 0x16,
	0x63, 0xe9, 0x6f, 0xbc, 0x7f, 0xac, 0xdd, 0x58, 0xc9, 0x26, 0x2b, 0xc0, 0xb6, 0x06, 0x61, 0x63,
	0xd2, 0xd8, 0x52, 0x3e, 0x56, 0x69, 0x15, 0xdd, 0xc5, 0xd0, 0xa2, 0xa7, 0xaa, 0x53, 0xd5, 0x6d,
	0x6b, 0x5e, 0x22, 0xd7, 0x79, 0x81, 0xbd, 0xcb, 0x03, 0xe4, 0x11, 0x72, 0x99, 0x47, 0x88, 0x9c,
	0x3c, 0x40, 0xa4, 0xbc, 0x40, 0x54, 0x5f, 0xfd, 0x35, 0xed, 0x49, 0x2e, 0x73, 0x05, 0x7d, 0xce,
	0xaf, 0x4e, 0x9f, 0x3e, 0x75, 0xea, 0x77, 0x7e, 0x35, 0xf0, 0x38, 0xa4, 0x09, 0xe1, 0x14, 0x47,
	0x38, 0x0e, 0x9f, 0xfa, 0x84, 0x26, 0x1c, 0x47, 0x4f, 0x05, 0xa1, 0x82, 0x71, 0x2f, 0x14, 0x84,
	0x7f, 0x08, 0x7d, 0x72, 0x10, 0x73, 0x96, 0x30, 0xb4, 0x68, 0xdc, 0xfd, 0xfd, 0xba, 0x35, 0x7e,
	0x94, 0x8a, 0x84, 0x70, 0xcf, 0x67, 0xf4, 0x3a, 0x1c, 0xe9, 0x25, 0xb3, 0x91, 0x22, 0xc1, 0x49,
	0x2a, 0x0c, 0xf2, 0x49, 0x2d, 0x92, 0x8d, 0xe3, 0x28, 0xc4, 0xd4, 0x27, 0x1e, 0x8b, 0x09, 0xc7,
	0x09, 0xe3, 0x06, 0xfe, 0xac, 0x0e, 0x1e, 0x90, 0x88, 0x8c, 0x70, 0x42, 0x02, 0x8f, 0x93, 0x51,
	0x28, 0x12, 0x3e, 0x29, 0x67, 0xf3, 0x45, 0xdd, 0xa2, 0x70, 0x8c, 0x47, 0xe6, 0x0b, 0xfb, 0x7b,
	0x75, 0x00, 0x4a, 0x92, 0x8f, 0x8c, 0xdf, 0x7a, 0xd7, 0x11, 0xfb, 0x68, 0x70, 0x5f, 0xd5, 0xe1,
	0x62, 0x16, 0x85, 0xfe, 0xc4, 0x13, 0x13, 0xea, 0x1b, 0xd8, 0xa3, 0x19, 0xb5, 0x25, 0x1f, 0x08,
	0x4d, 0xc4, 0xac, 0x32, 0x19, 0x60, 0x1a, 0x8f, 0x38, 0x0e, 0x6c, 0x86, 0x8f, 0x67, 0x15, 0x74,
	0x4c, 0x12, 0x1e, 0xfa, 0x36, 0xe8, 0xc3, 0x3a, 0x68, 0x42, 0x22, 0x22, 0x61, 0x93, 0x59, 0x29,
	0x5e, 0x61, 0x41, 0xa2, 0x90, 0x92, 0xe2, 0xb7, 0xd4, 0xd6, 0xee, 0x86, 0x44, 0x11, 0x33, 0x80,
	0xa7, 0xb3, 0x6a, 0x57, 0x17, 0xb1, 0xf6, 0xd5, 0x11, 0xf3, 0x71, 0xe4, 0x09, 0x1f, 0x53, 0x4a,
	0xec, 0x5e, 0xff, 0xac, 0xb6, 0xda, 0x9c, 0xf9, 0x44, 0x08, 0x2f, 0x0a, 0x45, 0x42, 0x68, 0x48,
	0x47, 0x1e, 0xa3, 0x5e, 0xcc, 0x78, 0x22, 0xbc, 0x34, 0x0e, 0x70, 0x62, 0x0b, 0xb6, 0x21, 0x12,
	0xc6, 0xf1, 0x88, 0xd8, 0x22, 0x19, 0xb3, 0x63, 0xcd, 0x01, 0x89, 0x23, 0x36, 0x19, 0x13, 0x9a,
	0x18, 0xcf, 0xba, 0xf5, 0x14, 0x1b, 0xe3, 0x81, 0x35, 0xda, 0x0f, 0xd2, 0x9b, 0x6d, 0xbc, 0x28,
	0xf3, 0xb2, 0x6c, 0xa3, 0xba, 0xd6, 0x26, 0x88, 0xcf, 0x89, 0x0d, 0xbe, 0x9d, 0x5b, 0xd5, 0xc9,
	0xf2, 0xb0, 0xef, 0xb3, 0x34, 0x7b, 0x77, 0x16, 0x88, 0x5f, 0x61, 0x53, 0xa6, 0xc1, 0xbf, 0x5a,
	0xd0, 0x79, 0x23, 0x46, 0xaf, 0x38, 0x1b, 0x5f, 0xaa, 0x8e, 0x40, 0x5b, 0xb0, 0x74, 0x83, 0xc5,
	0x8d, 0x77, 0x4b, 0x26, 0xce, 0xe2, 0x6e, 0x73, 0xbf, 0xe5, 0x2e, 0xca, 0xe7, 0x33, 0x32, 0x41,
	0xdb, 0x00, 0x01, 0x09, 0xd2, 0x98, 0x28, 0xe7, 0x92, 0x72, 0xb6, 0xb4, 0x45, 0xba, 0x9f, 0x00,
	0x32, 0x75, 0x93, 0x05, 0xc3, 0x49, 0x42, 0xc6, 0x71, 0xe2, 0xdc, 0xdb, 0x6d, 0xee, 0x2f, 0xb8,
	0x6b, 0xb9, 0xe7, 0x48, 0x3b, 0xd0, 0xff, 0xc1, 0x82, 0x6a, 0x53, 0xa7, 0xb9, 0xdb, 0xdc, 0x6f,
	0x1f, 0x76, 0x0f, 0x4c, 0xf1, 0x0f, 0x74, 0x22, 0x2f, 0xa5, 0x6f, 0xd8, 0x70, 0x35, 0x08, 0xbd,
	0x86, 0xf5, 0xe2, 0x51, 0x31, 0xdb, 0xe0, 0xdc, 0x51, 0x6b, 0xfb, 0xd9, 0xda, 0x73, 0x8d, 0x79,
	0x15, 0xb1, 0x8f, 0xef, 0x15, 0x62, 0xd8, 0x70, 0xd7, 0x68, 0xd5, 0x88, 0xbe, 0x83, 0x8e, 0xf0,
	0x39, 0x8e, 0x89, 0x8d, 0x33, 0xa7, 0xe2, 0x6c, 0xe4, 0x39, 0x28, 0x6f, 0x16, 0x62, 0x59, 0x14,
	0x9e, 0xd1, 0xef, 0x60, 0xab, 0xb4, 0x53, 0x21, 0x11, 0x1e, 0x27, 0x22, 0x66, 0x54, 0x10, 0x67,
	0x5e, 0x45, 0xda, 0xad, 0x66, 0x74, 0x61, 0x80, 0xae, 0xc1, 0x0d, 0x1b, 0xee, 0x26, 0xad, 0x77,
	0x21, 0x17, 0x36, 0xca, 0x2c, 0x66, 0xb3, 0x5c, 0x50, 0xb1, 0x1f, 0x64, 0xb1, 0x4f, 0x34, 0xea,
	0x52, 0x81, 0xb2, 0x64, 0xd7, 0xfd, 0x69, 0x33, 0xfa, 0x01, 0x36, 0xb3, 0xd3, 0xe9, 0x05, 0x38,
	0xc1, 0x79, 0xc6, 0x77, 0x55, 0xd4, 0x41, 0x16, 0xf5, 0x22, 0x8d, 0xa2, 0x77, 0x16, 0xfb, 0x02,
	0x27, 0xb8, 0x90, 0xf3, 0x46, 0x52, 0xe7, 0x40, 0x6f, 0xc1, 0xbe, 0xd4, 0xbb, 0x21, 0x38, 0x4a,
	0x6e, 0xbc, 0x90, 0x5e, 0x33, 0xa7, 0xa5, 0x22, 0x6f, 0x67, 0x91, 0x5d, 0xfc, 0xd1, 0xa4, 0x3c,
	0x54, 0xa8, 0x53, 0x7a, 0xcd, 0xe4, 0x06, 0xf9, 0x55, 0xa3, 0x6c, 0x0e, 0x75, 0xfc, 0x1d, 0xa8,
	0x6d, 0x8e, 0xa1, 0xf4, 0xc9, 0xe6, 0x50, 0x20, 0x74, 0x01, 0x1b, 0x38, 0x0d, 0xc2, 0xc4, 0x8b,
	0xd8, 0xc8, 0x96, 0x4c, 0x25, 0xd0, 0x56, 0xab, 0xef, 0x67, 0xab, 0x8f, 0x24, 0xea, 0x35, 0x1b,
	0xe9, 0xd2, 0x98, 0xd7, 0x23, 0x3c, 0x65, 0x45, 0x1c, 0xbe, 0x0c, 0x85, 0x48, 0x89, 0x57, 0xa2,
	0x0c, 0xcf, 0x27, 0x92, 0x02, 0x38, 0xf9, 0x7d, 0x4a, 0x44, 0xe2, 0x2c, 0xab, 0xe8, 0x7b, 0x59,
	0xf4, 0x53, 0xb9, 0xe2, 0xb5, 0x5c, 0x70, 0xa9, 0xf1, 0x27, 0x12, 0xee, 0x6a, 0xf4, 0xb0, 0xe1,
	0x6e, 0x87, 0xb3, 0x00, 0xe8, 0x18, 0xee, 0x55, 0xb8, 0xd6, 0xe9, 0xa8, 0x37, 0x6c, 0x56, 0x37,
	0xfc, 0x8d, 0x76, 0x0f, 0x1b, 0xee, 0x8a, 0x5f, 0xb2, 0xa0, 0x18, 0x76, 0x3f, 0xcb, 0x5d, 0xb6,
	0x8b, 0x56, 0x2a, 0x69, 0x5f, 0xe8, 0x05, 0xaf, 0x2d, 0xfe, 0x2d, 0xbd, 0x90, 0x4c, 0x97, 0xf5,
	0xd3, 0x83, 0xb8, 0x16, 0x60, 0x1a, 0xeb, 0xb7, 0xe0, 0xd4, 0x0c, 0x52, 0x5d, 0xfe, 0x55, 0xf5,
	0xa6, 0x2f, 0xf2, 0xf4, 0x33, 0xe0, 0x5b, 0x83, 0x33, 0x5b, 0xd0, 0xf3, 0x6b, 0x3d, 0xe8, 0x1c,
	0xd6, 0x0b, 0xc1, 0xb3, 0x8e, 0x5d, 0xab, 0x6c, 0x6b, 0x1e, 0xb7, 0xd0, 0xaa, 0xc8, 0x9f, 0xb2,
	0x1e, 0x2f, 0xc0, 0xdc, 0x58, 0x8c, 0x06, 0x08, 0x56, 0x5d, 0x82, 0x85, 0x20, 0x42, 0xd8, 0xc3,
	0x37, 0xe8, 0x41, 0xd7, 0x25, 0xe6, 0x4b, 0x5f, 0x64, 0xb4, 0x2d, 0x06, 0x7f, 0x5e, 0x85, 0xf6,
	0x1b, 0x31, 0x7a, 0xc7, 0x0c, 0x3f, 0xfe, 0x02, 0xda, 0x84, 0x5e, 0x33, 0xee, 0x93, 0x71, 0x4e,
	0x5e, 0xfd, 0x2a, 0x79, 0xe5, 0x88, 0x61, 0xc3, 0x2d, 0x2e, 0x40, 0xdf, 0xc3, 0x8a, 0xa1, 0x1e,
	0x9f, 0x8d, 0xc7, 0x98, 0x06, 0x86, 0xc3, 0x7a, 0x15, 0xee, 0x39, 0xd1, 0xde, 0x61, 0xc3, 0x35,
	0x54, 0x65, 0x0c, 0xb2, 0xe0, 0x53, 0xec, 0x63, 0x43, 0xcd, 0x55, 0x0a, 0x5e, 0x21, 0x9f, 0x3c,
	0x66, 0x8f, 0xd6, 0x7a, 0x64, 0x76, 0x65, 0xa9, 0x65, 0xf8, 0xac, 0x57, 0x6d, 0xc1, 0x13, 0xe5,
	0x95, 0xd9, 0xf9, 0x45, 0x03, 0x7a, 0x0f, 0xbd, 0xb2, 0xb4, 0xf0, 0x12, 0x1e, 0x8e, 0x46, 0x84,
	0x1b, 0xf2, 0xda, 0xae, 0x54, 0xea, 0xbd, 0x46, 0xbd, 0xd3, 0xa0, 0x61, 0xc3, 0xed, 0x8a, 0x1a,
	0x3b, 0xfa, 0x35, 0xf4, 0xa6, 0xe8, 0x4b, 0x1f, 0x42, 0xcd, 0x5e, 0x5f, 0xce, 0x62, 0x2f, 0x7b,
	0xfe, 0xba, 0x49, 0x8d, 0x1d, 0x7d, 0x0b, 0xed, 0x82, 0xb8, 0x52, 0x33, 0xaf, 0x7d, 0xb8, 0x9e,
	0xc7, 0x53, 0xbe, 0xcb, 0x09, 0xf5, 0x87, 0x0d, 0x17, 0xe2, 0xec, 0x09, 0x0d, 0x61, 0x8d, 0x9b,
	0x26, 0xca, 0x36, 0x42, 0x0d, 0xc5, 0xf6, 0xe1, 0x56, 0xce, 0x78, 0x95, 0x36, 0x1b, 0x36, 0xdc,
	0x55, 0x5e, 0xb1, 0xc9, 0x69, 0x54, 0x92, 0x30, 0x86, 0x37, 0xf3, 0x69, 0x74, 0x6c, 0xbc, 0x26,
	0x8b, 0xe5, 0xab, 0xc2, 0x33, 0x4a, 0x61, 0xe0, 0xcb, 0x26, 0x8f, 0xbc, 0x38, 0x8d, 0x22, 0xef,
	0x33, 0x65, 0xd2, 0x3c, 0xfa, 0x28, 0xdf, 0x46, 0xb5, 0x64, 0x46, 0xb1, 0x76, 0xfc, 0x99, 0x08,
	0x74, 0x03, 0xdb, 0x71, 0x2a, 0x6e, 0x3c, 0xdb, 0x8b, 0x84, 0x26, 0x61, 0xa2, 0x27, 0xa1, 0x7e,
	0xa3, 0xe6, 0xde, 0x87, 0x85, 0x8d, 0x11, 0x37, 0xa6, 0x1f, 0x5f, 0x1a, 0x6c, 0xfe, 0xb6, 0x7e,
	0xfc, 0x59, 0x2f, 0x7a, 0x62, 0x67, 0xc1, 0x72, 0xa5, 0x2c, 0x27, 0xfa, 0x6f, 0x65, 0x18, 0xb8,
	0xb0, 0x51, 0x2b, 0x0c, 0x0d, 0x99, 0x3e, 0xa8, 0x1e, 0x8e, 0x4a, 0x71, 0xad, 0xcc, 0x28, 0x9a,
	0xd1, 0xcf, 0x61, 0xa5, 0x30, 0x60, 0x64, 0xb0, 0x95, 0x4a, 0x2e, 0xd9, 0x64, 0x31, 0x5b, 0x84,
	0x0b, 0xcf, 0xe8, 0x97, 0xd0, 0xe5, 0x96, 0x5b, 0xbc, 0x5c, 0x13, 0x2a, 0x6d, 0x54, 0xcc, 0xa8,
	0x86, 0x80, 0x64, 0x46, 0x7c, 0xda, 0x2c, 0xcf, 0x59, 0x48, 0x3f, 0xe0, 0x28, 0x94, 0x24, 0xec,
	0x29, 0x35, 0xe9, 0xf9, 0xd8, 0xbf, 0x21, 0x86, 0x74, 0xf3, 0x73, 0x76, 0x9a, 0xc1, 0x4e, 0x25,
	0xea, 0x44, 0x82, 0xe4, 0x61, 0x08, 0x6b, 0xec, 0xb2, 0x99, 0x66, 0xcd, 0xbd, 0x12, 0xff, 0x3e,
	0xfa, 0x8f, 0x83, 0x2f, 0xe3, 0xe2, 0x9d, 0x70, 0x26, 0x02, 0x7d, 0x03, 0x1d, 0x3d, 0x9c, 0x02,
	0xfd, 0x29, 0x0e, 0x52, 0x6f, 0x58, 0x39, 0x30, 0x92, 0xf5, 0x40, 0xa5, 0x28, 0xeb, 0x6a, 0x60,
	0xea, 0x19, 0xbd, 0x83, 0x8d, 0xba, 0xba, 0x0a, 0x67, 0xbd, 0x2a, 0x3c, 0x6a, 0x98, 0x5d, 0xd6,
	0xa0, 0xa6, 0xb2, 0x02, 0x9d, 0x02, 0x92, 0x52, 0xdb, 0x0b, 0xa9, 0x54, 0x9e, 0x8c, 0x4f, 0x3c,
	0xec, 0xdf, 0x3a, 0xdd, 0xca, 0xc9, 0x3e, 0x67, 0x01, 0x39, 0xb5, 0x88, 0xa3, 0x93, 0x33, 0x79,
	0xb2, 0x69, 0xc9, 0xe6, 0xdf, 0x4a, 0xa5, 0xf8, 0xd9, 0x6b, 0xa3, 0xb3, 0x51, 0x51, 0x8a, 0x2f,
	0x2c, 0xd2, 0x35, 0xc0, 0x8c, 0x63, 0x37, 0x83, 0x7a, 0x17, 0x7a, 0x06, 0x20, 0xb7, 0xc8, 0x14,
	0xad, 0xa7, 0x02, 0xa2, 0xc2, 0x20, 0xc1, 0xd4, 0x16, 0xae, 0x25, 0xec, 0x03, 0x3a, 0x03, 0xa4,
	0xfb, 0x45, 0xde, 0x7c, 0x46, 0x1c, 0x27, 0x21, 0xa3, 0xc2, 0xd9, 0xac, 0x0c, 0x32, 0x85, 0x3d,
	0x2d, 0x20, 0xa4, 0x50, 0x0b, 0xab, 0x46, 0x19, 0xac, 0x34, 0xa1, 0xf5, 0xd9, 0x77, 0x2a, 0xc1,
	0x8a, 0x03, 0xda, 0x1e, 0xf9, 0x35, 0xbf, 0x6a, 0x44, 0xbf, 0x82, 0xcd, 0x8a, 0x8c, 0xcc, 0x5a,
	0x6e, 0x4b, 0x45, 0xdc, 0xa9, 0x8e, 0x21, 0x2d, 0x19, 0x8b, 0x02, 0xd5, 0xaf, 0x73, 0x48, 0x8a,
	0xd5, 0x17, 0x15, 0x2d, 0xa9, 0x89, 0xd3, 0xaf, 0x9c, 0xdf, 0x17, 0xda, 0x2b, 0x25, 0xa0, 0xea,
	0xb3, 0xa0, 0xf0, 0x8c, 0x0e, 0xec, 0x55, 0xe5, 0x7e, 0x65, 0x18, 0xba, 0x44, 0xb0, 0x94, 0xfb,
	0xa4, 0x7c, 0x59, 0xb1, 0x32, 0xe3, 0xc7, 0x26, 0x2c, 0x17, 0xe3, 0x22, 0x17, 0xee, 0x71, 0xb3,
	0xc2, 0x93, 0x97, 0x2a, 0x22, 0x9c, 0xe6, 0xee, 0xdc, 0x7e, 0xfb, 0xf0, 0x71, 0x6d, 0x1e, 0x59,
	0xf8, 0xa1, 0xc2, 0xbe, 0xa4, 0x09, 0x9f, 0xb8, 0x2b, 0xbc, 0x64, 0xec, 0x1f, 0xc1, 0x7a, 0x0d,
	0x0c, 0xad, 0xc2, 0x9c, 0xbc, 0xa4, 0x35, 0xd5, 0x25, 0x4d, 0xfe, 0x8b, 0xba, 0xb0, 0xf0, 0x01,
	0x47, 0xa9, 0xbe, 0x33, 0xcd, 0xbb, 0xfa, 0xe1, 0xa7, 0x77, 0x9e, 0x37, 0x07, 0x3f, 0xc0, 0xdc,
	0x05, 0x0b, 0xd0, 0x03, 0x68, 0x51, 0x3c, 0x26, 0x22, 0xc6, 0x3e, 0x31, 0x0b, 0x73, 0x03, 0x42,
	0x30, 0x9f, 0xa6, 0xa1, 0x56, 0x2b, 0x2d, 0x57, 0xfd, 0x8f, 0x1e, 0xca, 0xaa, 0xda, 0x83, 0xe3,
	0x85, 0x5a, 0x7f, 0xb4, 0x64, 0xf1, 0xac, 0xf1, 0x34, 0x18, 0x3c, 0x87, 0x25, 0x9b, 0x20, 0xda,
	0x85, 0xb9, 0x98, 0x05, 0x46, 0x34, 0x2d, 0x17, 0x66, 0xac, 0xd4, 0x24, 0xd2, 0x75, 0x0c, 0xb0,
	0x64, 0x3f, 0x70, 0xf0, 0x87, 0x79, 0xe8, 0x94, 0x2a, 0x8c, 0x1c, 0x58, 0xf4, 0x53, 0xce, 0xe5,
	0x56, 0xb4, 0xd4, 0xbd, 0xd2, 0x3e, 0xca, 0xaf, 0x4b, 0x58, 0x82, 0x23, 0x35, 0xe8, 0x16, 0x5c,
	0xfd, 0x80, 0xbe, 0x85, 0x4e, 0x56, 0x70, 0xa9, 0x87, 0x9d, 0xb6, 0x2a, 0xf7, 0xda, 0xd4, 0x06,
	0xba, 0xcb, 0x16, 0x27, 0x55, 0xae, 0x94, 0x41, 0xe5, 0xbb, 0xb8, 0x49, 0xb9, 0x97, 0x11, 0x52,
	0x51, 0x59, 0x4d, 0xa4, 0x0c, 0x2a, 0x0a, 0xaa, 0x09, 0xfa, 0x46, 0x5e, 0x95, 0x33, 0x9e, 0xbf,
	0x63, 0x34, 0x85, 0x5d, 0x5c, 0xa2, 0xf7, 0x02, 0xd0, 0xd6, 0x67, 0xce, 0xd4, 0xc7, 0xe2, 0xf3,
	0xfa, 0xa0, 0xc7, 0x70, 0x57, 0xdf, 0xf9, 0x8d, 0x30, 0xbb, 0x97, 0x81, 0x2e, 0x95, 0x79, 0xd8,
	0x70, 0x0d, 0x00, 0x3d, 0x84, 0x79, 0x49, 0x48, 0x46, 0x78, 0x75, 0xf2, 0xd4, 0x59, 0x20, 0x5b,
	0x5c, 0x39, 0xe5, 0xa5, 0xa3, 0xf2, 0x6b, 0x81, 0x51, 0x54, 0x9b, 0x85, 0xc0, 0xca, 0x7f, 0xa4,
	0xdd, 0xf2, 0xd2, 0x21, 0x4a, 0x16, 0xb4, 0x07, 0xf3, 0x9c, 0x45, 0xc4, 0x48, 0xa7, 0xd5, 0x6c,
	0xe1, 0xd9, 0x73, 0xe1, 0xb2, 0x48, 0xbd, 0x4b, 0xfa, 0xd1, 0x33, 0x58, 0xbc, 0x0a, 0x69, 0x10,
	0xd2, 0x91, 0xd1, 0x49, 0x9b, 0x55, 0xe8, 0xb1, 0x76, 0x0f, 0x1b, 0xae, 0x45, 0x96, 0x1a, 0xe2,
	0xc7, 0x26, 0xac, 0x56, 0x79, 0x17, 0x6d, 0x03, 0x58, 0xd2, 0x08, 0x03, 0xdb, 0xb7, 0xc6, 0x72,
	0x1a, 0xa0, 0xfb, 0xd0, 0x52, 0x6c, 0x2e, 0x3b, 0xd9, 0x34, 0xef, 0x92, 0x34, 0x9c, 0xe3, 0x31,
	0x41, 0xcf, 0xe1, 0x2e, 0xf6, 0x25, 0x91, 0xa9, 0x92, 0xaf, 0x14, 0xaf, 0xed, 0x95, 0xd7, 0x1c,
	0x1c, 0x29, 0x9c, 0x6b, 0xf0, 0x83, 0xfb, 0x70, 0x57, 0x5b, 0xd0, 0x22, 0xcc, 0x1d, 0x9d, 0x9c,
	0xad, 0x36, 0xd0, 0x12, 0xcc, 0x9f, 0xcb, 0xff, 0x9a, 0x83, 0x7f, 0x34, 0x61, 0xb9, 0x28, 0x08,
	0xd0, 0x18, 0xfa, 0x2a, 0x89, 0x5c, 0x44, 0x5c, 0x87, 0x11, 0xd1, 0x54, 0x64, 0x39, 0xe0, 0xff,
	0x6b, 0xb5, 0x84, 0x4a, 0xc4, 0x1a, 0x5e, 0x85, 0x11, 0x51, 0xcc, 0x60, 0xb8, 0xa0, 0x47, 0x6b,
	0x9d, 0x7d, 0x02, 0xf7, 0x67, 0x2c, 0xab, 0xe1, 0x86, 0xaf, 0x8b, 0xdc, 0x20, 0x89, 0xdb, 0xee,
	0xcb, 0x54, 0x88, 0x22, 0x6f, 0xfc, 0xb3, 0x09, 0x68, 0xfa, 0x46, 0x8d, 0xc4, 0x7f, 0xf1, 0xb1,
	0x3f, 0x99, 0x71, 0x25, 0xff, 0x5f, 0xfe, 0xe4, 0xef, 0x24, 0xdb, 0x4e, 0xab, 0xb1, 0xaf, 0x60,
	0xa5, 0x44, 0x84, 0xfa, 0x33, 0x5b, 0x6e, 0xa7, 0xc8, 0x84, 0x62, 0xf0, 0xa7, 0x26, 0x74, 0xeb,
	0xe4, 0x18, 0x7a, 0x09, 0xa0, 0x47, 0xf2, 0x2d, 0x99, 0xd8, 0x12, 0xed, 0xcd, 0x54, 0x70, 0x7a,
	0x3e, 0x9f, 0x91, 0x89, 0xdb, 0x0a, 0xcd, 0x7f, 0xa2, 0xff, 0x06, 0x96, 0xac, 0x19, 0x6d, 0xc1,
	0x92, 0x99, 0xf2, 0xf6, 0x50, 0x2c, 0xea, 0xe9, 0x1d, 0xa0, 0x3d, 0xb8, 0xa7, 0x5d, 0xd7, 0xf2,
	0xc2, 0x50, 0x38, 0x18, 0x1d, 0x65, 0x7e, 0x95, 0x46, 0x91, 0x3c, 0x1d, 0x87, 0x17, 0xd0, 0xd1,
	0x97, 0x34, 0xc3, 0x00, 0xe8, 0x7b, 0x68, 0xcb, 0x8b, 0x62, 0x4a, 0x43, 0x5f, 0x8e, 0xb3, 0x7c,
	0x0e, 0x96, 0x7e, 0x42, 0xec, 0x77, 0x8b, 0x76, 0x7b, 0x71, 0xde, 0x6f, 0x7e, 0xdd, 0x3c, 0xde,
	0xfa, 0xcb, 0xa7, 0x9d, 0xe6, 0x5f, 0x3f, 0xed, 0x34, 0xff, 0xf6, 0x69, 0xa7, 0xf9, 0xc7, 0xbf,
	0xef, 0x34, 0x7e, 0x63, 0x7f, 0xf6, 0xbf, 0xba, 0xab, 0x7e, 0x90, 0x7c, 0xf6, 0xef, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xa6, 0xa7, 0x7c, 0xc3, 0x33, 0x18, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SensorServiceClient is the client API for SensorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConnInterface.NewStream.
type SensorServiceClient interface {
	Communicate(ctx context.Context, opts ...grpc.CallOption) (SensorService_CommunicateClient, error)
}

type sensorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSensorServiceClient(cc grpc.ClientConnInterface) SensorServiceClient {
	return &sensorServiceClient{cc}
}

func (c *sensorServiceClient) Communicate(ctx context.Context, opts ...grpc.CallOption) (SensorService_CommunicateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SensorService_serviceDesc.Streams[0], "/central.SensorService/Communicate", opts...)
	if err != nil {
		return nil, err
	}
	x := &sensorServiceCommunicateClient{stream}
	return x, nil
}

type SensorService_CommunicateClient interface {
	Send(*MsgFromSensor) error
	Recv() (*MsgToSensor, error)
	grpc.ClientStream
}

type sensorServiceCommunicateClient struct {
	grpc.ClientStream
}

func (x *sensorServiceCommunicateClient) Send(m *MsgFromSensor) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sensorServiceCommunicateClient) Recv() (*MsgToSensor, error) {
	m := new(MsgToSensor)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SensorServiceServer is the server API for SensorService service.
type SensorServiceServer interface {
	Communicate(SensorService_CommunicateServer) error
}

// UnimplementedSensorServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSensorServiceServer struct {
}

func (*UnimplementedSensorServiceServer) Communicate(srv SensorService_CommunicateServer) error {
	return status.Errorf(codes.Unimplemented, "method Communicate not implemented")
}

func RegisterSensorServiceServer(s *grpc.Server, srv SensorServiceServer) {
	s.RegisterService(&_SensorService_serviceDesc, srv)
}

func _SensorService_Communicate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SensorServiceServer).Communicate(&sensorServiceCommunicateServer{stream})
}

type SensorService_CommunicateServer interface {
	Send(*MsgToSensor) error
	Recv() (*MsgFromSensor, error)
	grpc.ServerStream
}

type sensorServiceCommunicateServer struct {
	grpc.ServerStream
}

func (x *sensorServiceCommunicateServer) Send(m *MsgToSensor) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sensorServiceCommunicateServer) Recv() (*MsgFromSensor, error) {
	m := new(MsgFromSensor)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SensorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "central.SensorService",
	HandlerType: (*SensorServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Communicate",
			Handler:       _SensorService_Communicate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internalapi/central/sensor_iservice.proto",
}

func (m *MsgFromSensor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFromSensor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFromSensor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Msg != nil {
		{
			size := m.Msg.Size()
			i -= size
			if _, err := m.Msg.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ProcessingAttempt != 0 {
		i = encodeVarintSensorIservice(dAtA, i, uint64(m.ProcessingAttempt))
		i--
		dAtA[i] = 0x78
	}
	if len(m.DedupeKey) > 0 {
		i -= len(m.DedupeKey)
		copy(dAtA[i:], m.DedupeKey)
		i = encodeVarintSensorIservice(dAtA, i, uint64(len(m.DedupeKey)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.HashKey) > 0 {
		i -= len(m.HashKey)
		copy(dAtA[i:], m.HashKey)
		i = encodeVarintSensorIservice(dAtA, i, uint64(len(m.HashKey)))
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}

func (m *MsgFromSensor_Event) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFromSensor_Event) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Event != nil {
		{
			size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *MsgFromSensor_NetworkFlowUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFromSensor_NetworkFlowUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NetworkFlowUpdate != nil {
		{
			size, err := m.NetworkFlowUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *MsgFromSensor_ScrapeUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFromSensor_ScrapeUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ScrapeUpdate != nil {
		{
			size, err := m.ScrapeUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *MsgFromSensor_NetworkPoliciesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFromSensor_NetworkPoliciesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NetworkPoliciesResponse != nil {
		{
			size, err := m.NetworkPoliciesResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *MsgFromSensor_ClusterStatusUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFromSensor_ClusterStatusUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ClusterStatusUpdate != nil {
		{
			size, err := m.ClusterStatusUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *MsgFromSensor_TelemetryDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFromSensor_TelemetryDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TelemetryDataResponse != nil {
		{
			size, err := m.TelemetryDataResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *MsgFromSensor_ClusterHealthInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFromSensor_ClusterHealthInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ClusterHealthInfo != nil {
		{
			size, err := m.ClusterHealthInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *MsgFromSensor_Hello) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFromSensor_Hello) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Hello != nil {
		{
			size, err := m.Hello.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *MsgFromSensor_AuditLogStatusInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFromSensor_AuditLogStatusInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AuditLogStatusInfo != nil {
		{
			size, err := m.AuditLogStatusInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *MsgFromSensor_IssueLocalScannerCertsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFromSensor_IssueLocalScannerCertsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IssueLocalScannerCertsRequest != nil {
		{
			size, err := m.IssueLocalScannerCertsRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *MsgFromSensor_ClusterMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFromSensor_ClusterMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ClusterMetrics != nil {
		{
			size, err := m.ClusterMetrics.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *MsgFromSensor_ProcessListeningOnPortUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFromSensor_ProcessListeningOnPortUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProcessListeningOnPortUpdate != nil {
		{
			size, err := m.ProcessListeningOnPortUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *MsgFromSensor_ComplianceOperatorInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFromSensor_ComplianceOperatorInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ComplianceOperatorInfo != nil {
		{
			size, err := m.ComplianceOperatorInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *MsgFromSensor_ComplianceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFromSensor_ComplianceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ComplianceResponse != nil {
		{
			size, err := m.ComplianceResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *ReassessPolicies) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReassessPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReassessPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ReprocessDeployments) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReprocessDeployments) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReprocessDeployments) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *MsgToSensor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgToSensor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Msg != nil {
		{
			size := m.Msg.Size()
			i -= size
			if _, err := m.Msg.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgToSensor_Enforcement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_Enforcement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Enforcement != nil {
		{
			size, err := m.Enforcement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_ScrapeCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_ScrapeCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ScrapeCommand != nil {
		{
			size, err := m.ScrapeCommand.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_NetworkPoliciesCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_NetworkPoliciesCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NetworkPoliciesCommand != nil {
		{
			size, err := m.NetworkPoliciesCommand.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_ClusterConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_ClusterConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ClusterConfig != nil {
		{
			size, err := m.ClusterConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_SensorUpgradeTrigger) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_SensorUpgradeTrigger) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SensorUpgradeTrigger != nil {
		{
			size, err := m.SensorUpgradeTrigger.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_TelemetryDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_TelemetryDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TelemetryDataRequest != nil {
		{
			size, err := m.TelemetryDataRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_PolicySync) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_PolicySync) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PolicySync != nil {
		{
			size, err := m.PolicySync.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_ReassessPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_ReassessPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReassessPolicies != nil {
		{
			size, err := m.ReassessPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_BaselineSync) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_BaselineSync) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BaselineSync != nil {
		{
			size, err := m.BaselineSync.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_CancelPullTelemetryDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_CancelPullTelemetryDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CancelPullTelemetryDataRequest != nil {
		{
			size, err := m.CancelPullTelemetryDataRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_PushNetworkEntitiesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_PushNetworkEntitiesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PushNetworkEntitiesRequest != nil {
		{
			size, err := m.PushNetworkEntitiesRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_Hello) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_Hello) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Hello != nil {
		{
			size, err := m.Hello.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_NetworkBaselineSync) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_NetworkBaselineSync) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NetworkBaselineSync != nil {
		{
			size, err := m.NetworkBaselineSync.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_AuditLogSync) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_AuditLogSync) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AuditLogSync != nil {
		{
			size, err := m.AuditLogSync.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_ReprocessDeployment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_ReprocessDeployment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReprocessDeployment != nil {
		{
			size, err := m.ReprocessDeployment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_InvalidateImageCache) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_InvalidateImageCache) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InvalidateImageCache != nil {
		{
			size, err := m.InvalidateImageCache.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_IssueLocalScannerCertsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_IssueLocalScannerCertsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IssueLocalScannerCertsResponse != nil {
		{
			size, err := m.IssueLocalScannerCertsResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_UpdatedImage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_UpdatedImage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdatedImage != nil {
		{
			size, err := m.UpdatedImage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_ReprocessDeployments) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_ReprocessDeployments) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReprocessDeployments != nil {
		{
			size, err := m.ReprocessDeployments.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_NodeInventoryAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_NodeInventoryAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NodeInventoryAck != nil {
		{
			size, err := m.NodeInventoryAck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_DelegatedRegistryConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_DelegatedRegistryConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DelegatedRegistryConfig != nil {
		{
			size, err := m.DelegatedRegistryConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_ScanImage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_ScanImage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ScanImage != nil {
		{
			size, err := m.ScanImage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_ImageIntegrations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_ImageIntegrations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ImageIntegrations != nil {
		{
			size, err := m.ImageIntegrations.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_ComplianceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_ComplianceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ComplianceRequest != nil {
		{
			size, err := m.ComplianceRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_ClusterHealthResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_ClusterHealthResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ClusterHealthResponse != nil {
		{
			size, err := m.ClusterHealthResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_DeduperState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_DeduperState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DeduperState != nil {
		{
			size, err := m.DeduperState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_Event) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToSensor_Event) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Event != nil {
		{
			size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *DeduperState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeduperState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeduperState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ResourceHashes) > 0 {
		for k := range m.ResourceHashes {
			v := m.ResourceHashes[k]
			baseI := i
			i = encodeVarintSensorIservice(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintSensorIservice(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintSensorIservice(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Pod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeploymentId) > 0 {
		i -= len(m.DeploymentId)
		copy(dAtA[i:], m.DeploymentId)
		i = encodeVarintSensorIservice(dAtA, i, uint64(len(m.DeploymentId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintSensorIservice(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintSensorIservice(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Resource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Resource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Resource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Resource != nil {
		{
			size := m.Resource.Size()
			i -= size
			if _, err := m.Resource.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Resource_Pod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Resource_Pod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Pod != nil {
		{
			size, err := m.Pod.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ResourceEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ResourceList) > 0 {
		for iNdEx := len(m.ResourceList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResourceList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSensorIservice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.Total != 0 {
		i = encodeVarintSensorIservice(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x50
	}
	if m.Current != 0 {
		i = encodeVarintSensorIservice(dAtA, i, uint64(m.Current))
		i--
		dAtA[i] = 0x48
	}
	if m.Resource != nil {
		{
			size := m.Resource.Size()
			i -= size
			if _, err := m.Resource.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ResourceEvent_NetworkPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceEvent_NetworkPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NetworkPolicy != nil {
		{
			size, err := m.NetworkPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ResourceEvent_Deployment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceEvent_Deployment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Deployment != nil {
		{
			size, err := m.Deployment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ResourceEvent_Pod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceEvent_Pod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Pod != nil {
		{
			size, err := m.Pod.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ResourceEvent_Secret) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceEvent_Secret) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Secret != nil {
		{
			size, err := m.Secret.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ResourceEvent_Node) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceEvent_Node) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Node != nil {
		{
			size, err := m.Node.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ResourceEvent_ServiceAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceEvent_ServiceAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ServiceAccount != nil {
		{
			size, err := m.ServiceAccount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ResourceEvent_Role) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceEvent_Role) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Role != nil {
		{
			size, err := m.Role.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ResourceEvent_Binding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceEvent_Binding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Binding != nil {
		{
			size, err := m.Binding.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *NodeInventoryACK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeInventoryACK) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeInventoryACK) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Action != 0 {
		i = encodeVarintSensorIservice(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x18
	}
	if len(m.NodeName) > 0 {
		i -= len(m.NodeName)
		copy(dAtA[i:], m.NodeName)
		i = encodeVarintSensorIservice(dAtA, i, uint64(len(m.NodeName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintSensorIservice(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AuditLogSync) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuditLogSync) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuditLogSync) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NodeAuditLogFileStates) > 0 {
		for k := range m.NodeAuditLogFileStates {
			v := m.NodeAuditLogFileStates[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintSensorIservice(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintSensorIservice(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintSensorIservice(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AuditLogStatusInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuditLogStatusInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuditLogStatusInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NodeAuditLogFileStates) > 0 {
		for k := range m.NodeAuditLogFileStates {
			v := m.NodeAuditLogFileStates[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintSensorIservice(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintSensorIservice(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintSensorIservice(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReprocessDeployment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReprocessDeployment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReprocessDeployment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeploymentIds) > 0 {
		for iNdEx := len(m.DeploymentIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DeploymentIds[iNdEx])
			copy(dAtA[i:], m.DeploymentIds[iNdEx])
			i = encodeVarintSensorIservice(dAtA, i, uint64(len(m.DeploymentIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *InvalidateImageCache) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvalidateImageCache) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InvalidateImageCache) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ImageKeys) > 0 {
		for iNdEx := len(m.ImageKeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ImageKeys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSensorIservice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *InvalidateImageCache_ImageKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvalidateImageCache_ImageKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InvalidateImageCache_ImageKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ImageFullName) > 0 {
		i -= len(m.ImageFullName)
		copy(dAtA[i:], m.ImageFullName)
		i = encodeVarintSensorIservice(dAtA, i, uint64(len(m.ImageFullName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ImageId) > 0 {
		i -= len(m.ImageId)
		copy(dAtA[i:], m.ImageId)
		i = encodeVarintSensorIservice(dAtA, i, uint64(len(m.ImageId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSensorIservice(dAtA []byte, offset int, v uint64) int {
	offset -= sovSensorIservice(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgFromSensor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		n += m.Msg.Size()
	}
	l = len(m.HashKey)
	if l > 0 {
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	l = len(m.DedupeKey)
	if l > 0 {
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	if m.ProcessingAttempt != 0 {
		n += 1 + sovSensorIservice(uint64(m.ProcessingAttempt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgFromSensor_Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgFromSensor_NetworkFlowUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkFlowUpdate != nil {
		l = m.NetworkFlowUpdate.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgFromSensor_ScrapeUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScrapeUpdate != nil {
		l = m.ScrapeUpdate.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgFromSensor_NetworkPoliciesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkPoliciesResponse != nil {
		l = m.NetworkPoliciesResponse.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgFromSensor_ClusterStatusUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterStatusUpdate != nil {
		l = m.ClusterStatusUpdate.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgFromSensor_TelemetryDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TelemetryDataResponse != nil {
		l = m.TelemetryDataResponse.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgFromSensor_ClusterHealthInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterHealthInfo != nil {
		l = m.ClusterHealthInfo.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgFromSensor_Hello) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hello != nil {
		l = m.Hello.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgFromSensor_AuditLogStatusInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuditLogStatusInfo != nil {
		l = m.AuditLogStatusInfo.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgFromSensor_IssueLocalScannerCertsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IssueLocalScannerCertsRequest != nil {
		l = m.IssueLocalScannerCertsRequest.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgFromSensor_ClusterMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterMetrics != nil {
		l = m.ClusterMetrics.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgFromSensor_ProcessListeningOnPortUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProcessListeningOnPortUpdate != nil {
		l = m.ProcessListeningOnPortUpdate.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgFromSensor_ComplianceOperatorInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ComplianceOperatorInfo != nil {
		l = m.ComplianceOperatorInfo.Size()
		n += 2 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgFromSensor_ComplianceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ComplianceResponse != nil {
		l = m.ComplianceResponse.Size()
		n += 2 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *ReassessPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReprocessDeployments) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgToSensor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		n += m.Msg.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgToSensor_Enforcement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enforcement != nil {
		l = m.Enforcement.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgToSensor_ScrapeCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScrapeCommand != nil {
		l = m.ScrapeCommand.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgToSensor_NetworkPoliciesCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkPoliciesCommand != nil {
		l = m.NetworkPoliciesCommand.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgToSensor_ClusterConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterConfig != nil {
		l = m.ClusterConfig.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgToSensor_SensorUpgradeTrigger) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SensorUpgradeTrigger != nil {
		l = m.SensorUpgradeTrigger.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgToSensor_TelemetryDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TelemetryDataRequest != nil {
		l = m.TelemetryDataRequest.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgToSensor_PolicySync) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PolicySync != nil {
		l = m.PolicySync.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgToSensor_ReassessPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReassessPolicies != nil {
		l = m.ReassessPolicies.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgToSensor_BaselineSync) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaselineSync != nil {
		l = m.BaselineSync.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgToSensor_CancelPullTelemetryDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CancelPullTelemetryDataRequest != nil {
		l = m.CancelPullTelemetryDataRequest.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgToSensor_PushNetworkEntitiesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PushNetworkEntitiesRequest != nil {
		l = m.PushNetworkEntitiesRequest.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgToSensor_Hello) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hello != nil {
		l = m.Hello.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgToSensor_NetworkBaselineSync) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkBaselineSync != nil {
		l = m.NetworkBaselineSync.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgToSensor_AuditLogSync) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuditLogSync != nil {
		l = m.AuditLogSync.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgToSensor_ReprocessDeployment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReprocessDeployment != nil {
		l = m.ReprocessDeployment.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgToSensor_InvalidateImageCache) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InvalidateImageCache != nil {
		l = m.InvalidateImageCache.Size()
		n += 2 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgToSensor_IssueLocalScannerCertsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IssueLocalScannerCertsResponse != nil {
		l = m.IssueLocalScannerCertsResponse.Size()
		n += 2 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgToSensor_UpdatedImage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdatedImage != nil {
		l = m.UpdatedImage.Size()
		n += 2 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgToSensor_ReprocessDeployments) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReprocessDeployments != nil {
		l = m.ReprocessDeployments.Size()
		n += 2 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgToSensor_NodeInventoryAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeInventoryAck != nil {
		l = m.NodeInventoryAck.Size()
		n += 2 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgToSensor_DelegatedRegistryConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DelegatedRegistryConfig != nil {
		l = m.DelegatedRegistryConfig.Size()
		n += 2 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgToSensor_ScanImage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScanImage != nil {
		l = m.ScanImage.Size()
		n += 2 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgToSensor_ImageIntegrations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ImageIntegrations != nil {
		l = m.ImageIntegrations.Size()
		n += 2 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgToSensor_ComplianceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ComplianceRequest != nil {
		l = m.ComplianceRequest.Size()
		n += 2 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgToSensor_ClusterHealthResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterHealthResponse != nil {
		l = m.ClusterHealthResponse.Size()
		n += 2 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgToSensor_DeduperState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeduperState != nil {
		l = m.DeduperState.Size()
		n += 2 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *MsgToSensor_Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.Size()
		n += 2 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *DeduperState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ResourceHashes) > 0 {
		for k, v := range m.ResourceHashes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSensorIservice(uint64(len(k))) + 1 + sovSensorIservice(uint64(v))
			n += mapEntrySize + 1 + sovSensorIservice(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Pod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	l = len(m.DeploymentId)
	if l > 0 {
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Resource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Resource != nil {
		n += m.Resource.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Resource_Pod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pod != nil {
		l = m.Pod.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *ResourceEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Resource != nil {
		n += m.Resource.Size()
	}
	if m.Current != 0 {
		n += 1 + sovSensorIservice(uint64(m.Current))
	}
	if m.Total != 0 {
		n += 1 + sovSensorIservice(uint64(m.Total))
	}
	if len(m.ResourceList) > 0 {
		for _, e := range m.ResourceList {
			l = e.Size()
			n += 1 + l + sovSensorIservice(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResourceEvent_NetworkPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkPolicy != nil {
		l = m.NetworkPolicy.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *ResourceEvent_Deployment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Deployment != nil {
		l = m.Deployment.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *ResourceEvent_Pod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pod != nil {
		l = m.Pod.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *ResourceEvent_Secret) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Secret != nil {
		l = m.Secret.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *ResourceEvent_Node) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *ResourceEvent_ServiceAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceAccount != nil {
		l = m.ServiceAccount.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *ResourceEvent_Role) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Role != nil {
		l = m.Role.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *ResourceEvent_Binding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Binding != nil {
		l = m.Binding.Size()
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	return n
}
func (m *NodeInventoryACK) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	l = len(m.NodeName)
	if l > 0 {
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	if m.Action != 0 {
		n += 1 + sovSensorIservice(uint64(m.Action))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AuditLogSync) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NodeAuditLogFileStates) > 0 {
		for k, v := range m.NodeAuditLogFileStates {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovSensorIservice(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovSensorIservice(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovSensorIservice(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AuditLogStatusInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NodeAuditLogFileStates) > 0 {
		for k, v := range m.NodeAuditLogFileStates {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovSensorIservice(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovSensorIservice(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovSensorIservice(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReprocessDeployment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DeploymentIds) > 0 {
		for _, s := range m.DeploymentIds {
			l = len(s)
			n += 1 + l + sovSensorIservice(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InvalidateImageCache) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ImageKeys) > 0 {
		for _, e := range m.ImageKeys {
			l = e.Size()
			n += 1 + l + sovSensorIservice(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InvalidateImageCache_ImageKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ImageId)
	if l > 0 {
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	l = len(m.ImageFullName)
	if l > 0 {
		n += 1 + l + sovSensorIservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSensorIservice(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSensorIservice(x uint64) (n int) {
	return sovSensorIservice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgFromSensor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSensorIservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFromSensor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFromSensor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SensorEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgFromSensor_Event{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkFlowUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NetworkFlowUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgFromSensor_NetworkFlowUpdate{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScrapeUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ScrapeUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgFromSensor_ScrapeUpdate{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkPoliciesResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NetworkPoliciesResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgFromSensor_NetworkPoliciesResponse{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterStatusUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClusterStatusUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgFromSensor_ClusterStatusUpdate{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelemetryDataResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PullTelemetryDataResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgFromSensor_TelemetryDataResponse{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DedupeKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DedupeKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterHealthInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RawClusterHealthInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgFromSensor_ClusterHealthInfo{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hello", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SensorHello{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgFromSensor_Hello{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditLogStatusInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AuditLogStatusInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgFromSensor_AuditLogStatusInfo{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueLocalScannerCertsRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IssueLocalScannerCertsRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgFromSensor_IssueLocalScannerCertsRequest{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterMetrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClusterMetrics{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgFromSensor_ClusterMetrics{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessListeningOnPortUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProcessListeningOnPortsUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgFromSensor_ProcessListeningOnPortUpdate{v}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessingAttempt", wireType)
			}
			m.ProcessingAttempt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProcessingAttempt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComplianceOperatorInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ComplianceOperatorInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgFromSensor_ComplianceOperatorInfo{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComplianceResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ComplianceResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgFromSensor_ComplianceResponse{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSensorIservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReassessPolicies) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSensorIservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReassessPolicies: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReassessPolicies: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSensorIservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReprocessDeployments) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSensorIservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReprocessDeployments: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReprocessDeployments: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSensorIservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgToSensor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSensorIservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgToSensor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgToSensor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enforcement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SensorEnforcement{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_Enforcement{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScrapeCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ScrapeCommand{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_ScrapeCommand{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkPoliciesCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NetworkPoliciesCommand{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_NetworkPoliciesCommand{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClusterConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_ClusterConfig{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SensorUpgradeTrigger", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SensorUpgradeTrigger{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_SensorUpgradeTrigger{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelemetryDataRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PullTelemetryDataRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_TelemetryDataRequest{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicySync", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PolicySync{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_PolicySync{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReassessPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ReassessPolicies{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_ReassessPolicies{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaselineSync", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BaselineSync{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_BaselineSync{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelPullTelemetryDataRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CancelPullTelemetryDataRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_CancelPullTelemetryDataRequest{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushNetworkEntitiesRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PushNetworkEntitiesRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_PushNetworkEntitiesRequest{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hello", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CentralHello{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_Hello{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkBaselineSync", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NetworkBaselineSync{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_NetworkBaselineSync{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditLogSync", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AuditLogSync{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_AuditLogSync{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReprocessDeployment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ReprocessDeployment{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_ReprocessDeployment{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidateImageCache", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InvalidateImageCache{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_InvalidateImageCache{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueLocalScannerCertsResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IssueLocalScannerCertsResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_IssueLocalScannerCertsResponse{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedImage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &storage.Image{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_UpdatedImage{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReprocessDeployments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ReprocessDeployments{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_ReprocessDeployments{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeInventoryAck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NodeInventoryACK{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_NodeInventoryAck{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatedRegistryConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DelegatedRegistryConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_DelegatedRegistryConfig{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanImage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ScanImage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_ScanImage{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageIntegrations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ImageIntegrations{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_ImageIntegrations{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComplianceRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ComplianceRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_ComplianceRequest{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterHealthResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClusterHealthResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_ClusterHealthResponse{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeduperState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeduperState{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_DeduperState{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResourceEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToSensor_Event{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSensorIservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeduperState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSensorIservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeduperState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeduperState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceHashes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResourceHashes == nil {
				m.ResourceHashes = make(map[string]uint64)
			}
			var mapkey string
			var mapvalue uint64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSensorIservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSensorIservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSensorIservice
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSensorIservice
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSensorIservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSensorIservice(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthSensorIservice
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ResourceHashes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSensorIservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSensorIservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeploymentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSensorIservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Resource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSensorIservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Resource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Resource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Pod{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resource = &Resource_Pod{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSensorIservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSensorIservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &storage.NetworkPolicy{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resource = &ResourceEvent_NetworkPolicy{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deployment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &storage.Deployment{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resource = &ResourceEvent_Deployment{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &storage.Pod{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resource = &ResourceEvent_Pod{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &storage.Secret{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resource = &ResourceEvent_Secret{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &storage.Node{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resource = &ResourceEvent_Node{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &storage.ServiceAccount{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resource = &ResourceEvent_ServiceAccount{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &storage.K8SRole{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resource = &ResourceEvent_Role{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Binding", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &storage.K8SRoleBinding{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resource = &ResourceEvent_Binding{v}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Current", wireType)
			}
			m.Current = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Current |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceList = append(m.ResourceList, &Resource{})
			if err := m.ResourceList[len(m.ResourceList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSensorIservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeInventoryACK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSensorIservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeInventoryACK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeInventoryACK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= NodeInventoryACK_Action(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSensorIservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuditLogSync) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSensorIservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuditLogSync: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuditLogSync: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeAuditLogFileStates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeAuditLogFileStates == nil {
				m.NodeAuditLogFileStates = make(map[string]*storage.AuditLogFileState)
			}
			var mapkey string
			var mapvalue *storage.AuditLogFileState
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSensorIservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSensorIservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSensorIservice
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSensorIservice
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSensorIservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthSensorIservice
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthSensorIservice
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &storage.AuditLogFileState{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSensorIservice(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthSensorIservice
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.NodeAuditLogFileStates[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSensorIservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuditLogStatusInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSensorIservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuditLogStatusInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuditLogStatusInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeAuditLogFileStates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeAuditLogFileStates == nil {
				m.NodeAuditLogFileStates = make(map[string]*storage.AuditLogFileState)
			}
			var mapkey string
			var mapvalue *storage.AuditLogFileState
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSensorIservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSensorIservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSensorIservice
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSensorIservice
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSensorIservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthSensorIservice
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthSensorIservice
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &storage.AuditLogFileState{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSensorIservice(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthSensorIservice
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.NodeAuditLogFileStates[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSensorIservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReprocessDeployment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSensorIservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReprocessDeployment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReprocessDeployment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeploymentIds = append(m.DeploymentIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSensorIservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvalidateImageCache) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSensorIservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvalidateImageCache: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvalidateImageCache: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageKeys = append(m.ImageKeys, &InvalidateImageCache_ImageKey{})
			if err := m.ImageKeys[len(m.ImageKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSensorIservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvalidateImageCache_ImageKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSensorIservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageFullName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensorIservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageFullName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSensorIservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSensorIservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSensorIservice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSensorIservice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSensorIservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSensorIservice
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSensorIservice
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSensorIservice
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSensorIservice        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSensorIservice          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSensorIservice = fmt.Errorf("proto: unexpected end of group")
)
