// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.3.1-0.20220817155510-0ae748fd2007
// source: internalapi/central/sensor_upgrade_ctrl_iservice.proto

package central

import (
	context "context"
	fmt "fmt"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (m *UpgradeCheckInFromUpgraderRequest) CloneVT() *UpgradeCheckInFromUpgraderRequest {
	if m == nil {
		return (*UpgradeCheckInFromUpgraderRequest)(nil)
	}
	r := &UpgradeCheckInFromUpgraderRequest{
		ClusterId:              m.ClusterId,
		UpgradeProcessId:       m.UpgradeProcessId,
		CurrentWorkflow:        m.CurrentWorkflow,
		LastExecutedStage:      m.LastExecutedStage,
		LastExecutedStageError: m.LastExecutedStageError,
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *UpgradeCheckInFromUpgraderRequest) CloneGenericVT() proto.Message {
	return m.CloneVT()
}

func (m *UpgradeCheckInFromUpgraderResponse) CloneVT() *UpgradeCheckInFromUpgraderResponse {
	if m == nil {
		return (*UpgradeCheckInFromUpgraderResponse)(nil)
	}
	r := &UpgradeCheckInFromUpgraderResponse{
		WorkflowToExecute: m.WorkflowToExecute,
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *UpgradeCheckInFromUpgraderResponse) CloneGenericVT() proto.Message {
	return m.CloneVT()
}

func (m *UpgradeCheckInFromSensorRequest_PodErrorCondition) CloneVT() *UpgradeCheckInFromSensorRequest_PodErrorCondition {
	if m == nil {
		return (*UpgradeCheckInFromSensorRequest_PodErrorCondition)(nil)
	}
	r := &UpgradeCheckInFromSensorRequest_PodErrorCondition{
		Message:      m.Message,
		ImageRelated: m.ImageRelated,
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *UpgradeCheckInFromSensorRequest_PodErrorCondition) CloneGenericVT() proto.Message {
	return m.CloneVT()
}

func (m *UpgradeCheckInFromSensorRequest_UpgraderPodState) CloneVT() *UpgradeCheckInFromSensorRequest_UpgraderPodState {
	if m == nil {
		return (*UpgradeCheckInFromSensorRequest_UpgraderPodState)(nil)
	}
	r := &UpgradeCheckInFromSensorRequest_UpgraderPodState{
		PodName: m.PodName,
		Started: m.Started,
		Error:   m.Error.CloneVT(),
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *UpgradeCheckInFromSensorRequest_UpgraderPodState) CloneGenericVT() proto.Message {
	return m.CloneVT()
}

func (m *UpgradeCheckInFromSensorRequest_UpgraderPodStates) CloneVT() *UpgradeCheckInFromSensorRequest_UpgraderPodStates {
	if m == nil {
		return (*UpgradeCheckInFromSensorRequest_UpgraderPodStates)(nil)
	}
	r := &UpgradeCheckInFromSensorRequest_UpgraderPodStates{}
	if rhs := m.States; rhs != nil {
		tmpContainer := make([]*UpgradeCheckInFromSensorRequest_UpgraderPodState, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.States = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *UpgradeCheckInFromSensorRequest_UpgraderPodStates) CloneGenericVT() proto.Message {
	return m.CloneVT()
}

func (m *UpgradeCheckInFromSensorRequest) CloneVT() *UpgradeCheckInFromSensorRequest {
	if m == nil {
		return (*UpgradeCheckInFromSensorRequest)(nil)
	}
	r := &UpgradeCheckInFromSensorRequest{
		ClusterId:        m.ClusterId,
		UpgradeProcessId: m.UpgradeProcessId,
	}
	if m.State != nil {
		r.State = m.State.(interface {
			CloneVT() isUpgradeCheckInFromSensorRequest_State
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *UpgradeCheckInFromSensorRequest) CloneGenericVT() proto.Message {
	return m.CloneVT()
}

func (m *UpgradeCheckInFromSensorRequest_LaunchError) CloneVT() isUpgradeCheckInFromSensorRequest_State {
	if m == nil {
		return (*UpgradeCheckInFromSensorRequest_LaunchError)(nil)
	}
	r := &UpgradeCheckInFromSensorRequest_LaunchError{
		LaunchError: m.LaunchError,
	}
	return r
}

func (m *UpgradeCheckInFromSensorRequest_PodStates) CloneVT() isUpgradeCheckInFromSensorRequest_State {
	if m == nil {
		return (*UpgradeCheckInFromSensorRequest_PodStates)(nil)
	}
	r := &UpgradeCheckInFromSensorRequest_PodStates{
		PodStates: m.PodStates.CloneVT(),
	}
	return r
}

func (m *UpgradeCheckInFromSensorRequest_DeploymentGone) CloneVT() isUpgradeCheckInFromSensorRequest_State {
	if m == nil {
		return (*UpgradeCheckInFromSensorRequest_DeploymentGone)(nil)
	}
	r := &UpgradeCheckInFromSensorRequest_DeploymentGone{
		DeploymentGone: m.DeploymentGone,
	}
	return r
}

func (m *UpgradeCheckInResponseDetails_NoUpgradeInProgress) CloneVT() *UpgradeCheckInResponseDetails_NoUpgradeInProgress {
	if m == nil {
		return (*UpgradeCheckInResponseDetails_NoUpgradeInProgress)(nil)
	}
	r := &UpgradeCheckInResponseDetails_NoUpgradeInProgress{}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *UpgradeCheckInResponseDetails_NoUpgradeInProgress) CloneGenericVT() proto.Message {
	return m.CloneVT()
}

func (m *UpgradeCheckInResponseDetails) CloneVT() *UpgradeCheckInResponseDetails {
	if m == nil {
		return (*UpgradeCheckInResponseDetails)(nil)
	}
	r := &UpgradeCheckInResponseDetails{}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *UpgradeCheckInResponseDetails) CloneGenericVT() proto.Message {
	return m.CloneVT()
}

func (this *UpgradeCheckInFromUpgraderRequest) EqualVT(that *UpgradeCheckInFromUpgraderRequest) bool {
	if this == nil {
		return that == nil
	} else if that == nil {
		return false
	}
	if this.UpgradeProcessId != that.UpgradeProcessId {
		return false
	}
	if this.CurrentWorkflow != that.CurrentWorkflow {
		return false
	}
	if this.LastExecutedStage != that.LastExecutedStage {
		return false
	}
	if this.LastExecutedStageError != that.LastExecutedStageError {
		return false
	}
	if this.ClusterId != that.ClusterId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *UpgradeCheckInFromUpgraderResponse) EqualVT(that *UpgradeCheckInFromUpgraderResponse) bool {
	if this == nil {
		return that == nil
	} else if that == nil {
		return false
	}
	if this.WorkflowToExecute != that.WorkflowToExecute {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *UpgradeCheckInFromSensorRequest_PodErrorCondition) EqualVT(that *UpgradeCheckInFromSensorRequest_PodErrorCondition) bool {
	if this == nil {
		return that == nil
	} else if that == nil {
		return false
	}
	if this.Message != that.Message {
		return false
	}
	if this.ImageRelated != that.ImageRelated {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *UpgradeCheckInFromSensorRequest_UpgraderPodState) EqualVT(that *UpgradeCheckInFromSensorRequest_UpgraderPodState) bool {
	if this == nil {
		return that == nil
	} else if that == nil {
		return false
	}
	if this.PodName != that.PodName {
		return false
	}
	if this.Started != that.Started {
		return false
	}
	if !this.Error.EqualVT(that.Error) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *UpgradeCheckInFromSensorRequest_UpgraderPodStates) EqualVT(that *UpgradeCheckInFromSensorRequest_UpgraderPodStates) bool {
	if this == nil {
		return that == nil
	} else if that == nil {
		return false
	}
	if len(this.States) != len(that.States) {
		return false
	}
	for i, vx := range this.States {
		vy := that.States[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &UpgradeCheckInFromSensorRequest_UpgraderPodState{}
			}
			if q == nil {
				q = &UpgradeCheckInFromSensorRequest_UpgraderPodState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *UpgradeCheckInFromSensorRequest) EqualVT(that *UpgradeCheckInFromSensorRequest) bool {
	if this == nil {
		return that == nil
	} else if that == nil {
		return false
	}
	if this.State == nil && that.State != nil {
		return false
	} else if this.State != nil {
		if that.State == nil {
			return false
		}
		if !this.State.(interface {
			EqualVT(isUpgradeCheckInFromSensorRequest_State) bool
		}).EqualVT(that.State) {
			return false
		}
	}
	if this.UpgradeProcessId != that.UpgradeProcessId {
		return false
	}
	if this.ClusterId != that.ClusterId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *UpgradeCheckInFromSensorRequest_LaunchError) EqualVT(thatIface isUpgradeCheckInFromSensorRequest_State) bool {
	that, ok := thatIface.(*UpgradeCheckInFromSensorRequest_LaunchError)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.LaunchError != that.LaunchError {
		return false
	}
	return true
}

func (this *UpgradeCheckInFromSensorRequest_PodStates) EqualVT(thatIface isUpgradeCheckInFromSensorRequest_State) bool {
	that, ok := thatIface.(*UpgradeCheckInFromSensorRequest_PodStates)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PodStates, that.PodStates; p != q {
		if p == nil {
			p = &UpgradeCheckInFromSensorRequest_UpgraderPodStates{}
		}
		if q == nil {
			q = &UpgradeCheckInFromSensorRequest_UpgraderPodStates{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *UpgradeCheckInFromSensorRequest_DeploymentGone) EqualVT(thatIface isUpgradeCheckInFromSensorRequest_State) bool {
	that, ok := thatIface.(*UpgradeCheckInFromSensorRequest_DeploymentGone)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.DeploymentGone != that.DeploymentGone {
		return false
	}
	return true
}

func (this *UpgradeCheckInResponseDetails_NoUpgradeInProgress) EqualVT(that *UpgradeCheckInResponseDetails_NoUpgradeInProgress) bool {
	if this == nil {
		return that == nil
	} else if that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *UpgradeCheckInResponseDetails) EqualVT(that *UpgradeCheckInResponseDetails) bool {
	if this == nil {
		return that == nil
	} else if that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SensorUpgradeControlServiceClient is the client API for SensorUpgradeControlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SensorUpgradeControlServiceClient interface {
	UpgradeCheckInFromUpgrader(ctx context.Context, in *UpgradeCheckInFromUpgraderRequest, opts ...grpc.CallOption) (*UpgradeCheckInFromUpgraderResponse, error)
	UpgradeCheckInFromSensor(ctx context.Context, in *UpgradeCheckInFromSensorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type sensorUpgradeControlServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSensorUpgradeControlServiceClient(cc grpc.ClientConnInterface) SensorUpgradeControlServiceClient {
	return &sensorUpgradeControlServiceClient{cc}
}

func (c *sensorUpgradeControlServiceClient) UpgradeCheckInFromUpgrader(ctx context.Context, in *UpgradeCheckInFromUpgraderRequest, opts ...grpc.CallOption) (*UpgradeCheckInFromUpgraderResponse, error) {
	out := new(UpgradeCheckInFromUpgraderResponse)
	err := c.cc.Invoke(ctx, "/central.SensorUpgradeControlService/UpgradeCheckInFromUpgrader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorUpgradeControlServiceClient) UpgradeCheckInFromSensor(ctx context.Context, in *UpgradeCheckInFromSensorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/central.SensorUpgradeControlService/UpgradeCheckInFromSensor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SensorUpgradeControlServiceServer is the server API for SensorUpgradeControlService service.
// All implementations must embed UnimplementedSensorUpgradeControlServiceServer
// for forward compatibility
type SensorUpgradeControlServiceServer interface {
	UpgradeCheckInFromUpgrader(context.Context, *UpgradeCheckInFromUpgraderRequest) (*UpgradeCheckInFromUpgraderResponse, error)
	UpgradeCheckInFromSensor(context.Context, *UpgradeCheckInFromSensorRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedSensorUpgradeControlServiceServer()
}

// UnimplementedSensorUpgradeControlServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSensorUpgradeControlServiceServer struct {
}

func (UnimplementedSensorUpgradeControlServiceServer) UpgradeCheckInFromUpgrader(context.Context, *UpgradeCheckInFromUpgraderRequest) (*UpgradeCheckInFromUpgraderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeCheckInFromUpgrader not implemented")
}
func (UnimplementedSensorUpgradeControlServiceServer) UpgradeCheckInFromSensor(context.Context, *UpgradeCheckInFromSensorRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeCheckInFromSensor not implemented")
}
func (UnimplementedSensorUpgradeControlServiceServer) mustEmbedUnimplementedSensorUpgradeControlServiceServer() {
}

// UnsafeSensorUpgradeControlServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SensorUpgradeControlServiceServer will
// result in compilation errors.
type UnsafeSensorUpgradeControlServiceServer interface {
	mustEmbedUnimplementedSensorUpgradeControlServiceServer()
}

func RegisterSensorUpgradeControlServiceServer(s grpc.ServiceRegistrar, srv SensorUpgradeControlServiceServer) {
	s.RegisterService(&SensorUpgradeControlService_ServiceDesc, srv)
}

func _SensorUpgradeControlService_UpgradeCheckInFromUpgrader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeCheckInFromUpgraderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorUpgradeControlServiceServer).UpgradeCheckInFromUpgrader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/central.SensorUpgradeControlService/UpgradeCheckInFromUpgrader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorUpgradeControlServiceServer).UpgradeCheckInFromUpgrader(ctx, req.(*UpgradeCheckInFromUpgraderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorUpgradeControlService_UpgradeCheckInFromSensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeCheckInFromSensorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorUpgradeControlServiceServer).UpgradeCheckInFromSensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/central.SensorUpgradeControlService/UpgradeCheckInFromSensor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorUpgradeControlServiceServer).UpgradeCheckInFromSensor(ctx, req.(*UpgradeCheckInFromSensorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SensorUpgradeControlService_ServiceDesc is the grpc.ServiceDesc for SensorUpgradeControlService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SensorUpgradeControlService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "central.SensorUpgradeControlService",
	HandlerType: (*SensorUpgradeControlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpgradeCheckInFromUpgrader",
			Handler:    _SensorUpgradeControlService_UpgradeCheckInFromUpgrader_Handler,
		},
		{
			MethodName: "UpgradeCheckInFromSensor",
			Handler:    _SensorUpgradeControlService_UpgradeCheckInFromSensor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internalapi/central/sensor_upgrade_ctrl_iservice.proto",
}

func (m *UpgradeCheckInFromUpgraderRequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpgradeCheckInFromUpgraderRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *UpgradeCheckInFromUpgraderRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarint(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LastExecutedStageError) > 0 {
		i -= len(m.LastExecutedStageError)
		copy(dAtA[i:], m.LastExecutedStageError)
		i = encodeVarint(dAtA, i, uint64(len(m.LastExecutedStageError)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.LastExecutedStage) > 0 {
		i -= len(m.LastExecutedStage)
		copy(dAtA[i:], m.LastExecutedStage)
		i = encodeVarint(dAtA, i, uint64(len(m.LastExecutedStage)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CurrentWorkflow) > 0 {
		i -= len(m.CurrentWorkflow)
		copy(dAtA[i:], m.CurrentWorkflow)
		i = encodeVarint(dAtA, i, uint64(len(m.CurrentWorkflow)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UpgradeProcessId) > 0 {
		i -= len(m.UpgradeProcessId)
		copy(dAtA[i:], m.UpgradeProcessId)
		i = encodeVarint(dAtA, i, uint64(len(m.UpgradeProcessId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpgradeCheckInFromUpgraderResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpgradeCheckInFromUpgraderResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *UpgradeCheckInFromUpgraderResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.WorkflowToExecute) > 0 {
		i -= len(m.WorkflowToExecute)
		copy(dAtA[i:], m.WorkflowToExecute)
		i = encodeVarint(dAtA, i, uint64(len(m.WorkflowToExecute)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpgradeCheckInFromSensorRequest_PodErrorCondition) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpgradeCheckInFromSensorRequest_PodErrorCondition) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *UpgradeCheckInFromSensorRequest_PodErrorCondition) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.ImageRelated {
		i--
		if m.ImageRelated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarint(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpgradeCheckInFromSensorRequest_UpgraderPodState) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpgradeCheckInFromSensorRequest_UpgraderPodState) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *UpgradeCheckInFromSensorRequest_UpgraderPodState) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Error != nil {
		size, err := m.Error.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1a
	}
	if m.Started {
		i--
		if m.Started {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.PodName) > 0 {
		i -= len(m.PodName)
		copy(dAtA[i:], m.PodName)
		i = encodeVarint(dAtA, i, uint64(len(m.PodName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpgradeCheckInFromSensorRequest_UpgraderPodStates) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpgradeCheckInFromSensorRequest_UpgraderPodStates) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *UpgradeCheckInFromSensorRequest_UpgraderPodStates) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.States) > 0 {
		for iNdEx := len(m.States) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.States[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpgradeCheckInFromSensorRequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpgradeCheckInFromSensorRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *UpgradeCheckInFromSensorRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if vtmsg, ok := m.State.(interface {
		MarshalToSizedBufferVT([]byte) (int, error)
	}); ok {
		size, err := vtmsg.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarint(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.UpgradeProcessId) > 0 {
		i -= len(m.UpgradeProcessId)
		copy(dAtA[i:], m.UpgradeProcessId)
		i = encodeVarint(dAtA, i, uint64(len(m.UpgradeProcessId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpgradeCheckInFromSensorRequest_LaunchError) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *UpgradeCheckInFromSensorRequest_LaunchError) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.LaunchError)
	copy(dAtA[i:], m.LaunchError)
	i = encodeVarint(dAtA, i, uint64(len(m.LaunchError)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *UpgradeCheckInFromSensorRequest_PodStates) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *UpgradeCheckInFromSensorRequest_PodStates) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PodStates != nil {
		size, err := m.PodStates.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *UpgradeCheckInFromSensorRequest_DeploymentGone) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *UpgradeCheckInFromSensorRequest_DeploymentGone) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.DeploymentGone {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	return len(dAtA) - i, nil
}
func (m *UpgradeCheckInResponseDetails_NoUpgradeInProgress) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpgradeCheckInResponseDetails_NoUpgradeInProgress) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *UpgradeCheckInResponseDetails_NoUpgradeInProgress) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	return len(dAtA) - i, nil
}

func (m *UpgradeCheckInResponseDetails) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpgradeCheckInResponseDetails) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *UpgradeCheckInResponseDetails) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	return len(dAtA) - i, nil
}

func (m *UpgradeCheckInFromUpgraderRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UpgradeProcessId)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	l = len(m.CurrentWorkflow)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	l = len(m.LastExecutedStage)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	l = len(m.LastExecutedStageError)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *UpgradeCheckInFromUpgraderResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WorkflowToExecute)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *UpgradeCheckInFromSensorRequest_PodErrorCondition) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	if m.ImageRelated {
		n += 2
	}
	n += len(m.unknownFields)
	return n
}

func (m *UpgradeCheckInFromSensorRequest_UpgraderPodState) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PodName)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	if m.Started {
		n += 2
	}
	if m.Error != nil {
		l = m.Error.SizeVT()
		n += 1 + l + sov(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *UpgradeCheckInFromSensorRequest_UpgraderPodStates) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.States) > 0 {
		for _, e := range m.States {
			l = e.SizeVT()
			n += 1 + l + sov(uint64(l))
		}
	}
	n += len(m.unknownFields)
	return n
}

func (m *UpgradeCheckInFromSensorRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UpgradeProcessId)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	if vtmsg, ok := m.State.(interface{ SizeVT() int }); ok {
		n += vtmsg.SizeVT()
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *UpgradeCheckInFromSensorRequest_LaunchError) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LaunchError)
	n += 1 + l + sov(uint64(l))
	return n
}
func (m *UpgradeCheckInFromSensorRequest_PodStates) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PodStates != nil {
		l = m.PodStates.SizeVT()
		n += 1 + l + sov(uint64(l))
	}
	return n
}
func (m *UpgradeCheckInFromSensorRequest_DeploymentGone) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *UpgradeCheckInResponseDetails_NoUpgradeInProgress) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += len(m.unknownFields)
	return n
}

func (m *UpgradeCheckInResponseDetails) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += len(m.unknownFields)
	return n
}

func (m *UpgradeCheckInFromUpgraderRequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpgradeCheckInFromUpgraderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpgradeCheckInFromUpgraderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradeProcessId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpgradeProcessId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentWorkflow", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentWorkflow = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastExecutedStage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastExecutedStage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastExecutedStageError", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastExecutedStageError = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpgradeCheckInFromUpgraderResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpgradeCheckInFromUpgraderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpgradeCheckInFromUpgraderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowToExecute", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowToExecute = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpgradeCheckInFromSensorRequest_PodErrorCondition) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpgradeCheckInFromSensorRequest_PodErrorCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpgradeCheckInFromSensorRequest_PodErrorCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageRelated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ImageRelated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpgradeCheckInFromSensorRequest_UpgraderPodState) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpgradeCheckInFromSensorRequest_UpgraderPodState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpgradeCheckInFromSensorRequest_UpgraderPodState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Started", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Started = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &UpgradeCheckInFromSensorRequest_PodErrorCondition{}
			}
			if err := m.Error.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpgradeCheckInFromSensorRequest_UpgraderPodStates) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpgradeCheckInFromSensorRequest_UpgraderPodStates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpgradeCheckInFromSensorRequest_UpgraderPodStates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field States", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.States = append(m.States, &UpgradeCheckInFromSensorRequest_UpgraderPodState{})
			if err := m.States[len(m.States)-1].UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpgradeCheckInFromSensorRequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpgradeCheckInFromSensorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpgradeCheckInFromSensorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradeProcessId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpgradeProcessId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaunchError", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = &UpgradeCheckInFromSensorRequest_LaunchError{LaunchError: string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodStates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.State.(*UpgradeCheckInFromSensorRequest_PodStates); ok {
				if err := oneof.PodStates.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &UpgradeCheckInFromSensorRequest_UpgraderPodStates{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.State = &UpgradeCheckInFromSensorRequest_PodStates{PodStates: v}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentGone", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.State = &UpgradeCheckInFromSensorRequest_DeploymentGone{DeploymentGone: b}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpgradeCheckInResponseDetails_NoUpgradeInProgress) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpgradeCheckInResponseDetails_NoUpgradeInProgress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpgradeCheckInResponseDetails_NoUpgradeInProgress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpgradeCheckInResponseDetails) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpgradeCheckInResponseDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpgradeCheckInResponseDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
