// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.3.1-0.20220817155510-0ae748fd2007
// source: internalapi/central/sensor_iservice.proto

package central

import (
	context "context"
	fmt "fmt"
	storage "github.com/stackrox/rox/generated/storage"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (m *MsgFromSensor) CloneVT() *MsgFromSensor {
	if m == nil {
		return (*MsgFromSensor)(nil)
	}
	r := &MsgFromSensor{
		HashKey:   m.HashKey,
		DedupeKey: m.DedupeKey,
	}
	if m.Msg != nil {
		r.Msg = m.Msg.(interface{ CloneVT() isMsgFromSensor_Msg }).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *MsgFromSensor) CloneGenericVT() proto.Message {
	return m.CloneVT()
}

func (m *MsgFromSensor_Event) CloneVT() isMsgFromSensor_Msg {
	if m == nil {
		return (*MsgFromSensor_Event)(nil)
	}
	r := &MsgFromSensor_Event{
		Event: m.Event.CloneVT(),
	}
	return r
}

func (m *MsgFromSensor_NetworkFlowUpdate) CloneVT() isMsgFromSensor_Msg {
	if m == nil {
		return (*MsgFromSensor_NetworkFlowUpdate)(nil)
	}
	r := &MsgFromSensor_NetworkFlowUpdate{
		NetworkFlowUpdate: m.NetworkFlowUpdate.CloneVT(),
	}
	return r
}

func (m *MsgFromSensor_ScrapeUpdate) CloneVT() isMsgFromSensor_Msg {
	if m == nil {
		return (*MsgFromSensor_ScrapeUpdate)(nil)
	}
	r := &MsgFromSensor_ScrapeUpdate{
		ScrapeUpdate: m.ScrapeUpdate.CloneVT(),
	}
	return r
}

func (m *MsgFromSensor_NetworkPoliciesResponse) CloneVT() isMsgFromSensor_Msg {
	if m == nil {
		return (*MsgFromSensor_NetworkPoliciesResponse)(nil)
	}
	r := &MsgFromSensor_NetworkPoliciesResponse{
		NetworkPoliciesResponse: m.NetworkPoliciesResponse.CloneVT(),
	}
	return r
}

func (m *MsgFromSensor_ClusterStatusUpdate) CloneVT() isMsgFromSensor_Msg {
	if m == nil {
		return (*MsgFromSensor_ClusterStatusUpdate)(nil)
	}
	r := &MsgFromSensor_ClusterStatusUpdate{
		ClusterStatusUpdate: m.ClusterStatusUpdate.CloneVT(),
	}
	return r
}

func (m *MsgFromSensor_TelemetryDataResponse) CloneVT() isMsgFromSensor_Msg {
	if m == nil {
		return (*MsgFromSensor_TelemetryDataResponse)(nil)
	}
	r := &MsgFromSensor_TelemetryDataResponse{
		TelemetryDataResponse: m.TelemetryDataResponse.CloneVT(),
	}
	return r
}

func (m *MsgFromSensor_ClusterHealthInfo) CloneVT() isMsgFromSensor_Msg {
	if m == nil {
		return (*MsgFromSensor_ClusterHealthInfo)(nil)
	}
	r := &MsgFromSensor_ClusterHealthInfo{
		ClusterHealthInfo: m.ClusterHealthInfo.CloneVT(),
	}
	return r
}

func (m *MsgFromSensor_Hello) CloneVT() isMsgFromSensor_Msg {
	if m == nil {
		return (*MsgFromSensor_Hello)(nil)
	}
	r := &MsgFromSensor_Hello{
		Hello: m.Hello.CloneVT(),
	}
	return r
}

func (m *MsgFromSensor_AuditLogStatusInfo) CloneVT() isMsgFromSensor_Msg {
	if m == nil {
		return (*MsgFromSensor_AuditLogStatusInfo)(nil)
	}
	r := &MsgFromSensor_AuditLogStatusInfo{
		AuditLogStatusInfo: m.AuditLogStatusInfo.CloneVT(),
	}
	return r
}

func (m *MsgFromSensor_IssueLocalScannerCertsRequest) CloneVT() isMsgFromSensor_Msg {
	if m == nil {
		return (*MsgFromSensor_IssueLocalScannerCertsRequest)(nil)
	}
	r := &MsgFromSensor_IssueLocalScannerCertsRequest{
		IssueLocalScannerCertsRequest: m.IssueLocalScannerCertsRequest.CloneVT(),
	}
	return r
}

func (m *MsgFromSensor_ClusterMetrics) CloneVT() isMsgFromSensor_Msg {
	if m == nil {
		return (*MsgFromSensor_ClusterMetrics)(nil)
	}
	r := &MsgFromSensor_ClusterMetrics{
		ClusterMetrics: m.ClusterMetrics.CloneVT(),
	}
	return r
}

func (m *MsgFromSensor_ProcessListeningOnPortUpdate) CloneVT() isMsgFromSensor_Msg {
	if m == nil {
		return (*MsgFromSensor_ProcessListeningOnPortUpdate)(nil)
	}
	r := &MsgFromSensor_ProcessListeningOnPortUpdate{
		ProcessListeningOnPortUpdate: m.ProcessListeningOnPortUpdate.CloneVT(),
	}
	return r
}

func (m *ReassessPolicies) CloneVT() *ReassessPolicies {
	if m == nil {
		return (*ReassessPolicies)(nil)
	}
	r := &ReassessPolicies{}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ReassessPolicies) CloneGenericVT() proto.Message {
	return m.CloneVT()
}

func (m *ReprocessDeployments) CloneVT() *ReprocessDeployments {
	if m == nil {
		return (*ReprocessDeployments)(nil)
	}
	r := &ReprocessDeployments{}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ReprocessDeployments) CloneGenericVT() proto.Message {
	return m.CloneVT()
}

func (m *MsgToSensor) CloneVT() *MsgToSensor {
	if m == nil {
		return (*MsgToSensor)(nil)
	}
	r := &MsgToSensor{}
	if m.Msg != nil {
		r.Msg = m.Msg.(interface{ CloneVT() isMsgToSensor_Msg }).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *MsgToSensor) CloneGenericVT() proto.Message {
	return m.CloneVT()
}

func (m *MsgToSensor_Enforcement) CloneVT() isMsgToSensor_Msg {
	if m == nil {
		return (*MsgToSensor_Enforcement)(nil)
	}
	r := &MsgToSensor_Enforcement{
		Enforcement: m.Enforcement.CloneVT(),
	}
	return r
}

func (m *MsgToSensor_ScrapeCommand) CloneVT() isMsgToSensor_Msg {
	if m == nil {
		return (*MsgToSensor_ScrapeCommand)(nil)
	}
	r := &MsgToSensor_ScrapeCommand{
		ScrapeCommand: m.ScrapeCommand.CloneVT(),
	}
	return r
}

func (m *MsgToSensor_NetworkPoliciesCommand) CloneVT() isMsgToSensor_Msg {
	if m == nil {
		return (*MsgToSensor_NetworkPoliciesCommand)(nil)
	}
	r := &MsgToSensor_NetworkPoliciesCommand{
		NetworkPoliciesCommand: m.NetworkPoliciesCommand.CloneVT(),
	}
	return r
}

func (m *MsgToSensor_ClusterConfig) CloneVT() isMsgToSensor_Msg {
	if m == nil {
		return (*MsgToSensor_ClusterConfig)(nil)
	}
	r := &MsgToSensor_ClusterConfig{
		ClusterConfig: m.ClusterConfig.CloneVT(),
	}
	return r
}

func (m *MsgToSensor_SensorUpgradeTrigger) CloneVT() isMsgToSensor_Msg {
	if m == nil {
		return (*MsgToSensor_SensorUpgradeTrigger)(nil)
	}
	r := &MsgToSensor_SensorUpgradeTrigger{
		SensorUpgradeTrigger: m.SensorUpgradeTrigger.CloneVT(),
	}
	return r
}

func (m *MsgToSensor_TelemetryDataRequest) CloneVT() isMsgToSensor_Msg {
	if m == nil {
		return (*MsgToSensor_TelemetryDataRequest)(nil)
	}
	r := &MsgToSensor_TelemetryDataRequest{
		TelemetryDataRequest: m.TelemetryDataRequest.CloneVT(),
	}
	return r
}

func (m *MsgToSensor_PolicySync) CloneVT() isMsgToSensor_Msg {
	if m == nil {
		return (*MsgToSensor_PolicySync)(nil)
	}
	r := &MsgToSensor_PolicySync{
		PolicySync: m.PolicySync.CloneVT(),
	}
	return r
}

func (m *MsgToSensor_ReassessPolicies) CloneVT() isMsgToSensor_Msg {
	if m == nil {
		return (*MsgToSensor_ReassessPolicies)(nil)
	}
	r := &MsgToSensor_ReassessPolicies{
		ReassessPolicies: m.ReassessPolicies.CloneVT(),
	}
	return r
}

func (m *MsgToSensor_BaselineSync) CloneVT() isMsgToSensor_Msg {
	if m == nil {
		return (*MsgToSensor_BaselineSync)(nil)
	}
	r := &MsgToSensor_BaselineSync{
		BaselineSync: m.BaselineSync.CloneVT(),
	}
	return r
}

func (m *MsgToSensor_CancelPullTelemetryDataRequest) CloneVT() isMsgToSensor_Msg {
	if m == nil {
		return (*MsgToSensor_CancelPullTelemetryDataRequest)(nil)
	}
	r := &MsgToSensor_CancelPullTelemetryDataRequest{
		CancelPullTelemetryDataRequest: m.CancelPullTelemetryDataRequest.CloneVT(),
	}
	return r
}

func (m *MsgToSensor_PushNetworkEntitiesRequest) CloneVT() isMsgToSensor_Msg {
	if m == nil {
		return (*MsgToSensor_PushNetworkEntitiesRequest)(nil)
	}
	r := &MsgToSensor_PushNetworkEntitiesRequest{
		PushNetworkEntitiesRequest: m.PushNetworkEntitiesRequest.CloneVT(),
	}
	return r
}

func (m *MsgToSensor_Hello) CloneVT() isMsgToSensor_Msg {
	if m == nil {
		return (*MsgToSensor_Hello)(nil)
	}
	r := &MsgToSensor_Hello{
		Hello: m.Hello.CloneVT(),
	}
	return r
}

func (m *MsgToSensor_NetworkBaselineSync) CloneVT() isMsgToSensor_Msg {
	if m == nil {
		return (*MsgToSensor_NetworkBaselineSync)(nil)
	}
	r := &MsgToSensor_NetworkBaselineSync{
		NetworkBaselineSync: m.NetworkBaselineSync.CloneVT(),
	}
	return r
}

func (m *MsgToSensor_AuditLogSync) CloneVT() isMsgToSensor_Msg {
	if m == nil {
		return (*MsgToSensor_AuditLogSync)(nil)
	}
	r := &MsgToSensor_AuditLogSync{
		AuditLogSync: m.AuditLogSync.CloneVT(),
	}
	return r
}

func (m *MsgToSensor_ReprocessDeployment) CloneVT() isMsgToSensor_Msg {
	if m == nil {
		return (*MsgToSensor_ReprocessDeployment)(nil)
	}
	r := &MsgToSensor_ReprocessDeployment{
		ReprocessDeployment: m.ReprocessDeployment.CloneVT(),
	}
	return r
}

func (m *MsgToSensor_InvalidateImageCache) CloneVT() isMsgToSensor_Msg {
	if m == nil {
		return (*MsgToSensor_InvalidateImageCache)(nil)
	}
	r := &MsgToSensor_InvalidateImageCache{
		InvalidateImageCache: m.InvalidateImageCache.CloneVT(),
	}
	return r
}

func (m *MsgToSensor_IssueLocalScannerCertsResponse) CloneVT() isMsgToSensor_Msg {
	if m == nil {
		return (*MsgToSensor_IssueLocalScannerCertsResponse)(nil)
	}
	r := &MsgToSensor_IssueLocalScannerCertsResponse{
		IssueLocalScannerCertsResponse: m.IssueLocalScannerCertsResponse.CloneVT(),
	}
	return r
}

func (m *MsgToSensor_UpdatedImage) CloneVT() isMsgToSensor_Msg {
	if m == nil {
		return (*MsgToSensor_UpdatedImage)(nil)
	}
	r := &MsgToSensor_UpdatedImage{}
	if rhs := m.UpdatedImage; rhs != nil {
		if vtpb, ok := interface{}(rhs).(interface{ CloneVT() *storage.Image }); ok {
			r.UpdatedImage = vtpb.CloneVT()
		} else {
			r.UpdatedImage = proto.Clone(rhs).(*storage.Image)
		}
	}
	return r
}

func (m *MsgToSensor_ReprocessDeployments) CloneVT() isMsgToSensor_Msg {
	if m == nil {
		return (*MsgToSensor_ReprocessDeployments)(nil)
	}
	r := &MsgToSensor_ReprocessDeployments{
		ReprocessDeployments: m.ReprocessDeployments.CloneVT(),
	}
	return r
}

func (m *AuditLogSync) CloneVT() *AuditLogSync {
	if m == nil {
		return (*AuditLogSync)(nil)
	}
	r := &AuditLogSync{}
	if rhs := m.NodeAuditLogFileStates; rhs != nil {
		tmpContainer := make(map[string]*storage.AuditLogFileState, len(rhs))
		for k, v := range rhs {
			if vtpb, ok := interface{}(v).(interface {
				CloneVT() *storage.AuditLogFileState
			}); ok {
				tmpContainer[k] = vtpb.CloneVT()
			} else {
				tmpContainer[k] = proto.Clone(v).(*storage.AuditLogFileState)
			}
		}
		r.NodeAuditLogFileStates = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *AuditLogSync) CloneGenericVT() proto.Message {
	return m.CloneVT()
}

func (m *AuditLogStatusInfo) CloneVT() *AuditLogStatusInfo {
	if m == nil {
		return (*AuditLogStatusInfo)(nil)
	}
	r := &AuditLogStatusInfo{}
	if rhs := m.NodeAuditLogFileStates; rhs != nil {
		tmpContainer := make(map[string]*storage.AuditLogFileState, len(rhs))
		for k, v := range rhs {
			if vtpb, ok := interface{}(v).(interface {
				CloneVT() *storage.AuditLogFileState
			}); ok {
				tmpContainer[k] = vtpb.CloneVT()
			} else {
				tmpContainer[k] = proto.Clone(v).(*storage.AuditLogFileState)
			}
		}
		r.NodeAuditLogFileStates = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *AuditLogStatusInfo) CloneGenericVT() proto.Message {
	return m.CloneVT()
}

func (m *ReprocessDeployment) CloneVT() *ReprocessDeployment {
	if m == nil {
		return (*ReprocessDeployment)(nil)
	}
	r := &ReprocessDeployment{}
	if rhs := m.DeploymentIds; rhs != nil {
		tmpContainer := make([]string, len(rhs))
		copy(tmpContainer, rhs)
		r.DeploymentIds = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ReprocessDeployment) CloneGenericVT() proto.Message {
	return m.CloneVT()
}

func (m *InvalidateImageCache_ImageKey) CloneVT() *InvalidateImageCache_ImageKey {
	if m == nil {
		return (*InvalidateImageCache_ImageKey)(nil)
	}
	r := &InvalidateImageCache_ImageKey{
		ImageId:       m.ImageId,
		ImageFullName: m.ImageFullName,
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *InvalidateImageCache_ImageKey) CloneGenericVT() proto.Message {
	return m.CloneVT()
}

func (m *InvalidateImageCache) CloneVT() *InvalidateImageCache {
	if m == nil {
		return (*InvalidateImageCache)(nil)
	}
	r := &InvalidateImageCache{}
	if rhs := m.ImageKeys; rhs != nil {
		tmpContainer := make([]*InvalidateImageCache_ImageKey, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.ImageKeys = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *InvalidateImageCache) CloneGenericVT() proto.Message {
	return m.CloneVT()
}

func (this *MsgFromSensor) EqualVT(that *MsgFromSensor) bool {
	if this == nil {
		return that == nil
	} else if that == nil {
		return false
	}
	if this.Msg == nil && that.Msg != nil {
		return false
	} else if this.Msg != nil {
		if that.Msg == nil {
			return false
		}
		if !this.Msg.(interface {
			EqualVT(isMsgFromSensor_Msg) bool
		}).EqualVT(that.Msg) {
			return false
		}
	}
	if this.HashKey != that.HashKey {
		return false
	}
	if this.DedupeKey != that.DedupeKey {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *MsgFromSensor_Event) EqualVT(thatIface isMsgFromSensor_Msg) bool {
	that, ok := thatIface.(*MsgFromSensor_Event)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Event, that.Event; p != q {
		if p == nil {
			p = &SensorEvent{}
		}
		if q == nil {
			q = &SensorEvent{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MsgFromSensor_NetworkFlowUpdate) EqualVT(thatIface isMsgFromSensor_Msg) bool {
	that, ok := thatIface.(*MsgFromSensor_NetworkFlowUpdate)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.NetworkFlowUpdate, that.NetworkFlowUpdate; p != q {
		if p == nil {
			p = &NetworkFlowUpdate{}
		}
		if q == nil {
			q = &NetworkFlowUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MsgFromSensor_ScrapeUpdate) EqualVT(thatIface isMsgFromSensor_Msg) bool {
	that, ok := thatIface.(*MsgFromSensor_ScrapeUpdate)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ScrapeUpdate, that.ScrapeUpdate; p != q {
		if p == nil {
			p = &ScrapeUpdate{}
		}
		if q == nil {
			q = &ScrapeUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MsgFromSensor_NetworkPoliciesResponse) EqualVT(thatIface isMsgFromSensor_Msg) bool {
	that, ok := thatIface.(*MsgFromSensor_NetworkPoliciesResponse)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.NetworkPoliciesResponse, that.NetworkPoliciesResponse; p != q {
		if p == nil {
			p = &NetworkPoliciesResponse{}
		}
		if q == nil {
			q = &NetworkPoliciesResponse{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MsgFromSensor_ClusterStatusUpdate) EqualVT(thatIface isMsgFromSensor_Msg) bool {
	that, ok := thatIface.(*MsgFromSensor_ClusterStatusUpdate)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ClusterStatusUpdate, that.ClusterStatusUpdate; p != q {
		if p == nil {
			p = &ClusterStatusUpdate{}
		}
		if q == nil {
			q = &ClusterStatusUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MsgFromSensor_TelemetryDataResponse) EqualVT(thatIface isMsgFromSensor_Msg) bool {
	that, ok := thatIface.(*MsgFromSensor_TelemetryDataResponse)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.TelemetryDataResponse, that.TelemetryDataResponse; p != q {
		if p == nil {
			p = &PullTelemetryDataResponse{}
		}
		if q == nil {
			q = &PullTelemetryDataResponse{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MsgFromSensor_ClusterHealthInfo) EqualVT(thatIface isMsgFromSensor_Msg) bool {
	that, ok := thatIface.(*MsgFromSensor_ClusterHealthInfo)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ClusterHealthInfo, that.ClusterHealthInfo; p != q {
		if p == nil {
			p = &RawClusterHealthInfo{}
		}
		if q == nil {
			q = &RawClusterHealthInfo{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MsgFromSensor_Hello) EqualVT(thatIface isMsgFromSensor_Msg) bool {
	that, ok := thatIface.(*MsgFromSensor_Hello)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Hello, that.Hello; p != q {
		if p == nil {
			p = &SensorHello{}
		}
		if q == nil {
			q = &SensorHello{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MsgFromSensor_AuditLogStatusInfo) EqualVT(thatIface isMsgFromSensor_Msg) bool {
	that, ok := thatIface.(*MsgFromSensor_AuditLogStatusInfo)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.AuditLogStatusInfo, that.AuditLogStatusInfo; p != q {
		if p == nil {
			p = &AuditLogStatusInfo{}
		}
		if q == nil {
			q = &AuditLogStatusInfo{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MsgFromSensor_IssueLocalScannerCertsRequest) EqualVT(thatIface isMsgFromSensor_Msg) bool {
	that, ok := thatIface.(*MsgFromSensor_IssueLocalScannerCertsRequest)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.IssueLocalScannerCertsRequest, that.IssueLocalScannerCertsRequest; p != q {
		if p == nil {
			p = &IssueLocalScannerCertsRequest{}
		}
		if q == nil {
			q = &IssueLocalScannerCertsRequest{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MsgFromSensor_ClusterMetrics) EqualVT(thatIface isMsgFromSensor_Msg) bool {
	that, ok := thatIface.(*MsgFromSensor_ClusterMetrics)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ClusterMetrics, that.ClusterMetrics; p != q {
		if p == nil {
			p = &ClusterMetrics{}
		}
		if q == nil {
			q = &ClusterMetrics{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MsgFromSensor_ProcessListeningOnPortUpdate) EqualVT(thatIface isMsgFromSensor_Msg) bool {
	that, ok := thatIface.(*MsgFromSensor_ProcessListeningOnPortUpdate)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ProcessListeningOnPortUpdate, that.ProcessListeningOnPortUpdate; p != q {
		if p == nil {
			p = &ProcessListeningOnPortsUpdate{}
		}
		if q == nil {
			q = &ProcessListeningOnPortsUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ReassessPolicies) EqualVT(that *ReassessPolicies) bool {
	if this == nil {
		return that == nil
	} else if that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ReprocessDeployments) EqualVT(that *ReprocessDeployments) bool {
	if this == nil {
		return that == nil
	} else if that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *MsgToSensor) EqualVT(that *MsgToSensor) bool {
	if this == nil {
		return that == nil
	} else if that == nil {
		return false
	}
	if this.Msg == nil && that.Msg != nil {
		return false
	} else if this.Msg != nil {
		if that.Msg == nil {
			return false
		}
		if !this.Msg.(interface{ EqualVT(isMsgToSensor_Msg) bool }).EqualVT(that.Msg) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *MsgToSensor_Enforcement) EqualVT(thatIface isMsgToSensor_Msg) bool {
	that, ok := thatIface.(*MsgToSensor_Enforcement)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Enforcement, that.Enforcement; p != q {
		if p == nil {
			p = &SensorEnforcement{}
		}
		if q == nil {
			q = &SensorEnforcement{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MsgToSensor_ScrapeCommand) EqualVT(thatIface isMsgToSensor_Msg) bool {
	that, ok := thatIface.(*MsgToSensor_ScrapeCommand)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ScrapeCommand, that.ScrapeCommand; p != q {
		if p == nil {
			p = &ScrapeCommand{}
		}
		if q == nil {
			q = &ScrapeCommand{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MsgToSensor_NetworkPoliciesCommand) EqualVT(thatIface isMsgToSensor_Msg) bool {
	that, ok := thatIface.(*MsgToSensor_NetworkPoliciesCommand)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.NetworkPoliciesCommand, that.NetworkPoliciesCommand; p != q {
		if p == nil {
			p = &NetworkPoliciesCommand{}
		}
		if q == nil {
			q = &NetworkPoliciesCommand{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MsgToSensor_ClusterConfig) EqualVT(thatIface isMsgToSensor_Msg) bool {
	that, ok := thatIface.(*MsgToSensor_ClusterConfig)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ClusterConfig, that.ClusterConfig; p != q {
		if p == nil {
			p = &ClusterConfig{}
		}
		if q == nil {
			q = &ClusterConfig{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MsgToSensor_SensorUpgradeTrigger) EqualVT(thatIface isMsgToSensor_Msg) bool {
	that, ok := thatIface.(*MsgToSensor_SensorUpgradeTrigger)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.SensorUpgradeTrigger, that.SensorUpgradeTrigger; p != q {
		if p == nil {
			p = &SensorUpgradeTrigger{}
		}
		if q == nil {
			q = &SensorUpgradeTrigger{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MsgToSensor_TelemetryDataRequest) EqualVT(thatIface isMsgToSensor_Msg) bool {
	that, ok := thatIface.(*MsgToSensor_TelemetryDataRequest)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.TelemetryDataRequest, that.TelemetryDataRequest; p != q {
		if p == nil {
			p = &PullTelemetryDataRequest{}
		}
		if q == nil {
			q = &PullTelemetryDataRequest{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MsgToSensor_PolicySync) EqualVT(thatIface isMsgToSensor_Msg) bool {
	that, ok := thatIface.(*MsgToSensor_PolicySync)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PolicySync, that.PolicySync; p != q {
		if p == nil {
			p = &PolicySync{}
		}
		if q == nil {
			q = &PolicySync{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MsgToSensor_ReassessPolicies) EqualVT(thatIface isMsgToSensor_Msg) bool {
	that, ok := thatIface.(*MsgToSensor_ReassessPolicies)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ReassessPolicies, that.ReassessPolicies; p != q {
		if p == nil {
			p = &ReassessPolicies{}
		}
		if q == nil {
			q = &ReassessPolicies{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MsgToSensor_BaselineSync) EqualVT(thatIface isMsgToSensor_Msg) bool {
	that, ok := thatIface.(*MsgToSensor_BaselineSync)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.BaselineSync, that.BaselineSync; p != q {
		if p == nil {
			p = &BaselineSync{}
		}
		if q == nil {
			q = &BaselineSync{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MsgToSensor_CancelPullTelemetryDataRequest) EqualVT(thatIface isMsgToSensor_Msg) bool {
	that, ok := thatIface.(*MsgToSensor_CancelPullTelemetryDataRequest)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.CancelPullTelemetryDataRequest, that.CancelPullTelemetryDataRequest; p != q {
		if p == nil {
			p = &CancelPullTelemetryDataRequest{}
		}
		if q == nil {
			q = &CancelPullTelemetryDataRequest{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MsgToSensor_PushNetworkEntitiesRequest) EqualVT(thatIface isMsgToSensor_Msg) bool {
	that, ok := thatIface.(*MsgToSensor_PushNetworkEntitiesRequest)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PushNetworkEntitiesRequest, that.PushNetworkEntitiesRequest; p != q {
		if p == nil {
			p = &PushNetworkEntitiesRequest{}
		}
		if q == nil {
			q = &PushNetworkEntitiesRequest{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MsgToSensor_Hello) EqualVT(thatIface isMsgToSensor_Msg) bool {
	that, ok := thatIface.(*MsgToSensor_Hello)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Hello, that.Hello; p != q {
		if p == nil {
			p = &CentralHello{}
		}
		if q == nil {
			q = &CentralHello{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MsgToSensor_NetworkBaselineSync) EqualVT(thatIface isMsgToSensor_Msg) bool {
	that, ok := thatIface.(*MsgToSensor_NetworkBaselineSync)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.NetworkBaselineSync, that.NetworkBaselineSync; p != q {
		if p == nil {
			p = &NetworkBaselineSync{}
		}
		if q == nil {
			q = &NetworkBaselineSync{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MsgToSensor_AuditLogSync) EqualVT(thatIface isMsgToSensor_Msg) bool {
	that, ok := thatIface.(*MsgToSensor_AuditLogSync)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.AuditLogSync, that.AuditLogSync; p != q {
		if p == nil {
			p = &AuditLogSync{}
		}
		if q == nil {
			q = &AuditLogSync{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MsgToSensor_ReprocessDeployment) EqualVT(thatIface isMsgToSensor_Msg) bool {
	that, ok := thatIface.(*MsgToSensor_ReprocessDeployment)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ReprocessDeployment, that.ReprocessDeployment; p != q {
		if p == nil {
			p = &ReprocessDeployment{}
		}
		if q == nil {
			q = &ReprocessDeployment{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MsgToSensor_InvalidateImageCache) EqualVT(thatIface isMsgToSensor_Msg) bool {
	that, ok := thatIface.(*MsgToSensor_InvalidateImageCache)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.InvalidateImageCache, that.InvalidateImageCache; p != q {
		if p == nil {
			p = &InvalidateImageCache{}
		}
		if q == nil {
			q = &InvalidateImageCache{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MsgToSensor_IssueLocalScannerCertsResponse) EqualVT(thatIface isMsgToSensor_Msg) bool {
	that, ok := thatIface.(*MsgToSensor_IssueLocalScannerCertsResponse)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.IssueLocalScannerCertsResponse, that.IssueLocalScannerCertsResponse; p != q {
		if p == nil {
			p = &IssueLocalScannerCertsResponse{}
		}
		if q == nil {
			q = &IssueLocalScannerCertsResponse{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MsgToSensor_UpdatedImage) EqualVT(thatIface isMsgToSensor_Msg) bool {
	that, ok := thatIface.(*MsgToSensor_UpdatedImage)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.UpdatedImage, that.UpdatedImage; p != q {
		if p == nil {
			p = &storage.Image{}
		}
		if q == nil {
			q = &storage.Image{}
		}
		if equal, ok := interface{}(p).(interface{ EqualVT(*storage.Image) bool }); ok {
			if !equal.EqualVT(q) {
				return false
			}
		} else if !proto.Equal(p, q) {
			return false
		}
	}
	return true
}

func (this *MsgToSensor_ReprocessDeployments) EqualVT(thatIface isMsgToSensor_Msg) bool {
	that, ok := thatIface.(*MsgToSensor_ReprocessDeployments)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ReprocessDeployments, that.ReprocessDeployments; p != q {
		if p == nil {
			p = &ReprocessDeployments{}
		}
		if q == nil {
			q = &ReprocessDeployments{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *AuditLogSync) EqualVT(that *AuditLogSync) bool {
	if this == nil {
		return that == nil
	} else if that == nil {
		return false
	}
	if len(this.NodeAuditLogFileStates) != len(that.NodeAuditLogFileStates) {
		return false
	}
	for i, vx := range this.NodeAuditLogFileStates {
		vy, ok := that.NodeAuditLogFileStates[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &storage.AuditLogFileState{}
			}
			if q == nil {
				q = &storage.AuditLogFileState{}
			}
			if equal, ok := interface{}(p).(interface {
				EqualVT(*storage.AuditLogFileState) bool
			}); ok {
				if !equal.EqualVT(q) {
					return false
				}
			} else if !proto.Equal(p, q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *AuditLogStatusInfo) EqualVT(that *AuditLogStatusInfo) bool {
	if this == nil {
		return that == nil
	} else if that == nil {
		return false
	}
	if len(this.NodeAuditLogFileStates) != len(that.NodeAuditLogFileStates) {
		return false
	}
	for i, vx := range this.NodeAuditLogFileStates {
		vy, ok := that.NodeAuditLogFileStates[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &storage.AuditLogFileState{}
			}
			if q == nil {
				q = &storage.AuditLogFileState{}
			}
			if equal, ok := interface{}(p).(interface {
				EqualVT(*storage.AuditLogFileState) bool
			}); ok {
				if !equal.EqualVT(q) {
					return false
				}
			} else if !proto.Equal(p, q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ReprocessDeployment) EqualVT(that *ReprocessDeployment) bool {
	if this == nil {
		return that == nil
	} else if that == nil {
		return false
	}
	if len(this.DeploymentIds) != len(that.DeploymentIds) {
		return false
	}
	for i, vx := range this.DeploymentIds {
		vy := that.DeploymentIds[i]
		if vx != vy {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *InvalidateImageCache_ImageKey) EqualVT(that *InvalidateImageCache_ImageKey) bool {
	if this == nil {
		return that == nil
	} else if that == nil {
		return false
	}
	if this.ImageId != that.ImageId {
		return false
	}
	if this.ImageFullName != that.ImageFullName {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *InvalidateImageCache) EqualVT(that *InvalidateImageCache) bool {
	if this == nil {
		return that == nil
	} else if that == nil {
		return false
	}
	if len(this.ImageKeys) != len(that.ImageKeys) {
		return false
	}
	for i, vx := range this.ImageKeys {
		vy := that.ImageKeys[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &InvalidateImageCache_ImageKey{}
			}
			if q == nil {
				q = &InvalidateImageCache_ImageKey{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SensorServiceClient is the client API for SensorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SensorServiceClient interface {
	Communicate(ctx context.Context, opts ...grpc.CallOption) (SensorService_CommunicateClient, error)
}

type sensorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSensorServiceClient(cc grpc.ClientConnInterface) SensorServiceClient {
	return &sensorServiceClient{cc}
}

func (c *sensorServiceClient) Communicate(ctx context.Context, opts ...grpc.CallOption) (SensorService_CommunicateClient, error) {
	stream, err := c.cc.NewStream(ctx, &SensorService_ServiceDesc.Streams[0], "/central.SensorService/Communicate", opts...)
	if err != nil {
		return nil, err
	}
	x := &sensorServiceCommunicateClient{stream}
	return x, nil
}

type SensorService_CommunicateClient interface {
	Send(*MsgFromSensor) error
	Recv() (*MsgToSensor, error)
	grpc.ClientStream
}

type sensorServiceCommunicateClient struct {
	grpc.ClientStream
}

func (x *sensorServiceCommunicateClient) Send(m *MsgFromSensor) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sensorServiceCommunicateClient) Recv() (*MsgToSensor, error) {
	m := new(MsgToSensor)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SensorServiceServer is the server API for SensorService service.
// All implementations must embed UnimplementedSensorServiceServer
// for forward compatibility
type SensorServiceServer interface {
	Communicate(SensorService_CommunicateServer) error
	mustEmbedUnimplementedSensorServiceServer()
}

// UnimplementedSensorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSensorServiceServer struct {
}

func (UnimplementedSensorServiceServer) Communicate(SensorService_CommunicateServer) error {
	return status.Errorf(codes.Unimplemented, "method Communicate not implemented")
}
func (UnimplementedSensorServiceServer) mustEmbedUnimplementedSensorServiceServer() {}

// UnsafeSensorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SensorServiceServer will
// result in compilation errors.
type UnsafeSensorServiceServer interface {
	mustEmbedUnimplementedSensorServiceServer()
}

func RegisterSensorServiceServer(s grpc.ServiceRegistrar, srv SensorServiceServer) {
	s.RegisterService(&SensorService_ServiceDesc, srv)
}

func _SensorService_Communicate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SensorServiceServer).Communicate(&sensorServiceCommunicateServer{stream})
}

type SensorService_CommunicateServer interface {
	Send(*MsgToSensor) error
	Recv() (*MsgFromSensor, error)
	grpc.ServerStream
}

type sensorServiceCommunicateServer struct {
	grpc.ServerStream
}

func (x *sensorServiceCommunicateServer) Send(m *MsgToSensor) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sensorServiceCommunicateServer) Recv() (*MsgFromSensor, error) {
	m := new(MsgFromSensor)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SensorService_ServiceDesc is the grpc.ServiceDesc for SensorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SensorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "central.SensorService",
	HandlerType: (*SensorServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Communicate",
			Handler:       _SensorService_Communicate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internalapi/central/sensor_iservice.proto",
}

func (m *MsgFromSensor) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFromSensor) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MsgFromSensor) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if vtmsg, ok := m.Msg.(interface {
		MarshalToSizedBufferVT([]byte) (int, error)
	}); ok {
		size, err := vtmsg.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if len(m.DedupeKey) > 0 {
		i -= len(m.DedupeKey)
		copy(dAtA[i:], m.DedupeKey)
		i = encodeVarint(dAtA, i, uint64(len(m.DedupeKey)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.HashKey) > 0 {
		i -= len(m.HashKey)
		copy(dAtA[i:], m.HashKey)
		i = encodeVarint(dAtA, i, uint64(len(m.HashKey)))
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}

func (m *MsgFromSensor_Event) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MsgFromSensor_Event) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Event != nil {
		size, err := m.Event.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *MsgFromSensor_NetworkFlowUpdate) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MsgFromSensor_NetworkFlowUpdate) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NetworkFlowUpdate != nil {
		size, err := m.NetworkFlowUpdate.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *MsgFromSensor_ScrapeUpdate) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MsgFromSensor_ScrapeUpdate) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ScrapeUpdate != nil {
		size, err := m.ScrapeUpdate.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *MsgFromSensor_NetworkPoliciesResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MsgFromSensor_NetworkPoliciesResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NetworkPoliciesResponse != nil {
		size, err := m.NetworkPoliciesResponse.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *MsgFromSensor_ClusterStatusUpdate) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MsgFromSensor_ClusterStatusUpdate) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ClusterStatusUpdate != nil {
		size, err := m.ClusterStatusUpdate.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *MsgFromSensor_TelemetryDataResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MsgFromSensor_TelemetryDataResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TelemetryDataResponse != nil {
		size, err := m.TelemetryDataResponse.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *MsgFromSensor_ClusterHealthInfo) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MsgFromSensor_ClusterHealthInfo) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ClusterHealthInfo != nil {
		size, err := m.ClusterHealthInfo.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *MsgFromSensor_Hello) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MsgFromSensor_Hello) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Hello != nil {
		size, err := m.Hello.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *MsgFromSensor_AuditLogStatusInfo) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MsgFromSensor_AuditLogStatusInfo) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AuditLogStatusInfo != nil {
		size, err := m.AuditLogStatusInfo.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *MsgFromSensor_IssueLocalScannerCertsRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MsgFromSensor_IssueLocalScannerCertsRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IssueLocalScannerCertsRequest != nil {
		size, err := m.IssueLocalScannerCertsRequest.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *MsgFromSensor_ClusterMetrics) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MsgFromSensor_ClusterMetrics) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ClusterMetrics != nil {
		size, err := m.ClusterMetrics.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *MsgFromSensor_ProcessListeningOnPortUpdate) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MsgFromSensor_ProcessListeningOnPortUpdate) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProcessListeningOnPortUpdate != nil {
		size, err := m.ProcessListeningOnPortUpdate.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *ReassessPolicies) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReassessPolicies) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *ReassessPolicies) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	return len(dAtA) - i, nil
}

func (m *ReprocessDeployments) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReprocessDeployments) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *ReprocessDeployments) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	return len(dAtA) - i, nil
}

func (m *MsgToSensor) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgToSensor) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MsgToSensor) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if vtmsg, ok := m.Msg.(interface {
		MarshalToSizedBufferVT([]byte) (int, error)
	}); ok {
		size, err := vtmsg.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	return len(dAtA) - i, nil
}

func (m *MsgToSensor_Enforcement) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MsgToSensor_Enforcement) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Enforcement != nil {
		size, err := m.Enforcement.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_ScrapeCommand) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MsgToSensor_ScrapeCommand) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ScrapeCommand != nil {
		size, err := m.ScrapeCommand.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_NetworkPoliciesCommand) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MsgToSensor_NetworkPoliciesCommand) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NetworkPoliciesCommand != nil {
		size, err := m.NetworkPoliciesCommand.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_ClusterConfig) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MsgToSensor_ClusterConfig) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ClusterConfig != nil {
		size, err := m.ClusterConfig.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_SensorUpgradeTrigger) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MsgToSensor_SensorUpgradeTrigger) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SensorUpgradeTrigger != nil {
		size, err := m.SensorUpgradeTrigger.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_TelemetryDataRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MsgToSensor_TelemetryDataRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TelemetryDataRequest != nil {
		size, err := m.TelemetryDataRequest.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_PolicySync) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MsgToSensor_PolicySync) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PolicySync != nil {
		size, err := m.PolicySync.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_ReassessPolicies) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MsgToSensor_ReassessPolicies) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReassessPolicies != nil {
		size, err := m.ReassessPolicies.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_BaselineSync) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MsgToSensor_BaselineSync) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BaselineSync != nil {
		size, err := m.BaselineSync.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_CancelPullTelemetryDataRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MsgToSensor_CancelPullTelemetryDataRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CancelPullTelemetryDataRequest != nil {
		size, err := m.CancelPullTelemetryDataRequest.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_PushNetworkEntitiesRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MsgToSensor_PushNetworkEntitiesRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PushNetworkEntitiesRequest != nil {
		size, err := m.PushNetworkEntitiesRequest.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_Hello) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MsgToSensor_Hello) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Hello != nil {
		size, err := m.Hello.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_NetworkBaselineSync) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MsgToSensor_NetworkBaselineSync) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NetworkBaselineSync != nil {
		size, err := m.NetworkBaselineSync.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_AuditLogSync) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MsgToSensor_AuditLogSync) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AuditLogSync != nil {
		size, err := m.AuditLogSync.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_ReprocessDeployment) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MsgToSensor_ReprocessDeployment) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReprocessDeployment != nil {
		size, err := m.ReprocessDeployment.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_InvalidateImageCache) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MsgToSensor_InvalidateImageCache) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InvalidateImageCache != nil {
		size, err := m.InvalidateImageCache.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_IssueLocalScannerCertsResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MsgToSensor_IssueLocalScannerCertsResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IssueLocalScannerCertsResponse != nil {
		size, err := m.IssueLocalScannerCertsResponse.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_UpdatedImage) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MsgToSensor_UpdatedImage) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdatedImage != nil {
		if vtmsg, ok := interface{}(m.UpdatedImage).(interface {
			MarshalToSizedBufferVT([]byte) (int, error)
		}); ok {
			size, err := vtmsg.MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarint(dAtA, i, uint64(size))
		} else {
			encoded, err := proto.Marshal(m.UpdatedImage)
			if err != nil {
				return 0, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = encodeVarint(dAtA, i, uint64(len(encoded)))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *MsgToSensor_ReprocessDeployments) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MsgToSensor_ReprocessDeployments) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReprocessDeployments != nil {
		size, err := m.ReprocessDeployments.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *AuditLogSync) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuditLogSync) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *AuditLogSync) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.NodeAuditLogFileStates) > 0 {
		for k := range m.NodeAuditLogFileStates {
			v := m.NodeAuditLogFileStates[k]
			baseI := i
			if vtmsg, ok := interface{}(v).(interface {
				MarshalToSizedBufferVT([]byte) (int, error)
			}); ok {
				size, err := vtmsg.MarshalToSizedBufferVT(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarint(dAtA, i, uint64(size))
			} else {
				encoded, err := proto.Marshal(v)
				if err != nil {
					return 0, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = encodeVarint(dAtA, i, uint64(len(encoded)))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarint(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarint(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AuditLogStatusInfo) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuditLogStatusInfo) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *AuditLogStatusInfo) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.NodeAuditLogFileStates) > 0 {
		for k := range m.NodeAuditLogFileStates {
			v := m.NodeAuditLogFileStates[k]
			baseI := i
			if vtmsg, ok := interface{}(v).(interface {
				MarshalToSizedBufferVT([]byte) (int, error)
			}); ok {
				size, err := vtmsg.MarshalToSizedBufferVT(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarint(dAtA, i, uint64(size))
			} else {
				encoded, err := proto.Marshal(v)
				if err != nil {
					return 0, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = encodeVarint(dAtA, i, uint64(len(encoded)))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarint(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarint(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReprocessDeployment) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReprocessDeployment) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *ReprocessDeployment) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.DeploymentIds) > 0 {
		for iNdEx := len(m.DeploymentIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DeploymentIds[iNdEx])
			copy(dAtA[i:], m.DeploymentIds[iNdEx])
			i = encodeVarint(dAtA, i, uint64(len(m.DeploymentIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *InvalidateImageCache_ImageKey) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvalidateImageCache_ImageKey) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *InvalidateImageCache_ImageKey) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.ImageFullName) > 0 {
		i -= len(m.ImageFullName)
		copy(dAtA[i:], m.ImageFullName)
		i = encodeVarint(dAtA, i, uint64(len(m.ImageFullName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ImageId) > 0 {
		i -= len(m.ImageId)
		copy(dAtA[i:], m.ImageId)
		i = encodeVarint(dAtA, i, uint64(len(m.ImageId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InvalidateImageCache) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvalidateImageCache) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *InvalidateImageCache) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.ImageKeys) > 0 {
		for iNdEx := len(m.ImageKeys) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.ImageKeys[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgFromSensor) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if vtmsg, ok := m.Msg.(interface{ SizeVT() int }); ok {
		n += vtmsg.SizeVT()
	}
	l = len(m.HashKey)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	l = len(m.DedupeKey)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *MsgFromSensor_Event) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.SizeVT()
		n += 1 + l + sov(uint64(l))
	}
	return n
}
func (m *MsgFromSensor_NetworkFlowUpdate) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkFlowUpdate != nil {
		l = m.NetworkFlowUpdate.SizeVT()
		n += 1 + l + sov(uint64(l))
	}
	return n
}
func (m *MsgFromSensor_ScrapeUpdate) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScrapeUpdate != nil {
		l = m.ScrapeUpdate.SizeVT()
		n += 1 + l + sov(uint64(l))
	}
	return n
}
func (m *MsgFromSensor_NetworkPoliciesResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkPoliciesResponse != nil {
		l = m.NetworkPoliciesResponse.SizeVT()
		n += 1 + l + sov(uint64(l))
	}
	return n
}
func (m *MsgFromSensor_ClusterStatusUpdate) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterStatusUpdate != nil {
		l = m.ClusterStatusUpdate.SizeVT()
		n += 1 + l + sov(uint64(l))
	}
	return n
}
func (m *MsgFromSensor_TelemetryDataResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TelemetryDataResponse != nil {
		l = m.TelemetryDataResponse.SizeVT()
		n += 1 + l + sov(uint64(l))
	}
	return n
}
func (m *MsgFromSensor_ClusterHealthInfo) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterHealthInfo != nil {
		l = m.ClusterHealthInfo.SizeVT()
		n += 1 + l + sov(uint64(l))
	}
	return n
}
func (m *MsgFromSensor_Hello) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hello != nil {
		l = m.Hello.SizeVT()
		n += 1 + l + sov(uint64(l))
	}
	return n
}
func (m *MsgFromSensor_AuditLogStatusInfo) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuditLogStatusInfo != nil {
		l = m.AuditLogStatusInfo.SizeVT()
		n += 1 + l + sov(uint64(l))
	}
	return n
}
func (m *MsgFromSensor_IssueLocalScannerCertsRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IssueLocalScannerCertsRequest != nil {
		l = m.IssueLocalScannerCertsRequest.SizeVT()
		n += 1 + l + sov(uint64(l))
	}
	return n
}
func (m *MsgFromSensor_ClusterMetrics) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterMetrics != nil {
		l = m.ClusterMetrics.SizeVT()
		n += 1 + l + sov(uint64(l))
	}
	return n
}
func (m *MsgFromSensor_ProcessListeningOnPortUpdate) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProcessListeningOnPortUpdate != nil {
		l = m.ProcessListeningOnPortUpdate.SizeVT()
		n += 1 + l + sov(uint64(l))
	}
	return n
}
func (m *ReassessPolicies) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += len(m.unknownFields)
	return n
}

func (m *ReprocessDeployments) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += len(m.unknownFields)
	return n
}

func (m *MsgToSensor) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if vtmsg, ok := m.Msg.(interface{ SizeVT() int }); ok {
		n += vtmsg.SizeVT()
	}
	n += len(m.unknownFields)
	return n
}

func (m *MsgToSensor_Enforcement) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enforcement != nil {
		l = m.Enforcement.SizeVT()
		n += 1 + l + sov(uint64(l))
	}
	return n
}
func (m *MsgToSensor_ScrapeCommand) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScrapeCommand != nil {
		l = m.ScrapeCommand.SizeVT()
		n += 1 + l + sov(uint64(l))
	}
	return n
}
func (m *MsgToSensor_NetworkPoliciesCommand) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkPoliciesCommand != nil {
		l = m.NetworkPoliciesCommand.SizeVT()
		n += 1 + l + sov(uint64(l))
	}
	return n
}
func (m *MsgToSensor_ClusterConfig) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterConfig != nil {
		l = m.ClusterConfig.SizeVT()
		n += 1 + l + sov(uint64(l))
	}
	return n
}
func (m *MsgToSensor_SensorUpgradeTrigger) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SensorUpgradeTrigger != nil {
		l = m.SensorUpgradeTrigger.SizeVT()
		n += 1 + l + sov(uint64(l))
	}
	return n
}
func (m *MsgToSensor_TelemetryDataRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TelemetryDataRequest != nil {
		l = m.TelemetryDataRequest.SizeVT()
		n += 1 + l + sov(uint64(l))
	}
	return n
}
func (m *MsgToSensor_PolicySync) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PolicySync != nil {
		l = m.PolicySync.SizeVT()
		n += 1 + l + sov(uint64(l))
	}
	return n
}
func (m *MsgToSensor_ReassessPolicies) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReassessPolicies != nil {
		l = m.ReassessPolicies.SizeVT()
		n += 1 + l + sov(uint64(l))
	}
	return n
}
func (m *MsgToSensor_BaselineSync) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaselineSync != nil {
		l = m.BaselineSync.SizeVT()
		n += 1 + l + sov(uint64(l))
	}
	return n
}
func (m *MsgToSensor_CancelPullTelemetryDataRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CancelPullTelemetryDataRequest != nil {
		l = m.CancelPullTelemetryDataRequest.SizeVT()
		n += 1 + l + sov(uint64(l))
	}
	return n
}
func (m *MsgToSensor_PushNetworkEntitiesRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PushNetworkEntitiesRequest != nil {
		l = m.PushNetworkEntitiesRequest.SizeVT()
		n += 1 + l + sov(uint64(l))
	}
	return n
}
func (m *MsgToSensor_Hello) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hello != nil {
		l = m.Hello.SizeVT()
		n += 1 + l + sov(uint64(l))
	}
	return n
}
func (m *MsgToSensor_NetworkBaselineSync) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkBaselineSync != nil {
		l = m.NetworkBaselineSync.SizeVT()
		n += 1 + l + sov(uint64(l))
	}
	return n
}
func (m *MsgToSensor_AuditLogSync) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuditLogSync != nil {
		l = m.AuditLogSync.SizeVT()
		n += 1 + l + sov(uint64(l))
	}
	return n
}
func (m *MsgToSensor_ReprocessDeployment) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReprocessDeployment != nil {
		l = m.ReprocessDeployment.SizeVT()
		n += 1 + l + sov(uint64(l))
	}
	return n
}
func (m *MsgToSensor_InvalidateImageCache) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InvalidateImageCache != nil {
		l = m.InvalidateImageCache.SizeVT()
		n += 2 + l + sov(uint64(l))
	}
	return n
}
func (m *MsgToSensor_IssueLocalScannerCertsResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IssueLocalScannerCertsResponse != nil {
		l = m.IssueLocalScannerCertsResponse.SizeVT()
		n += 2 + l + sov(uint64(l))
	}
	return n
}
func (m *MsgToSensor_UpdatedImage) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdatedImage != nil {
		if size, ok := interface{}(m.UpdatedImage).(interface {
			SizeVT() int
		}); ok {
			l = size.SizeVT()
		} else {
			l = proto.Size(m.UpdatedImage)
		}
		n += 2 + l + sov(uint64(l))
	}
	return n
}
func (m *MsgToSensor_ReprocessDeployments) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReprocessDeployments != nil {
		l = m.ReprocessDeployments.SizeVT()
		n += 2 + l + sov(uint64(l))
	}
	return n
}
func (m *AuditLogSync) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NodeAuditLogFileStates) > 0 {
		for k, v := range m.NodeAuditLogFileStates {
			_ = k
			_ = v
			l = 0
			if v != nil {
				if size, ok := interface{}(v).(interface {
					SizeVT() int
				}); ok {
					l = size.SizeVT()
				} else {
					l = proto.Size(v)
				}
			}
			l += 1 + sov(uint64(l))
			mapEntrySize := 1 + len(k) + sov(uint64(len(k))) + l
			n += mapEntrySize + 1 + sov(uint64(mapEntrySize))
		}
	}
	n += len(m.unknownFields)
	return n
}

func (m *AuditLogStatusInfo) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NodeAuditLogFileStates) > 0 {
		for k, v := range m.NodeAuditLogFileStates {
			_ = k
			_ = v
			l = 0
			if v != nil {
				if size, ok := interface{}(v).(interface {
					SizeVT() int
				}); ok {
					l = size.SizeVT()
				} else {
					l = proto.Size(v)
				}
			}
			l += 1 + sov(uint64(l))
			mapEntrySize := 1 + len(k) + sov(uint64(len(k))) + l
			n += mapEntrySize + 1 + sov(uint64(mapEntrySize))
		}
	}
	n += len(m.unknownFields)
	return n
}

func (m *ReprocessDeployment) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DeploymentIds) > 0 {
		for _, s := range m.DeploymentIds {
			l = len(s)
			n += 1 + l + sov(uint64(l))
		}
	}
	n += len(m.unknownFields)
	return n
}

func (m *InvalidateImageCache_ImageKey) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ImageId)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	l = len(m.ImageFullName)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *InvalidateImageCache) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ImageKeys) > 0 {
		for _, e := range m.ImageKeys {
			l = e.SizeVT()
			n += 1 + l + sov(uint64(l))
		}
	}
	n += len(m.unknownFields)
	return n
}

func (m *MsgFromSensor) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFromSensor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFromSensor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Msg.(*MsgFromSensor_Event); ok {
				if err := oneof.Event.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &SensorEvent{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Msg = &MsgFromSensor_Event{Event: v}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkFlowUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Msg.(*MsgFromSensor_NetworkFlowUpdate); ok {
				if err := oneof.NetworkFlowUpdate.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &NetworkFlowUpdate{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Msg = &MsgFromSensor_NetworkFlowUpdate{NetworkFlowUpdate: v}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScrapeUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Msg.(*MsgFromSensor_ScrapeUpdate); ok {
				if err := oneof.ScrapeUpdate.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &ScrapeUpdate{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Msg = &MsgFromSensor_ScrapeUpdate{ScrapeUpdate: v}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkPoliciesResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Msg.(*MsgFromSensor_NetworkPoliciesResponse); ok {
				if err := oneof.NetworkPoliciesResponse.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &NetworkPoliciesResponse{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Msg = &MsgFromSensor_NetworkPoliciesResponse{NetworkPoliciesResponse: v}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterStatusUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Msg.(*MsgFromSensor_ClusterStatusUpdate); ok {
				if err := oneof.ClusterStatusUpdate.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &ClusterStatusUpdate{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Msg = &MsgFromSensor_ClusterStatusUpdate{ClusterStatusUpdate: v}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelemetryDataResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Msg.(*MsgFromSensor_TelemetryDataResponse); ok {
				if err := oneof.TelemetryDataResponse.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &PullTelemetryDataResponse{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Msg = &MsgFromSensor_TelemetryDataResponse{TelemetryDataResponse: v}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DedupeKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DedupeKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterHealthInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Msg.(*MsgFromSensor_ClusterHealthInfo); ok {
				if err := oneof.ClusterHealthInfo.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &RawClusterHealthInfo{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Msg = &MsgFromSensor_ClusterHealthInfo{ClusterHealthInfo: v}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hello", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Msg.(*MsgFromSensor_Hello); ok {
				if err := oneof.Hello.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &SensorHello{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Msg = &MsgFromSensor_Hello{Hello: v}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditLogStatusInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Msg.(*MsgFromSensor_AuditLogStatusInfo); ok {
				if err := oneof.AuditLogStatusInfo.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &AuditLogStatusInfo{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Msg = &MsgFromSensor_AuditLogStatusInfo{AuditLogStatusInfo: v}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueLocalScannerCertsRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Msg.(*MsgFromSensor_IssueLocalScannerCertsRequest); ok {
				if err := oneof.IssueLocalScannerCertsRequest.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &IssueLocalScannerCertsRequest{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Msg = &MsgFromSensor_IssueLocalScannerCertsRequest{IssueLocalScannerCertsRequest: v}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterMetrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Msg.(*MsgFromSensor_ClusterMetrics); ok {
				if err := oneof.ClusterMetrics.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &ClusterMetrics{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Msg = &MsgFromSensor_ClusterMetrics{ClusterMetrics: v}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessListeningOnPortUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Msg.(*MsgFromSensor_ProcessListeningOnPortUpdate); ok {
				if err := oneof.ProcessListeningOnPortUpdate.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &ProcessListeningOnPortsUpdate{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Msg = &MsgFromSensor_ProcessListeningOnPortUpdate{ProcessListeningOnPortUpdate: v}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReassessPolicies) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReassessPolicies: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReassessPolicies: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReprocessDeployments) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReprocessDeployments: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReprocessDeployments: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgToSensor) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgToSensor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgToSensor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enforcement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Msg.(*MsgToSensor_Enforcement); ok {
				if err := oneof.Enforcement.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &SensorEnforcement{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Msg = &MsgToSensor_Enforcement{Enforcement: v}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScrapeCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Msg.(*MsgToSensor_ScrapeCommand); ok {
				if err := oneof.ScrapeCommand.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &ScrapeCommand{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Msg = &MsgToSensor_ScrapeCommand{ScrapeCommand: v}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkPoliciesCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Msg.(*MsgToSensor_NetworkPoliciesCommand); ok {
				if err := oneof.NetworkPoliciesCommand.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &NetworkPoliciesCommand{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Msg = &MsgToSensor_NetworkPoliciesCommand{NetworkPoliciesCommand: v}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Msg.(*MsgToSensor_ClusterConfig); ok {
				if err := oneof.ClusterConfig.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &ClusterConfig{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Msg = &MsgToSensor_ClusterConfig{ClusterConfig: v}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SensorUpgradeTrigger", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Msg.(*MsgToSensor_SensorUpgradeTrigger); ok {
				if err := oneof.SensorUpgradeTrigger.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &SensorUpgradeTrigger{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Msg = &MsgToSensor_SensorUpgradeTrigger{SensorUpgradeTrigger: v}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelemetryDataRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Msg.(*MsgToSensor_TelemetryDataRequest); ok {
				if err := oneof.TelemetryDataRequest.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &PullTelemetryDataRequest{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Msg = &MsgToSensor_TelemetryDataRequest{TelemetryDataRequest: v}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicySync", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Msg.(*MsgToSensor_PolicySync); ok {
				if err := oneof.PolicySync.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &PolicySync{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Msg = &MsgToSensor_PolicySync{PolicySync: v}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReassessPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Msg.(*MsgToSensor_ReassessPolicies); ok {
				if err := oneof.ReassessPolicies.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &ReassessPolicies{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Msg = &MsgToSensor_ReassessPolicies{ReassessPolicies: v}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaselineSync", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Msg.(*MsgToSensor_BaselineSync); ok {
				if err := oneof.BaselineSync.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &BaselineSync{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Msg = &MsgToSensor_BaselineSync{BaselineSync: v}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelPullTelemetryDataRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Msg.(*MsgToSensor_CancelPullTelemetryDataRequest); ok {
				if err := oneof.CancelPullTelemetryDataRequest.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &CancelPullTelemetryDataRequest{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Msg = &MsgToSensor_CancelPullTelemetryDataRequest{CancelPullTelemetryDataRequest: v}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushNetworkEntitiesRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Msg.(*MsgToSensor_PushNetworkEntitiesRequest); ok {
				if err := oneof.PushNetworkEntitiesRequest.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &PushNetworkEntitiesRequest{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Msg = &MsgToSensor_PushNetworkEntitiesRequest{PushNetworkEntitiesRequest: v}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hello", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Msg.(*MsgToSensor_Hello); ok {
				if err := oneof.Hello.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &CentralHello{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Msg = &MsgToSensor_Hello{Hello: v}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkBaselineSync", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Msg.(*MsgToSensor_NetworkBaselineSync); ok {
				if err := oneof.NetworkBaselineSync.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &NetworkBaselineSync{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Msg = &MsgToSensor_NetworkBaselineSync{NetworkBaselineSync: v}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditLogSync", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Msg.(*MsgToSensor_AuditLogSync); ok {
				if err := oneof.AuditLogSync.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &AuditLogSync{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Msg = &MsgToSensor_AuditLogSync{AuditLogSync: v}
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReprocessDeployment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Msg.(*MsgToSensor_ReprocessDeployment); ok {
				if err := oneof.ReprocessDeployment.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &ReprocessDeployment{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Msg = &MsgToSensor_ReprocessDeployment{ReprocessDeployment: v}
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidateImageCache", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Msg.(*MsgToSensor_InvalidateImageCache); ok {
				if err := oneof.InvalidateImageCache.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &InvalidateImageCache{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Msg = &MsgToSensor_InvalidateImageCache{InvalidateImageCache: v}
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueLocalScannerCertsResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Msg.(*MsgToSensor_IssueLocalScannerCertsResponse); ok {
				if err := oneof.IssueLocalScannerCertsResponse.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &IssueLocalScannerCertsResponse{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Msg = &MsgToSensor_IssueLocalScannerCertsResponse{IssueLocalScannerCertsResponse: v}
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedImage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Msg.(*MsgToSensor_UpdatedImage); ok {
				if unmarshal, ok := interface{}(oneof.UpdatedImage).(interface {
					UnmarshalVT([]byte) error
				}); ok {
					if err := unmarshal.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
						return err
					}
				} else {
					if err := proto.Unmarshal(dAtA[iNdEx:postIndex], oneof.UpdatedImage); err != nil {
						return err
					}
				}
			} else {
				v := &storage.Image{}
				if unmarshal, ok := interface{}(v).(interface {
					UnmarshalVT([]byte) error
				}); ok {
					if err := unmarshal.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
						return err
					}
				} else {
					if err := proto.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
						return err
					}
				}
				m.Msg = &MsgToSensor_UpdatedImage{UpdatedImage: v}
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReprocessDeployments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Msg.(*MsgToSensor_ReprocessDeployments); ok {
				if err := oneof.ReprocessDeployments.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &ReprocessDeployments{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Msg = &MsgToSensor_ReprocessDeployments{ReprocessDeployments: v}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuditLogSync) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuditLogSync: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuditLogSync: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeAuditLogFileStates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeAuditLogFileStates == nil {
				m.NodeAuditLogFileStates = make(map[string]*storage.AuditLogFileState)
			}
			var mapkey string
			var mapvalue *storage.AuditLogFileState
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflow
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflow
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLength
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLength
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflow
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLength
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLength
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &storage.AuditLogFileState{}
					if unmarshal, ok := interface{}(mapvalue).(interface {
						UnmarshalVT([]byte) error
					}); ok {
						if err := unmarshal.UnmarshalVT(dAtA[iNdEx:postmsgIndex]); err != nil {
							return err
						}
					} else {
						if err := proto.Unmarshal(dAtA[iNdEx:postmsgIndex], mapvalue); err != nil {
							return err
						}
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skip(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLength
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.NodeAuditLogFileStates[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuditLogStatusInfo) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuditLogStatusInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuditLogStatusInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeAuditLogFileStates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeAuditLogFileStates == nil {
				m.NodeAuditLogFileStates = make(map[string]*storage.AuditLogFileState)
			}
			var mapkey string
			var mapvalue *storage.AuditLogFileState
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflow
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflow
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLength
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLength
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflow
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLength
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLength
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &storage.AuditLogFileState{}
					if unmarshal, ok := interface{}(mapvalue).(interface {
						UnmarshalVT([]byte) error
					}); ok {
						if err := unmarshal.UnmarshalVT(dAtA[iNdEx:postmsgIndex]); err != nil {
							return err
						}
					} else {
						if err := proto.Unmarshal(dAtA[iNdEx:postmsgIndex], mapvalue); err != nil {
							return err
						}
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skip(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLength
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.NodeAuditLogFileStates[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReprocessDeployment) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReprocessDeployment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReprocessDeployment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeploymentIds = append(m.DeploymentIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvalidateImageCache_ImageKey) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvalidateImageCache_ImageKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvalidateImageCache_ImageKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageFullName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageFullName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvalidateImageCache) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvalidateImageCache: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvalidateImageCache: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageKeys = append(m.ImageKeys, &InvalidateImageCache_ImageKey{})
			if err := m.ImageKeys[len(m.ImageKeys)-1].UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
