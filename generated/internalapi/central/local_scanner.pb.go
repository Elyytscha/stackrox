// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: internalapi/central/local_scanner.proto

package central

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/stackrox/rox/generated/storage"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LocalScannerCertificates struct {
	CaPem                []byte   `protobuf:"bytes,1,opt,name=ca_pem,json=caPem,proto3" json:"ca_pem,omitempty"`
	CertPem              []byte   `protobuf:"bytes,2,opt,name=cert_pem,json=certPem,proto3" json:"cert_pem,omitempty"`
	KeyPem               []byte   `protobuf:"bytes,3,opt,name=key_pem,json=keyPem,proto3" json:"key_pem,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LocalScannerCertificates) Reset()         { *m = LocalScannerCertificates{} }
func (m *LocalScannerCertificates) String() string { return proto.CompactTextString(m) }
func (*LocalScannerCertificates) ProtoMessage()    {}
func (*LocalScannerCertificates) Descriptor() ([]byte, []int) {
	return fileDescriptor_856923c76f63cf0a, []int{0}
}
func (m *LocalScannerCertificates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocalScannerCertificates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LocalScannerCertificates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LocalScannerCertificates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalScannerCertificates.Merge(m, src)
}
func (m *LocalScannerCertificates) XXX_Size() int {
	return m.Size()
}
func (m *LocalScannerCertificates) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalScannerCertificates.DiscardUnknown(m)
}

var xxx_messageInfo_LocalScannerCertificates proto.InternalMessageInfo

func (m *LocalScannerCertificates) GetCaPem() []byte {
	if m != nil {
		return m.CaPem
	}
	return nil
}

func (m *LocalScannerCertificates) GetCertPem() []byte {
	if m != nil {
		return m.CertPem
	}
	return nil
}

func (m *LocalScannerCertificates) GetKeyPem() []byte {
	if m != nil {
		return m.KeyPem
	}
	return nil
}

func (m *LocalScannerCertificates) MessageClone() proto.Message {
	return m.Clone()
}
func (m *LocalScannerCertificates) Clone() *LocalScannerCertificates {
	if m == nil {
		return nil
	}
	cloned := new(LocalScannerCertificates)
	*cloned = *m

	if m.CaPem != nil {
		cloned.CaPem = make([]byte, len(m.CaPem))
		copy(cloned.CaPem, m.CaPem)
	}
	if m.CertPem != nil {
		cloned.CertPem = make([]byte, len(m.CertPem))
		copy(cloned.CertPem, m.CertPem)
	}
	if m.KeyPem != nil {
		cloned.KeyPem = make([]byte, len(m.KeyPem))
		copy(cloned.KeyPem, m.KeyPem)
	}
	return cloned
}

type LocalScannerCertificateSet struct {
	ScannerCerts         *LocalScannerCertificates `protobuf:"bytes,1,opt,name=scanner_certs,json=scannerCerts,proto3" json:"scanner_certs,omitempty"`
	ScannerDbCerts       *LocalScannerCertificates `protobuf:"bytes,2,opt,name=scanner_db_certs,json=scannerDbCerts,proto3" json:"scanner_db_certs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *LocalScannerCertificateSet) Reset()         { *m = LocalScannerCertificateSet{} }
func (m *LocalScannerCertificateSet) String() string { return proto.CompactTextString(m) }
func (*LocalScannerCertificateSet) ProtoMessage()    {}
func (*LocalScannerCertificateSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_856923c76f63cf0a, []int{1}
}
func (m *LocalScannerCertificateSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocalScannerCertificateSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LocalScannerCertificateSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LocalScannerCertificateSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalScannerCertificateSet.Merge(m, src)
}
func (m *LocalScannerCertificateSet) XXX_Size() int {
	return m.Size()
}
func (m *LocalScannerCertificateSet) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalScannerCertificateSet.DiscardUnknown(m)
}

var xxx_messageInfo_LocalScannerCertificateSet proto.InternalMessageInfo

func (m *LocalScannerCertificateSet) GetScannerCerts() *LocalScannerCertificates {
	if m != nil {
		return m.ScannerCerts
	}
	return nil
}

func (m *LocalScannerCertificateSet) GetScannerDbCerts() *LocalScannerCertificates {
	if m != nil {
		return m.ScannerDbCerts
	}
	return nil
}

func (m *LocalScannerCertificateSet) MessageClone() proto.Message {
	return m.Clone()
}
func (m *LocalScannerCertificateSet) Clone() *LocalScannerCertificateSet {
	if m == nil {
		return nil
	}
	cloned := new(LocalScannerCertificateSet)
	*cloned = *m

	cloned.ScannerCerts = m.ScannerCerts.Clone()
	cloned.ScannerDbCerts = m.ScannerDbCerts.Clone()
	return cloned
}

type LocalScannerCertsIssueError struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LocalScannerCertsIssueError) Reset()         { *m = LocalScannerCertsIssueError{} }
func (m *LocalScannerCertsIssueError) String() string { return proto.CompactTextString(m) }
func (*LocalScannerCertsIssueError) ProtoMessage()    {}
func (*LocalScannerCertsIssueError) Descriptor() ([]byte, []int) {
	return fileDescriptor_856923c76f63cf0a, []int{2}
}
func (m *LocalScannerCertsIssueError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocalScannerCertsIssueError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LocalScannerCertsIssueError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LocalScannerCertsIssueError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalScannerCertsIssueError.Merge(m, src)
}
func (m *LocalScannerCertsIssueError) XXX_Size() int {
	return m.Size()
}
func (m *LocalScannerCertsIssueError) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalScannerCertsIssueError.DiscardUnknown(m)
}

var xxx_messageInfo_LocalScannerCertsIssueError proto.InternalMessageInfo

func (m *LocalScannerCertsIssueError) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *LocalScannerCertsIssueError) MessageClone() proto.Message {
	return m.Clone()
}
func (m *LocalScannerCertsIssueError) Clone() *LocalScannerCertsIssueError {
	if m == nil {
		return nil
	}
	cloned := new(LocalScannerCertsIssueError)
	*cloned = *m

	return cloned
}

type IssueLocalScannerCertsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IssueLocalScannerCertsRequest) Reset()         { *m = IssueLocalScannerCertsRequest{} }
func (m *IssueLocalScannerCertsRequest) String() string { return proto.CompactTextString(m) }
func (*IssueLocalScannerCertsRequest) ProtoMessage()    {}
func (*IssueLocalScannerCertsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_856923c76f63cf0a, []int{3}
}
func (m *IssueLocalScannerCertsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IssueLocalScannerCertsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IssueLocalScannerCertsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IssueLocalScannerCertsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IssueLocalScannerCertsRequest.Merge(m, src)
}
func (m *IssueLocalScannerCertsRequest) XXX_Size() int {
	return m.Size()
}
func (m *IssueLocalScannerCertsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IssueLocalScannerCertsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IssueLocalScannerCertsRequest proto.InternalMessageInfo

func (m *IssueLocalScannerCertsRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *IssueLocalScannerCertsRequest) Clone() *IssueLocalScannerCertsRequest {
	if m == nil {
		return nil
	}
	cloned := new(IssueLocalScannerCertsRequest)
	*cloned = *m

	return cloned
}

type IssueLocalScannerCertsResponse struct {
	// Types that are valid to be assigned to Response:
	//	*IssueLocalScannerCertsResponse_Certificates
	//	*IssueLocalScannerCertsResponse_Error
	Response             isIssueLocalScannerCertsResponse_Response `protobuf_oneof:"response"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *IssueLocalScannerCertsResponse) Reset()         { *m = IssueLocalScannerCertsResponse{} }
func (m *IssueLocalScannerCertsResponse) String() string { return proto.CompactTextString(m) }
func (*IssueLocalScannerCertsResponse) ProtoMessage()    {}
func (*IssueLocalScannerCertsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_856923c76f63cf0a, []int{4}
}
func (m *IssueLocalScannerCertsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IssueLocalScannerCertsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IssueLocalScannerCertsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IssueLocalScannerCertsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IssueLocalScannerCertsResponse.Merge(m, src)
}
func (m *IssueLocalScannerCertsResponse) XXX_Size() int {
	return m.Size()
}
func (m *IssueLocalScannerCertsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IssueLocalScannerCertsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IssueLocalScannerCertsResponse proto.InternalMessageInfo

type isIssueLocalScannerCertsResponse_Response interface {
	isIssueLocalScannerCertsResponse_Response()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isIssueLocalScannerCertsResponse_Response
}

type IssueLocalScannerCertsResponse_Certificates struct {
	Certificates *LocalScannerCertificateSet `protobuf:"bytes,1,opt,name=certificates,proto3,oneof" json:"certificates,omitempty"`
}
type IssueLocalScannerCertsResponse_Error struct {
	Error *LocalScannerCertsIssueError `protobuf:"bytes,2,opt,name=error,proto3,oneof" json:"error,omitempty"`
}

func (*IssueLocalScannerCertsResponse_Certificates) isIssueLocalScannerCertsResponse_Response() {}
func (m *IssueLocalScannerCertsResponse_Certificates) Clone() isIssueLocalScannerCertsResponse_Response {
	if m == nil {
		return nil
	}
	cloned := new(IssueLocalScannerCertsResponse_Certificates)
	*cloned = *m

	cloned.Certificates = m.Certificates.Clone()
	return cloned
}
func (*IssueLocalScannerCertsResponse_Error) isIssueLocalScannerCertsResponse_Response() {}
func (m *IssueLocalScannerCertsResponse_Error) Clone() isIssueLocalScannerCertsResponse_Response {
	if m == nil {
		return nil
	}
	cloned := new(IssueLocalScannerCertsResponse_Error)
	*cloned = *m

	cloned.Error = m.Error.Clone()
	return cloned
}

func (m *IssueLocalScannerCertsResponse) GetResponse() isIssueLocalScannerCertsResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *IssueLocalScannerCertsResponse) GetCertificates() *LocalScannerCertificateSet {
	if x, ok := m.GetResponse().(*IssueLocalScannerCertsResponse_Certificates); ok {
		return x.Certificates
	}
	return nil
}

func (m *IssueLocalScannerCertsResponse) GetError() *LocalScannerCertsIssueError {
	if x, ok := m.GetResponse().(*IssueLocalScannerCertsResponse_Error); ok {
		return x.Error
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*IssueLocalScannerCertsResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*IssueLocalScannerCertsResponse_Certificates)(nil),
		(*IssueLocalScannerCertsResponse_Error)(nil),
	}
}

func (m *IssueLocalScannerCertsResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *IssueLocalScannerCertsResponse) Clone() *IssueLocalScannerCertsResponse {
	if m == nil {
		return nil
	}
	cloned := new(IssueLocalScannerCertsResponse)
	*cloned = *m

	if m.Response != nil {
		cloned.Response = m.Response.Clone()
	}
	return cloned
}

func init() {
	proto.RegisterType((*LocalScannerCertificates)(nil), "central.LocalScannerCertificates")
	proto.RegisterType((*LocalScannerCertificateSet)(nil), "central.LocalScannerCertificateSet")
	proto.RegisterType((*LocalScannerCertsIssueError)(nil), "central.LocalScannerCertsIssueError")
	proto.RegisterType((*IssueLocalScannerCertsRequest)(nil), "central.IssueLocalScannerCertsRequest")
	proto.RegisterType((*IssueLocalScannerCertsResponse)(nil), "central.IssueLocalScannerCertsResponse")
}

func init() {
	proto.RegisterFile("internalapi/central/local_scanner.proto", fileDescriptor_856923c76f63cf0a)
}

var fileDescriptor_856923c76f63cf0a = []byte{
	// 359 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x4b, 0x4e, 0x32, 0x41,
	0x10, 0x66, 0xf8, 0x03, 0xc3, 0x5f, 0xa2, 0x31, 0x9d, 0x18, 0x01, 0xe3, 0xa8, 0xa3, 0x89, 0xae,
	0x20, 0xd1, 0x85, 0x1b, 0x57, 0xf8, 0x08, 0x44, 0x17, 0x64, 0xd8, 0xb9, 0x99, 0x34, 0x4d, 0x49,
	0x26, 0xcc, 0xcb, 0xae, 0xc6, 0x84, 0x9b, 0x78, 0x0d, 0x17, 0xde, 0xc1, 0xa5, 0x47, 0x30, 0x78,
	0x11, 0x33, 0x4d, 0x13, 0x51, 0x33, 0xd1, 0x65, 0xf7, 0xf7, 0xa8, 0xef, 0xab, 0x14, 0x1c, 0x06,
	0xb1, 0x42, 0x19, 0xf3, 0x90, 0xa7, 0x41, 0x4b, 0x60, 0xac, 0x24, 0x0f, 0x5b, 0x61, 0x22, 0x78,
	0xe8, 0x93, 0xe0, 0x71, 0x8c, 0xb2, 0x99, 0xca, 0x44, 0x25, 0xcc, 0x36, 0x60, 0xc3, 0x21, 0x95,
	0x48, 0x3e, 0xc2, 0x16, 0xa1, 0x7c, 0x08, 0x04, 0xfa, 0xc1, 0x10, 0x63, 0x15, 0xa8, 0xe9, 0x9c,
	0xe8, 0x22, 0xd4, 0x6e, 0x32, 0x7d, 0x7f, 0x2e, 0x3f, 0x47, 0xa9, 0x82, 0xbb, 0x40, 0x70, 0x85,
	0xc4, 0x36, 0xa0, 0x2c, 0xb8, 0x9f, 0x62, 0x54, 0xb3, 0x76, 0xad, 0xa3, 0xaa, 0x57, 0x12, 0xbc,
	0x87, 0x11, 0xab, 0x43, 0x45, 0xa0, 0x54, 0x1a, 0x28, 0x6a, 0xc0, 0xce, 0xde, 0x19, 0xb4, 0x09,
	0xf6, 0x18, 0xa7, 0x1a, 0xf9, 0xa7, 0x91, 0xf2, 0x18, 0xa7, 0x3d, 0x8c, 0xdc, 0x27, 0x0b, 0x1a,
	0x39, 0x73, 0xfa, 0xa8, 0xd8, 0x15, 0xac, 0x9a, 0xfc, 0x7e, 0x66, 0x45, 0x7a, 0xe0, 0xca, 0xf1,
	0x5e, 0xd3, 0xd4, 0x68, 0xe6, 0x65, 0xf4, 0xaa, 0xf4, 0xf9, 0x49, 0xec, 0x1a, 0xd6, 0x17, 0x3e,
	0xc3, 0x81, 0xb1, 0x2a, 0xfe, 0xd5, 0x6a, 0xcd, 0x48, 0x2f, 0x06, 0xda, 0xcc, 0x3d, 0x85, 0xad,
	0xef, 0x5c, 0xea, 0x12, 0x4d, 0xf0, 0x52, 0xca, 0x44, 0xb2, 0x1a, 0xd8, 0x11, 0x12, 0xf1, 0x11,
	0xea, 0xb4, 0xff, 0xbd, 0xc5, 0xd3, 0xdd, 0x81, 0x6d, 0xcd, 0xfb, 0xa1, 0xf6, 0xf0, 0x7e, 0x82,
	0xa4, 0xdc, 0x67, 0x0b, 0x9c, 0x3c, 0x06, 0xa5, 0x49, 0x4c, 0xc8, 0xba, 0x50, 0x15, 0x4b, 0xe1,
	0xcc, 0x42, 0xf6, 0x7f, 0x6b, 0xd1, 0x47, 0xd5, 0x29, 0x78, 0x5f, 0xa4, 0xec, 0x0c, 0x4a, 0x98,
	0x25, 0x36, 0x9b, 0x38, 0xc8, 0xf5, 0x58, 0x6a, 0xd7, 0x29, 0x78, 0x73, 0x51, 0x1b, 0xa0, 0x22,
	0x4d, 0xa8, 0x76, 0xfd, 0x65, 0xe6, 0x58, 0xaf, 0x33, 0xc7, 0x7a, 0x9b, 0x39, 0xd6, 0xe3, 0xbb,
	0x53, 0xb8, 0x5d, 0xdc, 0xd9, 0xa0, 0xac, 0xcf, 0xe9, 0xe4, 0x23, 0x00, 0x00, 0xff, 0xff, 0x94,
	0x88, 0x70, 0x56, 0xa2, 0x02, 0x00, 0x00,
}

func (m *LocalScannerCertificates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalScannerCertificates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocalScannerCertificates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.KeyPem) > 0 {
		i -= len(m.KeyPem)
		copy(dAtA[i:], m.KeyPem)
		i = encodeVarintLocalScanner(dAtA, i, uint64(len(m.KeyPem)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CertPem) > 0 {
		i -= len(m.CertPem)
		copy(dAtA[i:], m.CertPem)
		i = encodeVarintLocalScanner(dAtA, i, uint64(len(m.CertPem)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CaPem) > 0 {
		i -= len(m.CaPem)
		copy(dAtA[i:], m.CaPem)
		i = encodeVarintLocalScanner(dAtA, i, uint64(len(m.CaPem)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LocalScannerCertificateSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalScannerCertificateSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocalScannerCertificateSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ScannerDbCerts != nil {
		{
			size, err := m.ScannerDbCerts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLocalScanner(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ScannerCerts != nil {
		{
			size, err := m.ScannerCerts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLocalScanner(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LocalScannerCertsIssueError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalScannerCertsIssueError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocalScannerCertsIssueError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintLocalScanner(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IssueLocalScannerCertsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IssueLocalScannerCertsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IssueLocalScannerCertsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *IssueLocalScannerCertsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IssueLocalScannerCertsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IssueLocalScannerCertsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Response != nil {
		{
			size := m.Response.Size()
			i -= size
			if _, err := m.Response.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *IssueLocalScannerCertsResponse_Certificates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IssueLocalScannerCertsResponse_Certificates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Certificates != nil {
		{
			size, err := m.Certificates.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLocalScanner(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *IssueLocalScannerCertsResponse_Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IssueLocalScannerCertsResponse_Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLocalScanner(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func encodeVarintLocalScanner(dAtA []byte, offset int, v uint64) int {
	offset -= sovLocalScanner(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LocalScannerCertificates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CaPem)
	if l > 0 {
		n += 1 + l + sovLocalScanner(uint64(l))
	}
	l = len(m.CertPem)
	if l > 0 {
		n += 1 + l + sovLocalScanner(uint64(l))
	}
	l = len(m.KeyPem)
	if l > 0 {
		n += 1 + l + sovLocalScanner(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LocalScannerCertificateSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScannerCerts != nil {
		l = m.ScannerCerts.Size()
		n += 1 + l + sovLocalScanner(uint64(l))
	}
	if m.ScannerDbCerts != nil {
		l = m.ScannerDbCerts.Size()
		n += 1 + l + sovLocalScanner(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LocalScannerCertsIssueError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovLocalScanner(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IssueLocalScannerCertsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IssueLocalScannerCertsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		n += m.Response.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IssueLocalScannerCertsResponse_Certificates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Certificates != nil {
		l = m.Certificates.Size()
		n += 1 + l + sovLocalScanner(uint64(l))
	}
	return n
}
func (m *IssueLocalScannerCertsResponse_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovLocalScanner(uint64(l))
	}
	return n
}

func sovLocalScanner(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLocalScanner(x uint64) (n int) {
	return sovLocalScanner(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LocalScannerCertificates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocalScanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalScannerCertificates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalScannerCertificates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaPem", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalScanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLocalScanner
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLocalScanner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaPem = append(m.CaPem[:0], dAtA[iNdEx:postIndex]...)
			if m.CaPem == nil {
				m.CaPem = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertPem", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalScanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLocalScanner
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLocalScanner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertPem = append(m.CertPem[:0], dAtA[iNdEx:postIndex]...)
			if m.CertPem == nil {
				m.CertPem = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyPem", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalScanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLocalScanner
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLocalScanner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyPem = append(m.KeyPem[:0], dAtA[iNdEx:postIndex]...)
			if m.KeyPem == nil {
				m.KeyPem = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocalScanner(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocalScanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalScannerCertificateSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocalScanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalScannerCertificateSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalScannerCertificateSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScannerCerts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalScanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocalScanner
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocalScanner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScannerCerts == nil {
				m.ScannerCerts = &LocalScannerCertificates{}
			}
			if err := m.ScannerCerts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScannerDbCerts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalScanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocalScanner
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocalScanner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScannerDbCerts == nil {
				m.ScannerDbCerts = &LocalScannerCertificates{}
			}
			if err := m.ScannerDbCerts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocalScanner(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocalScanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalScannerCertsIssueError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocalScanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalScannerCertsIssueError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalScannerCertsIssueError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalScanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocalScanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocalScanner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocalScanner(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocalScanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IssueLocalScannerCertsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocalScanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IssueLocalScannerCertsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IssueLocalScannerCertsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLocalScanner(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocalScanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IssueLocalScannerCertsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocalScanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IssueLocalScannerCertsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IssueLocalScannerCertsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalScanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocalScanner
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocalScanner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LocalScannerCertificateSet{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &IssueLocalScannerCertsResponse_Certificates{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalScanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocalScanner
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocalScanner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LocalScannerCertsIssueError{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &IssueLocalScannerCertsResponse_Error{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocalScanner(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocalScanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLocalScanner(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLocalScanner
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLocalScanner
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLocalScanner
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLocalScanner
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLocalScanner
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLocalScanner
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLocalScanner        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLocalScanner          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLocalScanner = fmt.Errorf("proto: unexpected end of group")
)
