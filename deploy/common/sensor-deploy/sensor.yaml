apiVersion: apps/v1
kind: Deployment
metadata:
  name: sensor
  namespace: stackrox
  labels:
    app.kubernetes.io/name: stackrox
    app: sensor
    auto-upgrade.stackrox.io/component: "sensor"
  annotations:
    owner: stackrox
    email: support@stackrox.com
spec:
  replicas: 1
  minReadySeconds: 15
  selector:
    matchLabels:
      app: sensor
  strategy:
    type: Recreate
  template:
    metadata:
      namespace: stackrox
      labels:
        app: sensor
    spec:
      
      securityContext:
        runAsUser: 4000
        fsGroup: 4000
      
      imagePullSecrets:
        - name: stackrox
      serviceAccount: sensor
      containers:
      - image: docker.io/stackrox/main:3.0.39.x-168-gd1b367df0d
        name: sensor
        readinessProbe:
          httpGet:
            scheme: HTTPS
            path: /admissioncontroller
            port: 9443
        ports:
          - containerPort: 8443
            name: api
          - containerPort: 9443
            name: webhook
        command:
          - kubernetes-sensor
        resources:
          requests:
            memory: "500Mi"
            cpu: "500m"
          limits:
            memory: "1000Mi"
            cpu: "1000m"
        securityContext:
          runAsNonRoot: true
          readOnlyRootFilesystem: true
        env:
        - name: ROX_ANALYST_NOTES_UI
          value: "false"
        - name: ROX_CONFIG_MGMT_UI
          value: "true"
        - name: ROX_DACKBOX
          value: "false"
        - name: ROX_DIAGNOSTIC_BUNDLE
          value: "true"
        - name: ROX_EVENT_TIMELINE_UI
          value: "false"
        - name: ROX_NIST_800_53
          value: "false"
        - name: ROX_REFRESH_TOKENS
          value: "true"
        - name: ROX_REQUIRED_IMAGE_LABEL_POLICY
          value: "true"
        - name: ROX_SENSOR_DETECTION
          value: "true"
        - name: ROX_TELEMETRY
          value: "true"
        - name: ROX_VULN_MGMT_UI
          value: "false"
        
        - name: ROX_CENTRAL_ENDPOINT
          value: central.stackrox:443
        - name: ROX_ADVERTISED_ENDPOINT
          value: sensor.stackrox:443
          
        volumeMounts:
        - name: varlog
          mountPath: /var/log/stackrox/
        - name: sensor-etc-ssl-volume
          mountPath: /etc/ssl/
        - name: sensor-etc-pki-volume
          mountPath: /etc/pki/ca-trust/
        - name: certs
          mountPath: /run/secrets/stackrox.io/certs/
          readOnly: true
        - name: additional-ca-volume
          mountPath: /usr/local/share/ca-certificates/
          readOnly: true
      
      volumes:
      - name: certs
        secret:
          secretName: sensor-tls
          items:
          - key: sensor-cert.pem
            path: cert.pem
          - key: sensor-key.pem
            path: key.pem
          - key: ca.pem
            path: ca.pem
      - name: sensor-etc-ssl-volume
        emptyDir: {}
      - name: sensor-etc-pki-volume
        emptyDir: {}
      - name: additional-ca-volume
        secret:
          secretName: additional-ca-sensor
          optional: true
      - name: varlog
        emptyDir: {}
      
---
apiVersion: v1
kind: Service
metadata:
  name: sensor
  namespace: stackrox
  labels:
    app.kubernetes.io/name: stackrox
    auto-upgrade.stackrox.io/component: "sensor"
spec:
  ports:
  - name: https
    port: 443
    targetPort: api
    protocol: TCP
  selector:
    app: sensor
  type: ClusterIP
  sessionAffinity: None
---
apiVersion: v1
kind: Service
metadata:
  name: sensor-webhook
  namespace: stackrox
  labels:
    app.kubernetes.io/name: stackrox
    auto-upgrade.stackrox.io/component: "sensor"
spec:
  ports:
  - name: https
    port: 443
    targetPort: webhook
    protocol: TCP
  selector:
    app: sensor
  type: ClusterIP
  sessionAffinity: None
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app.kubernetes.io/name: stackrox
    service: collector
    app: collector
    auto-upgrade.stackrox.io/component: "sensor"
  name: collector
  namespace: stackrox
spec:
  selector:
    matchLabels:
      service: collector
  template:
    metadata:
      labels:
        service: collector
        app: collector
      namespace: stackrox
    spec:
      
      tolerations:
      - operator: "Exists"
      serviceAccount: collector
      containers:

      - command:
        - stackrox/compliance
        env:
        - name: ROX_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: ROX_ADVERTISED_ENDPOINT
          value: sensor.stackrox:443
        image: docker.io/stackrox/main:3.0.39.x-168-gd1b367df0d
        imagePullPolicy: IfNotPresent
        name: compliance
        resources:
          limits:
            cpu: "1"
            memory: 2Gi
          requests:
            cpu: 10m
            memory: 10Mi
        securityContext:
          runAsUser: 0
          readOnlyRootFilesystem: true
          seLinuxOptions:
            type: "container_runtime_t"
        volumeMounts:
        - mountPath: /etc/ssl/
          name: etc-ssl
        - mountPath: /etc/pki/ca-trust/
          name: etc-pki-volume
        - mountPath: /host/etc
          name: etc-ro
          readOnly: true
        - mountPath: /host/lib
          name: lib
          readOnly: true
        - mountPath: /host/usr/bin
          name: usr-bin
          readOnly: true
        - mountPath: /host/usr/sbin
          name: usr-sbin
          readOnly: true
        - mountPath: /host/usr/lib
          name: usr-lib
          readOnly: true
        - mountPath: /host/var/lib
          name: var-lib
          readOnly: true
        - mountPath: /host/var/log/audit
          name: var-log-audit
          readOnly: true
        - mountPath: /host/run
          name: run
        - mountPath: /host/proc
          name: proc-ro
          readOnly: true
        - mountPath: /host/var/run/docker.sock
          name: var-run-docker-sock
        - mountPath: /run/secrets/stackrox.io/certs/
          name: certs
          readOnly: true
      
      volumes:
      - hostPath:
          path: /var/run/docker.sock
        name: var-run-docker-sock
      - hostPath:
          path: /proc
        name: proc-ro
      - emptyDir:
          medium: Memory
        name: tmpfs-module
      - hostPath: 
          path: /etc
        name: etc-ro
      - hostPath: 
          path: /usr/lib
        name: usr-lib-ro
      - hostPath: 
          path: /sys/
        name: sys-ro
      - hostPath:
          path: /dev
        name: dev-ro
      - name: certs
        secret:
          secretName: collector-tls
          items:
          - key: collector-cert.pem
            path: cert.pem
          - key: collector-key.pem
            path: key.pem
          - key: ca.pem
            path: ca.pem
      - hostPath:
          path: /lib
        name: lib
      - hostPath:
          path: /usr/bin
        name: usr-bin
      - hostPath:
          path: /usr/lib
        name: usr-lib
      - hostPath:
          path: /usr/sbin
        name: usr-sbin
      - hostPath:
          path: /var/lib
        name: var-lib
      - hostPath:
          path: /var/log/audit
        name: var-log-audit
      - hostPath:
          path: /run
        name: run
      - name: etc-ssl
        emptyDir: {}
      - name: etc-pki-volume
        emptyDir: {}
      
