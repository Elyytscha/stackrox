syntax = "proto3";

option go_package = "auxpb";
option java_package = "io.stackrox.proto.auxpb";

package auxpb;

message QuerySortOption {
  string field    = 1;
  bool   reversed = 2;
  oneof search_after_opt {
    // search_after is alternative to offset for pagination.
    // Each value in search_after corresponds to a field. Only results following a record specified by a combination
    // of field+search_after values in specified sorting order will be returned.
    string search_after = 3;
  }
}

message QueryPagination {
  int32 limit = 1;
  int32 offset = 2;
  repeated QuerySortOption sort_options = 3;
}

message BooleanQuery {
  ConjunctionQuery must     = 1;
  DisjunctionQuery must_not = 2;
}

message Query {
  oneof query {
    ConjunctionQuery conjunction   = 1;
    DisjunctionQuery disjunction   = 2;
    BaseQuery        base_query    = 3;
    BooleanQuery     boolean_query = 6;
  }
  QueryPagination pagination       = 4;
  reserved 5; // previously SearchOptions
}

// StringQuery represents a query that matches documents that contain the
// query text in _any_ of their fields.
message StringQuery {
  string query = 1;
}

// MatchFieldQuery represents a query that matches documents containing the
// query text in the provided field.
message MatchFieldQuery {
  string field = 1;
  string value = 2;
  bool highlight = 3;
}

// MatchLinkedFieldsQuery represents a query that matches documents which have matches for all the provided
// field values, in corresponding locations.
message MatchLinkedFieldsQuery {
  repeated MatchFieldQuery query = 1;
}

// DocIDQuery represents a query that matches documents with the provided ids.
message DocIDQuery {
  repeated string ids = 1;
}

message BaseQuery {
  oneof query {
    MatchFieldQuery match_field_query = 2;
    MatchLinkedFieldsQuery match_linked_fields_query = 3;
    DocIDQuery doc_id_query = 4;
    MatchNoneQuery match_none_query = 5;
  }
}

message ConjunctionQuery {
  repeated Query queries = 1;
}

message DisjunctionQuery {
  repeated Query queries = 1;
}

message MatchNoneQuery {
}
