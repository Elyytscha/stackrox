syntax = "proto3";

option go_package = "central";

import "api/v1/network_policy_service.proto";
import "internalapi/compliance/compliance_data.proto";
import "storage/cluster.proto";
import "storage/deployment.proto";
import "storage/namespace_metadata.proto";
import "storage/network_policy.proto";
import "storage/node.proto";
import "storage/secret.proto";
import "storage/policy.proto";
import "storage/process_indicator.proto";
import "storage/image_integration.proto";


package central;

enum ResourceAction {
    UNSET_ACTION_RESOURCE   = 0;
    CREATE_RESOURCE         = 1;
    REMOVE_RESOURCE         = 2;
    UPDATE_RESOURCE         = 3;
}

// Event updates from sensor to central.
////////////////////////////////////////

message SensorEvent {
    // These fields may be duplicated in the individual events, but avoid the need to branch all the time
    string         id                           = 1;
    ResourceAction action                       = 2;
    string         cluster_id                   = 3;

    message ResourcesSynced {}

    oneof resource {
        storage.NetworkPolicy     network_policy    = 4;
        storage.Deployment        deployment        = 5;
        storage.NamespaceMetadata namespace         = 6;
        storage.Secret            secret            = 7;
        storage.Node              node              = 9;

        // Indicators
        storage.ProcessIndicator process_indicator = 8;
        storage.ProviderMetadata provider_metadata = 10;
        ResourcesSynced          synced            = 11;
        storage.OrchestratorMetadata orchestrator_metadata = 12;
        storage.ImageIntegration     image_integration = 13;
    }
}

// Central enforcement through sensor.
//////////////////////////////////////

message SensorEnforcement {
    storage.EnforcementAction enforcement = 1;

    oneof resource {
        DeploymentEnforcement        deployment         = 2;
        ContainerInstanceEnforcement container_instance = 3;
    }
}

message DeploymentEnforcement {
    string deployment_id   = 1;
    string deployment_name = 2;
    string deployment_type = 3;
    string namespace       = 4;
    string alert_id        = 5;
}

message ContainerInstanceEnforcement {
    string container_instance_id = 1;
    string pod_id                = 2;
}

// Scrape commands sent to sensor.
//////////////////////////////////

message ScrapeCommand {
    string scrape_id = 1;

    oneof command {
        StartScrape start_scrape = 2;
        KillScrape  kill_scrape  = 3;
    }
}

message StartScrape {
    // Dictates the hosts we expect results from.
    repeated string hostnames = 1;
}

message KillScrape {}

// Scrape updates received from sensor.
////////////////////////////////////////

message ScrapeUpdate {
    string scrape_id = 1;

    oneof update {
        compliance.ComplianceReturn compliance_return = 2;
        ScrapeStarted scrape_started                  = 3;
        ScrapeKilled scrape_killed                    = 4;
    }
}

message ScrapeStarted {
    string error_message = 1;
}

message ScrapeKilled {
    string error_message = 1;
}

// Network policy application.
////////////////////////////////////////

message ApplyNetworkPoliciesCommand {
    string command_id = 1;

    v1.NetworkPolicyModification modification = 2;
}

message ApplyNetworkPoliciesResponse {
    string command_id = 1;

    message Success {
        v1.NetworkPolicyModification undo_modification = 1;
    }
    message Failure {
        string error_message = 1;
    }

    oneof response {
        Success success = 2;
        Failure failure = 3;
    }
}
