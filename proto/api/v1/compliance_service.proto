syntax = "proto3";

option go_package = "v1";

import weak "google/api/annotations.proto";
import "protobuf/gogoproto/gogo.proto";
import "storage/compliance.proto";
import "api/v1/search_service.proto";
import "api/v1/common.proto";
import "api/v1/empty.proto";

package v1;

message ComplianceAggregation {
    enum Scope {
        UNKNOWN    = 0;
        STANDARD   = 1;
        CLUSTER    = 2;
        CATEGORY   = 3;
        CONTROL    = 4;
        NAMESPACE  = 5;
        NODE       = 6;
        DEPLOYMENT = 7;
        CHECK      = 8;
    }

    // Next available tag: 3
    message AggregationKey {
        Scope scope = 1;
        string id = 2;
    }

    // Next available tag: 4
    message Request {
        repeated Scope group_by = 1;
        Scope unit = 2;

        RawQuery where = 3;
    }

    // Next available tag: 5
    message Result {
        repeated AggregationKey aggregation_keys = 1;
        Scope unit = 2;

        int32 num_passing = 3;
        int32 num_failing = 4;
    }

    // Next available tag: 5
    message Source {
        string cluster_id  = 1;
        string standard_id = 2;

        storage.ComplianceRunMetadata successful_run       = 3;
        repeated storage.ComplianceRunMetadata failed_runs = 4;
    }

    // Next available tag: 3
    message Response {
        repeated Result results = 1;
        repeated Source sources = 2;
    }
}

message ComplianceStandardMetadata {
    string id                     = 1 [(gogoproto.moretags) = "search:\"Standard Id,hidden\""];
    string name                   = 2 [(gogoproto.moretags) = "search:\"Standard,hidden\""];
    string description            = 3;
    int32  num_implemented_checks = 4;
}

message ComplianceControlGroup {
    string id                     = 1 [(gogoproto.moretags) = "search:\"Control Group Id\""];
    string standard_id            = 2 [(gogoproto.moretags) = "search:\"Standard Id\""];
    string name                   = 3 [(gogoproto.moretags) = "search:\"Control Group\""];
    string description            = 4;
    int32  num_implemented_checks = 5;
}

message ComplianceControl {
    string id          = 1 [(gogoproto.moretags) = "search:\"Control Id,hidden\""];
    string standard_id = 2 [(gogoproto.moretags) = "search:\"Standard Id,hidden\""];
    string group_id    = 3 [(gogoproto.moretags) = "search:\"Control Group Id,hidden\""];
    string name        = 4 [(gogoproto.moretags) = "search:\"Control\""];
    string description = 5;

    bool implemented           = 6;
    string interpretation_text = 7;
}

message ComplianceStandard {
    ComplianceStandardMetadata metadata    = 1 [(gogoproto.moretags) = "search:\"Control Id,hidden\""];
    repeated ComplianceControlGroup groups = 2 [(gogoproto.moretags) = "search:\"-\""];
    repeated ComplianceControl controls    = 3 [(gogoproto.moretags) = "search:\"-\""];
}

message GetComplianceStandardResponse {
    ComplianceStandard standard = 1;
}

message GetComplianceStandardsResponse {
    repeated ComplianceStandardMetadata standards = 1;
}

message ComplianceControlResultsResponse {
    repeated storage.ComplianceControlResult results = 1;
}

message GetComplianceRunResultsRequest {
    string cluster_id = 1;
    string standard_id = 2;
}

message GetComplianceRunResultsResponse {
    storage.ComplianceRunResults results = 1;
    repeated storage.ComplianceRunMetadata failed_runs = 2;
}

service ComplianceService {
    rpc GetStandards(Empty) returns (GetComplianceStandardsResponse) {
        option (google.api.http) = {
            get: "/v1/compliance/standards"
        };
    }

    rpc GetStandard(ResourceByID) returns (GetComplianceStandardResponse) {
        option (google.api.http) = {
            get: "/v1/compliance/standards/{id}"
        };
    }

    rpc GetComplianceControlResults(RawQuery) returns (ComplianceControlResultsResponse) {
        option (google.api.http) = {
            get: "/v1/compliance/results"
        };
    }

    rpc GetRunResults(GetComplianceRunResultsRequest) returns (GetComplianceRunResultsResponse) {
        option (google.api.http) = {
            get: "/v1/compliance/runresults"
        };
    }

    rpc GetAggregatedResults(ComplianceAggregation.Request) returns (ComplianceAggregation.Response) {
        option (google.api.http) = {
            get: "/v1/compliance/aggregatedresults"
        };
    }
}
