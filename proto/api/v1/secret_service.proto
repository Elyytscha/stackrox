syntax = "proto3";

option go_package = "v1";

import "google/api/annotations.proto";
import "api/v1/common.proto";
import "api/v1/search_service.proto";

package v1;

// We use a graph model of the data in the backend.
//
// A secret is an object that has its own scope-free defined data as well as many relations to other
// objects. To represent this we have a central object with the context free information (Secret), and
// separate objects that represent contextual relationships.
////////////////////////////////////////////////////////////

// Flat secret object.
// Any properties of an individual secret.
// (regardless of time, scope, or context)
//////////////////////////////////////////

// Next Tag: 3
message Secret {
    string id   = 1;
    string name = 2;
}

// Relationships with other objects.
// This is where scope specific values are stored.
// (per namespace, per cluster, per deployment, per container)
// Generally, you only should put data here if you want to be able to search for secrets
// by it.
// I.E. "all secrets used in cluster <cluster id>" means we need to store the cluster id
// in a relationship.
/////////////////////

// Secrets exist within a cluster.
// Next Tag: 3
message SecretClusterRelationship {
    // Id of the cluster the secret exists within.
    string id = 1;
    // Name of the same cluster.
    string name = 2;
}

// Secrets can be mounted in a path in a container.
// Next Tag: 3
message SecretContainerRelationship {
    // Id of the container the secret is mounted in.
    string id = 1;

    // Path is a container specific mounting directory.
    string path = 2;
}

// Secrets can be used by a deployment.
// Next Tag: 3
message SecretDeploymentRelationship {
    // Id of the deployment using the secret within a container.
    string id = 1;
    // Name of the deployment.
    string name = 2;
}

// Secrets can be used by a namespace.
// Next Tag: 2
message SecretNamespaceRelationship {
    // Namespace the secret is used in.
    string namespace = 1;
}

// The combined relationships that belong to the secret.
// Next Tag: 6
message SecretRelationship {
    // Secret id
    string id = 1;
    // Cluster id to relationship.
    SecretClusterRelationship cluster_relationship = 2;
    // Namespace to relationship.
    SecretNamespaceRelationship namespace_relationship = 3;
    // Container id to relationship.s
    repeated SecretContainerRelationship container_relationships = 4;
    // Deployment id to relationship.
    repeated SecretDeploymentRelationship deployment_relationships = 5;
}

// Combination of a secret and its relationships.
// Next Tag: 4
message SecretAndRelationship {
    Secret secret = 1;
    SecretRelationship relationship = 2;
}

// API specific objects.
////////////////////////

// A list of secrets (free of scoped information)
// Next Tag: 2
message SecretList {
    repeated Secret secrets = 1;
}

// A list of secrets with their relationships.
// Next Tag: 2
message SecretAndRelationshipList {
    repeated SecretAndRelationship secret_and_relationships = 1;
}

service SecretService {

    rpc GetSecret (ResourceByID) returns (SecretAndRelationship) {
        option (google.api.http) = {
            get: "/v1/secrets/{id}"
        };
    }

    rpc GetSecrets (RawQuery) returns (SecretAndRelationshipList) {
        option (google.api.http) = {
            get: "/v1/secrets"
        };
    }

}