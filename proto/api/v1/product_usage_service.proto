syntax = "proto3";

package v1;

import "api/v1/empty.proto";
import weak "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

option go_package = "v1";

// TimeRange allows for requesting data by a time range.
message TimeRange {
    google.protobuf.Timestamp from = 1;
    google.protobuf.Timestamp to   = 2;
}

// SecuredUnits are the values of the product usage metrics collected from
// secured clusters.
message SecuredUnits {
    int64 num_nodes                     = 1;
    int64 num_cpu_units                 = 2;
}

// CurrentProductUsageResponse holds the values of the currently observable
// product usage metrics.
message CurrentProductUsageResponse {
    SecuredUnits secured_units          = 1;
}

// MaxSecuredUnitsUsageResponse holds the maximum values of the secured nodes
// and CPU Units (as reported by Kubernetes) with the time at which these
// values were aggregated, with the aggregation period accuracy (1h).
message MaxSecuredUnitsUsageResponse {
    google.protobuf.Timestamp max_nodes_at     = 1;
    int64 max_nodes                            = 2;
    google.protobuf.Timestamp max_cpu_units_at = 3;
    int64 max_cpu_units                        = 4;
}

service ProductUsageService {
    // GetCurrentProductUsage returns the current product usage metrics values.
    //
    // The usage metrics are composed today of the secured units metrics. They
    // are collected from all connected clusters every 5 minutes, so the
    // returned result includes data for the connected clusters accurate to
    // about these 5 minutes, and potentially some outdated data for the
    // disconnected clusters.
    rpc GetCurrentProductUsage(v1.Empty) returns (CurrentProductUsageResponse) {
        option (google.api.http) = {
            get: "/v1/product/usage/current"
        };
    }

    // GetMaxSecuredUnitsUsage returns the maximum, i.e. peak, secured units
    // usage observed during a given time range, together with the time when
    // this maximum was aggregated and stored.
    //
    // The usage metrics are continously collected from all the connected
    // clusters. The maximum values are kept for some period of time in memory,
    // and then, periodically, are averaged with the previously collected
    // maximum values and stored to the database. Storing average with the
    // previous record allows for smoothing short peaks and drops.
    // The last data from disconnected clusters are taken into account.
    rpc GetMaxSecuredUnitsUsage(TimeRange) returns (MaxSecuredUnitsUsageResponse) {
        option (google.api.http) = {
            get: "/v1/product/usage/max_secured_units"
        };
    }
}
