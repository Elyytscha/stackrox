syntax = "proto3";

option go_package = "v1";
option java_package = "io.stackrox.proto.api.v1";

import weak "google/api/annotations.proto";
import "api/v1/search_service.proto";
import "api/v1/empty.proto";
import "storage/image.proto";
import "storage/deployment.proto";

package v1;

message GetImageRequest {
    string id              = 1;
    bool   include_snoozed = 2;
}

message ListImagesResponse {
    repeated storage.ListImage images = 1;
}

message CountImagesResponse {
    int32 count = 1;
}

message ScanImageRequest {
    string image_name      = 1;
    bool   force           = 2;
    bool   include_snoozed = 3;
}

message ScanImageInternalRequest {
    storage.ContainerImage image = 1;
    reserved                       2;
    bool cached_only             = 3;
}

message ScanImageInternalResponse {
    storage.Image image = 1;
}

message DeleteImagesRequest {
    RawQuery query   = 1;
    bool     confirm = 2;
}

message DeleteImagesResponse {
    uint32 num_deleted = 1;
    bool   dry_run     = 2;
}

// ImageService APIs manages image metadata.
service ImageService {

    // GetImage returns the image given its ID.
    rpc GetImage (GetImageRequest) returns (storage.Image) {
        option (google.api.http) = {
            get: "/v1/images/{id}"
        };
    }

    // ListImages returns all the images.
    rpc CountImages (RawQuery) returns (CountImagesResponse) {
        option (google.api.http) = {
            get: "/v1/imagescount"
        };
    }

    // ListImages returns all the images.
    rpc ListImages (RawQuery) returns (ListImagesResponse) {
        option (google.api.http) = {
            get: "/v1/images"
        };
    }

    // ScanImage scans a single image and returns the result
    rpc ScanImage (ScanImageRequest) returns (storage.Image) {
        option (google.api.http) = {
            post: "/v1/images/scan"
            body: "*"
        };
    }

    // ScanImageInternal is used solely by the Sensor to send scan requests
    rpc ScanImageInternal (ScanImageInternalRequest) returns (ScanImageInternalResponse);

    // InvalidateScanAndRegistryCaches removes the image metadata cache.
    rpc InvalidateScanAndRegistryCaches (Empty) returns (Empty) {
        option (google.api.http) = {
            get: "/v1/images/cache/invalidate"
        };
    }

    // DeleteImage removes the images based on a query
    rpc DeleteImages (DeleteImagesRequest) returns (DeleteImagesResponse) {
        option (google.api.http) = {
            delete: "/v1/images"
        };
    }

}
